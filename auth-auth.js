(self["webpackChunkauth"] = self["webpackChunkauth"] || []).push([[818], {

    /***/ 9056:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                g: () => (/* binding */ Auth)
            });

            // UNUSED EXPORTS: AuthClass

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/node_modules/tslib/tslib.es6.js
            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise */

            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return extendStatics(d, b);
            };

            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var __assign = function () {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                }
                return __assign.apply(this, arguments);
            }

            function __rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }

            function __param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); }
            }

            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
            }

            function __awaiter(thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }

            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (_) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            }

            function __createBinding(o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            }

            function __exportStar(m, exports) {
                for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
            }

            function __values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }

            function __spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            };

            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }

            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
            }

            function __asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
            }

            function __asyncValues(o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }

            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
                return cooked;
            };

            function __importStar(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                result.default = mod;
                return result;
            }

            function __importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }

            function __classPrivateFieldGet(receiver, privateMap) {
                if (!privateMap.has(receiver)) {
                    throw new TypeError("attempted to get private field on non-instance");
                }
                return privateMap.get(receiver);
            }

            function __classPrivateFieldSet(receiver, privateMap, value) {
                if (!privateMap.has(receiver)) {
                    throw new TypeError("attempted to set private field on non-instance");
                }
                privateMap.set(receiver, value);
                return value;
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/types/Auth.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var CognitoHostedUIIdentityProvider;
            (function (CognitoHostedUIIdentityProvider) {
                CognitoHostedUIIdentityProvider["Cognito"] = "COGNITO";
                CognitoHostedUIIdentityProvider["Google"] = "Google";
                CognitoHostedUIIdentityProvider["Facebook"] = "Facebook";
                CognitoHostedUIIdentityProvider["Amazon"] = "LoginWithAmazon";
                CognitoHostedUIIdentityProvider["Apple"] = "SignInWithApple";
            })(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
            function isFederatedSignInOptions(obj) {
                var keys = ['provider'];
                return obj && !!keys.find(function (k) { return obj.hasOwnProperty(k); });
            }
            function isFederatedSignInOptionsCustom(obj) {
                var keys = ['customProvider'];
                return obj && !!keys.find(function (k) { return obj.hasOwnProperty(k); });
            }
            function hasCustomState(obj) {
                var keys = ['customState'];
                return obj && !!keys.find(function (k) { return obj.hasOwnProperty(k); });
            }
            function isCognitoHostedOpts(oauth) {
                return oauth.redirectSignIn !== undefined;
            }
            var AuthErrorTypes;
            (function (AuthErrorTypes) {
                AuthErrorTypes["NoConfig"] = "noConfig";
                AuthErrorTypes["MissingAuthConfig"] = "missingAuthConfig";
                AuthErrorTypes["EmptyUsername"] = "emptyUsername";
                AuthErrorTypes["InvalidUsername"] = "invalidUsername";
                AuthErrorTypes["EmptyPassword"] = "emptyPassword";
                AuthErrorTypes["EmptyCode"] = "emptyCode";
                AuthErrorTypes["SignUpError"] = "signUpError";
                AuthErrorTypes["NoMFA"] = "noMFA";
                AuthErrorTypes["InvalidMFA"] = "invalidMFA";
                AuthErrorTypes["EmptyChallengeResponse"] = "emptyChallengeResponse";
                AuthErrorTypes["NoUserSession"] = "noUserSession";
                AuthErrorTypes["Default"] = "default";
                AuthErrorTypes["DeviceConfig"] = "deviceConfig";
                AuthErrorTypes["NetworkError"] = "networkError";
                AuthErrorTypes["AutoSignInError"] = "autoSignInError";
            })(AuthErrorTypes || (AuthErrorTypes = {}));
            function isUsernamePasswordOpts(obj) {
                return !!obj.username;
            }
            var GRAPHQL_AUTH_MODE;
            (function (GRAPHQL_AUTH_MODE) {
                GRAPHQL_AUTH_MODE["API_KEY"] = "API_KEY";
                GRAPHQL_AUTH_MODE["AWS_IAM"] = "AWS_IAM";
                GRAPHQL_AUTH_MODE["OPENID_CONNECT"] = "OPENID_CONNECT";
                GRAPHQL_AUTH_MODE["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
                GRAPHQL_AUTH_MODE["AWS_LAMBDA"] = "AWS_LAMBDA";
            })(GRAPHQL_AUTH_MODE || (GRAPHQL_AUTH_MODE = {}));
            //# sourceMappingURL=Auth.js.map
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js + 1 modules
            var ConsoleLogger = __webpack_require__(9719);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Hub.js
            var Hub = __webpack_require__(490);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Credentials.js + 20 modules
            var Credentials = __webpack_require__(56);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/index.js + 1 modules
            var Platform = __webpack_require__(9270);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/parseAWSExports.js
            var parseAWSExports = __webpack_require__(9820);
            // EXTERNAL MODULE: ./node_modules/cookie/index.js
            var cookie = __webpack_require__(6489);
            ;// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/utils.js

            function hasDocumentCookie() {
                // Can we get/set cookies on document.cookie?
                return typeof document === 'object' && typeof document.cookie === 'string';
            }
            function cleanCookies() {
                document.cookie.split(';').forEach(function (c) {
                    document.cookie = c
                        .replace(/^ +/, '')
                        .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');
                });
            }
            function parseCookies(cookies, options) {
                if (typeof cookies === 'string') {
                    return cookie/* parse */.Q(cookies, options);
                }
                else if (typeof cookies === 'object' && cookies !== null) {
                    return cookies;
                }
                else {
                    return {};
                }
            }
            function isParsingCookie(value, doNotParse) {
                if (typeof doNotParse === 'undefined') {
                    // We guess if the cookie start with { or [, it has been serialized
                    doNotParse =
                        !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '"');
                }
                return !doNotParse;
            }
            function readCookie(value, options) {
                if (options === void 0) { options = {}; }
                var cleanValue = cleanupCookieValue(value);
                if (isParsingCookie(cleanValue, options.doNotParse)) {
                    try {
                        return JSON.parse(cleanValue);
                    }
                    catch (e) {
                        // At least we tried
                    }
                }
                // Ignore clean value if we failed the deserialization
                // It is not relevant anymore to trim those values
                return value;
            }
            function cleanupCookieValue(value) {
                // express prepend j: before serializing a cookie
                if (value && value[0] === 'j' && value[1] === ':') {
                    return value.substr(2);
                }
                return value;
            }

            ;// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/Cookies.js
            var Cookies_assign = (undefined && undefined.__assign) || function () {
                Cookies_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return Cookies_assign.apply(this, arguments);
            };


            var Cookies = /** @class */ (function () {
                function Cookies(cookies, options) {
                    var _this = this;
                    this.changeListeners = [];
                    this.HAS_DOCUMENT_COOKIE = false;
                    this.cookies = parseCookies(cookies, options);
                    new Promise(function () {
                        _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
                    }).catch(function () { });
                }
                Cookies.prototype._updateBrowserValues = function (parseOptions) {
                    if (!this.HAS_DOCUMENT_COOKIE) {
                        return;
                    }
                    this.cookies = cookie/* parse */.Q(document.cookie, parseOptions);
                };
                Cookies.prototype._emitChange = function (params) {
                    for (var i = 0; i < this.changeListeners.length; ++i) {
                        this.changeListeners[i](params);
                    }
                };
                Cookies.prototype.get = function (name, options, parseOptions) {
                    if (options === void 0) { options = {}; }
                    this._updateBrowserValues(parseOptions);
                    return readCookie(this.cookies[name], options);
                };
                Cookies.prototype.getAll = function (options, parseOptions) {
                    if (options === void 0) { options = {}; }
                    this._updateBrowserValues(parseOptions);
                    var result = {};
                    for (var name_1 in this.cookies) {
                        result[name_1] = readCookie(this.cookies[name_1], options);
                    }
                    return result;
                };
                Cookies.prototype.set = function (name, value, options) {
                    var _a;
                    if (typeof value === 'object') {
                        value = JSON.stringify(value);
                    }
                    this.cookies = Cookies_assign(Cookies_assign({}, this.cookies), (_a = {}, _a[name] = value, _a));
                    if (this.HAS_DOCUMENT_COOKIE) {
                        document.cookie = cookie/* serialize */.q(name, value, options);
                    }
                    this._emitChange({ name: name, value: value, options: options });
                };
                Cookies.prototype.remove = function (name, options) {
                    var finalOptions = (options = Cookies_assign(Cookies_assign({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));
                    this.cookies = Cookies_assign({}, this.cookies);
                    delete this.cookies[name];
                    if (this.HAS_DOCUMENT_COOKIE) {
                        document.cookie = cookie/* serialize */.q(name, '', finalOptions);
                    }
                    this._emitChange({ name: name, value: undefined, options: options });
                };
                Cookies.prototype.addChangeListener = function (callback) {
                    this.changeListeners.push(callback);
                };
                Cookies.prototype.removeChangeListener = function (callback) {
                    var idx = this.changeListeners.indexOf(callback);
                    if (idx >= 0) {
                        this.changeListeners.splice(idx, 1);
                    }
                };
                return Cookies;
            }());
    /* harmony default export */ const es6_Cookies = (Cookies);

            ;// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/index.js

    /* harmony default export */ const es6 = (es6_Cookies);

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/JS.js
            var JS = __webpack_require__(9222);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
            var UniversalStorage_assign = (undefined && undefined.__assign) || function () {
                UniversalStorage_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return UniversalStorage_assign.apply(this, arguments);
            };
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0


            var isBrowser = (0, JS/* browserOrNode */.lC)().isBrowser;
            var ONE_YEAR_IN_MS = 365 * 24 * 60 * 60 * 1000;
            var UniversalStorage = /** @class */ (function () {
                function UniversalStorage(context) {
                    if (context === void 0) { context = {}; }
                    this.cookies = new es6();
                    this.store = isBrowser ? window.localStorage : Object.create(null);
                    this.cookies = context.req
                        ? new es6(decodeURIComponent(context.req.headers.cookie))
                        : new es6();
                    Object.assign(this.store, this.cookies.getAll());
                }
                Object.defineProperty(UniversalStorage.prototype, "length", {
                    get: function () {
                        return Object.entries(this.store).length;
                    },
                    enumerable: false,
                    configurable: true
                });
                UniversalStorage.prototype.clear = function () {
                    var _this = this;
                    Array.from(new Array(this.length))
                        .map(function (_, i) { return _this.key(i); })
                        .forEach(function (key) { return _this.removeItem(key); });
                };
                UniversalStorage.prototype.getItem = function (key) {
                    return this.getLocalItem(key);
                };
                UniversalStorage.prototype.getLocalItem = function (key) {
                    return Object.prototype.hasOwnProperty.call(this.store, key)
                        ? this.store[key]
                        : null;
                };
                UniversalStorage.prototype.getUniversalItem = function (key) {
                    return this.cookies.get(key);
                };
                UniversalStorage.prototype.key = function (index) {
                    return Object.keys(this.store)[index];
                };
                UniversalStorage.prototype.removeItem = function (key) {
                    this.removeLocalItem(key);
                    this.removeUniversalItem(key);
                };
                UniversalStorage.prototype.removeLocalItem = function (key) {
                    delete this.store[key];
                };
                UniversalStorage.prototype.removeUniversalItem = function (key) {
                    this.cookies.remove(key, {
                        path: '/',
                    });
                };
                UniversalStorage.prototype.setItem = function (key, value) {
                    this.setLocalItem(key, value);
                    // keys take the shape:
                    //  1. `${ProviderPrefix}.${userPoolClientId}.${username}.${tokenType}
                    //  2. `${ProviderPrefix}.${userPoolClientId}.LastAuthUser
                    var tokenType = key.split('.').pop();
                    var sessionTokenTypes = [
                        'LastAuthUser',
                        'accessToken',
                        // refreshToken originates on the client, but SSR pages won't fail when this expires
                        // Note: the new `accessToken` will also be refreshed on the client (since Amplify doesn't set server-side cookies)
                        'refreshToken',
                        // Required for CognitoUserSession
                        'idToken',
                        // userData is used when `Auth.currentAuthenticatedUser({ bypassCache: false })`.
                        // Can be persisted to speed up calls to `Auth.currentAuthenticatedUser()`
                        // 'userData',
                        // Ignoring clockDrift on the server for now, but needs testing
                        // 'clockDrift',
                    ];
                    if (sessionTokenTypes.includes(tokenType !== null && tokenType !== void 0 ? tokenType : '')) {
                        this.setUniversalItem(key, value, {
                            expires: new Date(Date.now() + ONE_YEAR_IN_MS),
                        });
                    }
                };
                UniversalStorage.prototype.setLocalItem = function (key, value) {
                    this.store[key] = value;
                };
                UniversalStorage.prototype.setUniversalItem = function (key, value, options) {
                    if (options === void 0) { options = {}; }
                    this.cookies.set(key, value, UniversalStorage_assign(UniversalStorage_assign({}, options), {
                        path: '/',
                        // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie
                        sameSite: true,
                        // Allow unsecure requests to http://localhost:3000/ when in development.
                        secure: isBrowser && window.location.hostname === 'localhost' ? false : true
                    }));
                };
                return UniversalStorage;
            }());


            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
            var StorageHelper = __webpack_require__(6648);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Util/StringUtils.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            function urlSafeEncode(str) {
                return str
                    .split('')
                    .map(function (char) {
                        return char
                            .charCodeAt(0)
                            .toString(16)
                            .padStart(2, '0');
                    })
                    .join('');
            }
            function urlSafeDecode(hex) {
                return hex
                    .match(/.{2}/g)
                    .map(function (char) { return String.fromCharCode(parseInt(char, 16)); })
                    .join('');
            }

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Amplify.js
            var Amplify = __webpack_require__(5387);
            // EXTERNAL MODULE: ./node_modules/amazon-cognito-identity-js/es/index.js + 17 modules
            var es = __webpack_require__(3477);
            // EXTERNAL MODULE: ./node_modules/amazon-cognito-identity-js/es/UserAgent.js + 1 modules
            var UserAgent = __webpack_require__(4716);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/internals/index.js

            // EXTERNAL MODULE: ./node_modules/url/url.js
            var url = __webpack_require__(8575);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/OAuth/urlOpener.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var SELF = '_self';
            var launchUri = function (url) {
                var windowProxy = window.open(url, SELF);
                if (windowProxy) {
                    return Promise.resolve(windowProxy);
                }
                else {
                    return Promise.reject();
                }
            };
            //# sourceMappingURL=urlOpener.js.map
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/OAuth/oauthStorage.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var setState = function (state) {
                window.sessionStorage.setItem('oauth_state', state);
            };
            var getState = function () {
                var oauth_state = window.sessionStorage.getItem('oauth_state');
                window.sessionStorage.removeItem('oauth_state');
                return oauth_state;
            };
            var setPKCE = function (private_key) {
                window.sessionStorage.setItem('ouath_pkce_key', private_key);
            };
            var getPKCE = function () {
                var ouath_pkce_key = window.sessionStorage.getItem('ouath_pkce_key');
                window.sessionStorage.removeItem('ouath_pkce_key');
                return ouath_pkce_key;
            };
            var clearAll = function () {
                window.sessionStorage.removeItem('ouath_pkce_key');
                window.sessionStorage.removeItem('oauth_state');
            };
            //# sourceMappingURL=oauthStorage.js.map
            // EXTERNAL MODULE: ./node_modules/buffer/index.js
            var buffer = __webpack_require__(8764);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/types.js
            var types = __webpack_require__(9841);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/constants.js
            var constants = __webpack_require__(8229);
            // EXTERNAL MODULE: ./node_modules/@aws-crypto/sha256-js/build/index.js
            var build = __webpack_require__(1938);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Used for OAuth parsing of Cognito Hosted UI






            var AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function'
                ? Symbol.for('amplify_default')
                : '@@amplify_default');
            var dispatchAuthEvent = function (event, data, message) {
                Hub/* Hub */.X.dispatch('auth', { event: event, data: data, message: message }, 'Auth', AMPLIFY_SYMBOL);
            };
            var logger = new ConsoleLogger/* ConsoleLogger */.k('OAuth');
            var OAuth = /** @class */ (function () {
                function OAuth(_a) {
                    var config = _a.config, cognitoClientId = _a.cognitoClientId, _b = _a.scopes, scopes = _b === void 0 ? [] : _b;
                    this._urlOpener = config.urlOpener || launchUri;
                    this._config = config;
                    this._cognitoClientId = cognitoClientId;
                    if (!this.isValidScopes(scopes))
                        throw Error('scopes must be a String Array');
                    this._scopes = scopes;
                }
                OAuth.prototype.isValidScopes = function (scopes) {
                    return (Array.isArray(scopes) && scopes.every(function (scope) { return typeof scope === 'string'; }));
                };
                OAuth.prototype.oauthSignIn = function (responseType, domain, redirectSignIn, clientId, provider, customState) {
                    if (responseType === void 0) { responseType = 'code'; }
                    if (provider === void 0) { provider = CognitoHostedUIIdentityProvider.Cognito; }
                    var generatedState = this._generateState(32);
                    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito
                    single-encodes/decodes url on first sign in and double-encodes/decodes url
                    when user already signed in. Using encodeURIComponent, Base32, Base64 add
                    characters % or = which on further encoding becomes unsafe. '=' create issue
                    for parsing query params.
                    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */
                    var state = customState
                        ? generatedState + "-" + urlSafeEncode(customState)
                        : generatedState;
                    setState(state);
                    var pkce_key = this._generateRandom(128);
                    setPKCE(pkce_key);
                    var code_challenge = this._generateChallenge(pkce_key);
                    var code_challenge_method = 'S256';
                    var scopesString = this._scopes.join(' ');
                    var queryString = Object.entries(__assign(__assign({ redirect_uri: redirectSignIn, response_type: responseType, client_id: clientId, identity_provider: provider, scope: scopesString, state: state }, (responseType === 'code' ? { code_challenge: code_challenge } : {})), (responseType === 'code' ? { code_challenge_method: code_challenge_method } : {})))
                        .map(function (_a) {
                            var _b = __read(_a, 2), k = _b[0], v = _b[1];
                            return encodeURIComponent(k) + "=" + encodeURIComponent(v);
                        })
                        .join('&');
                    var URL = "https://" + domain + "/oauth2/authorize?" + queryString;
                    logger.debug("Redirecting to " + URL);
                    this._urlOpener(URL, redirectSignIn);
                };
                OAuth.prototype._handleCodeFlow = function (currentUrl) {
                    return __awaiter(this, void 0, void 0, function () {
                        var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, customUserAgentDetails, _a, access_token, refresh_token, id_token, error;
                        var _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    code = ((0, url/* parse */.Qc)(currentUrl).query || '')
                                        .split('&')
                                        .map(function (pairings) { return pairings.split('='); })
                                        .reduce(function (accum, _a) {
                                            var _b;
                                            var _c = __read(_a, 2), k = _c[0], v = _c[1];
                                            return (__assign(__assign({}, accum), (_b = {}, _b[k] = v, _b)));
                                        }, { code: undefined }).code;
                                    currentUrlPathname = (0, url/* parse */.Qc)(currentUrl).pathname || '/';
                                    redirectSignInPathname = (0, url/* parse */.Qc)(this._config.redirectSignIn).pathname || '/';
                                    if (!code || currentUrlPathname !== redirectSignInPathname) {
                                        return [2 /*return*/];
                                    }
                                    oAuthTokenEndpoint = 'https://' + this._config.domain + '/oauth2/token';
                                    dispatchAuthEvent('codeFlow', {}, "Retrieving tokens from " + oAuthTokenEndpoint);
                                    client_id = isCognitoHostedOpts(this._config)
                                        ? this._cognitoClientId
                                        : this._config.clientID;
                                    redirect_uri = isCognitoHostedOpts(this._config)
                                        ? this._config.redirectSignIn
                                        : this._config.redirectUri;
                                    code_verifier = getPKCE();
                                    oAuthTokenBody = __assign({
                                        grant_type: 'authorization_code', code: code,
                                        client_id: client_id,
                                        redirect_uri: redirect_uri
                                    }, (code_verifier ? { code_verifier: code_verifier } : {}));
                                    logger.debug("Calling token endpoint: " + oAuthTokenEndpoint + " with", oAuthTokenBody);
                                    body = Object.entries(oAuthTokenBody)
                                        .map(function (_a) {
                                            var _b = __read(_a, 2), k = _b[0], v = _b[1];
                                            return encodeURIComponent(k) + "=" + encodeURIComponent(v);
                                        })
                                        .join('&');
                                    customUserAgentDetails = {
                                        category: types/* Category */.WD.Auth,
                                        action: types/* AuthAction */.g4.FederatedSignIn,
                                    };
                                    return [4 /*yield*/, fetch(oAuthTokenEndpoint, {
                                        method: 'POST',
                                        headers: (_b = {
                                            'Content-Type': 'application/x-www-form-urlencoded'
                                        },
                                            _b[constants/* USER_AGENT_HEADER */.M] = (0, Platform/* getAmplifyUserAgent */.Zm)(customUserAgentDetails),
                                            _b),
                                        body: body,
                                    })];
                                case 1: return [4 /*yield*/, (_c.sent()).json()];
                                case 2:
                                    _a = _c.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;
                                    if (error) {
                                        throw new Error(error);
                                    }
                                    return [2 /*return*/, {
                                        accessToken: access_token,
                                        refreshToken: refresh_token,
                                        idToken: id_token,
                                    }];
                            }
                        });
                    });
                };
                OAuth.prototype._handleImplicitFlow = function (currentUrl) {
                    return __awaiter(this, void 0, void 0, function () {
                        var _a, id_token, access_token;
                        return __generator(this, function (_b) {
                            _a = ((0, url/* parse */.Qc)(currentUrl).hash || '#')
                                .substr(1) // Remove # from returned code
                                .split('&')
                                .map(function (pairings) { return pairings.split('='); })
                                .reduce(function (accum, _a) {
                                    var _b;
                                    var _c = __read(_a, 2), k = _c[0], v = _c[1];
                                    return (__assign(__assign({}, accum), (_b = {}, _b[k] = v, _b)));
                                }, {
                                    id_token: undefined,
                                    access_token: undefined,
                                }), id_token = _a.id_token, access_token = _a.access_token;
                            dispatchAuthEvent('implicitFlow', {}, "Got tokens from " + currentUrl);
                            logger.debug("Retrieving implicit tokens from " + currentUrl + " with");
                            return [2 /*return*/, {
                                accessToken: access_token,
                                idToken: id_token,
                                refreshToken: null,
                            }];
                        });
                    });
                };
                OAuth.prototype.handleAuthResponse = function (currentUrl) {
                    return __awaiter(this, void 0, void 0, function () {
                        var urlParams, error, error_description, state, _a, _b, e_1;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _c.trys.push([0, 5, , 6]);
                                    urlParams = currentUrl
                                        ? __assign(__assign({}, ((0, url/* parse */.Qc)(currentUrl).hash || '#')
                                            .substr(1)
                                            .split('&')
                                            .map(function (entry) { return entry.split('='); })
                                            .reduce(function (acc, _a) {
                                                var _b = __read(_a, 2), k = _b[0], v = _b[1];
                                                return ((acc[k] = v), acc);
                                            }, {})), ((0, url/* parse */.Qc)(currentUrl).query || '')
                                                .split('&')
                                                .map(function (entry) { return entry.split('='); })
                                                .reduce(function (acc, _a) {
                                                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                                                    return ((acc[k] = v), acc);
                                                }, {}))
                                        : {};
                                    error = urlParams.error, error_description = urlParams.error_description;
                                    if (error) {
                                        throw new Error(error_description);
                                    }
                                    state = this._validateState(urlParams);
                                    logger.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
                                    if (!(this._config.responseType === 'code')) return [3 /*break*/, 2];
                                    _a = [{}];
                                    return [4 /*yield*/, this._handleCodeFlow(currentUrl)];
                                case 1: return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _a.concat([(_c.sent())])), { state: state }])];
                                case 2:
                                    _b = [{}];
                                    return [4 /*yield*/, this._handleImplicitFlow(currentUrl)];
                                case 3: return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.sent())])), { state: state }])];
                                case 4: return [3 /*break*/, 6];
                                case 5:
                                    e_1 = _c.sent();
                                    logger.debug("Error handling auth response.", e_1);
                                    throw e_1;
                                case 6: return [2 /*return*/];
                            }
                        });
                    });
                };
                OAuth.prototype._validateState = function (urlParams) {
                    if (!urlParams) {
                        return;
                    }
                    var savedState = getState();
                    var returnedState = urlParams.state;
                    // This is because savedState only exists if the flow was initiated by Amplify
                    if (savedState && savedState !== returnedState) {
                        throw new Error('Invalid state in OAuth flow');
                    }
                    return returnedState;
                };
                OAuth.prototype.signOut = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var oAuthLogoutEndpoint, client_id, signout_uri;
                        return __generator(this, function (_a) {
                            oAuthLogoutEndpoint = 'https://' + this._config.domain + '/logout?';
                            client_id = isCognitoHostedOpts(this._config)
                                ? this._cognitoClientId
                                : this._config.oauth.clientID;
                            signout_uri = isCognitoHostedOpts(this._config)
                                ? this._config.redirectSignOut
                                : this._config.returnTo;
                            oAuthLogoutEndpoint += Object.entries({
                                client_id: client_id,
                                logout_uri: encodeURIComponent(signout_uri),
                            })
                                .map(function (_a) {
                                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                                    return k + "=" + v;
                                })
                                .join('&');
                            dispatchAuthEvent('oAuthSignOut', { oAuth: 'signOut' }, "Signing out from " + oAuthLogoutEndpoint);
                            logger.debug("Signing out from " + oAuthLogoutEndpoint);
                            return [2 /*return*/, this._urlOpener(oAuthLogoutEndpoint, signout_uri)];
                        });
                    });
                };
                OAuth.prototype._generateState = function (length) {
                    var result = '';
                    var i = length;
                    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                    for (; i > 0; --i)
                        result += chars[Math.round(Math.random() * (chars.length - 1))];
                    return result;
                };
                OAuth.prototype._generateChallenge = function (code) {
                    var awsCryptoHash = new build.Sha256();
                    awsCryptoHash.update(code);
                    var resultFromAWSCrypto = awsCryptoHash.digestSync();
                    var b64 = buffer/* Buffer */.lW.from(resultFromAWSCrypto).toString('base64');
                    var base64URLFromAWSCrypto = this._base64URL(b64);
                    return base64URLFromAWSCrypto;
                };
                OAuth.prototype._base64URL = function (string) {
                    return string.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
                };
                OAuth.prototype._generateRandom = function (size) {
                    var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
                    var buffer = new Uint8Array(size);
                    if (typeof window !== 'undefined' && !!window.crypto) {
                        window.crypto.getRandomValues(buffer);
                    }
                    else {
                        for (var i = 0; i < size; i += 1) {
                            buffer[i] = (Math.random() * CHARSET.length) | 0;
                        }
                    }
                    return this._bufferToString(buffer);
                };
                OAuth.prototype._bufferToString = function (buffer) {
                    var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                    var state = [];
                    for (var i = 0; i < buffer.byteLength; i += 1) {
                        var index = buffer[i] % CHARSET.length;
                        state.push(CHARSET[index]);
                    }
                    return state.join('');
                };
                return OAuth;
            }());
    /* harmony default export */ const OAuth_OAuth = (OAuth);
            //# sourceMappingURL=OAuth.js.map
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/urlListener.js
    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0

    /* harmony default export */ const urlListener = (function (callback) {
                if ((0, JS/* browserOrNode */.lC)().isBrowser && window.location) {
                    var url = window.location.href;
                    callback({ url: url });
                }
                else if ((0, JS/* browserOrNode */.lC)().isNode) {
                    // continue building on ssr
                    (function () { }); // noop
                }
                else {
                    throw new Error('Not supported');
                }
            });
            //# sourceMappingURL=urlListener.js.map
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/common/AuthErrorStrings.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var AuthErrorStrings;
            (function (AuthErrorStrings) {
                AuthErrorStrings["DEFAULT_MSG"] = "Authentication Error";
                AuthErrorStrings["EMPTY_EMAIL"] = "Email cannot be empty";
                AuthErrorStrings["EMPTY_PHONE"] = "Phone number cannot be empty";
                AuthErrorStrings["EMPTY_USERNAME"] = "Username cannot be empty";
                AuthErrorStrings["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
                AuthErrorStrings["EMPTY_PASSWORD"] = "Password cannot be empty";
                AuthErrorStrings["EMPTY_CODE"] = "Confirmation code cannot be empty";
                AuthErrorStrings["SIGN_UP_ERROR"] = "Error creating account";
                AuthErrorStrings["NO_MFA"] = "No valid MFA method provided";
                AuthErrorStrings["INVALID_MFA"] = "Invalid MFA type";
                AuthErrorStrings["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
                AuthErrorStrings["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
                AuthErrorStrings["NETWORK_ERROR"] = "Network Error";
                AuthErrorStrings["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
                AuthErrorStrings["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
            })(AuthErrorStrings || (AuthErrorStrings = {}));
            //# sourceMappingURL=AuthErrorStrings.js.map
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/Errors.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0



            var Errors_logger = new ConsoleLogger/* ConsoleLogger */.k('AuthError');
            var AuthError = /** @class */ (function (_super) {
                __extends(AuthError, _super);
                function AuthError(type) {
                    var _this = this;
                    var _a = authErrorMessages[type], message = _a.message, log = _a.log;
                    _this = _super.call(this, message) || this;
                    // Hack for making the custom error class work when transpiled to es5
                    // TODO: Delete the following 2 lines after we change the build target to >= es2015
                    _this.constructor = AuthError;
                    Object.setPrototypeOf(_this, AuthError.prototype);
                    _this.name = 'AuthError';
                    _this.log = log || message;
                    Errors_logger.error(_this.log);
                    return _this;
                }
                return AuthError;
            }(Error));

            var NoUserPoolError = /** @class */ (function (_super) {
                __extends(NoUserPoolError, _super);
                function NoUserPoolError(type) {
                    var _this = _super.call(this, type) || this;
                    // Hack for making the custom error class work when transpiled to es5
                    // TODO: Delete the following 2 lines after we change the build target to >= es2015
                    _this.constructor = NoUserPoolError;
                    Object.setPrototypeOf(_this, NoUserPoolError.prototype);
                    _this.name = 'NoUserPoolError';
                    return _this;
                }
                return NoUserPoolError;
            }(AuthError));

            var authErrorMessages = {
                noConfig: {
                    message: AuthErrorStrings.DEFAULT_MSG,
                    log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n\t\t\t\tRefer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        ",
                },
                missingAuthConfig: {
                    message: AuthErrorStrings.DEFAULT_MSG,
                    log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        ",
                },
                emptyUsername: {
                    message: AuthErrorStrings.EMPTY_USERNAME,
                },
                // TODO: should include a list of valid sign-in types
                invalidUsername: {
                    message: AuthErrorStrings.INVALID_USERNAME,
                },
                emptyPassword: {
                    message: AuthErrorStrings.EMPTY_PASSWORD,
                },
                emptyCode: {
                    message: AuthErrorStrings.EMPTY_CODE,
                },
                signUpError: {
                    message: AuthErrorStrings.SIGN_UP_ERROR,
                    log: 'The first parameter should either be non-null string or object',
                },
                noMFA: {
                    message: AuthErrorStrings.NO_MFA,
                },
                invalidMFA: {
                    message: AuthErrorStrings.INVALID_MFA,
                },
                emptyChallengeResponse: {
                    message: AuthErrorStrings.EMPTY_CHALLENGE,
                },
                noUserSession: {
                    message: AuthErrorStrings.NO_USER_SESSION,
                },
                deviceConfig: {
                    message: AuthErrorStrings.DEVICE_CONFIG,
                },
                networkError: {
                    message: AuthErrorStrings.NETWORK_ERROR,
                },
                autoSignInError: {
                    message: AuthErrorStrings.AUTOSIGNIN_ERROR,
                },
                default: {
                    message: AuthErrorStrings.DEFAULT_MSG,
                },
            };
            //# sourceMappingURL=Errors.js.map
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/auth/lib-esm/Auth.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0










            var Auth_logger = new ConsoleLogger/* ConsoleLogger */.k('AuthClass');
            var USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';
            // 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/
            var OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;
            var Auth_AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function'
                ? Symbol.for('amplify_default')
                : '@@amplify_default');
            var Auth_dispatchAuthEvent = function (event, data, message) {
                Hub/* Hub */.X.dispatch('auth', { event: event, data: data, message: message }, 'Auth', Auth_AMPLIFY_SYMBOL);
            };
            // Cognito Documentation for max device
            // tslint:disable-next-line:max-line-length
            // https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax
            var MAX_DEVICES = 60;
            var MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;
            /**
             * Provide authentication steps
             */
            var AuthClass = /** @class */ (function () {
                /**
                 * Initialize Auth with AWS configurations
                 * @param {Object} config - Configuration of the Auth
                 */
                function AuthClass(config) {
                    var _this = this;
                    this.userPool = null;
                    this.user = null;
                    this.oAuthFlowInProgress = false;
                    this.autoSignInInitiated = false;
                    this.inflightSessionPromise = null;
                    this.inflightSessionPromiseCounter = 0;
                    this.Credentials = Credentials/* Credentials */.c;
                    this.wrapRefreshSessionCallback = function (callback) {
                        var wrapped = function (error, data) {
                            if (data) {
                                Auth_dispatchAuthEvent('tokenRefresh', undefined, "New token retrieved");
                            }
                            else {
                                Auth_dispatchAuthEvent('tokenRefresh_failure', error, "Failed to retrieve new token");
                            }
                            return callback(error, data);
                        };
                        return wrapped;
                    }; // prettier-ignore
                    this.configure(config);
                    this.currentCredentials = this.currentCredentials.bind(this);
                    this.currentUserCredentials = this.currentUserCredentials.bind(this);
                    Hub/* Hub */.X.listen('auth', function (_a) {
                        var payload = _a.payload;
                        var event = payload.event;
                        switch (event) {
                            case 'verify':
                            case 'signIn':
                                _this._storage.setItem('amplify-signin-with-hostedUI', 'false');
                                break;
                            case 'signOut':
                                _this._storage.removeItem('amplify-signin-with-hostedUI');
                                break;
                            case 'cognitoHostedUI':
                                _this._storage.setItem('amplify-signin-with-hostedUI', 'true');
                                break;
                        }
                    });
                    (0, UserAgent/* addAuthCategoryToCognitoUserAgent */.Bs)();
                    (0, UserAgent/* addFrameworkToCognitoUserAgent */.m0)(Platform/* Platform */.t4.framework);
                    Platform/* Platform */.t4.observeFrameworkChanges(function () {
                        (0, UserAgent/* addFrameworkToCognitoUserAgent */.m0)(Platform/* Platform */.t4.framework);
                    });
                }
                AuthClass.prototype.getModuleName = function () {
                    return 'Auth';
                };
                AuthClass.prototype.configure = function (config) {
                    var _this = this;
                    if (!config)
                        return this._config || {};
                    Auth_logger.debug('configure Auth');
                    var conf = Object.assign({}, this._config, (0, parseAWSExports/* parseAWSExports */.h)(config).Auth, config);
                    this._config = conf;
                    var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint, storage = _a.storage;
                    if (!storage) {
                        // backward compatability
                        if (cookieStorage)
                            this._storage = new es/* CookieStorage */.eR(cookieStorage);
                        else {
                            this._storage = config.ssr
                                ? new UniversalStorage()
                                : new StorageHelper/* StorageHelper */.c().getStorage();
                        }
                    }
                    else {
                        if (!this._isValidAuthStorage(storage)) {
                            Auth_logger.error('The storage in the Auth config is not valid!');
                            throw new Error('Empty storage object');
                        }
                        this._storage = storage;
                    }
                    this._storageSync = Promise.resolve();
                    if (typeof this._storage['sync'] === 'function') {
                        this._storageSync = this._storage['sync']();
                    }
                    if (userPoolId) {
                        var userPoolData = {
                            UserPoolId: userPoolId,
                            ClientId: userPoolWebClientId,
                            endpoint: endpoint,
                        };
                        userPoolData.Storage = this._storage;
                        this.userPool = new es/* CognitoUserPool */.AM(userPoolData, this.wrapRefreshSessionCallback);
                    }
                    this.Credentials.configure({
                        mandatorySignIn: mandatorySignIn,
                        region: region,
                        userPoolId: userPoolId,
                        identityPoolId: identityPoolId,
                        refreshHandlers: refreshHandlers,
                        storage: this._storage,
                        identityPoolRegion: identityPoolRegion,
                    });
                    // initialize cognitoauth client if hosted ui options provided
                    // to keep backward compatibility:
                    var cognitoHostedUIConfig = oauth
                        ? isCognitoHostedOpts(this._config.oauth)
                            ? oauth
                            : oauth.awsCognito
                        : undefined;
                    if (cognitoHostedUIConfig) {
                        var cognitoAuthParams = Object.assign({
                            cognitoClientId: userPoolWebClientId,
                            UserPoolId: userPoolId,
                            domain: cognitoHostedUIConfig['domain'],
                            scopes: cognitoHostedUIConfig['scope'],
                            redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],
                            redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],
                            responseType: cognitoHostedUIConfig['responseType'],
                            Storage: this._storage,
                            urlOpener: cognitoHostedUIConfig['urlOpener'],
                            clientMetadata: clientMetadata,
                        }, cognitoHostedUIConfig['options']);
                        this._oAuthHandler = new OAuth_OAuth({
                            scopes: cognitoAuthParams.scopes,
                            config: cognitoAuthParams,
                            cognitoClientId: cognitoAuthParams.cognitoClientId,
                        });
                        // **NOTE** - Remove this in a future major release as it is a breaking change
                        // Prevents _handleAuthResponse from being called multiple times in Expo
                        // See https://github.com/aws-amplify/amplify-js/issues/4388
                        var usedResponseUrls_1 = {};
                        urlListener(function (_a) {
                            var url = _a.url;
                            if (usedResponseUrls_1[url]) {
                                return;
                            }
                            usedResponseUrls_1[url] = true;
                            _this._handleAuthResponse(url);
                        });
                    }
                    Auth_dispatchAuthEvent('configured', null, "The Auth category has been configured successfully");
                    if (!this.autoSignInInitiated &&
                        typeof this._storage['getItem'] === 'function') {
                        var pollingInitiated = this.isTrueStorageValue('amplify-polling-started');
                        if (pollingInitiated) {
                            Auth_dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);
                            this._storage.removeItem('amplify-auto-sign-in');
                        }
                        this._storage.removeItem('amplify-polling-started');
                    }
                    return this._config;
                };
                /**
                 * Sign up with username, password and other attributes like phone, email
                 * @param {String | object} params - The user attributes used for signin
                 * @param {String[]} restOfAttrs - for the backward compatability
                 * @return - A promise resolves callback data if success
                 */
                AuthClass.prototype.signUp = function (params) {
                    var _this = this;
                    var restOfAttrs = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        restOfAttrs[_i - 1] = arguments[_i];
                    }
                    var _a, _b, _c;
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    var username = null;
                    var password = null;
                    var attributes = [];
                    var validationData = null;
                    var clientMetadata;
                    var autoSignIn = { enabled: false };
                    var autoSignInValidationData = {};
                    var autoSignInClientMetaData = {};
                    if (params && typeof params === 'string') {
                        username = params;
                        password = restOfAttrs ? restOfAttrs[0] : null;
                        var email = restOfAttrs ? restOfAttrs[1] : null;
                        var phone_number = restOfAttrs ? restOfAttrs[2] : null;
                        if (email)
                            attributes.push(new es/* CognitoUserAttribute */.KC({ Name: 'email', Value: email }));
                        if (phone_number)
                            attributes.push(new es/* CognitoUserAttribute */.KC({
                                Name: 'phone_number',
                                Value: phone_number,
                            }));
                    }
                    else if (params && typeof params === 'object') {
                        username = params['username'];
                        password = params['password'];
                        if (params && params.clientMetadata) {
                            clientMetadata = params.clientMetadata;
                        }
                        else if (this._config.clientMetadata) {
                            clientMetadata = this._config.clientMetadata;
                        }
                        var attrs_1 = params['attributes'];
                        if (attrs_1) {
                            Object.keys(attrs_1).map(function (key) {
                                attributes.push(new es/* CognitoUserAttribute */.KC({ Name: key, Value: attrs_1[key] }));
                            });
                        }
                        var validationDataObject_1 = params['validationData'];
                        if (validationDataObject_1) {
                            validationData = [];
                            Object.keys(validationDataObject_1).map(function (key) {
                                validationData.push(new es/* CognitoUserAttribute */.KC({
                                    Name: key,
                                    Value: validationDataObject_1[key],
                                }));
                            });
                        }
                        autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : { enabled: false };
                        if (autoSignIn.enabled) {
                            this._storage.setItem('amplify-auto-sign-in', 'true');
                            autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};
                            autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};
                        }
                    }
                    else {
                        return this.rejectAuthError(AuthErrorTypes.SignUpError);
                    }
                    if (!username) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
                    }
                    if (!password) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
                    }
                    Auth_logger.debug('signUp attrs:', attributes);
                    Auth_logger.debug('signUp validation data:', validationData);
                    return new Promise(function (resolve, reject) {
                        _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {
                            if (err) {
                                Auth_dispatchAuthEvent('signUp_failure', err, username + " failed to signup");
                                reject(err);
                            }
                            else {
                                Auth_dispatchAuthEvent('signUp', data, username + " has signed up successfully");
                                if (autoSignIn.enabled) {
                                    _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);
                                }
                                resolve(data);
                            }
                        }, clientMetadata);
                    });
                };
                AuthClass.prototype.handleAutoSignIn = function (username, password, validationData, clientMetadata, data) {
                    this.autoSignInInitiated = true;
                    var authDetails = new es/* AuthenticationDetails */.sD({
                        Username: username,
                        Password: password,
                        ValidationData: validationData,
                        ClientMetadata: clientMetadata,
                    });
                    if (data.userConfirmed) {
                        this.signInAfterUserConfirmed(authDetails);
                    }
                    else if (this._config.signUpVerificationMethod === 'link') {
                        this.handleLinkAutoSignIn(authDetails);
                    }
                    else {
                        this.handleCodeAutoSignIn(authDetails);
                    }
                };
                AuthClass.prototype.handleCodeAutoSignIn = function (authDetails) {
                    var _this = this;
                    var listenEvent = function (_a) {
                        var payload = _a.payload;
                        if (payload.event === 'confirmSignUp') {
                            _this.signInAfterUserConfirmed(authDetails, listenEvent);
                        }
                    };
                    Hub/* Hub */.X.listen('auth', listenEvent);
                };
                AuthClass.prototype.handleLinkAutoSignIn = function (authDetails) {
                    var _this = this;
                    this._storage.setItem('amplify-polling-started', 'true');
                    var start = Date.now();
                    var autoSignInPollingIntervalId = setInterval(function () {
                        if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {
                            clearInterval(autoSignInPollingIntervalId);
                            Auth_dispatchAuthEvent('autoSignIn_failure', null, 'Please confirm your account and use your credentials to sign in.');
                            _this._storage.removeItem('amplify-auto-sign-in');
                        }
                        else {
                            _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);
                        }
                    }, 5000);
                };
                AuthClass.prototype.signInAfterUserConfirmed = function (authDetails, listenEvent, autoSignInPollingIntervalId) {
                    return __awaiter(this, void 0, void 0, function () {
                        var user, error_1;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    user = this.createCognitoUser(authDetails.getUsername());
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, user.authenticateUser(authDetails, this.authCallbacks(user, function (value) {
                                        Auth_dispatchAuthEvent('autoSignIn', value, authDetails.getUsername() + " has signed in successfully");
                                        if (listenEvent) {
                                            Hub/* Hub */.X.remove('auth', listenEvent);
                                        }
                                        if (autoSignInPollingIntervalId) {
                                            clearInterval(autoSignInPollingIntervalId);
                                            _this._storage.removeItem('amplify-polling-started');
                                        }
                                        _this._storage.removeItem('amplify-auto-sign-in');
                                    }, function (error) {
                                        Auth_logger.error(error);
                                        _this._storage.removeItem('amplify-auto-sign-in');
                                    }))];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    error_1 = _a.sent();
                                    Auth_logger.error(error_1);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Send the verification code to confirm sign up
                 * @param {String} username - The username to be confirmed
                 * @param {String} code - The verification code
                 * @param {ConfirmSignUpOptions} options - other options for confirm signup
                 * @return - A promise resolves callback data if success
                 */
                AuthClass.prototype.confirmSignUp = function (username, code, options) {
                    var _this = this;
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    if (!username) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
                    }
                    if (!code) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
                    }
                    var user = this.createCognitoUser(username);
                    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean'
                        ? options.forceAliasCreation
                        : true;
                    var clientMetadata;
                    if (options && options.clientMetadata) {
                        clientMetadata = options.clientMetadata;
                    }
                    else if (this._config.clientMetadata) {
                        clientMetadata = this._config.clientMetadata;
                    }
                    return new Promise(function (resolve, reject) {
                        user.confirmRegistration(code, forceAliasCreation, function (err, data) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                Auth_dispatchAuthEvent('confirmSignUp', data, username + " has been confirmed successfully");
                                var autoSignIn = _this.isTrueStorageValue('amplify-auto-sign-in');
                                if (autoSignIn && !_this.autoSignInInitiated) {
                                    Auth_dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);
                                    _this._storage.removeItem('amplify-auto-sign-in');
                                }
                                resolve(data);
                            }
                        }, clientMetadata);
                    });
                };
                AuthClass.prototype.isTrueStorageValue = function (value) {
                    var item = this._storage.getItem(value);
                    return item ? item === 'true' : false;
                };
                /**
                 * Resend the verification code
                 * @param {String} username - The username to be confirmed
                 * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers
                 * @return - A promise resolves code delivery details if successful
                 */
                AuthClass.prototype.resendSignUp = function (username, clientMetadata) {
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    if (!username) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
                    }
                    var user = this.createCognitoUser(username);
                    return new Promise(function (resolve, reject) {
                        user.resendConfirmationCode(function (err, data) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                resolve(data);
                            }
                        }, clientMetadata);
                    });
                };
                /**
                 * Sign in
                 * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options
                 * @param {String} pw - The password of the username
                 * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows
                 * @return - A promise resolves the CognitoUser
                 */
                AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    var username = null;
                    var password = null;
                    var validationData = {};
                    // for backward compatibility
                    if (typeof usernameOrSignInOpts === 'string') {
                        username = usernameOrSignInOpts;
                        password = pw;
                    }
                    else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {
                        if (typeof pw !== 'undefined') {
                            Auth_logger.warn('The password should be defined under the first parameter object!');
                        }
                        username = usernameOrSignInOpts.username;
                        password = usernameOrSignInOpts.password;
                        validationData = usernameOrSignInOpts.validationData;
                    }
                    else {
                        return this.rejectAuthError(AuthErrorTypes.InvalidUsername);
                    }
                    if (!username) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
                    }
                    var authDetails = new es/* AuthenticationDetails */.sD({
                        Username: username,
                        Password: password,
                        ValidationData: validationData,
                        ClientMetadata: clientMetadata,
                    });
                    if (password) {
                        return this.signInWithPassword(authDetails);
                    }
                    else {
                        return this.signInWithoutPassword(authDetails);
                    }
                };
                /**
                 * Return an object with the authentication callbacks
                 * @param {CognitoUser} user - the cognito user object
                 * @param {} resolve - function called when resolving the current step
                 * @param {} reject - function called when rejecting the current step
                 * @return - an object with the callback methods for user authentication
                 */
                AuthClass.prototype.authCallbacks = function (user, resolve, reject) {
                    var _this = this;
                    var that = this;
                    return {
                        onSuccess: function (session) {
                            return __awaiter(_this, void 0, void 0, function () {
                                var cred, e_1, currentUser, e_2;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            Auth_logger.debug(session);
                                            delete user['challengeName'];
                                            delete user['challengeParam'];
                                            _a.label = 1;
                                        case 1:
                                            _a.trys.push([1, 4, 5, 9]);
                                            return [4 /*yield*/, this.Credentials.clear()];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, this.Credentials.set(session, 'session')];
                                        case 3:
                                            cred = _a.sent();
                                            Auth_logger.debug('succeed to get cognito credentials', cred);
                                            return [3 /*break*/, 9];
                                        case 4:
                                            e_1 = _a.sent();
                                            Auth_logger.debug('cannot get cognito credentials', e_1);
                                            return [3 /*break*/, 9];
                                        case 5:
                                            _a.trys.push([5, 7, , 8]);
                                            return [4 /*yield*/, this.currentUserPoolUser()];
                                        case 6:
                                            currentUser = _a.sent();
                                            that.user = currentUser;
                                            Auth_dispatchAuthEvent('signIn', currentUser, "A user " + user.getUsername() + " has been signed in");
                                            resolve(currentUser);
                                            return [3 /*break*/, 8];
                                        case 7:
                                            e_2 = _a.sent();
                                            Auth_logger.error('Failed to get the signed in user', e_2);
                                            reject(e_2);
                                            return [3 /*break*/, 8];
                                        case 8: return [7 /*endfinally*/];
                                        case 9: return [2 /*return*/];
                                    }
                                });
                            });
                        },
                        onFailure: function (err) {
                            Auth_logger.debug('signIn failure', err);
                            Auth_dispatchAuthEvent('signIn_failure', err, user.getUsername() + " failed to signin");
                            reject(err);
                        },
                        customChallenge: function (challengeParam) {
                            Auth_logger.debug('signIn custom challenge answer required');
                            user['challengeName'] = 'CUSTOM_CHALLENGE';
                            user['challengeParam'] = challengeParam;
                            resolve(user);
                        },
                        mfaRequired: function (challengeName, challengeParam) {
                            Auth_logger.debug('signIn MFA required');
                            user['challengeName'] = challengeName;
                            user['challengeParam'] = challengeParam;
                            resolve(user);
                        },
                        mfaSetup: function (challengeName, challengeParam) {
                            Auth_logger.debug('signIn mfa setup', challengeName);
                            user['challengeName'] = challengeName;
                            user['challengeParam'] = challengeParam;
                            resolve(user);
                        },
                        newPasswordRequired: function (userAttributes, requiredAttributes) {
                            Auth_logger.debug('signIn new password');
                            user['challengeName'] = 'NEW_PASSWORD_REQUIRED';
                            user['challengeParam'] = {
                                userAttributes: userAttributes,
                                requiredAttributes: requiredAttributes,
                            };
                            resolve(user);
                        },
                        totpRequired: function (challengeName, challengeParam) {
                            Auth_logger.debug('signIn totpRequired');
                            user['challengeName'] = challengeName;
                            user['challengeParam'] = challengeParam;
                            resolve(user);
                        },
                        selectMFAType: function (challengeName, challengeParam) {
                            Auth_logger.debug('signIn selectMFAType', challengeName);
                            user['challengeName'] = challengeName;
                            user['challengeParam'] = challengeParam;
                            resolve(user);
                        },
                    };
                };
                /**
                 * Sign in with a password
                 * @private
                 * @param {AuthenticationDetails} authDetails - the user sign in data
                 * @return - A promise resolves the CognitoUser object if success or mfa required
                 */
                AuthClass.prototype.signInWithPassword = function (authDetails) {
                    var _this = this;
                    if (this.pendingSignIn) {
                        throw new Error('Pending sign-in attempt already in progress');
                    }
                    var user = this.createCognitoUser(authDetails.getUsername());
                    this.pendingSignIn = new Promise(function (resolve, reject) {
                        user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {
                            _this.pendingSignIn = null;
                            resolve(value);
                        }, function (error) {
                            _this.pendingSignIn = null;
                            reject(error);
                        }));
                    });
                    return this.pendingSignIn;
                };
                /**
                 * Sign in without a password
                 * @private
                 * @param {AuthenticationDetails} authDetails - the user sign in data
                 * @return - A promise resolves the CognitoUser object if success or mfa required
                 */
                AuthClass.prototype.signInWithoutPassword = function (authDetails) {
                    var _this = this;
                    var user = this.createCognitoUser(authDetails.getUsername());
                    user.setAuthenticationFlowType('CUSTOM_AUTH');
                    return new Promise(function (resolve, reject) {
                        user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));
                    });
                };
                /**
                 * This was previously used by an authenticated user to get MFAOptions,
                 * but no longer returns a meaningful response. Refer to the documentation for
                 * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
                 * @deprecated
                 * @param {CognitoUser} user - the current user
                 * @return - A promise resolves the current preferred mfa option if success
                 */
                AuthClass.prototype.getMFAOptions = function (user) {
                    return new Promise(function (res, rej) {
                        user.getMFAOptions(function (err, mfaOptions) {
                            if (err) {
                                Auth_logger.debug('get MFA Options failed', err);
                                rej(err);
                                return;
                            }
                            Auth_logger.debug('get MFA options success', mfaOptions);
                            res(mfaOptions);
                            return;
                        });
                    });
                };
                /**
                 * get preferred mfa method
                 * @param {CognitoUser} user - the current cognito user
                 * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA
                 */
                AuthClass.prototype.getPreferredMFA = function (user, params) {
                    var _this = this;
                    var that = this;
                    return new Promise(function (res, rej) {
                        var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
                        var bypassCache = params ? params.bypassCache : false;
                        user.getUserData(function (err, data) {
                            return __awaiter(_this, void 0, void 0, function () {
                                var cleanUpError_1, mfaType;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!err) return [3 /*break*/, 5];
                                            Auth_logger.debug('getting preferred mfa failed', err);
                                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];
                                            _a.label = 1;
                                        case 1:
                                            _a.trys.push([1, 3, , 4]);
                                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];
                                        case 2:
                                            _a.sent();
                                            return [3 /*break*/, 4];
                                        case 3:
                                            cleanUpError_1 = _a.sent();
                                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_1.message));
                                            return [2 /*return*/];
                                        case 4:
                                            rej(err);
                                            return [2 /*return*/];
                                        case 5:
                                            mfaType = that._getMfaTypeFromUserData(data);
                                            if (!mfaType) {
                                                rej('invalid MFA Type');
                                                return [2 /*return*/];
                                            }
                                            else {
                                                res(mfaType);
                                                return [2 /*return*/];
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }, { bypassCache: bypassCache, clientMetadata: clientMetadata });
                    });
                };
                AuthClass.prototype._getMfaTypeFromUserData = function (data) {
                    var ret = null;
                    var preferredMFA = data.PreferredMfaSetting;
                    // if the user has used Auth.setPreferredMFA() to setup the mfa type
                    // then the "PreferredMfaSetting" would exist in the response
                    if (preferredMFA) {
                        ret = preferredMFA;
                    }
                    else {
                        // if mfaList exists but empty, then its noMFA
                        var mfaList = data.UserMFASettingList;
                        if (!mfaList) {
                            // if SMS was enabled by using Auth.enableSMS(),
                            // the response would contain MFAOptions
                            // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'
                            // if it does not exist, then it should be NOMFA
                            var MFAOptions = data.MFAOptions;
                            if (MFAOptions) {
                                ret = 'SMS_MFA';
                            }
                            else {
                                ret = 'NOMFA';
                            }
                        }
                        else if (mfaList.length === 0) {
                            ret = 'NOMFA';
                        }
                        else {
                            Auth_logger.debug('invalid case for getPreferredMFA', data);
                        }
                    }
                    return ret;
                };
                AuthClass.prototype._getUserData = function (user, params) {
                    var _this = this;
                    return new Promise(function (res, rej) {
                        user.getUserData(function (err, data) {
                            return __awaiter(_this, void 0, void 0, function () {
                                var cleanUpError_2;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!err) return [3 /*break*/, 5];
                                            Auth_logger.debug('getting user data failed', err);
                                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];
                                            _a.label = 1;
                                        case 1:
                                            _a.trys.push([1, 3, , 4]);
                                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];
                                        case 2:
                                            _a.sent();
                                            return [3 /*break*/, 4];
                                        case 3:
                                            cleanUpError_2 = _a.sent();
                                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_2.message));
                                            return [2 /*return*/];
                                        case 4:
                                            rej(err);
                                            return [2 /*return*/];
                                        case 5:
                                            res(data);
                                            _a.label = 6;
                                        case 6: return [2 /*return*/];
                                    }
                                });
                            });
                        }, params);
                    });
                };
                /**
                 * set preferred MFA method
                 * @param {CognitoUser} user - the current Cognito user
                 * @param {string} mfaMethod - preferred mfa method
                 * @return - A promise resolve if success
                 */
                AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {
                    return __awaiter(this, void 0, void 0, function () {
                        var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;
                        var _this = this;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    clientMetadata = this._config.clientMetadata;
                                    return [4 /*yield*/, this._getUserData(user, {
                                        bypassCache: true,
                                        clientMetadata: clientMetadata,
                                    })];
                                case 1:
                                    userData = _b.sent();
                                    smsMfaSettings = null;
                                    totpMfaSettings = null;
                                    _a = mfaMethod;
                                    switch (_a) {
                                        case 'TOTP': return [3 /*break*/, 2];
                                        case 'SOFTWARE_TOKEN_MFA': return [3 /*break*/, 2];
                                        case 'SMS': return [3 /*break*/, 3];
                                        case 'SMS_MFA': return [3 /*break*/, 3];
                                        case 'NOMFA': return [3 /*break*/, 4];
                                    }
                                    return [3 /*break*/, 6];
                                case 2:
                                    totpMfaSettings = {
                                        PreferredMfa: true,
                                        Enabled: true,
                                    };
                                    return [3 /*break*/, 7];
                                case 3:
                                    smsMfaSettings = {
                                        PreferredMfa: true,
                                        Enabled: true,
                                    };
                                    return [3 /*break*/, 7];
                                case 4:
                                    mfaList = userData['UserMFASettingList'];
                                    return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];
                                case 5:
                                    currentMFAType = _b.sent();
                                    if (currentMFAType === 'NOMFA') {
                                        return [2 /*return*/, Promise.resolve('No change for mfa type')];
                                    }
                                    else if (currentMFAType === 'SMS_MFA') {
                                        smsMfaSettings = {
                                            PreferredMfa: false,
                                            Enabled: false,
                                        };
                                    }
                                    else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {
                                        totpMfaSettings = {
                                            PreferredMfa: false,
                                            Enabled: false,
                                        };
                                    }
                                    else {
                                        return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];
                                    }
                                    // if there is a UserMFASettingList in the response
                                    // we need to disable every mfa type in that list
                                    if (mfaList && mfaList.length !== 0) {
                                        // to disable SMS or TOTP if exists in that list
                                        mfaList.forEach(function (mfaType) {
                                            if (mfaType === 'SMS_MFA') {
                                                smsMfaSettings = {
                                                    PreferredMfa: false,
                                                    Enabled: false,
                                                };
                                            }
                                            else if (mfaType === 'SOFTWARE_TOKEN_MFA') {
                                                totpMfaSettings = {
                                                    PreferredMfa: false,
                                                    Enabled: false,
                                                };
                                            }
                                        });
                                    }
                                    return [3 /*break*/, 7];
                                case 6:
                                    Auth_logger.debug('no validmfa method provided');
                                    return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];
                                case 7:
                                    that = this;
                                    return [2 /*return*/, new Promise(function (res, rej) {
                                        user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {
                                            if (err) {
                                                Auth_logger.debug('Set user mfa preference error', err);
                                                return rej(err);
                                            }
                                            Auth_logger.debug('Set user mfa success', result);
                                            Auth_logger.debug('Caching the latest user data into local');
                                            // cache the latest result into user data
                                            user.getUserData(function (err, data) {
                                                return __awaiter(_this, void 0, void 0, function () {
                                                    var cleanUpError_3;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                if (!err) return [3 /*break*/, 5];
                                                                Auth_logger.debug('getting user data failed', err);
                                                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];
                                                                _a.label = 1;
                                                            case 1:
                                                                _a.trys.push([1, 3, , 4]);
                                                                return [4 /*yield*/, this.cleanUpInvalidSession(user)];
                                                            case 2:
                                                                _a.sent();
                                                                return [3 /*break*/, 4];
                                                            case 3:
                                                                cleanUpError_3 = _a.sent();
                                                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_3.message));
                                                                return [2 /*return*/];
                                                            case 4: return [2 /*return*/, rej(err)];
                                                            case 5: return [2 /*return*/, res(result)];
                                                        }
                                                    });
                                                });
                                            }, {
                                                bypassCache: true,
                                                clientMetadata: clientMetadata,
                                            });
                                        });
                                    })];
                            }
                        });
                    });
                };
                /**
                 * disable SMS
                 * @deprecated
                 * @param {CognitoUser} user - the current user
                 * @return - A promise resolves is success
                 */
                AuthClass.prototype.disableSMS = function (user) {
                    return new Promise(function (res, rej) {
                        user.disableMFA(function (err, data) {
                            if (err) {
                                Auth_logger.debug('disable mfa failed', err);
                                rej(err);
                                return;
                            }
                            Auth_logger.debug('disable mfa succeed', data);
                            res(data);
                            return;
                        });
                    });
                };
                /**
                 * enable SMS
                 * @deprecated
                 * @param {CognitoUser} user - the current user
                 * @return - A promise resolves is success
                 */
                AuthClass.prototype.enableSMS = function (user) {
                    return new Promise(function (res, rej) {
                        user.enableMFA(function (err, data) {
                            if (err) {
                                Auth_logger.debug('enable mfa failed', err);
                                rej(err);
                                return;
                            }
                            Auth_logger.debug('enable mfa succeed', data);
                            res(data);
                            return;
                        });
                    });
                };
                /**
                 * Setup TOTP
                 * @param {CognitoUser} user - the current user
                 * @return - A promise resolves with the secret code if success
                 */
                AuthClass.prototype.setupTOTP = function (user) {
                    return new Promise(function (res, rej) {
                        user.associateSoftwareToken({
                            onFailure: function (err) {
                                Auth_logger.debug('associateSoftwareToken failed', err);
                                rej(err);
                                return;
                            },
                            associateSecretCode: function (secretCode) {
                                Auth_logger.debug('associateSoftwareToken success', secretCode);
                                res(secretCode);
                                return;
                            },
                        });
                    });
                };
                /**
                 * verify TOTP setup
                 * @param {CognitoUser} user - the current user
                 * @param {string} challengeAnswer - challenge answer
                 * @return - A promise resolves is success
                 */
                AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {
                    Auth_logger.debug('verification totp token', user, challengeAnswer);
                    var signInUserSession;
                    if (user && typeof user.getSignInUserSession === 'function') {
                        signInUserSession = user.getSignInUserSession();
                    }
                    var isLoggedIn = signInUserSession === null || signInUserSession === void 0 ? void 0 : signInUserSession.isValid();
                    return new Promise(function (res, rej) {
                        user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {
                            onFailure: function (err) {
                                Auth_logger.debug('verifyTotpToken failed', err);
                                rej(err);
                                return;
                            },
                            onSuccess: function (data) {
                                if (!isLoggedIn) {
                                    Auth_dispatchAuthEvent('signIn', user, "A user " + user.getUsername() + " has been signed in");
                                }
                                Auth_dispatchAuthEvent('verify', user, "A user " + user.getUsername() + " has been verified");
                                Auth_logger.debug('verifyTotpToken success', data);
                                res(data);
                                return;
                            },
                        });
                    });
                };
                /**
                 * Send MFA code to confirm sign in
                 * @param {Object} user - The CognitoUser object
                 * @param {String} code - The confirmation code
                 */
                AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {
                    var _this = this;
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!code) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
                    }
                    var that = this;
                    return new Promise(function (resolve, reject) {
                        user.sendMFACode(code, {
                            onSuccess: function (session) {
                                return __awaiter(_this, void 0, void 0, function () {
                                    var cred, e_3, currentUser, e_4;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                Auth_logger.debug(session);
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, 4, 5, 10]);
                                                return [4 /*yield*/, this.Credentials.clear()];
                                            case 2:
                                                _a.sent();
                                                return [4 /*yield*/, this.Credentials.set(session, 'session')];
                                            case 3:
                                                cred = _a.sent();
                                                Auth_logger.debug('succeed to get cognito credentials', cred);
                                                return [3 /*break*/, 10];
                                            case 4:
                                                e_3 = _a.sent();
                                                Auth_logger.debug('cannot get cognito credentials', e_3);
                                                return [3 /*break*/, 10];
                                            case 5:
                                                that.user = user;
                                                _a.label = 6;
                                            case 6:
                                                _a.trys.push([6, 8, , 9]);
                                                return [4 /*yield*/, this.currentUserPoolUser()];
                                            case 7:
                                                currentUser = _a.sent();
                                                user.attributes = currentUser.attributes;
                                                return [3 /*break*/, 9];
                                            case 8:
                                                e_4 = _a.sent();
                                                Auth_logger.debug('cannot get updated Cognito User', e_4);
                                                return [3 /*break*/, 9];
                                            case 9:
                                                Auth_dispatchAuthEvent('signIn', user, "A user " + user.getUsername() + " has been signed in");
                                                resolve(user);
                                                return [7 /*endfinally*/];
                                            case 10: return [2 /*return*/];
                                        }
                                    });
                                });
                            },
                            onFailure: function (err) {
                                Auth_logger.debug('confirm signIn failure', err);
                                reject(err);
                            },
                        }, mfaType, clientMetadata);
                    });
                };
                AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {
                    var _this = this;
                    if (requiredAttributes === void 0) { requiredAttributes = {}; }
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!password) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
                    }
                    var that = this;
                    return new Promise(function (resolve, reject) {
                        user.completeNewPasswordChallenge(password, requiredAttributes, {
                            onSuccess: function (session) {
                                return __awaiter(_this, void 0, void 0, function () {
                                    var cred, e_5;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                Auth_logger.debug(session);
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, 4, 5, 6]);
                                                return [4 /*yield*/, this.Credentials.clear()];
                                            case 2:
                                                _a.sent();
                                                return [4 /*yield*/, this.Credentials.set(session, 'session')];
                                            case 3:
                                                cred = _a.sent();
                                                Auth_logger.debug('succeed to get cognito credentials', cred);
                                                return [3 /*break*/, 6];
                                            case 4:
                                                e_5 = _a.sent();
                                                Auth_logger.debug('cannot get cognito credentials', e_5);
                                                return [3 /*break*/, 6];
                                            case 5:
                                                that.user = user;
                                                Auth_dispatchAuthEvent('signIn', user, "A user " + user.getUsername() + " has been signed in");
                                                resolve(user);
                                                return [7 /*endfinally*/];
                                            case 6: return [2 /*return*/];
                                        }
                                    });
                                });
                            },
                            onFailure: function (err) {
                                Auth_logger.debug('completeNewPassword failure', err);
                                Auth_dispatchAuthEvent('completeNewPassword_failure', err, _this.user + " failed to complete the new password flow");
                                reject(err);
                            },
                            mfaRequired: function (challengeName, challengeParam) {
                                Auth_logger.debug('signIn MFA required');
                                user['challengeName'] = challengeName;
                                user['challengeParam'] = challengeParam;
                                resolve(user);
                            },
                            mfaSetup: function (challengeName, challengeParam) {
                                Auth_logger.debug('signIn mfa setup', challengeName);
                                user['challengeName'] = challengeName;
                                user['challengeParam'] = challengeParam;
                                resolve(user);
                            },
                            totpRequired: function (challengeName, challengeParam) {
                                Auth_logger.debug('signIn mfa setup', challengeName);
                                user['challengeName'] = challengeName;
                                user['challengeParam'] = challengeParam;
                                resolve(user);
                            },
                        }, clientMetadata);
                    });
                };
                /**
                 * Send the answer to a custom challenge
                 * @param {CognitoUser} user - The CognitoUser object
                 * @param {String} challengeResponses - The confirmation code
                 */
                AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {
                    var _this = this;
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    if (!challengeResponses) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);
                    }
                    var that = this;
                    return new Promise(function (resolve, reject) {
                        user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);
                    });
                };
                /**
                 * Delete an authenticated users' attributes
                 * @param {CognitoUser} - The currently logged in user object
                 * @return {Promise}
                 **/
                AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {
                    var that = this;
                    return new Promise(function (resolve, reject) {
                        that.userSession(user).then(function (session) {
                            user.deleteAttributes(attributeNames, function (err, result) {
                                if (err) {
                                    return reject(err);
                                }
                                else {
                                    return resolve(result);
                                }
                            });
                        });
                    });
                };
                /**
                 * Delete the current authenticated user
                 * @return {Promise}
                 **/
                // TODO: Check return type void
                AuthClass.prototype.deleteUser = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var e_6, isSignedInHostedUI;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this._storageSync];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    e_6 = _a.sent();
                                    Auth_logger.debug('Failed to sync cache info into memory', e_6);
                                    throw new Error(e_6);
                                case 3:
                                    isSignedInHostedUI = this._oAuthHandler &&
                                        this._storage.getItem('amplify-signin-with-hostedUI') === 'true';
                                    return [2 /*return*/, new Promise(function (res, rej) {
                                        return __awaiter(_this, void 0, void 0, function () {
                                            var user_1;
                                            var _this = this;
                                            return __generator(this, function (_a) {
                                                if (this.userPool) {
                                                    user_1 = this.userPool.getCurrentUser();
                                                    if (!user_1) {
                                                        Auth_logger.debug('Failed to get user from user pool');
                                                        return [2 /*return*/, rej(new Error('No current user.'))];
                                                    }
                                                    else {
                                                        user_1.getSession(function (err, session) {
                                                            return __awaiter(_this, void 0, void 0, function () {
                                                                var cleanUpError_4;
                                                                var _this = this;
                                                                return __generator(this, function (_a) {
                                                                    switch (_a.label) {
                                                                        case 0:
                                                                            if (!err) return [3 /*break*/, 5];
                                                                            Auth_logger.debug('Failed to get the user session', err);
                                                                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];
                                                                            _a.label = 1;
                                                                        case 1:
                                                                            _a.trys.push([1, 3, , 4]);
                                                                            return [4 /*yield*/, this.cleanUpInvalidSession(user_1)];
                                                                        case 2:
                                                                            _a.sent();
                                                                            return [3 /*break*/, 4];
                                                                        case 3:
                                                                            cleanUpError_4 = _a.sent();
                                                                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_4.message));
                                                                            return [2 /*return*/];
                                                                        case 4: return [2 /*return*/, rej(err)];
                                                                        case 5:
                                                                            user_1.deleteUser(function (err, result) {
                                                                                if (err) {
                                                                                    rej(err);
                                                                                }
                                                                                else {
                                                                                    Auth_dispatchAuthEvent('userDeleted', result, 'The authenticated user has been deleted.');
                                                                                    user_1.signOut();
                                                                                    _this.user = null;
                                                                                    try {
                                                                                        _this.cleanCachedItems(); // clean aws credentials
                                                                                    }
                                                                                    catch (e) {
                                                                                        // TODO: change to rejects in refactor
                                                                                        Auth_logger.debug('failed to clear cached items');
                                                                                    }
                                                                                    if (isSignedInHostedUI) {
                                                                                        _this.oAuthSignOutRedirect(res, rej);
                                                                                    }
                                                                                    else {
                                                                                        Auth_dispatchAuthEvent('signOut', _this.user, "A user has been signed out");
                                                                                        res(result);
                                                                                    }
                                                                                }
                                                                            });
                                                                            _a.label = 6;
                                                                        case 6: return [2 /*return*/];
                                                                    }
                                                                });
                                                            });
                                                        });
                                                    }
                                                }
                                                else {
                                                    Auth_logger.debug('no Congito User pool');
                                                    rej(new Error('Cognito User pool does not exist'));
                                                }
                                                return [2 /*return*/];
                                            });
                                        });
                                    })];
                            }
                        });
                    });
                };
                /**
                 * Update an authenticated users' attributes
                 * @param {CognitoUser} - The currently logged in user object
                 * @return {Promise}
                 **/
                AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {
                    var _this = this;
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    var attributeList = [];
                    var that = this;
                    return new Promise(function (resolve, reject) {
                        that.userSession(user).then(function (session) {
                            for (var key in attributes) {
                                if (key !== 'sub' && key.indexOf('_verified') < 0) {
                                    var attr = {
                                        Name: key,
                                        Value: attributes[key],
                                    };
                                    attributeList.push(attr);
                                }
                            }
                            user.updateAttributes(attributeList, function (err, result, details) {
                                if (err) {
                                    Auth_dispatchAuthEvent('updateUserAttributes_failure', err, 'Failed to update attributes');
                                    return reject(err);
                                }
                                else {
                                    var attrs = _this.createUpdateAttributesResultList(attributes, details === null || details === void 0 ? void 0 : details.CodeDeliveryDetailsList);
                                    Auth_dispatchAuthEvent('updateUserAttributes', attrs, 'Attributes successfully updated');
                                    return resolve(result);
                                }
                            }, clientMetadata);
                        });
                    });
                };
                AuthClass.prototype.createUpdateAttributesResultList = function (attributes, codeDeliveryDetailsList) {
                    var attrs = {};
                    Object.keys(attributes).forEach(function (key) {
                        attrs[key] = {
                            isUpdated: true,
                        };
                        var codeDeliveryDetails = codeDeliveryDetailsList === null || codeDeliveryDetailsList === void 0 ? void 0 : codeDeliveryDetailsList.find(function (value) { return value.AttributeName === key; });
                        if (codeDeliveryDetails) {
                            attrs[key].isUpdated = false;
                            attrs[key].codeDeliveryDetails = codeDeliveryDetails;
                        }
                    });
                    return attrs;
                };
                /**
                 * Return user attributes
                 * @param {Object} user - The CognitoUser object
                 * @return - A promise resolves to user attributes if success
                 */
                AuthClass.prototype.userAttributes = function (user) {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        _this.userSession(user).then(function (session) {
                            user.getUserAttributes(function (err, attributes) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(attributes);
                                }
                            });
                        });
                    });
                };
                AuthClass.prototype.verifiedContact = function (user) {
                    var that = this;
                    return this.userAttributes(user).then(function (attributes) {
                        var attrs = that.attributesToObject(attributes);
                        var unverified = {};
                        var verified = {};
                        if (attrs['email']) {
                            if (attrs['email_verified']) {
                                verified['email'] = attrs['email'];
                            }
                            else {
                                unverified['email'] = attrs['email'];
                            }
                        }
                        if (attrs['phone_number']) {
                            if (attrs['phone_number_verified']) {
                                verified['phone_number'] = attrs['phone_number'];
                            }
                            else {
                                unverified['phone_number'] = attrs['phone_number'];
                            }
                        }
                        return {
                            verified: verified,
                            unverified: unverified,
                        };
                    });
                };
                AuthClass.prototype.isErrorWithMessage = function (err) {
                    return (typeof err === 'object' &&
                        Object.prototype.hasOwnProperty.call(err, 'message'));
                };
                // Session revoked by another app
                AuthClass.prototype.isTokenRevokedError = function (err) {
                    return (this.isErrorWithMessage(err) &&
                        err.message === 'Access Token has been revoked');
                };
                AuthClass.prototype.isRefreshTokenRevokedError = function (err) {
                    return (this.isErrorWithMessage(err) &&
                        err.message === 'Refresh Token has been revoked');
                };
                AuthClass.prototype.isUserDisabledError = function (err) {
                    return this.isErrorWithMessage(err) && err.message === 'User is disabled.';
                };
                AuthClass.prototype.isUserDoesNotExistError = function (err) {
                    return (this.isErrorWithMessage(err) && err.message === 'User does not exist.');
                };
                AuthClass.prototype.isRefreshTokenExpiredError = function (err) {
                    return (this.isErrorWithMessage(err) &&
                        err.message === 'Refresh Token has expired');
                };
                AuthClass.prototype.isPasswordResetRequiredError = function (err) {
                    return (this.isErrorWithMessage(err) &&
                        err.message === 'Password reset required for the user');
                };
                AuthClass.prototype.isSignedInHostedUI = function () {
                    return (this._oAuthHandler &&
                        this._storage.getItem('amplify-signin-with-hostedUI') === 'true');
                };
                AuthClass.prototype.isSessionInvalid = function (err) {
                    return (this.isUserDisabledError(err) ||
                        this.isUserDoesNotExistError(err) ||
                        this.isTokenRevokedError(err) ||
                        this.isRefreshTokenRevokedError(err) ||
                        this.isRefreshTokenExpiredError(err) ||
                        this.isPasswordResetRequiredError(err));
                };
                AuthClass.prototype.cleanUpInvalidSession = function (user) {
                    return __awaiter(this, void 0, void 0, function () {
                        var e_7;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    user.signOut();
                                    this.user = null;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this.cleanCachedItems()];
                                case 2:
                                    _a.sent(); // clean aws credentials
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_7 = _a.sent();
                                    Auth_logger.debug('failed to clear cached items');
                                    return [3 /*break*/, 4];
                                case 4:
                                    if (this.isSignedInHostedUI()) {
                                        return [2 /*return*/, new Promise(function (res, rej) {
                                            _this.oAuthSignOutRedirect(res, rej);
                                        })];
                                    }
                                    else {
                                        Auth_dispatchAuthEvent('signOut', this.user, "A user has been signed out");
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Get current authenticated user
                 * @return - A promise resolves to current authenticated CognitoUser if success
                 */
                AuthClass.prototype.currentUserPoolUser = function (params) {
                    var _this = this;
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    return new Promise(function (res, rej) {
                        _this._storageSync
                            .then(function () {
                                return __awaiter(_this, void 0, void 0, function () {
                                    var user, session, bypassCache, clientMetadata, _a, scope, err_1;
                                    var _this = this;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                if (!this.isOAuthInProgress()) return [3 /*break*/, 2];
                                                Auth_logger.debug('OAuth signIn in progress, waiting for resolution...');
                                                return [4 /*yield*/, new Promise(function (res) {
                                                    var timeoutId = setTimeout(function () {
                                                        Auth_logger.debug('OAuth signIn in progress timeout');
                                                        Hub/* Hub */.X.remove('auth', hostedUISignCallback);
                                                        res();
                                                    }, OAUTH_FLOW_MS_TIMEOUT);
                                                    Hub/* Hub */.X.listen('auth', hostedUISignCallback);
                                                    function hostedUISignCallback(_a) {
                                                        var payload = _a.payload;
                                                        var event = payload.event;
                                                        if (event === 'cognitoHostedUI' ||
                                                            event === 'cognitoHostedUI_failure') {
                                                            Auth_logger.debug("OAuth signIn resolved: " + event);
                                                            clearTimeout(timeoutId);
                                                            Hub/* Hub */.X.remove('auth', hostedUISignCallback);
                                                            res();
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                _b.sent();
                                                _b.label = 2;
                                            case 2:
                                                user = this.userPool.getCurrentUser();
                                                if (!user) {
                                                    Auth_logger.debug('Failed to get user from user pool');
                                                    rej('No current user');
                                                    return [2 /*return*/];
                                                }
                                                _b.label = 3;
                                            case 3:
                                                _b.trys.push([3, 7, , 8]);
                                                return [4 /*yield*/, this._userSession(user)];
                                            case 4:
                                                session = _b.sent();
                                                bypassCache = params ? params.bypassCache : false;
                                                if (!bypassCache) return [3 /*break*/, 6];
                                                return [4 /*yield*/, this.Credentials.clear()];
                                            case 5:
                                                _b.sent();
                                                _b.label = 6;
                                            case 6:
                                                clientMetadata = this._config.clientMetadata;
                                                _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;
                                                if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {
                                                    user.getUserData(function (err, data) {
                                                        return __awaiter(_this, void 0, void 0, function () {
                                                            var cleanUpError_5, preferredMFA, attributeList, i, attribute, userAttribute, attributes;
                                                            return __generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0:
                                                                        if (!err) return [3 /*break*/, 7];
                                                                        Auth_logger.debug('getting user data failed', err);
                                                                        if (!this.isSessionInvalid(err)) return [3 /*break*/, 5];
                                                                        _a.label = 1;
                                                                    case 1:
                                                                        _a.trys.push([1, 3, , 4]);
                                                                        return [4 /*yield*/, this.cleanUpInvalidSession(user)];
                                                                    case 2:
                                                                        _a.sent();
                                                                        return [3 /*break*/, 4];
                                                                    case 3:
                                                                        cleanUpError_5 = _a.sent();
                                                                        rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_5.message));
                                                                        return [2 /*return*/];
                                                                    case 4:
                                                                        rej(err);
                                                                        return [3 /*break*/, 6];
                                                                    case 5:
                                                                        res(user);
                                                                        _a.label = 6;
                                                                    case 6: return [2 /*return*/];
                                                                    case 7:
                                                                        preferredMFA = data.PreferredMfaSetting || 'NOMFA';
                                                                        attributeList = [];
                                                                        for (i = 0; i < data.UserAttributes.length; i++) {
                                                                            attribute = {
                                                                                Name: data.UserAttributes[i].Name,
                                                                                Value: data.UserAttributes[i].Value,
                                                                            };
                                                                            userAttribute = new es/* CognitoUserAttribute */.KC(attribute);
                                                                            attributeList.push(userAttribute);
                                                                        }
                                                                        attributes = this.attributesToObject(attributeList);
                                                                        Object.assign(user, { attributes: attributes, preferredMFA: preferredMFA });
                                                                        return [2 /*return*/, res(user)];
                                                                }
                                                            });
                                                        });
                                                    }, { bypassCache: bypassCache, clientMetadata: clientMetadata });
                                                }
                                                else {
                                                    Auth_logger.debug("Unable to get the user data because the " + USER_ADMIN_SCOPE + " " +
                                                        "is not in the scopes of the access token");
                                                    return [2 /*return*/, res(user)];
                                                }
                                                return [3 /*break*/, 8];
                                            case 7:
                                                err_1 = _b.sent();
                                                rej(err_1);
                                                return [3 /*break*/, 8];
                                            case 8: return [2 /*return*/];
                                        }
                                    });
                                });
                            })
                            .catch(function (e) {
                                Auth_logger.debug('Failed to sync cache info into memory', e);
                                return rej(e);
                            });
                    });
                };
                AuthClass.prototype.isOAuthInProgress = function () {
                    return this.oAuthFlowInProgress;
                };
                /**
                 * Get current authenticated user
                 * @param {CurrentUserOpts} - options for getting the current user
                 * @return - A promise resolves to current authenticated CognitoUser if success
                 */
                AuthClass.prototype.currentAuthenticatedUser = function (params) {
                    return __awaiter(this, void 0, void 0, function () {
                        var federatedUser, e_8, federatedInfo, user, e_9;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Auth_logger.debug('getting current authenticated user');
                                    federatedUser = null;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this._storageSync];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_8 = _a.sent();
                                    Auth_logger.debug('Failed to sync cache info into memory', e_8);
                                    throw e_8;
                                case 4:
                                    try {
                                        federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));
                                        if (federatedInfo) {
                                            federatedUser = __assign(__assign({}, federatedInfo.user), { token: federatedInfo.token });
                                        }
                                    }
                                    catch (e) {
                                        Auth_logger.debug('cannot load federated user from auth storage');
                                    }
                                    if (!federatedUser) return [3 /*break*/, 5];
                                    this.user = federatedUser;
                                    Auth_logger.debug('get current authenticated federated user', this.user);
                                    return [2 /*return*/, this.user];
                                case 5:
                                    Auth_logger.debug('get current authenticated userpool user');
                                    user = null;
                                    _a.label = 6;
                                case 6:
                                    _a.trys.push([6, 8, , 9]);
                                    return [4 /*yield*/, this.currentUserPoolUser(params)];
                                case 7:
                                    user = _a.sent();
                                    return [3 /*break*/, 9];
                                case 8:
                                    e_9 = _a.sent();
                                    if (e_9 === 'No userPool') {
                                        Auth_logger.error('Cannot get the current user because the user pool is missing. ' +
                                            'Please make sure the Auth module is configured with a valid Cognito User Pool ID');
                                    }
                                    Auth_logger.debug('The user is not authenticated by the error', e_9);
                                    return [2 /*return*/, Promise.reject('The user is not authenticated')];
                                case 9:
                                    this.user = user;
                                    return [2 /*return*/, this.user];
                            }
                        });
                    });
                };
                /**
                 * Get current user's session
                 * @return - A promise resolves to session object if success
                 */
                AuthClass.prototype.currentSession = function () {
                    var that = this;
                    Auth_logger.debug('Getting current session');
                    // Purposely not calling the reject method here because we don't need a console error
                    if (!this.userPool) {
                        return Promise.reject(new Error('No User Pool in the configuration.'));
                    }
                    return new Promise(function (res, rej) {
                        that
                            .currentUserPoolUser()
                            .then(function (user) {
                                that
                                    .userSession(user)
                                    .then(function (session) {
                                        res(session);
                                        return;
                                    })
                                    .catch(function (e) {
                                        Auth_logger.debug('Failed to get the current session', e);
                                        rej(e);
                                        return;
                                    });
                            })
                            .catch(function (e) {
                                Auth_logger.debug('Failed to get the current user', e);
                                rej(e);
                                return;
                            });
                    });
                };
                AuthClass.prototype._userSession = function (user) {
                    return __awaiter(this, void 0, void 0, function () {
                        var clientMetadata, userSession;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!user) {
                                        Auth_logger.debug('the user is null');
                                        return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoUserSession)];
                                    }
                                    clientMetadata = this._config.clientMetadata;
                                    // Debouncing the concurrent userSession calls by caching the promise.
                                    // This solution assumes users will always call this function with the same CognitoUser instance.
                                    if (this.inflightSessionPromiseCounter === 0) {
                                        this.inflightSessionPromise = new Promise(function (res, rej) {
                                            user.getSession(function (err, session) {
                                                return __awaiter(_this, void 0, void 0, function () {
                                                    var cleanUpError_6;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                if (!err) return [3 /*break*/, 5];
                                                                Auth_logger.debug('Failed to get the session from user', user);
                                                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];
                                                                _a.label = 1;
                                                            case 1:
                                                                _a.trys.push([1, 3, , 4]);
                                                                return [4 /*yield*/, this.cleanUpInvalidSession(user)];
                                                            case 2:
                                                                _a.sent();
                                                                return [3 /*break*/, 4];
                                                            case 3:
                                                                cleanUpError_6 = _a.sent();
                                                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_6.message));
                                                                return [2 /*return*/];
                                                            case 4:
                                                                rej(err);
                                                                return [2 /*return*/];
                                                            case 5:
                                                                Auth_logger.debug('Succeed to get the user session', session);
                                                                res(session);
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                });
                                            }, { clientMetadata: clientMetadata });
                                        });
                                    }
                                    this.inflightSessionPromiseCounter++;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, , 3, 4]);
                                    return [4 /*yield*/, this.inflightSessionPromise];
                                case 2:
                                    userSession = _a.sent();
                                    // Set private member. Avoid user.setSignInUserSession() to prevent excessive localstorage refresh.
                                    // @ts-ignore
                                    user.signInUserSession = userSession;
                                    return [2 /*return*/, userSession];
                                case 3:
                                    this.inflightSessionPromiseCounter--;
                                    return [7 /*endfinally*/];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Get the corresponding user session
                 * @param {Object} user - The CognitoUser object
                 * @return - A promise resolves to the session
                 */
                AuthClass.prototype.userSession = function (user) {
                    return this._userSession(user);
                };
                /**
                 * Get authenticated credentials of current user.
                 * @return - A promise resolves to be current user's credentials
                 */
                AuthClass.prototype.currentUserCredentials = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var e_10, federatedInfo;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Auth_logger.debug('Getting current user credentials');
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this._storageSync];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_10 = _a.sent();
                                    Auth_logger.debug('Failed to sync cache info into memory', e_10);
                                    throw e_10;
                                case 4:
                                    federatedInfo = null;
                                    try {
                                        federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));
                                    }
                                    catch (e) {
                                        Auth_logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);
                                    }
                                    if (federatedInfo) {
                                        // refresh the jwt token here if necessary
                                        return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];
                                    }
                                    else {
                                        return [2 /*return*/, this.currentSession()
                                            .then(function (session) {
                                                Auth_logger.debug('getting session success', session);
                                                return _this.Credentials.set(session, 'session');
                                            })
                                            .catch(function () {
                                                Auth_logger.debug('getting guest credentials');
                                                return _this.Credentials.set(null, 'guest');
                                            })];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                AuthClass.prototype.currentCredentials = function () {
                    Auth_logger.debug('getting current credentials');
                    return this.Credentials.get();
                };
                /**
                 * Initiate an attribute confirmation request
                 * @param {Object} user - The CognitoUser
                 * @param {Object} attr - The attributes to be verified
                 * @return - A promise resolves to callback data if success
                 */
                AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    return new Promise(function (resolve, reject) {
                        user.getAttributeVerificationCode(attr, {
                            onSuccess: function (success) {
                                return resolve(success);
                            },
                            onFailure: function (err) {
                                return reject(err);
                            },
                        }, clientMetadata);
                    });
                };
                /**
                 * Confirm an attribute using a confirmation code
                 * @param {Object} user - The CognitoUser
                 * @param {Object} attr - The attribute to be verified
                 * @param {String} code - The confirmation code
                 * @return - A promise resolves to callback data if success
                 */
                AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {
                    if (!code) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
                    }
                    return new Promise(function (resolve, reject) {
                        user.verifyAttribute(attr, code, {
                            onSuccess: function (data) {
                                resolve(data);
                                return;
                            },
                            onFailure: function (err) {
                                reject(err);
                                return;
                            },
                        });
                    });
                };
                AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {
                    var that = this;
                    return that
                        .currentUserPoolUser()
                        .then(function (user) { return that.verifyUserAttribute(user, attr); });
                };
                /**
                 * Confirm current user's attribute using a confirmation code
                 * @param {Object} attr - The attribute to be verified
                 * @param {String} code - The confirmation code
                 * @return - A promise resolves to callback data if success
                 */
                AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {
                    var that = this;
                    return that
                        .currentUserPoolUser()
                        .then(function (user) { return that.verifyUserAttributeSubmit(user, attr, code); });
                };
                AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {
                    return __awaiter(this, void 0, void 0, function () {
                        var e_11, isSignedInHostedUI;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this._storageSync];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    e_11 = _a.sent();
                                    Auth_logger.debug('Failed to sync cache info into memory', e_11);
                                    throw e_11;
                                case 3:
                                    isSignedInHostedUI = this._oAuthHandler &&
                                        this._storage.getItem('amplify-signin-with-hostedUI') === 'true';
                                    return [2 /*return*/, new Promise(function (res, rej) {
                                        if (opts && opts.global) {
                                            Auth_logger.debug('user global sign out', user);
                                            // in order to use global signout
                                            // we must validate the user as an authenticated user by using getSession
                                            var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
                                            user.getSession(function (err, result) {
                                                return __awaiter(_this, void 0, void 0, function () {
                                                    var cleanUpError_7;
                                                    var _this = this;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                if (!err) return [3 /*break*/, 5];
                                                                Auth_logger.debug('failed to get the user session', err);
                                                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];
                                                                _a.label = 1;
                                                            case 1:
                                                                _a.trys.push([1, 3, , 4]);
                                                                return [4 /*yield*/, this.cleanUpInvalidSession(user)];
                                                            case 2:
                                                                _a.sent();
                                                                return [3 /*break*/, 4];
                                                            case 3:
                                                                cleanUpError_7 = _a.sent();
                                                                rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_7.message));
                                                                return [2 /*return*/];
                                                            case 4: return [2 /*return*/, rej(err)];
                                                            case 5:
                                                                user.globalSignOut({
                                                                    onSuccess: function (data) {
                                                                        Auth_logger.debug('global sign out success');
                                                                        if (isSignedInHostedUI) {
                                                                            _this.oAuthSignOutRedirect(res, rej);
                                                                        }
                                                                        else {
                                                                            return res();
                                                                        }
                                                                    },
                                                                    onFailure: function (err) {
                                                                        Auth_logger.debug('global sign out failed', err);
                                                                        return rej(err);
                                                                    },
                                                                });
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                });
                                            }, { clientMetadata: clientMetadata });
                                        }
                                        else {
                                            Auth_logger.debug('user sign out', user);
                                            user.signOut(function () {
                                                if (isSignedInHostedUI) {
                                                    _this.oAuthSignOutRedirect(res, rej);
                                                }
                                                else {
                                                    return res();
                                                }
                                            });
                                        }
                                    })];
                            }
                        });
                    });
                };
                AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {
                    var isBrowser = (0, JS/* browserOrNode */.lC)().isBrowser;
                    if (isBrowser) {
                        this.oAuthSignOutRedirectOrReject(reject);
                    }
                    else {
                        this.oAuthSignOutAndResolve(resolve);
                    }
                };
                AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {
                    this._oAuthHandler.signOut();
                    resolve();
                };
                AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {
                    this._oAuthHandler.signOut(); // this method redirects url
                    // App should be redirected to another url otherwise it will reject
                    setTimeout(function () { return reject(Error('Signout timeout fail')); }, 3000);
                };
                /**
                 * Sign out method
                 * @
                 * @return - A promise resolved if success
                 */
                AuthClass.prototype.signOut = function (opts) {
                    return __awaiter(this, void 0, void 0, function () {
                        var e_12, user;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.cleanCachedItems()];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    e_12 = _a.sent();
                                    Auth_logger.debug('failed to clear cached items');
                                    return [3 /*break*/, 3];
                                case 3:
                                    if (!this.userPool) return [3 /*break*/, 7];
                                    user = this.userPool.getCurrentUser();
                                    if (!user) return [3 /*break*/, 5];
                                    return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];
                                case 4:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    Auth_logger.debug('no current Cognito user');
                                    _a.label = 6;
                                case 6: return [3 /*break*/, 8];
                                case 7:
                                    Auth_logger.debug('no Cognito User pool');
                                    _a.label = 8;
                                case 8:
                                    /**
                                     * Note for future refactor - no reliable way to get username with
                                     * Cognito User Pools vs Identity when federating with Social Providers
                                     * This is why we need a well structured session object that can be inspected
                                     * and information passed back in the message below for Hub dispatch
                                     */
                                    Auth_dispatchAuthEvent('signOut', this.user, "A user has been signed out");
                                    this.user = null;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                AuthClass.prototype.cleanCachedItems = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // clear cognito cached item
                                    return [4 /*yield*/, this.Credentials.clear()];
                                case 1:
                                    // clear cognito cached item
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Change a password for an authenticated user
                 * @param {Object} user - The CognitoUser object
                 * @param {String} oldPassword - the current password
                 * @param {String} newPassword - the requested new password
                 * @return - A promise resolves if success
                 */
                AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {
                    var _this = this;
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    return new Promise(function (resolve, reject) {
                        _this.userSession(user).then(function (session) {
                            user.changePassword(oldPassword, newPassword, function (err, data) {
                                if (err) {
                                    Auth_logger.debug('change password failure', err);
                                    return reject(err);
                                }
                                else {
                                    return resolve(data);
                                }
                            }, clientMetadata);
                        });
                    });
                };
                /**
                 * Initiate a forgot password request
                 * @param {String} username - the username to change password
                 * @return - A promise resolves if success
                 */
                AuthClass.prototype.forgotPassword = function (username, clientMetadata) {
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    if (!username) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
                    }
                    var user = this.createCognitoUser(username);
                    return new Promise(function (resolve, reject) {
                        user.forgotPassword({
                            onSuccess: function () {
                                resolve();
                                return;
                            },
                            onFailure: function (err) {
                                Auth_logger.debug('forgot password failure', err);
                                Auth_dispatchAuthEvent('forgotPassword_failure', err, username + " forgotPassword failed");
                                reject(err);
                                return;
                            },
                            inputVerificationCode: function (data) {
                                Auth_dispatchAuthEvent('forgotPassword', user, username + " has initiated forgot password flow");
                                resolve(data);
                                return;
                            },
                        }, clientMetadata);
                    });
                };
                /**
                 * Confirm a new password using a confirmation Code
                 * @param {String} username - The username
                 * @param {String} code - The confirmation code
                 * @param {String} password - The new password
                 * @return - A promise that resolves if success
                 */
                AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {
                    if (clientMetadata === void 0) { clientMetadata = this._config.clientMetadata; }
                    if (!this.userPool) {
                        return this.rejectNoUserPool();
                    }
                    if (!username) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
                    }
                    if (!code) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
                    }
                    if (!password) {
                        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
                    }
                    var user = this.createCognitoUser(username);
                    return new Promise(function (resolve, reject) {
                        user.confirmPassword(code, password, {
                            onSuccess: function (success) {
                                Auth_dispatchAuthEvent('forgotPasswordSubmit', user, username + " forgotPasswordSubmit successful");
                                resolve(success);
                                return;
                            },
                            onFailure: function (err) {
                                Auth_dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + " forgotPasswordSubmit failed");
                                reject(err);
                                return;
                            },
                        }, clientMetadata);
                    });
                };
                /**
                 * Get user information
                 * @async
                 * @return {Object }- current User's information
                 */
                AuthClass.prototype.currentUserInfo = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var source, user, attributes, userAttrs, credentials, e_13, info, err_2, user;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    source = this.Credentials.getCredSource();
                                    if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];
                                    return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {
                                        return Auth_logger.error(err);
                                    })];
                                case 1:
                                    user = _a.sent();
                                    if (!user) {
                                        return [2 /*return*/, null];
                                    }
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 8, , 9]);
                                    return [4 /*yield*/, this.userAttributes(user)];
                                case 3:
                                    attributes = _a.sent();
                                    userAttrs = this.attributesToObject(attributes);
                                    credentials = null;
                                    _a.label = 4;
                                case 4:
                                    _a.trys.push([4, 6, , 7]);
                                    return [4 /*yield*/, this.currentCredentials()];
                                case 5:
                                    credentials = _a.sent();
                                    return [3 /*break*/, 7];
                                case 6:
                                    e_13 = _a.sent();
                                    Auth_logger.debug('Failed to retrieve credentials while getting current user info', e_13);
                                    return [3 /*break*/, 7];
                                case 7:
                                    info = {
                                        id: credentials ? credentials.identityId : undefined,
                                        username: user.getUsername(),
                                        attributes: userAttrs,
                                    };
                                    return [2 /*return*/, info];
                                case 8:
                                    err_2 = _a.sent();
                                    Auth_logger.error('currentUserInfo error', err_2);
                                    return [2 /*return*/, {}];
                                case 9:
                                    if (source === 'federated') {
                                        user = this.user;
                                        return [2 /*return*/, user ? user : {}];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {
                    return __awaiter(this, void 0, void 0, function () {
                        var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!this._config.identityPoolId && !this._config.userPoolId) {
                                        throw new Error("Federation requires either a User Pool or Identity Pool in config");
                                    }
                                    // Ensure backwards compatability
                                    if (typeof providerOrOptions === 'undefined') {
                                        if (this._config.identityPoolId && !this._config.userPoolId) {
                                            throw new Error("Federation with Identity Pools requires tokens passed as arguments");
                                        }
                                    }
                                    if (!(isFederatedSignInOptions(providerOrOptions) ||
                                        isFederatedSignInOptionsCustom(providerOrOptions) ||
                                        hasCustomState(providerOrOptions) ||
                                        typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];
                                    options = providerOrOptions || {
                                        provider: CognitoHostedUIIdentityProvider.Cognito,
                                    };
                                    provider = isFederatedSignInOptions(options)
                                        ? options.provider
                                        : options.customProvider;
                                    customState = isFederatedSignInOptions(options)
                                        ? options.customState
                                        : options.customState;
                                    if (this._config.userPoolId) {
                                        client_id = isCognitoHostedOpts(this._config.oauth)
                                            ? this._config.userPoolWebClientId
                                            : this._config.oauth.clientID;
                                        redirect_uri = isCognitoHostedOpts(this._config.oauth)
                                            ? this._config.oauth.redirectSignIn
                                            : this._config.oauth.redirectUri;
                                        this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);
                                    }
                                    return [3 /*break*/, 4];
                                case 1:
                                    provider = providerOrOptions;
                                    // To check if the user is already logged in
                                    try {
                                        loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);
                                        if (loggedInUser) {
                                            Auth_logger.warn("There is already a signed in user: " + loggedInUser + " in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.");
                                        }
                                    }
                                    catch (e) { }
                                    token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;
                                    return [4 /*yield*/, this.Credentials.set({ provider: provider, token: token, identity_id: identity_id, user: user, expires_at: expires_at }, 'federation')];
                                case 2:
                                    credentials = _a.sent();
                                    return [4 /*yield*/, this.currentAuthenticatedUser()];
                                case 3:
                                    currentUser = _a.sent();
                                    Auth_dispatchAuthEvent('signIn', currentUser, "A user " + currentUser.username + " has been signed in");
                                    Auth_logger.debug('federated sign in credentials', credentials);
                                    return [2 /*return*/, credentials];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Used to complete the OAuth flow with or without the Cognito Hosted UI
                 * @param {String} URL - optional parameter for customers to pass in the response URL
                 */
                AuthClass.prototype._handleAuthResponse = function (URL) {
                    return __awaiter(this, void 0, void 0, function () {
                        var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_3;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (this.oAuthFlowInProgress) {
                                        Auth_logger.debug("Skipping URL " + URL + " current flow in progress");
                                        return [2 /*return*/];
                                    }
                                    _b.label = 1;
                                case 1:
                                    _b.trys.push([1, , 8, 9]);
                                    this.oAuthFlowInProgress = true;
                                    if (!this._config.userPoolId) {
                                        throw new Error("OAuth responses require a User Pool defined in config");
                                    }
                                    Auth_dispatchAuthEvent('parsingCallbackUrl', { url: URL }, "The callback url is being parsed");
                                    currentUrl = URL || ((0, JS/* browserOrNode */.lC)().isBrowser ? window.location.href : '');
                                    hasCodeOrError = !!((0, url/* parse */.Qc)(currentUrl).query || '')
                                        .split('&')
                                        .map(function (entry) { return entry.split('='); })
                                        .find(function (_a) {
                                            var _b = __read(_a, 1), k = _b[0];
                                            return k === 'code' || k === 'error';
                                        });
                                    hasTokenOrError = !!((0, url/* parse */.Qc)(currentUrl).hash || '#')
                                        .substr(1)
                                        .split('&')
                                        .map(function (entry) { return entry.split('='); })
                                        .find(function (_a) {
                                            var _b = __read(_a, 1), k = _b[0];
                                            return k === 'access_token' || k === 'error';
                                        });
                                    if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];
                                    this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');
                                    _b.label = 2;
                                case 2:
                                    _b.trys.push([2, 6, , 7]);
                                    return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];
                                case 3:
                                    _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;
                                    session = new es/* CognitoUserSession */.MZ({
                                        IdToken: new es/* CognitoIdToken */.xk({ IdToken: idToken }),
                                        RefreshToken: new es/* CognitoRefreshToken */.bR({
                                            RefreshToken: refreshToken,
                                        }),
                                        AccessToken: new es/* CognitoAccessToken */.ZA({
                                            AccessToken: accessToken,
                                        }),
                                    });
                                    credentials = void 0;
                                    if (!this._config.identityPoolId) return [3 /*break*/, 5];
                                    return [4 /*yield*/, this.Credentials.set(session, 'session')];
                                case 4:
                                    credentials = _b.sent();
                                    Auth_logger.debug('AWS credentials', credentials);
                                    _b.label = 5;
                                case 5:
                                    isCustomStateIncluded = /-/.test(state);
                                    currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);
                                    // This calls cacheTokens() in Cognito SDK
                                    currentUser.setSignInUserSession(session);
                                    if (window && typeof window.history !== 'undefined') {
                                        window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                                    }
                                    Auth_dispatchAuthEvent('signIn', currentUser, "A user " + currentUser.getUsername() + " has been signed in");
                                    Auth_dispatchAuthEvent('cognitoHostedUI', currentUser, "A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI");
                                    if (isCustomStateIncluded) {
                                        customState = state.split('-').splice(1).join('-');
                                        Auth_dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), "State for user " + currentUser.getUsername());
                                    }
                                    //#endregion
                                    return [2 /*return*/, credentials];
                                case 6:
                                    err_3 = _b.sent();
                                    Auth_logger.debug('Error in cognito hosted auth response', err_3);
                                    // Just like a successful handling of `?code`, replace the window history to "dispose" of the `code`.
                                    // Otherwise, reloading the page will throw errors as the `code` has already been spent.
                                    if (window && typeof window.history !== 'undefined') {
                                        window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                                    }
                                    Auth_dispatchAuthEvent('signIn_failure', err_3, "The OAuth response flow failed");
                                    Auth_dispatchAuthEvent('cognitoHostedUI_failure', err_3, "A failure occurred when returning to the Cognito Hosted UI");
                                    Auth_dispatchAuthEvent('customState_failure', err_3, "A failure occurred when returning state");
                                    return [3 /*break*/, 7];
                                case 7: return [3 /*break*/, 9];
                                case 8:
                                    this.oAuthFlowInProgress = false;
                                    return [7 /*endfinally*/];
                                case 9: return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * Compact version of credentials
                 * @param {Object} credentials
                 * @return {Object} - Credentials
                 */
                AuthClass.prototype.essentialCredentials = function (credentials) {
                    return {
                        accessKeyId: credentials.accessKeyId,
                        sessionToken: credentials.sessionToken,
                        secretAccessKey: credentials.secretAccessKey,
                        identityId: credentials.identityId,
                        authenticated: credentials.authenticated,
                    };
                };
                AuthClass.prototype.attributesToObject = function (attributes) {
                    var _this = this;
                    var obj = {};
                    if (attributes) {
                        attributes.map(function (attribute) {
                            if (attribute.Name === 'email_verified' ||
                                attribute.Name === 'phone_number_verified') {
                                obj[attribute.Name] =
                                    _this.isTruthyString(attribute.Value) || attribute.Value === true;
                            }
                            else {
                                obj[attribute.Name] = attribute.Value;
                            }
                        });
                    }
                    return obj;
                };
                AuthClass.prototype.isTruthyString = function (value) {
                    return (typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true');
                };
                AuthClass.prototype.createCognitoUser = function (username) {
                    var userData = {
                        Username: username,
                        Pool: this.userPool,
                    };
                    userData.Storage = this._storage;
                    var authenticationFlowType = this._config.authenticationFlowType;
                    var user = new es/* CognitoUser */.ws(userData);
                    if (authenticationFlowType) {
                        user.setAuthenticationFlowType(authenticationFlowType);
                    }
                    return user;
                };
                AuthClass.prototype._isValidAuthStorage = function (obj) {
                    // We need to check if the obj has the functions of Storage
                    return (!!obj &&
                        typeof obj.getItem === 'function' &&
                        typeof obj.setItem === 'function' &&
                        typeof obj.removeItem === 'function' &&
                        typeof obj.clear === 'function');
                };
                AuthClass.prototype.noUserPoolErrorHandler = function (config) {
                    if (config) {
                        if (!config.userPoolId || !config.identityPoolId) {
                            return AuthErrorTypes.MissingAuthConfig;
                        }
                    }
                    return AuthErrorTypes.NoConfig;
                };
                AuthClass.prototype.rejectAuthError = function (type) {
                    return Promise.reject(new AuthError(type));
                };
                AuthClass.prototype.rejectNoUserPool = function () {
                    var type = this.noUserPoolErrorHandler(this._config);
                    return Promise.reject(new NoUserPoolError(type));
                };
                AuthClass.prototype.rememberDevice = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var currUser, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.currentUserPoolUser()];
                                case 1:
                                    currUser = _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_2 = _a.sent();
                                    Auth_logger.debug('The user is not authenticated by the error', error_2);
                                    return [2 /*return*/, Promise.reject('The user is not authenticated')];
                                case 3:
                                    currUser.getCachedDeviceKeyAndPassword();
                                    return [2 /*return*/, new Promise(function (res, rej) {
                                        currUser.setDeviceStatusRemembered({
                                            onSuccess: function (data) {
                                                res(data);
                                            },
                                            onFailure: function (err) {
                                                if (err.code === 'InvalidParameterException') {
                                                    rej(new AuthError(AuthErrorTypes.DeviceConfig));
                                                }
                                                else if (err.code === 'NetworkError') {
                                                    rej(new AuthError(AuthErrorTypes.NetworkError));
                                                }
                                                else {
                                                    rej(err);
                                                }
                                            },
                                        });
                                    })];
                            }
                        });
                    });
                };
                AuthClass.prototype.forgetDevice = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var currUser, error_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.currentUserPoolUser()];
                                case 1:
                                    currUser = _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_3 = _a.sent();
                                    Auth_logger.debug('The user is not authenticated by the error', error_3);
                                    return [2 /*return*/, Promise.reject('The user is not authenticated')];
                                case 3:
                                    currUser.getCachedDeviceKeyAndPassword();
                                    return [2 /*return*/, new Promise(function (res, rej) {
                                        currUser.forgetDevice({
                                            onSuccess: function (data) {
                                                res(data);
                                            },
                                            onFailure: function (err) {
                                                if (err.code === 'InvalidParameterException') {
                                                    rej(new AuthError(AuthErrorTypes.DeviceConfig));
                                                }
                                                else if (err.code === 'NetworkError') {
                                                    rej(new AuthError(AuthErrorTypes.NetworkError));
                                                }
                                                else {
                                                    rej(err);
                                                }
                                            },
                                        });
                                    })];
                            }
                        });
                    });
                };
                AuthClass.prototype.fetchDevices = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var currUser, error_4;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, this.currentUserPoolUser()];
                                case 1:
                                    currUser = _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_4 = _a.sent();
                                    Auth_logger.debug('The user is not authenticated by the error', error_4);
                                    throw new Error('The user is not authenticated');
                                case 3:
                                    currUser.getCachedDeviceKeyAndPassword();
                                    return [2 /*return*/, new Promise(function (res, rej) {
                                        var cb = {
                                            onSuccess: function (data) {
                                                var deviceList = data.Devices.map(function (device) {
                                                    var deviceName = device.DeviceAttributes.find(function (_a) {
                                                        var Name = _a.Name;
                                                        return Name === 'device_name';
                                                    }) || {};
                                                    var deviceInfo = {
                                                        id: device.DeviceKey,
                                                        name: deviceName.Value,
                                                    };
                                                    return deviceInfo;
                                                });
                                                res(deviceList);
                                            },
                                            onFailure: function (err) {
                                                if (err.code === 'InvalidParameterException') {
                                                    rej(new AuthError(AuthErrorTypes.DeviceConfig));
                                                }
                                                else if (err.code === 'NetworkError') {
                                                    rej(new AuthError(AuthErrorTypes.NetworkError));
                                                }
                                                else {
                                                    rej(err);
                                                }
                                            },
                                        };
                                        currUser.listDevices(MAX_DEVICES, null, cb);
                                    })];
                            }
                        });
                    });
                };
                return AuthClass;
            }());

            var Auth = new AuthClass(null);
            Amplify/* Amplify */.d.register(Auth);
            //# sourceMappingURL=Auth.js.map

            /***/
}),

    /***/ 56:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                c: () => (/* binding */ Credentials)
            });

            // UNUSED EXPORTS: CredentialsClass

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js + 1 modules
            var ConsoleLogger = __webpack_require__(9719);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
            var StorageHelper = __webpack_require__(6648);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/JS.js
            var JS = __webpack_require__(9222);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
            var Retry = __webpack_require__(7262);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
            var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0



            var logger = new ConsoleLogger/* ConsoleLogger */.k('CognitoCredentials');
            var waitForInit = new Promise(function (res, rej) {
                if (!(0, JS/* browserOrNode */.lC)().isBrowser) {
                    logger.debug('not in the browser, directly resolved');
                    return res();
                }
                var ga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;
                if (ga) {
                    logger.debug('google api already loaded');
                    return res();
                }
                else {
                    setTimeout(function () {
                        return res();
                    }, 2000);
                }
            });
            var GoogleOAuth = /** @class */ (function () {
                function GoogleOAuth() {
                    this.initialized = false;
                    this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
                    this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
                }
                GoogleOAuth.prototype.refreshGoogleToken = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this.initialized) return [3 /*break*/, 2];
                                    logger.debug('need to wait for the Google SDK loaded');
                                    return [4 /*yield*/, waitForInit];
                                case 1:
                                    _a.sent();
                                    this.initialized = true;
                                    logger.debug('finish waiting');
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._refreshGoogleTokenImpl()];
                            }
                        });
                    });
                };
                GoogleOAuth.prototype._refreshGoogleTokenImpl = function () {
                    var ga = null;
                    if ((0, JS/* browserOrNode */.lC)().isBrowser)
                        ga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;
                    if (!ga) {
                        logger.debug('no gapi auth2 available');
                        return Promise.reject('no gapi auth2 available');
                    }
                    return new Promise(function (res, rej) {
                        ga.getAuthInstance()
                            .then(function (googleAuth) {
                                if (!googleAuth) {
                                    logger.debug('google Auth undefined');
                                    rej(new Retry/* NonRetryableError */.V2('google Auth undefined'));
                                }
                                var googleUser = googleAuth.currentUser.get();
                                // refresh the token
                                if (googleUser.isSignedIn()) {
                                    logger.debug('refreshing the google access token');
                                    googleUser
                                        .reloadAuthResponse()
                                        .then(function (authResponse) {
                                            var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
                                            res({ token: id_token, expires_at: expires_at });
                                        })
                                        .catch(function (err) {
                                            if (err && err.error === 'network_error') {
                                                // Not using NonRetryableError so handler will be retried
                                                rej('Network error reloading google auth response');
                                            }
                                            else {
                                                rej(new Retry/* NonRetryableError */.V2('Failed to reload google auth response'));
                                            }
                                        });
                                }
                                else {
                                    rej(new Retry/* NonRetryableError */.V2('User is not signed in with Google'));
                                }
                            })
                            .catch(function (err) {
                                logger.debug('Failed to refresh google token', err);
                                rej(new Retry/* NonRetryableError */.V2('Failed to refresh google token'));
                            });
                    });
                };
                return GoogleOAuth;
            }());


            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
            var FacebookOAuth_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var FacebookOAuth_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0



            var FacebookOAuth_logger = new ConsoleLogger/* ConsoleLogger */.k('CognitoCredentials');
            var FacebookOAuth_waitForInit = new Promise(function (res, rej) {
                if (!(0, JS/* browserOrNode */.lC)().isBrowser) {
                    FacebookOAuth_logger.debug('not in the browser, directly resolved');
                    return res();
                }
                var fb = window['FB'];
                if (fb) {
                    FacebookOAuth_logger.debug('FB SDK already loaded');
                    return res();
                }
                else {
                    setTimeout(function () {
                        return res();
                    }, 2000);
                }
            });
            var FacebookOAuth = /** @class */ (function () {
                function FacebookOAuth() {
                    this.initialized = false;
                    this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
                    this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
                }
                FacebookOAuth.prototype.refreshFacebookToken = function () {
                    return FacebookOAuth_awaiter(this, void 0, void 0, function () {
                        return FacebookOAuth_generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!!this.initialized) return [3 /*break*/, 2];
                                    FacebookOAuth_logger.debug('need to wait for the Facebook SDK loaded');
                                    return [4 /*yield*/, FacebookOAuth_waitForInit];
                                case 1:
                                    _a.sent();
                                    this.initialized = true;
                                    FacebookOAuth_logger.debug('finish waiting');
                                    _a.label = 2;
                                case 2: return [2 /*return*/, this._refreshFacebookTokenImpl()];
                            }
                        });
                    });
                };
                FacebookOAuth.prototype._refreshFacebookTokenImpl = function () {
                    var fb = null;
                    if ((0, JS/* browserOrNode */.lC)().isBrowser)
                        fb = window['FB'];
                    if (!fb) {
                        var errorMessage = 'no fb sdk available';
                        FacebookOAuth_logger.debug(errorMessage);
                        return Promise.reject(new Retry/* NonRetryableError */.V2(errorMessage));
                    }
                    return new Promise(function (res, rej) {
                        fb.getLoginStatus(function (fbResponse) {
                            if (!fbResponse || !fbResponse.authResponse) {
                                var errorMessage = 'no response from facebook when refreshing the jwt token';
                                FacebookOAuth_logger.debug(errorMessage);
                                // There is no definitive indication for a network error in
                                // fbResponse, so we are treating it as an invalid token.
                                rej(new Retry/* NonRetryableError */.V2(errorMessage));
                            }
                            else {
                                var response = fbResponse.authResponse;
                                var accessToken = response.accessToken, expiresIn = response.expiresIn;
                                var date = new Date();
                                var expires_at = expiresIn * 1000 + date.getTime();
                                if (!accessToken) {
                                    var errorMessage = 'the jwtToken is undefined';
                                    FacebookOAuth_logger.debug(errorMessage);
                                    rej(new Retry/* NonRetryableError */.V2(errorMessage));
                                }
                                res({
                                    token: accessToken,
                                    expires_at: expires_at,
                                });
                            }
                        }, { scope: 'public_profile,email' });
                    });
                };
                return FacebookOAuth;
            }());


            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0


            var OAuthHelper_GoogleOAuth = new GoogleOAuth();
            var OAuthHelper_FacebookOAuth = new FacebookOAuth();

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Amplify.js
            var Amplify = __webpack_require__(5387);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/endpoints/partitions.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            /**
             * Default partition for AWS services. This is used when the region is not provided or the region is not recognized.
             *
             * @internal
             */
            var defaultPartition = {
                id: 'aws',
                outputs: {
                    dnsSuffix: 'amazonaws.com',
                },
                regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
                regions: ['aws-global'],
            };
            /**
             * This data is adapted from the partition file from AWS SDK shared utilities but remove some contents for bundle size
             * concern. Information removed are `dualStackDnsSuffix`, `supportDualStack`, `supportFIPS`, restricted partitions, and
             * list of regions for each partition other than global regions.
             *
             * * Ref: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints
             * * Ref: https://github.com/aws/aws-sdk-js-v3/blob/0201baef03c2379f1f6f7150b9d401d4b230d488/packages/util-endpoints/src/lib/aws/partitions.json#L1
             *
             * @internal
             */
            var partitionsInfo = {
                partitions: [
                    defaultPartition,
                    {
                        id: 'aws-cn',
                        outputs: {
                            dnsSuffix: 'amazonaws.com.cn',
                        },
                        regionRegex: '^cn\\-\\w+\\-\\d+$',
                        regions: ['aws-cn-global'],
                    },
                ],
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/endpoints/getDnsSuffix.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var __values = (undefined && undefined.__values) || function (o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            };

            /**
             * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will
             * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in
             * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.
             *
             * @param region
             * @returns The DNS suffix
             *
             * @internal
             */
            var getDnsSuffix = function (region) {
                var e_1, _a;
                var partitions = partitionsInfo.partitions;
                try {
                    for (var partitions_1 = __values(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {
                        var _b = partitions_1_1.value, regions = _b.regions, outputs = _b.outputs, regionRegex = _b.regionRegex;
                        var regex = new RegExp(regionRegex);
                        if (regions.includes(region) || regex.test(region)) {
                            return outputs.dnsSuffix;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return)) _a.call(partitions_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return defaultPartition.outputs.dnsSuffix;
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/middleware.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var __assign = (undefined && undefined.__assign) || function () {
                __assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            var middleware_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var middleware_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            var DEFAULT_RETRY_ATTEMPTS = 3;
            /**
             * Retry middleware
             */
            var retryMiddleware = function (_a) {
                var _b = _a.maxAttempts, maxAttempts = _b === void 0 ? DEFAULT_RETRY_ATTEMPTS : _b, retryDecider = _a.retryDecider, computeDelay = _a.computeDelay, abortSignal = _a.abortSignal;
                if (maxAttempts < 1) {
                    throw new Error('maxAttempts must be greater than 0');
                }
                return function (next, context) {
                    return function retryMiddleware(request) {
                        var _a;
                        return middleware_awaiter(this, void 0, void 0, function () {
                            var error, attemptsCount, response, handleTerminalErrorOrResponse, e_1, delay;
                            return middleware_generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        attemptsCount = (_a = context.attemptsCount) !== null && _a !== void 0 ? _a : 0;
                                        handleTerminalErrorOrResponse = function () {
                                            if (response) {
                                                addOrIncrementMetadataAttempts(response, attemptsCount);
                                                return response;
                                            }
                                            else {
                                                addOrIncrementMetadataAttempts(error, attemptsCount);
                                                throw error;
                                            }
                                        };
                                        _b.label = 1;
                                    case 1:
                                        if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts)) return [3 /*break*/, 11];
                                        _b.label = 2;
                                    case 2:
                                        _b.trys.push([2, 4, , 5]);
                                        return [4 /*yield*/, next(request)];
                                    case 3:
                                        response = _b.sent();
                                        error = undefined;
                                        return [3 /*break*/, 5];
                                    case 4:
                                        e_1 = _b.sent();
                                        error = e_1;
                                        response = undefined;
                                        return [3 /*break*/, 5];
                                    case 5:
                                        // context.attemptsCount may be updated after calling next handler which may retry the request by itself.
                                        attemptsCount =
                                            context.attemptsCount > attemptsCount
                                                ? context.attemptsCount
                                                : attemptsCount + 1;
                                        context.attemptsCount = attemptsCount;
                                        return [4 /*yield*/, retryDecider(response, error)];
                                    case 6:
                                        if (!_b.sent()) return [3 /*break*/, 9];
                                        if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts)) return [3 /*break*/, 8];
                                        delay = computeDelay(attemptsCount);
                                        return [4 /*yield*/, cancellableSleep(delay, abortSignal)];
                                    case 7:
                                        _b.sent();
                                        _b.label = 8;
                                    case 8: return [3 /*break*/, 1];
                                    case 9: return [2 /*return*/, handleTerminalErrorOrResponse()];
                                    case 10: return [3 /*break*/, 1];
                                    case 11:
                                        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
                                            throw new Error('Request aborted.');
                                        }
                                        else {
                                            return [2 /*return*/, handleTerminalErrorOrResponse()];
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                };
            };
            var cancellableSleep = function (timeoutMs, abortSignal) {
                if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
                    return Promise.resolve();
                }
                var timeoutId;
                var sleepPromiseResolveFn;
                var sleepPromise = new Promise(function (resolve) {
                    sleepPromiseResolveFn = resolve;
                    timeoutId = setTimeout(resolve, timeoutMs);
                });
                abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener('abort', function cancelSleep(event) {
                    clearTimeout(timeoutId);
                    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener('abort', cancelSleep);
                    sleepPromiseResolveFn();
                });
                return sleepPromise;
            };
            var addOrIncrementMetadataAttempts = function (nextHandlerOutput, attempts) {
                var _a;
                if (Object.prototype.toString.call(nextHandlerOutput) !== '[object Object]') {
                    return;
                }
                nextHandlerOutput['$metadata'] = __assign(__assign({}, ((_a = nextHandlerOutput['$metadata']) !== null && _a !== void 0 ? _a : {})), { attempts: attempts });
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/middleware/userAgent/middleware.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var userAgent_middleware_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var userAgent_middleware_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            /**
             * Middleware injects user agent string to specified header(default to 'x-amz-user-agent'),
             * if the header is not set already.
             *
             * TODO: incorporate new user agent design
             */
            var userAgentMiddleware = function (_a) {
                var _b = _a.userAgentHeader, userAgentHeader = _b === void 0 ? 'x-amz-user-agent' : _b, _c = _a.userAgentValue, userAgentValue = _c === void 0 ? '' : _c;
                return function (next) {
                    return function userAgentMiddleware(request) {
                        return userAgent_middleware_awaiter(this, void 0, void 0, function () {
                            var result, headerName, response;
                            return userAgent_middleware_generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(userAgentValue.trim().length === 0)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, next(request)];
                                    case 1:
                                        result = _a.sent();
                                        return [2 /*return*/, result];
                                    case 2:
                                        headerName = userAgentHeader.toLowerCase();
                                        request.headers[headerName] = request.headers[headerName]
                                            ? "".concat(request.headers[headerName], " ").concat(userAgentValue)
                                            : userAgentValue;
                                        return [4 /*yield*/, next(request)];
                                    case 3:
                                        response = _a.sent();
                                        return [2 /*return*/, response];
                                }
                            });
                        });
                    };
                };
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/internal/composeTransferHandler.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            /**
             * Compose a transfer handler with a core transfer handler and a list of middleware.
             * @param coreHandler Core transfer handler
             * @param middleware	List of middleware
             * @returns A transfer handler whose option type is the union of the core
             * 	transfer handler's option type and the middleware's option type.
             * @internal
             */
            var composeTransferHandler = function (coreHandler, middleware) {
                return function (request, options) {
                    var context = {};
                    var composedHandler = function (request) { return coreHandler(request, options); };
                    for (var i = middleware.length - 1; i >= 0; i--) {
                        var m = middleware[i];
                        var resolvedMiddleware = m(options);
                        composedHandler = resolvedMiddleware(composedHandler, context);
                    }
                    return composedHandler(request);
                };
            };

            // EXTERNAL MODULE: ./node_modules/isomorphic-unfetch/browser.js
            var browser = __webpack_require__(204);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/utils/memoization.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            /**
             * Cache the payload of a response body. It allows multiple calls to the body,
             * for example, when reading the body in both retry decider and error deserializer.
             * Caching body is allowed here because we call the body accessor(blob(), json(),
             * etc.) when body is small or streaming implementation is not available(RN).
             *
             * @internal
             */
            var withMemoization = function (payloadAccessor) {
                var cached;
                return function () {
                    if (!cached) {
                        // Explicitly not awaiting. Intermediate await would add overhead and
                        // introduce a possible race in the event that this wrapper is called
                        // again before the first `payloadAccessor` call resolves.
                        cached = payloadAccessor();
                    }
                    return cached;
                };
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/handlers/fetch.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var fetch_assign = (undefined && undefined.__assign) || function () {
                fetch_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return fetch_assign.apply(this, arguments);
            };
            var fetch_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var fetch_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            // TODO: remove this dependency in v6

            var shouldSendBody = function (method) {
                return !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());
            };
            var fetchTransferHandler = function (_a, _b) {
                var url = _a.url, method = _a.method, headers = _a.headers, body = _a.body;
                var abortSignal = _b.abortSignal;
                return fetch_awaiter(void 0, void 0, void 0, function () {
                    var resp, e_1, responseHeaders, httpResponse, bodyWithMixin;
                    var _c, _d;
                    return fetch_generator(this, function (_e) {
                        switch (_e.label) {
                            case 0:
                                _e.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, fetch(url, {
                                    method: method,
                                    headers: headers,
                                    body: shouldSendBody(method) ? body : undefined,
                                    signal: abortSignal,
                                })];
                            case 1:
                                resp = _e.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                e_1 = _e.sent();
                                // TODO: needs to revise error handling in v6
                                // For now this is a thin wrapper over original fetch error similar to cognito-identity-js package.
                                // Ref: https://github.com/aws-amplify/amplify-js/blob/4fbc8c0a2be7526aab723579b4c95b552195a80b/packages/amazon-cognito-identity-js/src/Client.js#L103-L108
                                if (e_1 instanceof TypeError) {
                                    throw new Error('Network error');
                                }
                                throw e_1;
                            case 3:
                                responseHeaders = {};
                                (_c = resp.headers) === null || _c === void 0 ? void 0 : _c.forEach(function (value, key) {
                                    responseHeaders[key.toLowerCase()] = value;
                                });
                                httpResponse = {
                                    statusCode: resp.status,
                                    headers: responseHeaders,
                                    body: null,
                                };
                                bodyWithMixin = Object.assign((_d = resp.body) !== null && _d !== void 0 ? _d : {}, {
                                    text: withMemoization(function () { return resp.text(); }),
                                    blob: withMemoization(function () { return resp.blob(); }),
                                    json: withMemoization(function () { return resp.json(); }),
                                });
                                return [2 /*return*/, fetch_assign(fetch_assign({}, httpResponse), { body: bodyWithMixin })];
                        }
                    });
                });
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/handlers/unauthenticated.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0




            var unauthenticatedHandler = composeTransferHandler(fetchTransferHandler, [userAgentMiddleware, retryMiddleware]);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/serde/responseInfo.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var responseInfo_assign = (undefined && undefined.__assign) || function () {
                responseInfo_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return responseInfo_assign.apply(this, arguments);
            };
            var parseMetadata = function (response) {
                var _a, _b;
                var headers = response.headers, statusCode = response.statusCode;
                return responseInfo_assign(responseInfo_assign({}, (isMetadataBearer(response) ? response.$metadata : {})), { httpStatusCode: statusCode, requestId: (_b = (_a = headers['x-amzn-requestid']) !== null && _a !== void 0 ? _a : headers['x-amzn-request-id']) !== null && _b !== void 0 ? _b : headers['x-amz-request-id'], extendedRequestId: headers['x-amz-id-2'], cfId: headers['x-amz-cf-id'] });
            };
            var isMetadataBearer = function (response) {
                return typeof (response === null || response === void 0 ? void 0 : response['$metadata']) === 'object';
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/serde/json.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var json_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var json_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            var __read = (undefined && undefined.__read) || function (o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            };

            /**
             * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)
             */
            /**
             * Error parser for AWS JSON protocol.
             */
            var parseJsonError = function (response) {
                return json_awaiter(void 0, void 0, void 0, function () {
                    var body, sanitizeErrorCode, code, message, error;
                    var _a, _b, _c, _d, _e;
                    return json_generator(this, function (_f) {
                        switch (_f.label) {
                            case 0:
                                if (!response || response.statusCode < 300) {
                                    return [2 /*return*/];
                                }
                                return [4 /*yield*/, parseJsonBody(response)];
                            case 1:
                                body = _f.sent();
                                sanitizeErrorCode = function (rawValue) {
                                    var _a = __read(rawValue.toString().split(/[\,\:]+/), 1), cleanValue = _a[0];
                                    if (cleanValue.includes('#')) {
                                        return cleanValue.split('#')[1];
                                    }
                                    return cleanValue;
                                };
                                code = sanitizeErrorCode((_c = (_b = (_a = response.headers['x-amzn-errortype']) !== null && _a !== void 0 ? _a : body.code) !== null && _b !== void 0 ? _b : body.__type) !== null && _c !== void 0 ? _c : 'UnknownError');
                                message = (_e = (_d = body.message) !== null && _d !== void 0 ? _d : body.Message) !== null && _e !== void 0 ? _e : 'Unknown error';
                                error = new Error(message);
                                return [2 /*return*/, Object.assign(error, {
                                    name: code,
                                    $metadata: parseMetadata(response),
                                })];
                        }
                    });
                });
            };
            /**
             * Parse JSON response body to JavaScript object.
             */
            var parseJsonBody = function (response) {
                return json_awaiter(void 0, void 0, void 0, function () {
                    var output;
                    return json_generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!response.body) {
                                    throw new Error('Missing response payload');
                                }
                                return [4 /*yield*/, response.body.json()];
                            case 1:
                                output = _a.sent();
                                return [2 /*return*/, Object.assign(output, {
                                    $metadata: parseMetadata(response),
                                })];
                        }
                    });
                });
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/isClockSkewError.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            // via https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L8
            var CLOCK_SKEW_ERROR_CODES = [
                'AuthFailure',
                'InvalidSignatureException',
                'RequestExpired',
                'RequestInTheFuture',
                'RequestTimeTooSkewed',
                'SignatureDoesNotMatch',
                'BadRequestException', // API Gateway
            ];
            /**
             * Given an error code, returns true if it is related to a clock skew error.
             *
             * @param errorCode String representation of some error.
             * @returns True if given error is present in `CLOCK_SKEW_ERROR_CODES`, false otherwise.
             *
             * @internal
             */
            var isClockSkewError = function (errorCode) {
                return CLOCK_SKEW_ERROR_CODES.includes(errorCode);
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/defaultRetryDecider.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var defaultRetryDecider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var defaultRetryDecider_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };

            /**
             * Get retry decider function
             * @param errorParser Function to load JavaScript error from HTTP response
             */
            var getRetryDecider = function (errorParser) {
                return function (response, error) {
                    return defaultRetryDecider_awaiter(void 0, void 0, void 0, function () {
                        var errorCode, _a, statusCode;
                        var _b;
                        return defaultRetryDecider_generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    if (!(error !== null && error !== void 0)) return [3 /*break*/, 1];
                                    _a = error;
                                    return [3 /*break*/, 3];
                                case 1: return [4 /*yield*/, errorParser(response)];
                                case 2:
                                    _a = (_c.sent());
                                    _c.label = 3;
                                case 3:
                                    errorCode = ((_b = _a) !== null && _b !== void 0 ? _b : {}).name;
                                    statusCode = response === null || response === void 0 ? void 0 : response.statusCode;
                                    return [2 /*return*/, (isConnectionError(error) ||
                                        isThrottlingError(statusCode, errorCode) ||
                                        isClockSkewError(errorCode) ||
                                        isServerSideError(statusCode, errorCode))];
                            }
                        });
                    });
                };
            };
            // reference: https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L22-L37
            var THROTTLING_ERROR_CODES = [
                'BandwidthLimitExceeded',
                'EC2ThrottledException',
                'LimitExceededException',
                'PriorRequestNotComplete',
                'ProvisionedThroughputExceededException',
                'RequestLimitExceeded',
                'RequestThrottled',
                'RequestThrottledException',
                'SlowDown',
                'ThrottledException',
                'Throttling',
                'ThrottlingException',
                'TooManyRequestsException',
            ];
            var TIMEOUT_ERROR_CODES = [
                'TimeoutError',
                'RequestTimeout',
                'RequestTimeoutException',
            ];
            var isThrottlingError = function (statusCode, errorCode) {
                return statusCode === 429 || THROTTLING_ERROR_CODES.includes(errorCode);
            };
            var isConnectionError = function (error) { return (error === null || error === void 0 ? void 0 : error.name) === 'Network error'; };
            var isServerSideError = function (statusCode, errorCode) {
                return [500, 502, 503, 504].includes(statusCode) ||
                    TIMEOUT_ERROR_CODES.includes(errorCode);
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/jitteredBackoff.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            // TODO: [v6] The separate retry utility is used by Data packages now and will replaced by retry middleware.

            var DEFAULT_MAX_DELAY_MS = 5 * 60 * 1000;
            var jitteredBackoff = function (attempt) {
                var delayFunction = (0, Retry/* jitteredBackoff */.kD)(DEFAULT_MAX_DELAY_MS);
                var delay = delayFunction(attempt);
                // The delayFunction returns false when the delay is greater than the max delay(5 mins).
                // In this case, the retry middleware will delay 5 mins instead, as a ceiling of the delay.
                return delay === false ? DEFAULT_MAX_DELAY_MS : delay;
            };

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/index.js + 1 modules
            var Platform = __webpack_require__(9270);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detectFramework.js + 11 modules
            var detectFramework = __webpack_require__(6488);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/base.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var base_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var base_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };





            /**
             * The service name used to sign requests if the API requires authentication.
             */
            var SERVICE_NAME = 'cognito-identity';
            /**
             * The endpoint resolver function that returns the endpoint URL for a given region.
             */
            var endpointResolver = function (_a) {
                var region = _a.region;
                return ({
                    url: new URL("https://cognito-identity.".concat(region, ".").concat(getDnsSuffix(region))),
                });
            };
            /**
             * A Cognito Identity-specific middleware that disables caching for all requests.
             */
            var disableCacheMiddleware = function () {
                return function (next, context) {
                    return function disableCacheMiddleware(request) {
                        return base_awaiter(this, void 0, void 0, function () {
                            return base_generator(this, function (_a) {
                                request.headers['cache-control'] = 'no-store';
                                return [2 /*return*/, next(request)];
                            });
                        });
                    };
                };
            };
            /**
             * A Cognito Identity-specific transfer handler that does NOT sign requests, and
             * disables caching.
             *
             * @internal
             */
            var cognitoIdentityTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddleware]);
            /**
             * @internal
             */
            var defaultConfig = {
                service: SERVICE_NAME,
                endpointResolver: endpointResolver,
                retryDecider: getRetryDecider(parseJsonError),
                computeDelay: jitteredBackoff,
                userAgentValue: (0, Platform/* getAmplifyUserAgent */.Zm)(),
            };
            (0, detectFramework/* observeFrameworkChanges */.QW)(function () {
                defaultConfig.userAgentValue = (0, Platform/* getAmplifyUserAgent */.Zm)();
            });
            /**
             * @internal
             */
            var getSharedHeaders = function (operation) {
                return ({
                    'content-type': 'application/x-amz-json-1.1',
                    'x-amz-target': "AWSCognitoIdentityService.".concat(operation),
                });
            };
            /**
             * @internal
             */
            var buildHttpRpcRequest = function (_a, headers, body) {
                var url = _a.url;
                return ({
                    headers: headers,
                    url: url,
                    body: body,
                    method: 'POST',
                });
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/clients/internal/composeServiceApi.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var composeServiceApi_assign = (undefined && undefined.__assign) || function () {
                composeServiceApi_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return composeServiceApi_assign.apply(this, arguments);
            };
            var composeServiceApi_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var composeServiceApi_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            var composeServiceApi = function (transferHandler, serializer, deserializer, defaultConfig) {
                return function (config, input) {
                    return composeServiceApi_awaiter(void 0, void 0, void 0, function () {
                        var resolvedConfig, endpoint, request, response;
                        return composeServiceApi_generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    resolvedConfig = composeServiceApi_assign(composeServiceApi_assign({}, defaultConfig), config);
                                    return [4 /*yield*/, resolvedConfig.endpointResolver(resolvedConfig, input)];
                                case 1:
                                    endpoint = _a.sent();
                                    return [4 /*yield*/, serializer(input, endpoint)];
                                case 2:
                                    request = _a.sent();
                                    return [4 /*yield*/, transferHandler(request, composeServiceApi_assign({}, resolvedConfig))];
                                case 3:
                                    response = _a.sent();
                                    return [4 /*yield*/, deserializer(response)];
                                case 4: return [2 /*return*/, _a.sent()];
                            }
                        });
                    });
                };
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/getId.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var getId_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var getId_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };



            var getIdSerializer = function (input, endpoint) {
                var headers = getSharedHeaders('GetId');
                var body = JSON.stringify(input);
                return buildHttpRpcRequest(endpoint, headers, body);
            };
            var getIdDeserializer = function (response) {
                return getId_awaiter(void 0, void 0, void 0, function () {
                    var error, body;
                    return getId_generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(response.statusCode >= 300)) return [3 /*break*/, 2];
                                return [4 /*yield*/, parseJsonError(response)];
                            case 1:
                                error = _a.sent();
                                throw error;
                            case 2: return [4 /*yield*/, parseJsonBody(response)];
                            case 3:
                                body = _a.sent();
                                return [2 /*return*/, {
                                    IdentityId: body.IdentityId,
                                    $metadata: parseMetadata(response),
                                }];
                        }
                    });
                });
            };
            /**
             * @internal
             */
            var getId = composeServiceApi(cognitoIdentityTransferHandler, getIdSerializer, getIdDeserializer, defaultConfig);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/getCredentialsForIdentity.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var getCredentialsForIdentity_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var getCredentialsForIdentity_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };



            var getCredentialsForIdentitySerializer = function (input, endpoint) {
                var headers = getSharedHeaders('GetCredentialsForIdentity');
                var body = JSON.stringify(input);
                return buildHttpRpcRequest(endpoint, headers, body);
            };
            var getCredentialsForIdentityDeserializer = function (response) {
                return getCredentialsForIdentity_awaiter(void 0, void 0, void 0, function () {
                    var error, body;
                    return getCredentialsForIdentity_generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(response.statusCode >= 300)) return [3 /*break*/, 2];
                                return [4 /*yield*/, parseJsonError(response)];
                            case 1:
                                error = _a.sent();
                                throw error;
                            case 2: return [4 /*yield*/, parseJsonBody(response)];
                            case 3:
                                body = _a.sent();
                                return [2 /*return*/, {
                                    IdentityId: body.IdentityId,
                                    Credentials: deserializeCredentials(body.Credentials),
                                    $metadata: parseMetadata(response),
                                }];
                        }
                    });
                });
            };
            var deserializeCredentials = function (output) {
                if (output === void 0) { output = {}; }
                return ({
                    AccessKeyId: output['AccessKeyId'],
                    SecretKey: output['SecretKey'],
                    SessionToken: output['SessionToken'],
                    Expiration: new Date(output['Expiration'] * 1000),
                });
            };
            /**
             * @internal
             */
            var getCredentialsForIdentity = composeServiceApi(cognitoIdentityTransferHandler, getCredentialsForIdentitySerializer, getCredentialsForIdentityDeserializer, defaultConfig);

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/parseAWSExports.js
            var parseAWSExports = __webpack_require__(9820);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Hub.js
            var Hub = __webpack_require__(490);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Credentials.js
            var Credentials_assign = (undefined && undefined.__assign) || function () {
                Credentials_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return Credentials_assign.apply(this, arguments);
            };
            var Credentials_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var Credentials_generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0









            var Credentials_logger = new ConsoleLogger/* ConsoleLogger */.k('Credentials');
            var CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future
            var COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';
            var AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function'
                ? Symbol.for('amplify_default')
                : '@@amplify_default');
            var dispatchCredentialsEvent = function (event, data, message) {
                Hub/* Hub */.X.dispatch('core', { event: event, data: data, message: message }, 'Credentials', AMPLIFY_SYMBOL);
            };
            var CredentialsClass = /** @class */ (function () {
                function CredentialsClass(config) {
                    this._gettingCredPromise = null;
                    this._refreshHandlers = {};
                    // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials
                    this.Auth = undefined;
                    this.configure(config);
                    this._refreshHandlers['google'] = OAuthHelper_GoogleOAuth.refreshGoogleToken;
                    this._refreshHandlers['facebook'] = OAuthHelper_FacebookOAuth.refreshFacebookToken;
                }
                CredentialsClass.prototype.getModuleName = function () {
                    return 'Credentials';
                };
                CredentialsClass.prototype.getCredSource = function () {
                    return this._credentials_source;
                };
                CredentialsClass.prototype.configure = function (config) {
                    if (!config)
                        return this._config || {};
                    this._config = Object.assign({}, this._config, config);
                    var refreshHandlers = this._config.refreshHandlers;
                    // If the developer has provided an object of refresh handlers,
                    // then we can merge the provided handlers with the current handlers.
                    if (refreshHandlers) {
                        this._refreshHandlers = Credentials_assign(Credentials_assign({}, this._refreshHandlers), refreshHandlers);
                    }
                    this._storage = this._config.storage;
                    if (!this._storage) {
                        this._storage = new StorageHelper/* StorageHelper */.c().getStorage();
                    }
                    this._storageSync = Promise.resolve();
                    if (typeof this._storage['sync'] === 'function') {
                        this._storageSync = this._storage['sync']();
                    }
                    dispatchCredentialsEvent('credentials_configured', null, "Credentials has been configured successfully");
                    return this._config;
                };
                CredentialsClass.prototype.get = function () {
                    Credentials_logger.debug('getting credentials');
                    return this._pickupCredentials();
                };
                // currently we only store the guest identity in local storage
                CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {
                    return "".concat(COGNITO_IDENTITY_KEY_PREFIX).concat(identityPoolId);
                };
                CredentialsClass.prototype._pickupCredentials = function () {
                    Credentials_logger.debug('picking up credentials');
                    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
                        Credentials_logger.debug('getting new cred promise');
                        this._gettingCredPromise = (0, JS/* makeQuerablePromise */.ML)(this._keepAlive());
                    }
                    else {
                        Credentials_logger.debug('getting old cred promise');
                    }
                    return this._gettingCredPromise;
                };
                CredentialsClass.prototype._keepAlive = function () {
                    return Credentials_awaiter(this, void 0, void 0, function () {
                        var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
                        return Credentials_generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    Credentials_logger.debug('checking if credentials exists and not expired');
                                    cred = this._credentials;
                                    if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
                                        Credentials_logger.debug('credentials not changed and not expired, directly return');
                                        return [2 /*return*/, Promise.resolve(cred)];
                                    }
                                    Credentials_logger.debug('need to get a new credential or refresh the existing one');
                                    _a = this.Auth, Auth = _a === void 0 ? Amplify/* Amplify */.d.Auth : _a;
                                    if (!Auth || typeof Auth.currentUserCredentials !== 'function') {
                                        // If Auth module is not imported, do a best effort to get guest credentials
                                        return [2 /*return*/, this._setCredentialsForGuest()];
                                    }
                                    if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];
                                    Credentials_logger.debug('ttl has passed but token is not yet expired');
                                    _b.label = 1;
                                case 1:
                                    _b.trys.push([1, 5, , 6]);
                                    return [4 /*yield*/, Auth.currentUserPoolUser()];
                                case 2:
                                    user_1 = _b.sent();
                                    return [4 /*yield*/, Auth.currentSession()];
                                case 3:
                                    session = _b.sent();
                                    refreshToken_1 = session.refreshToken;
                                    refreshRequest = new Promise(function (res, rej) {
                                        user_1.refreshSession(refreshToken_1, function (err, data) {
                                            return err ? rej(err) : res(data);
                                        });
                                    });
                                    return [4 /*yield*/, refreshRequest];
                                case 4:
                                    _b.sent(); // note that rejections will be caught and handled in the catch block.
                                    return [3 /*break*/, 6];
                                case 5:
                                    err_1 = _b.sent();
                                    // should not throw because user might just be on guest access or is authenticated through federation
                                    Credentials_logger.debug('Error attempting to refreshing the session', err_1);
                                    return [3 /*break*/, 6];
                                case 6: return [2 /*return*/, Auth.currentUserCredentials()];
                            }
                        });
                    });
                };
                CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {
                    Credentials_logger.debug('Getting federated credentials');
                    var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
                    var expires_at = federatedInfo.expires_at;
                    // Make sure expires_at is in millis
                    expires_at =
                        new Date(expires_at).getFullYear() === 1970
                            ? expires_at * 1000
                            : expires_at;
                    var that = this;
                    Credentials_logger.debug('checking if federated jwt token expired');
                    if (expires_at > new Date().getTime()) {
                        // if not expired
                        Credentials_logger.debug('token not expired');
                        return this._setCredentialsFromFederation({
                            provider: provider,
                            token: token,
                            user: user,
                            identity_id: identity_id,
                            expires_at: expires_at,
                        });
                    }
                    else {
                        // if refresh handler exists
                        if (that._refreshHandlers[provider] &&
                            typeof that._refreshHandlers[provider] === 'function') {
                            Credentials_logger.debug('getting refreshed jwt token from federation provider');
                            return this._providerRefreshWithRetry({
                                refreshHandler: that._refreshHandlers[provider],
                                provider: provider,
                                user: user,
                            });
                        }
                        else {
                            Credentials_logger.debug('no refresh handler for provider:', provider);
                            this.clear();
                            return Promise.reject('no refresh handler for provider');
                        }
                    }
                };
                CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {
                    var _this = this;
                    var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
                    var MAX_DELAY_MS = 10 * 1000;
                    // refreshHandler will retry network errors, otherwise it will
                    // return NonRetryableError to break out of jitteredExponentialRetry
                    return (0, Retry/* jitteredExponentialRetry */.Xm)(refreshHandler, [], MAX_DELAY_MS)
                        .then(function (data) {
                            Credentials_logger.debug('refresh federated token sucessfully', data);
                            return _this._setCredentialsFromFederation({
                                provider: provider,
                                token: data.token,
                                user: user,
                                identity_id: data.identity_id,
                                expires_at: data.expires_at,
                            });
                        })
                        .catch(function (e) {
                            var isNetworkError = typeof e === 'string' &&
                                e.toLowerCase().lastIndexOf('network error', e.length) === 0;
                            if (!isNetworkError) {
                                _this.clear();
                            }
                            Credentials_logger.debug('refresh federated token failed', e);
                            return Promise.reject('refreshing federation token failed: ' + e);
                        });
                };
                CredentialsClass.prototype._isExpired = function (credentials) {
                    if (!credentials) {
                        Credentials_logger.debug('no credentials for expiration check');
                        return true;
                    }
                    Credentials_logger.debug('are these credentials expired?', credentials);
                    var ts = Date.now();
                    /* returns date object.
                        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26
                    */
                    var expiration = credentials.expiration;
                    return expiration.getTime() <= ts;
                };
                CredentialsClass.prototype._isPastTTL = function () {
                    return this._nextCredentialsRefresh <= Date.now();
                };
                CredentialsClass.prototype._setCredentialsForGuest = function () {
                    var _a;
                    return Credentials_awaiter(this, void 0, void 0, function () {
                        var _b, identityPoolId, region, mandatorySignIn, identityPoolRegion, identityId, _c, cognitoConfig, guestCredentialsProvider, credentials;
                        var _this = this;
                        return Credentials_generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    Credentials_logger.debug('setting credentials for guest');
                                    if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {
                                        // If Credentials are not configured thru Auth module,
                                        // doing best effort to check if the library was configured
                                        this._config = Object.assign({}, this._config, (0, parseAWSExports/* parseAWSExports */.h)(this._config || {}).Auth);
                                    }
                                    _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn, identityPoolRegion = _b.identityPoolRegion;
                                    if (mandatorySignIn) {
                                        return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];
                                    }
                                    if (!identityPoolId) {
                                        Credentials_logger.debug('No Cognito Identity pool provided for unauthenticated access');
                                        return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];
                                    }
                                    if (!identityPoolRegion && !region) {
                                        Credentials_logger.debug('region is not configured for getting the credentials');
                                        return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];
                                    }
                                    _c = this;
                                    return [4 /*yield*/, this._getGuestIdentityId()];
                                case 1:
                                    identityId = (_c._identityId = _d.sent());
                                    cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
                                    guestCredentialsProvider = function () {
                                        return Credentials_awaiter(_this, void 0, void 0, function () {
                                            var IdentityId, Credentials;
                                            return Credentials_generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (!!identityId) return [3 /*break*/, 2];
                                                        return [4 /*yield*/, getId(cognitoConfig, {
                                                            IdentityPoolId: identityPoolId,
                                                        })];
                                                    case 1:
                                                        IdentityId = (_a.sent()).IdentityId;
                                                        this._identityId = IdentityId;
                                                        _a.label = 2;
                                                    case 2: return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {
                                                        IdentityId: this._identityId,
                                                    })];
                                                    case 3:
                                                        Credentials = (_a.sent()).Credentials;
                                                        return [2 /*return*/, {
                                                            identityId: this._identityId,
                                                            accessKeyId: Credentials.AccessKeyId,
                                                            secretAccessKey: Credentials.SecretKey,
                                                            sessionToken: Credentials.SessionToken,
                                                            expiration: Credentials.Expiration,
                                                        }];
                                                }
                                            });
                                        });
                                    };
                                    credentials = guestCredentialsProvider().catch(function (err) {
                                        return Credentials_awaiter(_this, void 0, void 0, function () {
                                            return Credentials_generator(this, function (_a) {
                                                throw err;
                                            });
                                        });
                                    });
                                    return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)
                                        .then(function (res) {
                                            return res;
                                        })
                                        .catch(function (e) {
                                            return Credentials_awaiter(_this, void 0, void 0, function () {
                                                var guestCredentialsProvider_1;
                                                var _this = this;
                                                return Credentials_generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!(e.name === 'ResourceNotFoundException' &&
                                                                e.message === "Identity '".concat(identityId, "' not found."))) return [3 /*break*/, 2];
                                                            Credentials_logger.debug('Failed to load guest credentials');
                                                            return [4 /*yield*/, this._removeGuestIdentityId()];
                                                        case 1:
                                                            _a.sent();
                                                            guestCredentialsProvider_1 = function () {
                                                                return Credentials_awaiter(_this, void 0, void 0, function () {
                                                                    var IdentityId, Credentials;
                                                                    return Credentials_generator(this, function (_a) {
                                                                        switch (_a.label) {
                                                                            case 0: return [4 /*yield*/, getId(cognitoConfig, {
                                                                                IdentityPoolId: identityPoolId,
                                                                            })];
                                                                            case 1:
                                                                                IdentityId = (_a.sent()).IdentityId;
                                                                                this._identityId = IdentityId;
                                                                                return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {
                                                                                    IdentityId: IdentityId,
                                                                                })];
                                                                            case 2:
                                                                                Credentials = (_a.sent()).Credentials;
                                                                                return [2 /*return*/, {
                                                                                    identityId: IdentityId,
                                                                                    accessKeyId: Credentials.AccessKeyId,
                                                                                    secretAccessKey: Credentials.SecretKey,
                                                                                    sessionToken: Credentials.SessionToken,
                                                                                    expiration: Credentials.Expiration,
                                                                                }];
                                                                        }
                                                                    });
                                                                });
                                                            };
                                                            credentials = guestCredentialsProvider_1().catch(function (err) {
                                                                return Credentials_awaiter(_this, void 0, void 0, function () {
                                                                    return Credentials_generator(this, function (_a) {
                                                                        throw err;
                                                                    });
                                                                });
                                                            });
                                                            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];
                                                        case 2: return [2 /*return*/, e];
                                                    }
                                                });
                                            });
                                        })];
                            }
                        });
                    });
                };
                CredentialsClass.prototype._setCredentialsFromFederation = function (params) {
                    var _this = this;
                    var provider = params.provider, token = params.token;
                    var identity_id = params.identity_id;
                    var domains = {
                        google: 'accounts.google.com',
                        facebook: 'graph.facebook.com',
                        amazon: 'www.amazon.com',
                        developer: 'cognito-identity.amazonaws.com',
                    };
                    // Use custom provider url instead of the predefined ones
                    var domain = domains[provider] || provider;
                    if (!domain) {
                        return Promise.reject('You must specify a federated provider');
                    }
                    var logins = {};
                    logins[domain] = token;
                    var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, identityPoolRegion = _a.identityPoolRegion;
                    if (!identityPoolId) {
                        Credentials_logger.debug('No Cognito Federated Identity pool provided');
                        return Promise.reject('No Cognito Federated Identity pool provided');
                    }
                    if (!identityPoolRegion && !region) {
                        Credentials_logger.debug('region is not configured for getting the credentials');
                        return Promise.reject('region is not configured for getting the credentials');
                    }
                    var cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
                    var authenticatedCredentialsProvider = function () {
                        return Credentials_awaiter(_this, void 0, void 0, function () {
                            var IdentityId, Credentials;
                            return Credentials_generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!!identity_id) return [3 /*break*/, 2];
                                        return [4 /*yield*/, getId(cognitoConfig, {
                                            IdentityPoolId: identityPoolId,
                                            Logins: logins,
                                        })];
                                    case 1:
                                        IdentityId = (_a.sent()).IdentityId;
                                        identity_id = IdentityId;
                                        _a.label = 2;
                                    case 2: return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {
                                        IdentityId: identity_id,
                                        Logins: logins,
                                    })];
                                    case 3:
                                        Credentials = (_a.sent()).Credentials;
                                        return [2 /*return*/, {
                                            identityId: identity_id,
                                            accessKeyId: Credentials.AccessKeyId,
                                            secretAccessKey: Credentials.SecretKey,
                                            sessionToken: Credentials.SessionToken,
                                            expiration: Credentials.Expiration,
                                        }];
                                }
                            });
                        });
                    };
                    var credentials = authenticatedCredentialsProvider().catch(function (err) {
                        return Credentials_awaiter(_this, void 0, void 0, function () {
                            return Credentials_generator(this, function (_a) {
                                throw err;
                            });
                        });
                    });
                    return this._loadCredentials(credentials, 'federated', true, params);
                };
                CredentialsClass.prototype._setCredentialsFromSession = function (session) {
                    var _this = this;
                    Credentials_logger.debug('set credentials from session');
                    var idToken = session.getIdToken().getJwtToken();
                    var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId, identityPoolRegion = _a.identityPoolRegion;
                    if (!identityPoolId) {
                        Credentials_logger.debug('No Cognito Federated Identity pool provided');
                        return Promise.reject('No Cognito Federated Identity pool provided');
                    }
                    if (!identityPoolRegion && !region) {
                        Credentials_logger.debug('region is not configured for getting the credentials');
                        return Promise.reject('region is not configured for getting the credentials');
                    }
                    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;
                    var logins = {};
                    logins[key] = idToken;
                    var cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
                    /*
                        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:
                        https://git.io/JeDxU
            
                        Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.
                    */
                    var credentialsProvider = function () {
                        return Credentials_awaiter(_this, void 0, void 0, function () {
                            var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
                            return Credentials_generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0: return [4 /*yield*/, this._getGuestIdentityId()];
                                    case 1:
                                        guestIdentityId = _c.sent();
                                        if (!!guestIdentityId) return [3 /*break*/, 3];
                                        return [4 /*yield*/, getId(cognitoConfig, {
                                            IdentityPoolId: identityPoolId,
                                            Logins: logins,
                                        })];
                                    case 2:
                                        IdentityId = (_c.sent()).IdentityId;
                                        generatedOrRetrievedIdentityId = IdentityId;
                                        _c.label = 3;
                                    case 3: return [4 /*yield*/, getCredentialsForIdentity(cognitoConfig, {
                                        IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                                        Logins: logins,
                                    })];
                                    case 4:
                                        _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;
                                        this._identityId = primaryIdentityId;
                                        if (!guestIdentityId) return [3 /*break*/, 6];
                                        // if guestIdentity is found and used by GetCredentialsForIdentity
                                        // it will be linked to the logins provided, and disqualified as an unauth identity
                                        Credentials_logger.debug("The guest identity ".concat(guestIdentityId, " has been successfully linked to the logins"));
                                        if (guestIdentityId === primaryIdentityId) {
                                            Credentials_logger.debug("The guest identity ".concat(guestIdentityId, " has become the primary identity"));
                                        }
                                        // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest
                                        return [4 /*yield*/, this._removeGuestIdentityId()];
                                    case 5:
                                        // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest
                                        _c.sent();
                                        _c.label = 6;
                                    case 6:
                                        // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40
                                        return [2 /*return*/, {
                                            accessKeyId: AccessKeyId,
                                            secretAccessKey: SecretKey,
                                            sessionToken: SessionToken,
                                            expiration: Expiration,
                                            identityId: primaryIdentityId,
                                        }];
                                }
                            });
                        });
                    };
                    var credentials = credentialsProvider().catch(function (err) {
                        return Credentials_awaiter(_this, void 0, void 0, function () {
                            return Credentials_generator(this, function (_a) {
                                throw err;
                            });
                        });
                    });
                    return this._loadCredentials(credentials, 'userPool', true, null);
                };
                CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {
                    var _this = this;
                    var that = this;
                    return new Promise(function (res, rej) {
                        credentials
                            .then(function (credentials) {
                                return Credentials_awaiter(_this, void 0, void 0, function () {
                                    var user, provider, token, expires_at, identity_id;
                                    return Credentials_generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                Credentials_logger.debug('Load credentials successfully', credentials);
                                                if (this._identityId && !credentials.identityId) {
                                                    credentials['identityId'] = this._identityId;
                                                }
                                                that._credentials = credentials;
                                                that._credentials.authenticated = authenticated;
                                                that._credentials_source = source;
                                                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                                                if (source === 'federated') {
                                                    user = Object.assign({ id: this._credentials.identityId }, info.user);
                                                    provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                                                    try {
                                                        this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({
                                                            provider: provider,
                                                            token: token,
                                                            user: user,
                                                            expires_at: expires_at,
                                                            identity_id: identity_id,
                                                        }));
                                                    }
                                                    catch (e) {
                                                        Credentials_logger.debug('Failed to put federated info into auth storage', e);
                                                    }
                                                }
                                                if (!(source === 'guest')) return [3 /*break*/, 2];
                                                return [4 /*yield*/, this._setGuestIdentityId(credentials.identityId)];
                                            case 1:
                                                _a.sent();
                                                _a.label = 2;
                                            case 2:
                                                res(that._credentials);
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            })
                            .catch(function (err) {
                                if (err) {
                                    Credentials_logger.debug('Failed to load credentials', credentials);
                                    Credentials_logger.debug('Error loading credentials', err);
                                    rej(err);
                                    return;
                                }
                            });
                    });
                };
                CredentialsClass.prototype.set = function (params, source) {
                    if (source === 'session') {
                        return this._setCredentialsFromSession(params);
                    }
                    else if (source === 'federation') {
                        return this._setCredentialsFromFederation(params);
                    }
                    else if (source === 'guest') {
                        return this._setCredentialsForGuest();
                    }
                    else {
                        Credentials_logger.debug('no source specified for setting credentials');
                        return Promise.reject('invalid source');
                    }
                };
                CredentialsClass.prototype.clear = function () {
                    return Credentials_awaiter(this, void 0, void 0, function () {
                        return Credentials_generator(this, function (_a) {
                            this._credentials = null;
                            this._credentials_source = null;
                            Credentials_logger.debug('removing aws-amplify-federatedInfo from storage');
                            this._storage.removeItem('aws-amplify-federatedInfo');
                            return [2 /*return*/];
                        });
                    });
                };
                /* operations on local stored guest identity */
                CredentialsClass.prototype._getGuestIdentityId = function () {
                    return Credentials_awaiter(this, void 0, void 0, function () {
                        var identityPoolId, e_1;
                        return Credentials_generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    identityPoolId = this._config.identityPoolId;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this._storageSync];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];
                                case 3:
                                    e_1 = _a.sent();
                                    Credentials_logger.debug('Failed to get the cached guest identityId', e_1);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                CredentialsClass.prototype._setGuestIdentityId = function (identityId) {
                    return Credentials_awaiter(this, void 0, void 0, function () {
                        var identityPoolId, e_2;
                        return Credentials_generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    identityPoolId = this._config.identityPoolId;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this._storageSync];
                                case 2:
                                    _a.sent();
                                    this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_2 = _a.sent();
                                    Credentials_logger.debug('Failed to cache guest identityId', e_2);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                CredentialsClass.prototype._removeGuestIdentityId = function () {
                    return Credentials_awaiter(this, void 0, void 0, function () {
                        var identityPoolId;
                        return Credentials_generator(this, function (_a) {
                            identityPoolId = this._config.identityPoolId;
                            Credentials_logger.debug("removing ".concat(this._getCognitoIdentityIdStorageKey(identityPoolId), " from storage"));
                            this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
                            return [2 /*return*/];
                        });
                    });
                };
                /**
                 * Compact version of credentials
                 * @param {Object} credentials
                 * @return {Object} - Credentials
                 */
                CredentialsClass.prototype.shear = function (credentials) {
                    return {
                        accessKeyId: credentials.accessKeyId,
                        sessionToken: credentials.sessionToken,
                        secretAccessKey: credentials.secretAccessKey,
                        identityId: credentials.identityId,
                        authenticated: credentials.authenticated,
                    };
                };
                return CredentialsClass;
            }());

            var Credentials = new CredentialsClass(null);
            Amplify/* Amplify */.d.register(Credentials);


            /***/
}),

    /***/ 9222:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   ML: () => (/* binding */ makeQuerablePromise),
    /* harmony export */   lC: () => (/* binding */ browserOrNode),
    /* harmony export */   n2: () => (/* binding */ isWebWorker)
                /* harmony export */
});
            /* unused harmony exports isEmpty, sortByField, objectLessAttributes, filenameToContentType, isTextFile, generateRandomString, transferKeyToLowerCase, transferKeyToUpperCase, isStrictObject */
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var MIME_MAP = [
                { type: 'text/plain', ext: 'txt' },
                { type: 'text/html', ext: 'html' },
                { type: 'text/javascript', ext: 'js' },
                { type: 'text/css', ext: 'css' },
                { type: 'text/csv', ext: 'csv' },
                { type: 'text/yaml', ext: 'yml' },
                { type: 'text/yaml', ext: 'yaml' },
                { type: 'text/calendar', ext: 'ics' },
                { type: 'text/calendar', ext: 'ical' },
                { type: 'image/apng', ext: 'apng' },
                { type: 'image/bmp', ext: 'bmp' },
                { type: 'image/gif', ext: 'gif' },
                { type: 'image/x-icon', ext: 'ico' },
                { type: 'image/x-icon', ext: 'cur' },
                { type: 'image/jpeg', ext: 'jpg' },
                { type: 'image/jpeg', ext: 'jpeg' },
                { type: 'image/jpeg', ext: 'jfif' },
                { type: 'image/jpeg', ext: 'pjp' },
                { type: 'image/jpeg', ext: 'pjpeg' },
                { type: 'image/png', ext: 'png' },
                { type: 'image/svg+xml', ext: 'svg' },
                { type: 'image/tiff', ext: 'tif' },
                { type: 'image/tiff', ext: 'tiff' },
                { type: 'image/webp', ext: 'webp' },
                { type: 'application/json', ext: 'json' },
                { type: 'application/xml', ext: 'xml' },
                { type: 'application/x-sh', ext: 'sh' },
                { type: 'application/zip', ext: 'zip' },
                { type: 'application/x-rar-compressed', ext: 'rar' },
                { type: 'application/x-tar', ext: 'tar' },
                { type: 'application/x-bzip', ext: 'bz' },
                { type: 'application/x-bzip2', ext: 'bz2' },
                { type: 'application/pdf', ext: 'pdf' },
                { type: 'application/java-archive', ext: 'jar' },
                { type: 'application/msword', ext: 'doc' },
                { type: 'application/vnd.ms-excel', ext: 'xls' },
                { type: 'application/vnd.ms-excel', ext: 'xlsx' },
                { type: 'message/rfc822', ext: 'eml' },
            ];
            var isEmpty = function (obj) {
                if (obj === void 0) { obj = {}; }
                return Object.keys(obj).length === 0;
            };
            var sortByField = function (list, field, dir) {
                if (!list || !list.sort) {
                    return false;
                }
                var dirX = dir && dir === 'desc' ? -1 : 1;
                list.sort(function (a, b) {
                    var a_val = a[field];
                    var b_val = b[field];
                    if (typeof b_val === 'undefined') {
                        return typeof a_val === 'undefined' ? 0 : 1 * dirX;
                    }
                    if (typeof a_val === 'undefined') {
                        return -1 * dirX;
                    }
                    if (a_val < b_val) {
                        return -1 * dirX;
                    }
                    if (a_val > b_val) {
                        return 1 * dirX;
                    }
                    return 0;
                });
                return true;
            };
            var objectLessAttributes = function (obj, less) {
                var ret = Object.assign({}, obj);
                if (less) {
                    if (typeof less === 'string') {
                        delete ret[less];
                    }
                    else {
                        less.forEach(function (attr) {
                            delete ret[attr];
                        });
                    }
                }
                return ret;
            };
            var filenameToContentType = function (filename, defVal) {
                if (defVal === void 0) { defVal = 'application/octet-stream'; }
                var name = filename.toLowerCase();
                var filtered = MIME_MAP.filter(function (mime) { return name.endsWith('.' + mime.ext); });
                return filtered.length > 0 ? filtered[0].type : defVal;
            };
            var isTextFile = function (contentType) {
                var type = contentType.toLowerCase();
                if (type.startsWith('text/')) {
                    return true;
                }
                return ('application/json' === type ||
                    'application/xml' === type ||
                    'application/sh' === type);
            };
            var generateRandomString = function () {
                var result = '';
                var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                for (var i = 32; i > 0; i -= 1) {
                    result += chars[Math.floor(Math.random() * chars.length)];
                }
                return result;
            };
            var makeQuerablePromise = function (promise) {
                if (promise.isResolved)
                    return promise;
                var isPending = true;
                var isRejected = false;
                var isFullfilled = false;
                var result = promise.then(function (data) {
                    isFullfilled = true;
                    isPending = false;
                    return data;
                }, function (e) {
                    isRejected = true;
                    isPending = false;
                    throw e;
                });
                result.isFullfilled = function () { return isFullfilled; };
                result.isPending = function () { return isPending; };
                result.isRejected = function () { return isRejected; };
                return result;
            };
            var isWebWorker = function () {
                if (typeof self === 'undefined') {
                    return false;
                }
                var selfContext = self;
                return (typeof selfContext.WorkerGlobalScope !== 'undefined' &&
                    self instanceof selfContext.WorkerGlobalScope);
            };
            var browserOrNode = function () {
                var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
                var isNode = typeof process !== 'undefined' &&
                    process.versions != null &&
                    process.versions.node != null;
                return {
                    isBrowser: isBrowser,
                    isNode: isNode,
                };
            };
            /**
             * transfer the first letter of the keys to lowercase
             * @param {Object} obj - the object need to be transferred
             * @param {Array} whiteListForItself - whitelist itself from being transferred
             * @param {Array} whiteListForChildren - whitelist its children keys from being transferred
             */
            var transferKeyToLowerCase = function (obj, whiteListForItself, whiteListForChildren) {
                if (whiteListForItself === void 0) { whiteListForItself = []; }
                if (whiteListForChildren === void 0) { whiteListForChildren = []; }
                if (!isStrictObject(obj))
                    return obj;
                var ret = {};
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        var transferedKey = whiteListForItself.includes(key)
                            ? key
                            : key[0].toLowerCase() + key.slice(1);
                        ret[transferedKey] = whiteListForChildren.includes(key)
                            ? obj[key]
                            : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
                    }
                }
                return ret;
            };
            /**
             * transfer the first letter of the keys to lowercase
             * @param {Object} obj - the object need to be transferred
             * @param {Array} whiteListForItself - whitelist itself from being transferred
             * @param {Array} whiteListForChildren - whitelist its children keys from being transferred
             */
            var transferKeyToUpperCase = function (obj, whiteListForItself, whiteListForChildren) {
                if (whiteListForItself === void 0) { whiteListForItself = []; }
                if (whiteListForChildren === void 0) { whiteListForChildren = []; }
                if (!isStrictObject(obj))
                    return obj;
                var ret = {};
                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        var transferredKey = whiteListForItself.includes(key)
                            ? key
                            : key[0].toUpperCase() + key.slice(1);
                        ret[transferredKey] = whiteListForChildren.includes(key)
                            ? obj[key]
                            : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
                    }
                }
                return ret;
            };
            /**
             * Return true if the object is a strict object
             * which means it's not Array, Function, Number, String, Boolean or Null
             * @param obj the Object
             */
            var isStrictObject = function (obj) {
                return (obj instanceof Object &&
                    !(obj instanceof Array) &&
                    !(obj instanceof Function) &&
                    !(obj instanceof Number) &&
                    !(obj instanceof String) &&
                    !(obj instanceof Boolean));
            };


            /***/
}),

    /***/ 6488:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                Cj: () => (/* binding */ detectFramework),
                QW: () => (/* binding */ observeFrameworkChanges)
            });

            // UNUSED EXPORTS: clearCache, frameworkChangeObservers

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/types.js
            var types = __webpack_require__(9841);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/helpers.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var globalExists = function () {
                return typeof __webpack_require__.g !== 'undefined';
            };
            var globalThisExists = function () {
                return typeof globalThis !== 'undefined';
            };
            var windowExists = function () {
                return typeof window !== 'undefined';
            };
            var documentExists = function () {
                return typeof document !== 'undefined';
            };
            var processExists = function () {
                return typeof process !== 'undefined';
            };
            var keyPrefixMatch = function (object, prefix) {
                return !!Object.keys(object).find(function (key) { return key.startsWith(prefix); });
            };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/React.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with react 18.2 - built using Vite
            function reactWebDetect() {
                var elementKeyPrefixedWithReact = function (key) {
                    return key.startsWith('_react') || key.startsWith('__react');
                };
                var elementIsReactEnabled = function (element) {
                    return Object.keys(element).find(elementKeyPrefixedWithReact);
                };
                var allElementsWithId = function () { return Array.from(document.querySelectorAll('[id]')); };
                return documentExists() && allElementsWithId().some(elementIsReactEnabled);
            }
            function reactSSRDetect() {
                return (processExists() &&
                    typeof process.env !== 'undefined' &&
                    !!Object.keys(process.env).find(function (key) { return key.includes('react'); }));
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Vue.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with vue 3.3.2
            function vueWebDetect() {
                return windowExists() && keyPrefixMatch(window, '__VUE');
            }
            function vueSSRDetect() {
                return globalExists() && keyPrefixMatch(__webpack_require__.g, '__VUE');
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Svelte.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with svelte 3.59
            function svelteWebDetect() {
                return windowExists() && keyPrefixMatch(window, '__SVELTE');
            }
            function svelteSSRDetect() {
                return (processExists() &&
                    typeof process.env !== 'undefined' &&
                    !!Object.keys(process.env).find(function (key) { return key.includes('svelte'); }));
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Next.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with next 13.4 / react 18.2
            function nextWebDetect() {
                // @ts-ignore
                return windowExists() && window['next'] && typeof window['next'] === 'object';
            }
            function nextSSRDetect() {
                return (globalExists() &&
                    (keyPrefixMatch(__webpack_require__.g, '__next') || keyPrefixMatch(__webpack_require__.g, '__NEXT')));
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Nuxt.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with nuxt 2.15 / vue 2.7
            function nuxtWebDetect() {
                return (windowExists() &&
                    // @ts-ignore
                    (window['__NUXT__'] !== undefined || window['$nuxt'] !== undefined));
            }
            function nuxtSSRDetect() {
                // @ts-ignore
                return globalExists() && typeof __webpack_require__.g['__NUXT_PATHS__'] !== 'undefined';
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Angular.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with @angular/core 16.0.0
            function angularWebDetect() {
                var angularVersionSetInDocument = Boolean(documentExists() && document.querySelector('[ng-version]'));
                var angularContentSetInWindow = Boolean(
                    // @ts-ignore
                    windowExists() && typeof window['ng'] !== 'undefined');
                return angularVersionSetInDocument || angularContentSetInWindow;
            }
            function angularSSRDetect() {
                var _a;
                return ((processExists() &&
                    typeof process.env === 'object' &&
                    ((_a = process.env['npm_lifecycle_script']) === null || _a === void 0 ? void 0 : _a.startsWith('ng '))) ||
                    false);
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/ReactNative.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            // Tested with react-native 0.17.7
            function reactNativeDetect() {
                return (typeof navigator !== 'undefined' &&
                    typeof navigator.product !== 'undefined' &&
                    navigator.product === 'ReactNative');
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Expo.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            // Tested with expo 48 / react-native 0.71.3
            function expoDetect() {
                // @ts-ignore
                return globalExists() && typeof __webpack_require__.g['expo'] !== 'undefined';
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/Web.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0

            function webDetect() {
                return windowExists();
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detection/index.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0










            // These are in the order of detection where when both are detectable, the early Framework will be reported
            var detectionMap = [
                // First, detect mobile
                { platform: types/* Framework */.gQ.Expo, detectionMethod: expoDetect },
                { platform: types/* Framework */.gQ.ReactNative, detectionMethod: reactNativeDetect },
                // Next, detect web frameworks
                { platform: types/* Framework */.gQ.NextJs, detectionMethod: nextWebDetect },
                { platform: types/* Framework */.gQ.Nuxt, detectionMethod: nuxtWebDetect },
                { platform: types/* Framework */.gQ.Angular, detectionMethod: angularWebDetect },
                { platform: types/* Framework */.gQ.React, detectionMethod: reactWebDetect },
                { platform: types/* Framework */.gQ.VueJs, detectionMethod: vueWebDetect },
                { platform: types/* Framework */.gQ.Svelte, detectionMethod: svelteWebDetect },
                { platform: types/* Framework */.gQ.WebUnknown, detectionMethod: webDetect },
                // Last, detect ssr frameworks
                { platform: types/* Framework */.gQ.NextJsSSR, detectionMethod: nextSSRDetect },
                { platform: types/* Framework */.gQ.NuxtSSR, detectionMethod: nuxtSSRDetect },
                { platform: types/* Framework */.gQ.ReactSSR, detectionMethod: reactSSRDetect },
                { platform: types/* Framework */.gQ.VueJsSSR, detectionMethod: vueSSRDetect },
                { platform: types/* Framework */.gQ.AngularSSR, detectionMethod: angularSSRDetect },
                { platform: types/* Framework */.gQ.SvelteSSR, detectionMethod: svelteSSRDetect },
            ];
            function detect() {
                var _a;
                return (((_a = detectionMap.find(function (detectionEntry) { return detectionEntry.detectionMethod(); })) === null || _a === void 0 ? void 0 : _a.platform) || types/* Framework */.gQ.ServerSideUnknown);
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detectFramework.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0


            // We want to cache detection since the framework won't change
            var frameworkCache;
            var frameworkChangeObservers = [];
            // Setup the detection reset tracking / timeout delays
            var resetTriggered = false;
            var SSR_RESET_TIMEOUT = 10; // ms
            var WEB_RESET_TIMEOUT = 10; // ms
            var PRIME_FRAMEWORK_DELAY = 1000; // ms
            var detectFramework = function () {
                if (!frameworkCache) {
                    frameworkCache = detect();
                    if (resetTriggered) {
                        // The final run of detectFramework:
                        // Starting from this point, the `frameworkCache` becomes "final".
                        // So we don't need to notify the observers again so the observer
                        // can be removed after the final notice.
                        while (frameworkChangeObservers.length) {
                            frameworkChangeObservers.pop()();
                        }
                    }
                    else {
                        // The first run of detectFramework:
                        // Every time we update the cache, call each observer function
                        frameworkChangeObservers.forEach(function (fcn) { return fcn(); });
                    }
                    // Retry once for either Unknown type after a delay (explained below)
                    resetTimeout(types/* Framework */.gQ.ServerSideUnknown, SSR_RESET_TIMEOUT);
                    resetTimeout(types/* Framework */.gQ.WebUnknown, WEB_RESET_TIMEOUT);
                }
                return frameworkCache;
            };
            /**
             * @internal Setup observer callback that will be called everytime the framework changes
             */
            var observeFrameworkChanges = function (fcn) {
                // When the `frameworkCache` won't be updated again, we ignore all incoming
                // observers.
                if (resetTriggered) {
                    return;
                }
                frameworkChangeObservers.push(fcn);
            };
            function clearCache() {
                frameworkCache = undefined;
            }
            // For a framework type and a delay amount, setup the event to re-detect
            //   During the runtime boot, it is possible that framework detection will
            //   be triggered before the framework has made modifications to the
            //   global/window/etc needed for detection. When no framework is detected
            //   we will reset and try again to ensure we don't use a cached
            //   non-framework detection result for all requests.
            function resetTimeout(framework, delay) {
                if (frameworkCache === framework && !resetTriggered) {
                    setTimeout(function () {
                        clearCache();
                        resetTriggered = true;
                        setTimeout(detectFramework, PRIME_FRAMEWORK_DELAY);
                    }, delay);
                }
            }


            /***/
}),

    /***/ 9270:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                t4: () => (/* binding */ Platform),
                Zm: () => (/* binding */ getAmplifyUserAgent)
            });

            // UNUSED EXPORTS: getAmplifyUserAgentObject

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/types.js
            var types = __webpack_require__(9841);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/version.js
            // generated by genversion
            var version = '5.3.12';

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/detectFramework.js + 11 modules
            var detectFramework = __webpack_require__(6488);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/Platform/index.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var __read = (undefined && undefined.__read) || function (o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            };



            var BASE_USER_AGENT = "aws-amplify";
            var PlatformBuilder = /** @class */ (function () {
                function PlatformBuilder() {
                    this.userAgent = "".concat(BASE_USER_AGENT, "/").concat(version);
                }
                Object.defineProperty(PlatformBuilder.prototype, "framework", {
                    get: function () {
                        return (0, detectFramework/* detectFramework */.Cj)();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PlatformBuilder.prototype, "isReactNative", {
                    get: function () {
                        return (this.framework === types/* Framework */.gQ.ReactNative ||
                            this.framework === types/* Framework */.gQ.Expo);
                    },
                    enumerable: false,
                    configurable: true
                });
                PlatformBuilder.prototype.observeFrameworkChanges = function (fcn) {
                    (0, detectFramework/* observeFrameworkChanges */.QW)(fcn);
                };
                return PlatformBuilder;
            }());
            var Platform = new PlatformBuilder();
            var getAmplifyUserAgentObject = function (_a) {
                var _b = _a === void 0 ? {} : _a, category = _b.category, action = _b.action, framework = _b.framework;
                var userAgent = [[BASE_USER_AGENT, version]];
                if (category) {
                    userAgent.push([category, action]);
                }
                userAgent.push(['framework', (0, detectFramework/* detectFramework */.Cj)()]);
                return userAgent;
            };
            var getAmplifyUserAgent = function (customUserAgentDetails) {
                var userAgent = getAmplifyUserAgentObject(customUserAgentDetails);
                var userAgentString = userAgent
                    .map(function (_a) {
                        var _b = __read(_a, 2), agentKey = _b[0], agentValue = _b[1];
                        return "".concat(agentKey, "/").concat(agentValue);
                    })
                    .join(' ');
                return userAgentString;
            };


            /***/
}),

    /***/ 9841:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   WD: () => (/* binding */ Category),
    /* harmony export */   bB: () => (/* binding */ PubSubAction),
    /* harmony export */   g4: () => (/* binding */ AuthAction),
    /* harmony export */   gQ: () => (/* binding */ Framework),
    /* harmony export */   gq: () => (/* binding */ ApiAction)
                /* harmony export */
});
            /* unused harmony exports AnalyticsAction, DataStoreAction, GeoAction, InAppMessagingAction, InteractionsAction, PredictionsAction, PushNotificationAction, StorageAction */
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var Framework;
            (function (Framework) {
                // < 100 - Web frameworks
                Framework["WebUnknown"] = "0";
                Framework["React"] = "1";
                Framework["NextJs"] = "2";
                Framework["Angular"] = "3";
                Framework["VueJs"] = "4";
                Framework["Nuxt"] = "5";
                Framework["Svelte"] = "6";
                // 100s - Server side frameworks
                Framework["ServerSideUnknown"] = "100";
                Framework["ReactSSR"] = "101";
                Framework["NextJsSSR"] = "102";
                Framework["AngularSSR"] = "103";
                Framework["VueJsSSR"] = "104";
                Framework["NuxtSSR"] = "105";
                Framework["SvelteSSR"] = "106";
                // 200s - Mobile framework
                Framework["ReactNative"] = "201";
                Framework["Expo"] = "202";
            })(Framework || (Framework = {}));
            var Category;
            (function (Category) {
                Category["API"] = "api";
                Category["Auth"] = "auth";
                Category["Analytics"] = "analytics";
                Category["DataStore"] = "datastore";
                Category["Geo"] = "geo";
                Category["InAppMessaging"] = "inappmessaging";
                Category["Interactions"] = "interactions";
                Category["Predictions"] = "predictions";
                Category["PubSub"] = "pubsub";
                Category["PushNotification"] = "pushnotification";
                Category["Storage"] = "storage";
            })(Category || (Category = {}));
            var AnalyticsAction;
            (function (AnalyticsAction) {
                AnalyticsAction["Record"] = "1";
                AnalyticsAction["UpdateEndpoint"] = "2";
            })(AnalyticsAction || (AnalyticsAction = {}));
            var ApiAction;
            (function (ApiAction) {
                ApiAction["GraphQl"] = "1";
                ApiAction["Get"] = "2";
                ApiAction["Post"] = "3";
                ApiAction["Put"] = "4";
                ApiAction["Patch"] = "5";
                ApiAction["Del"] = "6";
                ApiAction["Head"] = "7";
            })(ApiAction || (ApiAction = {}));
            var AuthAction;
            (function (AuthAction) {
                // SignUp = '1',
                // ConfirmSignUp = '2',
                // ResendSignUp = '3',
                // SignIn = '4',
                // GetMFAOptions = '5',
                // GetPreferredMFA = '6',
                // SetPreferredMFA = '7',
                // DisableSMS = '8',
                // EnableSMS = '9',
                // SetupTOTP = '10',
                // VerifyTotpToken = '11',
                // ConfirmSignIn = '12',
                // CompleteNewPassword = '13',
                // SendCustomChallengeAnswer = '14',
                // DeleteUserAttributes = '15',
                // DeleteUser = '16',
                // UpdateUserAttributes = '17',
                // UserAttributes = '18',
                // CurrentUserPoolUser = '19',
                // CurrentAuthenticatedUser = '20',
                // CurrentSession = '21',
                // VerifyUserAttribute = '22',
                // VerifyUserAttributeSubmit = '23',
                // VerifyCurrentUserAttribute = '24',
                // VerifyCurrentUserAttributeSubmit = '25',
                // SignOut = '26',
                // ChangePassword = '27',
                // ForgotPassword = '28',
                // ForgotPasswordSubmit = '29',
                AuthAction["FederatedSignIn"] = "30";
                // CurrentUserInfo = '31',
                // RememberDevice = '32',
                // ForgetDevice = '33',
                // FetchDevices = '34',
            })(AuthAction || (AuthAction = {}));
            var DataStoreAction;
            (function (DataStoreAction) {
                DataStoreAction["Subscribe"] = "1";
                DataStoreAction["GraphQl"] = "2";
            })(DataStoreAction || (DataStoreAction = {}));
            var GeoAction;
            (function (GeoAction) {
                GeoAction["None"] = "0";
            })(GeoAction || (GeoAction = {}));
            var InAppMessagingAction;
            (function (InAppMessagingAction) {
                InAppMessagingAction["None"] = "0";
            })(InAppMessagingAction || (InAppMessagingAction = {}));
            var InteractionsAction;
            (function (InteractionsAction) {
                InteractionsAction["None"] = "0";
            })(InteractionsAction || (InteractionsAction = {}));
            var PredictionsAction;
            (function (PredictionsAction) {
                PredictionsAction["Convert"] = "1";
                PredictionsAction["Identify"] = "2";
                PredictionsAction["Interpret"] = "3";
            })(PredictionsAction || (PredictionsAction = {}));
            var PubSubAction;
            (function (PubSubAction) {
                PubSubAction["Subscribe"] = "1";
            })(PubSubAction || (PubSubAction = {}));
            var PushNotificationAction;
            (function (PushNotificationAction) {
                PushNotificationAction["None"] = "0";
            })(PushNotificationAction || (PushNotificationAction = {}));
            var StorageAction;
            (function (StorageAction) {
                StorageAction["Put"] = "1";
                StorageAction["Get"] = "2";
                StorageAction["List"] = "3";
                StorageAction["Copy"] = "4";
                StorageAction["Remove"] = "5";
                StorageAction["GetProperties"] = "6";
            })(StorageAction || (StorageAction = {}));


            /***/
}),

    /***/ 6648:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   c: () => (/* binding */ StorageHelper)
                /* harmony export */
});
            /* unused harmony export MemoryStorage */
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var dataMemory = {};
            /** @class */
            var MemoryStorage = /** @class */ (function () {
                function MemoryStorage() {
                }
                /**
                 * This is used to set a specific item in storage
                 * @param {string} key - the key for the item
                 * @param {object} value - the value
                 * @returns {string} value that was set
                 */
                MemoryStorage.setItem = function (key, value) {
                    dataMemory[key] = value;
                    return dataMemory[key];
                };
                /**
                 * This is used to get a specific key from storage
                 * @param {string} key - the key for the item
                 * This is used to clear the storage
                 * @returns {string} the data item
                 */
                MemoryStorage.getItem = function (key) {
                    return Object.prototype.hasOwnProperty.call(dataMemory, key)
                        ? dataMemory[key]
                        : undefined;
                };
                /**
                 * This is used to remove an item from storage
                 * @param {string} key - the key being set
                 * @returns {string} value - value that was deleted
                 */
                MemoryStorage.removeItem = function (key) {
                    return delete dataMemory[key];
                };
                /**
                 * This is used to clear the storage
                 * @returns {string} nothing
                 */
                MemoryStorage.clear = function () {
                    dataMemory = {};
                    return dataMemory;
                };
                return MemoryStorage;
            }());

            var StorageHelper = /** @class */ (function () {
                /**
                 * This is used to get a storage object
                 * @returns {object} the storage
                 */
                function StorageHelper() {
                    try {
                        this.storageWindow = window.localStorage;
                        this.storageWindow.setItem('aws.amplify.test-ls', 1);
                        this.storageWindow.removeItem('aws.amplify.test-ls');
                    }
                    catch (exception) {
                        this.storageWindow = MemoryStorage;
                    }
                }
                /**
                 * This is used to return the storage
                 * @returns {object} the storage
                 */
                StorageHelper.prototype.getStorage = function () {
                    return this.storageWindow;
                };
                return StorageHelper;
            }());



            /***/
}),

    /***/ 7262:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   V2: () => (/* binding */ NonRetryableError),
    /* harmony export */   Xm: () => (/* binding */ jitteredExponentialRetry),
    /* harmony export */   kD: () => (/* binding */ jitteredBackoff),
    /* harmony export */   m0: () => (/* binding */ isNonRetryableError)
                /* harmony export */
});
    /* unused harmony export retry */
    /* harmony import */ var _Logger_ConsoleLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9719);
            var __extends = (undefined && undefined.__extends) || (function () {
                var extendStatics = function (d, b) {
                    extendStatics = Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                    return extendStatics(d, b);
                };
                return function (d, b) {
                    if (typeof b !== "function" && b !== null)
                        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    extendStatics(d, b);
                    function __() { this.constructor = d; }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            var __read = (undefined && undefined.__read) || function (o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            };
            var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
            };

            var logger = new _Logger_ConsoleLogger__WEBPACK_IMPORTED_MODULE_0__/* .ConsoleLogger */.k('Util');
            var NonRetryableError = /** @class */ (function (_super) {
                __extends(NonRetryableError, _super);
                function NonRetryableError(message) {
                    var _this = _super.call(this, message) || this;
                    _this.nonRetryable = true;
                    return _this;
                }
                return NonRetryableError;
            }(Error));

            var isNonRetryableError = function (obj) {
                var key = 'nonRetryable';
                return obj && obj[key];
            };
            /**
             * @private
             * Internal use of Amplify only
             */
            function retry(functionToRetry, args, delayFn, onTerminate) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (typeof functionToRetry !== 'function') {
                            throw Error('functionToRetry must be a function');
                        }
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                            return __awaiter(_this, void 0, void 0, function () {
                                var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            attempt = 0;
                                            terminated = false;
                                            wakeUp = function () { };
                                            onTerminate &&
                                                onTerminate.then(function () {
                                                    // signal not to try anymore.
                                                    terminated = true;
                                                    // stop sleeping if we're sleeping.
                                                    clearTimeout(timeout);
                                                    wakeUp();
                                                });
                                            _loop_1 = function () {
                                                var _b, _c, err_1, retryIn_1;
                                                return __generator(this, function (_d) {
                                                    switch (_d.label) {
                                                        case 0:
                                                            attempt++;
                                                            logger.debug("".concat(functionToRetry.name, " attempt #").concat(attempt, " with this vars: ").concat(JSON.stringify(args)));
                                                            _d.label = 1;
                                                        case 1:
                                                            _d.trys.push([1, 3, , 7]);
                                                            _b = {};
                                                            _c = resolve;
                                                            return [4 /*yield*/, functionToRetry.apply(void 0, __spreadArray([], __read(args), false))];
                                                        case 2: return [2 /*return*/, (_b.value = _c.apply(void 0, [_d.sent()]), _b)];
                                                        case 3:
                                                            err_1 = _d.sent();
                                                            lastError = err_1;
                                                            logger.debug("error on ".concat(functionToRetry.name), err_1);
                                                            if (isNonRetryableError(err_1)) {
                                                                logger.debug("".concat(functionToRetry.name, " non retryable error"), err_1);
                                                                return [2 /*return*/, { value: reject(err_1) }];
                                                            }
                                                            retryIn_1 = delayFn(attempt, args, err_1);
                                                            logger.debug("".concat(functionToRetry.name, " retrying in ").concat(retryIn_1, " ms"));
                                                            if (!(retryIn_1 === false || terminated)) return [3 /*break*/, 4];
                                                            return [2 /*return*/, { value: reject(err_1) }];
                                                        case 4: return [4 /*yield*/, new Promise(function (r) {
                                                            wakeUp = r; // export wakeUp for onTerminate handling
                                                            timeout = setTimeout(wakeUp, retryIn_1);
                                                        })];
                                                        case 5:
                                                            _d.sent();
                                                            _d.label = 6;
                                                        case 6: return [3 /*break*/, 7];
                                                        case 7: return [2 /*return*/];
                                                    }
                                                });
                                            };
                                            _a.label = 1;
                                        case 1:
                                            if (!!terminated) return [3 /*break*/, 3];
                                            return [5 /*yield**/, _loop_1()];
                                        case 2:
                                            state_1 = _a.sent();
                                            if (typeof state_1 === "object")
                                                return [2 /*return*/, state_1.value];
                                            return [3 /*break*/, 1];
                                        case 3:
                                            // reached if terminated while waiting for a timer.
                                            reject(lastError);
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        })];
                    });
                });
            }
            var MAX_DELAY_MS = 5 * 60 * 1000;
            /**
             * @private
             * Internal use of Amplify only
             */
            function jitteredBackoff(maxDelayMs) {
                if (maxDelayMs === void 0) { maxDelayMs = MAX_DELAY_MS; }
                var BASE_TIME_MS = 100;
                var JITTER_FACTOR = 100;
                return function (attempt) {
                    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
                    return delay > maxDelayMs ? false : delay;
                };
            }
            /**
             * @private
             * Internal use of Amplify only
             */
            var jitteredExponentialRetry = function (functionToRetry, args, maxDelayMs, onTerminate) {
                if (maxDelayMs === void 0) { maxDelayMs = MAX_DELAY_MS; }
                return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);
            };


            /***/
}),

    /***/ 8229:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   M: () => (/* binding */ USER_AGENT_HEADER),
    /* harmony export */   o: () => (/* binding */ INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER)
                /* harmony export */
});
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            /**
             * This Symbol is used to reference an internal-only PubSub provider that
             * is used for AppSync/GraphQL subscriptions in the API category.
             */
            var hasSymbol = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
            var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol
                ? Symbol.for('INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER')
                : '@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER';
            var USER_AGENT_HEADER = 'x-amz-user-agent';


            /***/
}),

    /***/ 9820:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   h: () => (/* binding */ parseAWSExports)
                /* harmony export */
});
    /* harmony import */ var _Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9719);
            var __assign = (undefined && undefined.__assign) || function () {
                __assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };

            var logger = new _Logger__WEBPACK_IMPORTED_MODULE_0__/* .ConsoleLogger */.k('Parser');
            var parseAWSExports = function (config) {
                var amplifyConfig = {};
                // Analytics
                if (config['aws_mobile_analytics_app_id']) {
                    var Analytics = {
                        AWSPinpoint: {
                            appId: config['aws_mobile_analytics_app_id'],
                            region: config['aws_mobile_analytics_app_region'],
                        },
                    };
                    amplifyConfig.Analytics = Analytics;
                }
                // Auth
                if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {
                    amplifyConfig.Auth = {
                        userPoolId: config['aws_user_pools_id'],
                        userPoolWebClientId: config['aws_user_pools_web_client_id'],
                        region: config['aws_cognito_region'],
                        identityPoolId: config['aws_cognito_identity_pool_id'],
                        identityPoolRegion: config['aws_cognito_region'],
                        mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',
                        signUpVerificationMethod: config['aws_cognito_sign_up_verification_method'] || 'code',
                    };
                }
                // Storage
                var storageConfig;
                if (config['aws_user_files_s3_bucket']) {
                    storageConfig = {
                        AWSS3: {
                            bucket: config['aws_user_files_s3_bucket'],
                            region: config['aws_user_files_s3_bucket_region'],
                            dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'],
                        },
                    };
                }
                else {
                    storageConfig = config ? config.Storage || config : {};
                }
                // Logging
                if (config['Logging']) {
                    amplifyConfig.Logging = __assign(__assign({}, config['Logging']), { region: config['aws_project_region'] });
                }
                // Geo
                if (config['geo']) {
                    amplifyConfig.Geo = Object.assign({}, config.geo);
                    if (config.geo['amazon_location_service']) {
                        amplifyConfig.Geo = {
                            AmazonLocationService: config.geo['amazon_location_service'],
                        };
                    }
                }
                amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
                amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
                amplifyConfig.Storage = Object.assign({}, storageConfig);
                amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
                logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);
                return amplifyConfig;
            };


            /***/
}),

    /***/ 914:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";

            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.RawSha256 = void 0;
            var constants_1 = __webpack_require__(9945);
            /**
             * @internal
             */
            var RawSha256 = /** @class */ (function () {
                function RawSha256() {
                    this.state = Int32Array.from(constants_1.INIT);
                    this.temp = new Int32Array(64);
                    this.buffer = new Uint8Array(64);
                    this.bufferLength = 0;
                    this.bytesHashed = 0;
                    /**
                     * @internal
                     */
                    this.finished = false;
                }
                RawSha256.prototype.update = function (data) {
                    if (this.finished) {
                        throw new Error("Attempted to update an already finished hash.");
                    }
                    var position = 0;
                    var byteLength = data.byteLength;
                    this.bytesHashed += byteLength;
                    if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
                        throw new Error("Cannot hash more than 2^53 - 1 bits");
                    }
                    while (byteLength > 0) {
                        this.buffer[this.bufferLength++] = data[position++];
                        byteLength--;
                        if (this.bufferLength === constants_1.BLOCK_SIZE) {
                            this.hashBuffer();
                            this.bufferLength = 0;
                        }
                    }
                };
                RawSha256.prototype.digest = function () {
                    if (!this.finished) {
                        var bitsHashed = this.bytesHashed * 8;
                        var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
                        var undecoratedLength = this.bufferLength;
                        bufferView.setUint8(this.bufferLength++, 0x80);
                        // Ensure the final block has enough room for the hashed length
                        if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
                            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
                                bufferView.setUint8(i, 0);
                            }
                            this.hashBuffer();
                            this.bufferLength = 0;
                        }
                        for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
                            bufferView.setUint8(i, 0);
                        }
                        bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
                        bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
                        this.hashBuffer();
                        this.finished = true;
                    }
                    // The value in state is little-endian rather than big-endian, so flip
                    // each word into a new Uint8Array
                    var out = new Uint8Array(constants_1.DIGEST_LENGTH);
                    for (var i = 0; i < 8; i++) {
                        out[i * 4] = (this.state[i] >>> 24) & 0xff;
                        out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
                        out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
                        out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
                    }
                    return out;
                };
                RawSha256.prototype.hashBuffer = function () {
                    var _a = this, buffer = _a.buffer, state = _a.state;
                    var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
                    for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
                        if (i < 16) {
                            this.temp[i] =
                                ((buffer[i * 4] & 0xff) << 24) |
                                ((buffer[i * 4 + 1] & 0xff) << 16) |
                                ((buffer[i * 4 + 2] & 0xff) << 8) |
                                (buffer[i * 4 + 3] & 0xff);
                        }
                        else {
                            var u = this.temp[i - 2];
                            var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);
                            u = this.temp[i - 15];
                            var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);
                            this.temp[i] =
                                ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);
                        }
                        var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^
                            ((state4 >>> 11) | (state4 << 21)) ^
                            ((state4 >>> 25) | (state4 << 7))) +
                            ((state4 & state5) ^ (~state4 & state6))) |
                            0) +
                            ((state7 + ((constants_1.KEY[i] + this.temp[i]) | 0)) | 0)) |
                            0;
                        var t2 = ((((state0 >>> 2) | (state0 << 30)) ^
                            ((state0 >>> 13) | (state0 << 19)) ^
                            ((state0 >>> 22) | (state0 << 10))) +
                            ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |
                            0;
                        state7 = state6;
                        state6 = state5;
                        state5 = state4;
                        state4 = (state3 + t1) | 0;
                        state3 = state2;
                        state2 = state1;
                        state1 = state0;
                        state0 = (t1 + t2) | 0;
                    }
                    state[0] += state0;
                    state[1] += state1;
                    state[2] += state2;
                    state[3] += state3;
                    state[4] += state4;
                    state[5] += state5;
                    state[6] += state6;
                    state[7] += state7;
                };
                return RawSha256;
            }());
            exports.RawSha256 = RawSha256;
            //# sourceMappingURL=data:application/json;base64,

            /***/
}),

    /***/ 9945:
    /***/ ((__unused_webpack_module, exports) => {

            "use strict";

            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
            /**
             * @internal
             */
            exports.BLOCK_SIZE = 64;
            /**
             * @internal
             */
            exports.DIGEST_LENGTH = 32;
            /**
             * @internal
             */
            exports.KEY = new Uint32Array([
                0x428a2f98,
                0x71374491,
                0xb5c0fbcf,
                0xe9b5dba5,
                0x3956c25b,
                0x59f111f1,
                0x923f82a4,
                0xab1c5ed5,
                0xd807aa98,
                0x12835b01,
                0x243185be,
                0x550c7dc3,
                0x72be5d74,
                0x80deb1fe,
                0x9bdc06a7,
                0xc19bf174,
                0xe49b69c1,
                0xefbe4786,
                0x0fc19dc6,
                0x240ca1cc,
                0x2de92c6f,
                0x4a7484aa,
                0x5cb0a9dc,
                0x76f988da,
                0x983e5152,
                0xa831c66d,
                0xb00327c8,
                0xbf597fc7,
                0xc6e00bf3,
                0xd5a79147,
                0x06ca6351,
                0x14292967,
                0x27b70a85,
                0x2e1b2138,
                0x4d2c6dfc,
                0x53380d13,
                0x650a7354,
                0x766a0abb,
                0x81c2c92e,
                0x92722c85,
                0xa2bfe8a1,
                0xa81a664b,
                0xc24b8b70,
                0xc76c51a3,
                0xd192e819,
                0xd6990624,
                0xf40e3585,
                0x106aa070,
                0x19a4c116,
                0x1e376c08,
                0x2748774c,
                0x34b0bcb5,
                0x391c0cb3,
                0x4ed8aa4a,
                0x5b9cca4f,
                0x682e6ff3,
                0x748f82ee,
                0x78a5636f,
                0x84c87814,
                0x8cc70208,
                0x90befffa,
                0xa4506ceb,
                0xbef9a3f7,
                0xc67178f2
            ]);
            /**
             * @internal
             */
            exports.INIT = [
                0x6a09e667,
                0xbb67ae85,
                0x3c6ef372,
                0xa54ff53a,
                0x510e527f,
                0x9b05688c,
                0x1f83d9ab,
                0x5be0cd19
            ];
            /**
             * @internal
             */
            exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNVLFFBQUEsVUFBVSxHQUFXLEVBQUUsQ0FBQztBQUVyQzs7R0FFRztBQUNVLFFBQUEsYUFBYSxHQUFXLEVBQUUsQ0FBQztBQUV4Qzs7R0FFRztBQUNVLFFBQUEsR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDO0lBQ2pDLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7Q0FDWCxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNVLFFBQUEsSUFBSSxHQUFHO0lBQ2xCLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0NBQ1gsQ0FBQztBQUVGOztHQUVHO0FBQ1UsUUFBQSxtQkFBbUIsR0FBRyxTQUFBLENBQUMsRUFBSSxFQUFFLENBQUEsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQkxPQ0tfU0laRTogbnVtYmVyID0gNjQ7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBESUdFU1RfTEVOR1RIOiBudW1iZXIgPSAzMjtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFWSA9IG5ldyBVaW50MzJBcnJheShbXG4gIDB4NDI4YTJmOTgsXG4gIDB4NzEzNzQ0OTEsXG4gIDB4YjVjMGZiY2YsXG4gIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsXG4gIDB4NTlmMTExZjEsXG4gIDB4OTIzZjgyYTQsXG4gIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsXG4gIDB4MTI4MzViMDEsXG4gIDB4MjQzMTg1YmUsXG4gIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsXG4gIDB4ODBkZWIxZmUsXG4gIDB4OWJkYzA2YTcsXG4gIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsXG4gIDB4ZWZiZTQ3ODYsXG4gIDB4MGZjMTlkYzYsXG4gIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsXG4gIDB4NGE3NDg0YWEsXG4gIDB4NWNiMGE5ZGMsXG4gIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsXG4gIDB4YTgzMWM2NmQsXG4gIDB4YjAwMzI3YzgsXG4gIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsXG4gIDB4ZDVhNzkxNDcsXG4gIDB4MDZjYTYzNTEsXG4gIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsXG4gIDB4MmUxYjIxMzgsXG4gIDB4NGQyYzZkZmMsXG4gIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsXG4gIDB4NzY2YTBhYmIsXG4gIDB4ODFjMmM5MmUsXG4gIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsXG4gIDB4YTgxYTY2NGIsXG4gIDB4YzI0YjhiNzAsXG4gIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksXG4gIDB4ZDY5OTA2MjQsXG4gIDB4ZjQwZTM1ODUsXG4gIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsXG4gIDB4MWUzNzZjMDgsXG4gIDB4Mjc0ODc3NGMsXG4gIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsXG4gIDB4NGVkOGFhNGEsXG4gIDB4NWI5Y2NhNGYsXG4gIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsXG4gIDB4NzhhNTYzNmYsXG4gIDB4ODRjODc4MTQsXG4gIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsXG4gIDB4YTQ1MDZjZWIsXG4gIDB4YmVmOWEzZjcsXG4gIDB4YzY3MTc4ZjJcbl0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgSU5JVCA9IFtcbiAgMHg2YTA5ZTY2NyxcbiAgMHhiYjY3YWU4NSxcbiAgMHgzYzZlZjM3MixcbiAgMHhhNTRmZjUzYSxcbiAgMHg1MTBlNTI3ZixcbiAgMHg5YjA1Njg4YyxcbiAgMHgxZjgzZDlhYixcbiAgMHg1YmUwY2QxOVxuXTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9IQVNIQUJMRV9MRU5HVEggPSAyICoqIDUzIC0gMTtcbiJdfQ==

            /***/
}),

    /***/ 1938:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";

            Object.defineProperty(exports, "__esModule", ({ value: true }));
            var tslib_1 = __webpack_require__(3541);
            (0, tslib_1.__exportStar)(__webpack_require__(5430), exports);
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vanNTaGEyNTZcIjtcbiJdfQ==

            /***/
}),

    /***/ 5430:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";

            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.Sha256 = void 0;
            var tslib_1 = __webpack_require__(3541);
            var constants_1 = __webpack_require__(9945);
            var RawSha256_1 = __webpack_require__(914);
            var util_1 = __webpack_require__(7658);
            var Sha256 = /** @class */ (function () {
                function Sha256(secret) {
                    this.hash = new RawSha256_1.RawSha256();
                    if (secret) {
                        this.outer = new RawSha256_1.RawSha256();
                        var inner = bufferFromSecret(secret);
                        var outer = new Uint8Array(constants_1.BLOCK_SIZE);
                        outer.set(inner);
                        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
                            inner[i] ^= 0x36;
                            outer[i] ^= 0x5c;
                        }
                        this.hash.update(inner);
                        this.outer.update(outer);
                        // overwrite the copied key in memory
                        for (var i = 0; i < inner.byteLength; i++) {
                            inner[i] = 0;
                        }
                    }
                }
                Sha256.prototype.update = function (toHash) {
                    if ((0, util_1.isEmptyData)(toHash) || this.error) {
                        return;
                    }
                    try {
                        this.hash.update((0, util_1.convertToBuffer)(toHash));
                    }
                    catch (e) {
                        this.error = e;
                    }
                };
                /* This synchronous method keeps compatibility
                 * with the v2 aws-sdk.
                 */
                Sha256.prototype.digestSync = function () {
                    if (this.error) {
                        throw this.error;
                    }
                    if (this.outer) {
                        if (!this.outer.finished) {
                            this.outer.update(this.hash.digest());
                        }
                        return this.outer.digest();
                    }
                    return this.hash.digest();
                };
                /* The underlying digest method here is synchronous.
                 * To keep the same interface with the other hash functions
                 * the default is to expose this as an async method.
                 * However, it can sometimes be useful to have a sync method.
                 */
                Sha256.prototype.digest = function () {
                    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
                        return (0, tslib_1.__generator)(this, function (_a) {
                            return [2 /*return*/, this.digestSync()];
                        });
                    });
                };
                return Sha256;
            }());
            exports.Sha256 = Sha256;
            function bufferFromSecret(secret) {
                var input = (0, util_1.convertToBuffer)(secret);
                if (input.byteLength > constants_1.BLOCK_SIZE) {
                    var bufferHash = new RawSha256_1.RawSha256();
                    bufferHash.update(input);
                    input = bufferHash.digest();
                }
                var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
                buffer.set(input);
                return buffer;
            }
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNTaGEyNTYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvanNTaGEyNTYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHlDQUF5QztBQUN6Qyx5Q0FBd0M7QUFFeEMseUNBQWdFO0FBRWhFO0lBS0UsZ0JBQVksTUFBbUI7UUFKZCxTQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7UUFLdEMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1lBQzdCLElBQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLElBQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLHNCQUFVLENBQUMsQ0FBQztZQUN6QyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxzQkFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2dCQUNqQixLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2FBQ2xCO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFekIscUNBQXFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7U0FDRjtJQUNILENBQUM7SUFFRCx1QkFBTSxHQUFOLFVBQU8sTUFBa0I7UUFDdkIsSUFBSSxJQUFBLGtCQUFXLEVBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQVUsR0FBVjtRQUNFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNsQjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO1lBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzVCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0csdUJBQU0sR0FBWjs7O2dCQUNFLHNCQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBQzs7O0tBQzFCO0lBQ0gsYUFBQztBQUFELENBQUMsQUFsRUQsSUFrRUM7QUFsRVksd0JBQU07QUFvRW5CLFNBQVMsZ0JBQWdCLENBQUMsTUFBa0I7SUFDMUMsSUFBSSxLQUFLLEdBQUcsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBDLElBQUksS0FBSyxDQUFDLFVBQVUsR0FBRyxzQkFBVSxFQUFFO1FBQ2pDLElBQU0sVUFBVSxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1FBQ25DLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUM3QjtJQUVELElBQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLHNCQUFVLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTE9DS19TSVpFIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBSYXdTaGEyNTYgfSBmcm9tIFwiLi9SYXdTaGEyNTZcIjtcbmltcG9ydCB7IEhhc2gsIFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhLCBjb252ZXJ0VG9CdWZmZXIgfSBmcm9tIFwiQGF3cy1jcnlwdG8vdXRpbFwiO1xuXG5leHBvcnQgY2xhc3MgU2hhMjU2IGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFzaCA9IG5ldyBSYXdTaGEyNTYoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRlcj86IFJhd1NoYTI1NjtcbiAgcHJpdmF0ZSBlcnJvcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0KSB7XG4gICAgICB0aGlzLm91dGVyID0gbmV3IFJhd1NoYTI1NigpO1xuICAgICAgY29uc3QgaW5uZXIgPSBidWZmZXJGcm9tU2VjcmV0KHNlY3JldCk7XG4gICAgICBjb25zdCBvdXRlciA9IG5ldyBVaW50OEFycmF5KEJMT0NLX1NJWkUpO1xuICAgICAgb3V0ZXIuc2V0KGlubmVyKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBCTE9DS19TSVpFOyBpKyspIHtcbiAgICAgICAgaW5uZXJbaV0gXj0gMHgzNjtcbiAgICAgICAgb3V0ZXJbaV0gXj0gMHg1YztcbiAgICAgIH1cblxuICAgICAgdGhpcy5oYXNoLnVwZGF0ZShpbm5lcik7XG4gICAgICB0aGlzLm91dGVyLnVwZGF0ZShvdXRlcik7XG5cbiAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgY29waWVkIGtleSBpbiBtZW1vcnlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlubmVyW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkgfHwgdGhpcy5lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmhhc2gudXBkYXRlKGNvbnZlcnRUb0J1ZmZlcih0b0hhc2gpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yID0gZTtcbiAgICB9XG4gIH1cblxuICAvKiBUaGlzIHN5bmNocm9ub3VzIG1ldGhvZCBrZWVwcyBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggdGhlIHYyIGF3cy1zZGsuXG4gICAqL1xuICBkaWdlc3RTeW5jKCk6IFVpbnQ4QXJyYXkge1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLmVycm9yO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm91dGVyKSB7XG4gICAgICBpZiAoIXRoaXMub3V0ZXIuZmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5oYXNoLmRpZ2VzdCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaGFzaC5kaWdlc3QoKTtcbiAgfVxuXG4gIC8qIFRoZSB1bmRlcmx5aW5nIGRpZ2VzdCBtZXRob2QgaGVyZSBpcyBzeW5jaHJvbm91cy5cbiAgICogVG8ga2VlcCB0aGUgc2FtZSBpbnRlcmZhY2Ugd2l0aCB0aGUgb3RoZXIgaGFzaCBmdW5jdGlvbnNcbiAgICogdGhlIGRlZmF1bHQgaXMgdG8gZXhwb3NlIHRoaXMgYXMgYW4gYXN5bmMgbWV0aG9kLlxuICAgKiBIb3dldmVyLCBpdCBjYW4gc29tZXRpbWVzIGJlIHVzZWZ1bCB0byBoYXZlIGEgc3luYyBtZXRob2QuXG4gICAqL1xuICBhc3luYyBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMuZGlnZXN0U3luYygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckZyb21TZWNyZXQoc2VjcmV0OiBTb3VyY2VEYXRhKTogVWludDhBcnJheSB7XG4gIGxldCBpbnB1dCA9IGNvbnZlcnRUb0J1ZmZlcihzZWNyZXQpO1xuXG4gIGlmIChpbnB1dC5ieXRlTGVuZ3RoID4gQkxPQ0tfU0laRSkge1xuICAgIGNvbnN0IGJ1ZmZlckhhc2ggPSBuZXcgUmF3U2hhMjU2KCk7XG4gICAgYnVmZmVySGFzaC51cGRhdGUoaW5wdXQpO1xuICAgIGlucHV0ID0gYnVmZmVySGFzaC5kaWdlc3QoKTtcbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KEJMT0NLX1NJWkUpO1xuICBidWZmZXIuc2V0KGlucHV0KTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbiJdfQ==

            /***/
}),

    /***/ 3541:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   __assign: () => (/* binding */ __assign),
    /* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
    /* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
    /* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
    /* harmony export */   __await: () => (/* binding */ __await),
    /* harmony export */   __awaiter: () => (/* binding */ __awaiter),
    /* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
    /* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
    /* harmony export */   __createBinding: () => (/* binding */ __createBinding),
    /* harmony export */   __decorate: () => (/* binding */ __decorate),
    /* harmony export */   __exportStar: () => (/* binding */ __exportStar),
    /* harmony export */   __extends: () => (/* binding */ __extends),
    /* harmony export */   __generator: () => (/* binding */ __generator),
    /* harmony export */   __importDefault: () => (/* binding */ __importDefault),
    /* harmony export */   __importStar: () => (/* binding */ __importStar),
    /* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
    /* harmony export */   __metadata: () => (/* binding */ __metadata),
    /* harmony export */   __param: () => (/* binding */ __param),
    /* harmony export */   __read: () => (/* binding */ __read),
    /* harmony export */   __rest: () => (/* binding */ __rest),
    /* harmony export */   __spread: () => (/* binding */ __spread),
    /* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
    /* harmony export */   __values: () => (/* binding */ __values)
                /* harmony export */
});
            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise */

            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return extendStatics(d, b);
            };

            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var __assign = function () {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                }
                return __assign.apply(this, arguments);
            }

            function __rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }

            function __param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); }
            }

            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
            }

            function __awaiter(thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }

            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (_) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            }

            function __createBinding(o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            }

            function __exportStar(m, exports) {
                for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
            }

            function __values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }

            function __spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            };

            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }

            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
            }

            function __asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
            }

            function __asyncValues(o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }

            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
                return cooked;
            };

            function __importStar(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                result.default = mod;
                return result;
            }

            function __importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }

            function __classPrivateFieldGet(receiver, privateMap) {
                if (!privateMap.has(receiver)) {
                    throw new TypeError("attempted to get private field on non-instance");
                }
                return privateMap.get(receiver);
            }

            function __classPrivateFieldSet(receiver, privateMap, value) {
                if (!privateMap.has(receiver)) {
                    throw new TypeError("attempted to set private field on non-instance");
                }
                privateMap.set(receiver, value);
                return value;
            }


            /***/
}),

    /***/ 1106:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";

            // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.convertToBuffer = void 0;
            var util_utf8_browser_1 = __webpack_require__(8668);
            // Quick polyfill
            var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from
                ? function (input) { return Buffer.from(input, "utf8"); }
                : util_utf8_browser_1.fromUtf8;
            function convertToBuffer(data) {
                // Already a Uint8, do nothing
                if (data instanceof Uint8Array)
                    return data;
                if (typeof data === "string") {
                    return fromUtf8(data);
                }
                if (ArrayBuffer.isView(data)) {
                    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
                }
                return new Uint8Array(data);
            }
            exports.convertToBuffer = convertToBuffer;
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFRvQnVmZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnZlcnRUb0J1ZmZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBR3RDLGdFQUF5RTtBQUV6RSxpQkFBaUI7QUFDakIsSUFBTSxRQUFRLEdBQ1osT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxJQUFJO0lBQzFDLENBQUMsQ0FBQyxVQUFDLEtBQWEsSUFBSyxPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUExQixDQUEwQjtJQUMvQyxDQUFDLENBQUMsNEJBQWUsQ0FBQztBQUV0QixTQUFnQixlQUFlLENBQUMsSUFBZ0I7SUFDOUMsOEJBQThCO0lBQzlCLElBQUksSUFBSSxZQUFZLFVBQVU7UUFBRSxPQUFPLElBQUksQ0FBQztJQUU1QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQy9DLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQWpCRCwwQ0FpQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggYXMgZnJvbVV0ZjhCcm93c2VyIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXRmOC1icm93c2VyXCI7XG5cbi8vIFF1aWNrIHBvbHlmaWxsXG5jb25zdCBmcm9tVXRmOCA9XG4gIHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgQnVmZmVyLmZyb21cbiAgICA/IChpbnB1dDogc3RyaW5nKSA9PiBCdWZmZXIuZnJvbShpbnB1dCwgXCJ1dGY4XCIpXG4gICAgOiBmcm9tVXRmOEJyb3dzZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9CdWZmZXIoZGF0YTogU291cmNlRGF0YSk6IFVpbnQ4QXJyYXkge1xuICAvLyBBbHJlYWR5IGEgVWludDgsIGRvIG5vdGhpbmdcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSByZXR1cm4gZGF0YTtcblxuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgZGF0YS5idWZmZXIsXG4gICAgICBkYXRhLmJ5dGVPZmZzZXQsXG4gICAgICBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn1cbiJdfQ==

            /***/
}),

    /***/ 7658:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";

            // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
            var convertToBuffer_1 = __webpack_require__(1106);
            Object.defineProperty(exports, "convertToBuffer", ({ enumerable: true, get: function () { return convertToBuffer_1.convertToBuffer; } }));
            var isEmptyData_1 = __webpack_require__(4304);
            Object.defineProperty(exports, "isEmptyData", ({ enumerable: true, get: function () { return isEmptyData_1.isEmptyData; } }));
            var numToUint8_1 = __webpack_require__(2174);
            Object.defineProperty(exports, "numToUint8", ({ enumerable: true, get: function () { return numToUint8_1.numToUint8; } }));
            var uint32ArrayFrom_1 = __webpack_require__(1558);
            Object.defineProperty(exports, "uint32ArrayFrom", ({ enumerable: true, get: function () { return uint32ArrayFrom_1.uint32ArrayFrom; } }));
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUV0QyxxREFBb0Q7QUFBM0Msa0hBQUEsZUFBZSxPQUFBO0FBQ3hCLDZDQUE0QztBQUFuQywwR0FBQSxXQUFXLE9BQUE7QUFDcEIsMkNBQTBDO0FBQWpDLHdHQUFBLFVBQVUsT0FBQTtBQUNuQixxREFBa0Q7QUFBMUMsa0hBQUEsZUFBZSxPQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbmV4cG9ydCB7IGNvbnZlcnRUb0J1ZmZlciB9IGZyb20gXCIuL2NvbnZlcnRUb0J1ZmZlclwiO1xuZXhwb3J0IHsgaXNFbXB0eURhdGEgfSBmcm9tIFwiLi9pc0VtcHR5RGF0YVwiO1xuZXhwb3J0IHsgbnVtVG9VaW50OCB9IGZyb20gXCIuL251bVRvVWludDhcIjtcbmV4cG9ydCB7dWludDMyQXJyYXlGcm9tfSBmcm9tICcuL3VpbnQzMkFycmF5RnJvbSc7XG4iXX0=

            /***/
}),

    /***/ 4304:
    /***/ ((__unused_webpack_module, exports) => {

            "use strict";

            // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.isEmptyData = void 0;
            function isEmptyData(data) {
                if (typeof data === "string") {
                    return data.length === 0;
                }
                return data.byteLength === 0;
            }
            exports.isEmptyData = isEmptyData;
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbXB0eURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaXNFbXB0eURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUl0QyxTQUFnQixXQUFXLENBQUMsSUFBZ0I7SUFDMUMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztLQUMxQjtJQUVELE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQU5ELGtDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbmltcG9ydCB7IFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGE6IFNvdXJjZURhdGEpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbn1cbiJdfQ==

            /***/
}),

    /***/ 2174:
    /***/ ((__unused_webpack_module, exports) => {

            "use strict";

            // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.numToUint8 = void 0;
            function numToUint8(num) {
                return new Uint8Array([
                    (num & 0xff000000) >> 24,
                    (num & 0x00ff0000) >> 16,
                    (num & 0x0000ff00) >> 8,
                    num & 0x000000ff,
                ]);
            }
            exports.numToUint8 = numToUint8;
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtVG9VaW50OC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9udW1Ub1VpbnQ4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7QUFFdEMsU0FBZ0IsVUFBVSxDQUFDLEdBQVc7SUFDcEMsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUNwQixDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFO1FBQ3hCLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUU7UUFDeEIsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztRQUN2QixHQUFHLEdBQUcsVUFBVTtLQUNqQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBUEQsZ0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuZXhwb3J0IGZ1bmN0aW9uIG51bVRvVWludDgobnVtOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAobnVtICYgMHhmZjAwMDAwMCkgPj4gMjQsXG4gICAgKG51bSAmIDB4MDBmZjAwMDApID4+IDE2LFxuICAgIChudW0gJiAweDAwMDBmZjAwKSA+PiA4LFxuICAgIG51bSAmIDB4MDAwMDAwZmYsXG4gIF0pO1xufVxuIl19

            /***/
}),

    /***/ 1558:
    /***/ ((__unused_webpack_module, exports) => {

            "use strict";

            // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.uint32ArrayFrom = void 0;
            // IE 11 does not support Array.from, so we do it manually
            function uint32ArrayFrom(a_lookUpTable) {
                if (!Array.from) {
                    var return_array = new Uint32Array(a_lookUpTable.length);
                    var a_index = 0;
                    while (a_index < a_lookUpTable.length) {
                        return_array[a_index] = a_lookUpTable[a_index];
                    }
                    return return_array;
                }
                return Uint32Array.from(a_lookUpTable);
            }
            exports.uint32ArrayFrom = uint32ArrayFrom;
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWludDMyQXJyYXlGcm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3VpbnQzMkFycmF5RnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBRXRDLDBEQUEwRDtBQUMxRCxTQUFnQixlQUFlLENBQUMsYUFBNEI7SUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDZixJQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDMUQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO1FBQ2YsT0FBTyxPQUFPLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNyQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1NBQy9DO1FBQ0QsT0FBTyxZQUFZLENBQUE7S0FDcEI7SUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDeEMsQ0FBQztBQVZELDBDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbi8vIElFIDExIGRvZXMgbm90IHN1cHBvcnQgQXJyYXkuZnJvbSwgc28gd2UgZG8gaXQgbWFudWFsbHlcbmV4cG9ydCBmdW5jdGlvbiB1aW50MzJBcnJheUZyb20oYV9sb29rVXBUYWJsZTogQXJyYXk8bnVtYmVyPik6IFVpbnQzMkFycmF5IHtcbiAgaWYgKCFBcnJheS5mcm9tKSB7XG4gICAgY29uc3QgcmV0dXJuX2FycmF5ID0gbmV3IFVpbnQzMkFycmF5KGFfbG9va1VwVGFibGUubGVuZ3RoKVxuICAgIGxldCBhX2luZGV4ID0gMFxuICAgIHdoaWxlIChhX2luZGV4IDwgYV9sb29rVXBUYWJsZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybl9hcnJheVthX2luZGV4XSA9IGFfbG9va1VwVGFibGVbYV9pbmRleF1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVybl9hcnJheVxuICB9XG4gIHJldHVybiBVaW50MzJBcnJheS5mcm9tKGFfbG9va1VwVGFibGUpXG59XG4iXX0=

            /***/
}),

    /***/ 8668:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                fromUtf8: () => (/* binding */ es_fromUtf8),
                toUtf8: () => (/* binding */ es_toUtf8)
            });

            ;// CONCATENATED MODULE: ./node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
            /**
             * Converts a JS string from its native UCS-2/UTF-16 representation into a
             * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.
             *
             * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google
             * Closure library, though updated to use typed arrays.
             */
            var fromUtf8 = function (input) {
                var bytes = [];
                for (var i = 0, len = input.length; i < len; i++) {
                    var value = input.charCodeAt(i);
                    if (value < 0x80) {
                        bytes.push(value);
                    }
                    else if (value < 0x800) {
                        bytes.push((value >> 6) | 192, (value & 63) | 128);
                    }
                    else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                        var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
                        bytes.push((surrogatePair >> 18) | 240, ((surrogatePair >> 12) & 63) | 128, ((surrogatePair >> 6) & 63) | 128, (surrogatePair & 63) | 128);
                    }
                    else {
                        bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);
                    }
                }
                return Uint8Array.from(bytes);
            };
            /**
             * Converts a typed array of bytes containing UTF-8 data into a native JS
             * string.
             *
             * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the
             * Google Closure library, though updated to use typed arrays and to better
             * handle astral plane code points.
             */
            var toUtf8 = function (input) {
                var decoded = "";
                for (var i = 0, len = input.length; i < len; i++) {
                    var byte = input[i];
                    if (byte < 0x80) {
                        decoded += String.fromCharCode(byte);
                    }
                    else if (192 <= byte && byte < 224) {
                        var nextByte = input[++i];
                        decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));
                    }
                    else if (240 <= byte && byte < 365) {
                        var surrogatePair = [byte, input[++i], input[++i], input[++i]];
                        var encoded = "%" + surrogatePair.map(function (byteValue) { return byteValue.toString(16); }).join("%");
                        decoded += decodeURIComponent(encoded);
                    }
                    else {
                        decoded += String.fromCharCode(((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63));
                    }
                }
                return decoded;
            };
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyZUpzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3B1cmVKcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsVUFBQyxLQUFhO0lBQ3BDLElBQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7SUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNoRCxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksS0FBSyxHQUFHLElBQUksRUFBRTtZQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25CO2FBQU0sSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFO1lBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBVSxFQUFFLENBQUMsS0FBSyxHQUFHLEVBQVEsQ0FBQyxHQUFHLEdBQVUsQ0FBQyxDQUFDO1NBQ3hFO2FBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssTUFBTSxFQUFFO1lBQy9HLElBQU0sYUFBYSxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQVksQ0FBQyxDQUFDO1lBQ3hHLEtBQUssQ0FBQyxJQUFJLENBQ1IsQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBVSxFQUNsQyxDQUFDLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQVEsQ0FBQyxHQUFHLEdBQVUsRUFDL0MsQ0FBQyxDQUFDLGFBQWEsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFRLENBQUMsR0FBRyxHQUFVLEVBQzlDLENBQUMsYUFBYSxHQUFHLEVBQVEsQ0FBQyxHQUFHLEdBQVUsQ0FDeEMsQ0FBQztTQUNIO2FBQU07WUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEdBQVUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQVEsQ0FBQyxHQUFHLEdBQVUsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFRLENBQUMsR0FBRyxHQUFVLENBQUMsQ0FBQztTQUNqSDtLQUNGO0lBRUQsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsVUFBQyxLQUFpQjtJQUN0QyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNoRCxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxFQUFFO1lBQ2YsT0FBTyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7YUFBTSxJQUFJLEdBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLEdBQVUsRUFBRTtZQUNsRCxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QixPQUFPLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLEVBQVEsQ0FBQyxDQUFDLENBQUM7U0FDakY7YUFBTSxJQUFJLEdBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLEdBQVcsRUFBRTtZQUNuRCxJQUFNLGFBQWEsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLElBQU0sT0FBTyxHQUFHLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQUMsU0FBUyxJQUFLLE9BQUEsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6RixPQUFPLElBQUksa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7YUFBTTtZQUNMLE9BQU8sSUFBSSxNQUFNLENBQUMsWUFBWSxDQUM1QixDQUFDLENBQUMsSUFBSSxHQUFHLEVBQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQVEsQ0FBQyxDQUNuRixDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgYSBKUyBzdHJpbmcgZnJvbSBpdHMgbmF0aXZlIFVDUy0yL1VURi0xNiByZXByZXNlbnRhdGlvbiBpbnRvIGFcbiAqIFVpbnQ4QXJyYXkgb2YgdGhlIGJ5dGVzIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBlcXVpdmFsZW50IGNoYXJhY3RlcnMgaW4gVVRGLTguXG4gKlxuICogQ3JpYmJlZCBmcm9tIHRoZSBgZ29vZy5jcnlwdC5zdHJpbmdUb1V0ZjhCeXRlQXJyYXlgIGZ1bmN0aW9uIGluIHRoZSBHb29nbGVcbiAqIENsb3N1cmUgbGlicmFyeSwgdGhvdWdoIHVwZGF0ZWQgdG8gdXNlIHR5cGVkIGFycmF5cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21VdGY4ID0gKGlucHV0OiBzdHJpbmcpOiBVaW50OEFycmF5ID0+IHtcbiAgY29uc3QgYnl0ZXM6IEFycmF5PG51bWJlcj4gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGlucHV0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmICh2YWx1ZSA8IDB4ODApIHtcbiAgICAgIGJ5dGVzLnB1c2godmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPCAweDgwMCkge1xuICAgICAgYnl0ZXMucHVzaCgodmFsdWUgPj4gNikgfCAwYjExMDAwMDAwLCAodmFsdWUgJiAwYjExMTExMSkgfCAwYjEwMDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKGkgKyAxIDwgaW5wdXQubGVuZ3RoICYmICh2YWx1ZSAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAoaW5wdXQuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgIGNvbnN0IHN1cnJvZ2F0ZVBhaXIgPSAweDEwMDAwICsgKCh2YWx1ZSAmIDBiMTExMTExMTExMSkgPDwgMTApICsgKGlucHV0LmNoYXJDb2RlQXQoKytpKSAmIDBiMTExMTExMTExMSk7XG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICAoc3Vycm9nYXRlUGFpciA+PiAxOCkgfCAwYjExMTEwMDAwLFxuICAgICAgICAoKHN1cnJvZ2F0ZVBhaXIgPj4gMTIpICYgMGIxMTExMTEpIHwgMGIxMDAwMDAwMCxcbiAgICAgICAgKChzdXJyb2dhdGVQYWlyID4+IDYpICYgMGIxMTExMTEpIHwgMGIxMDAwMDAwMCxcbiAgICAgICAgKHN1cnJvZ2F0ZVBhaXIgJiAwYjExMTExMSkgfCAwYjEwMDAwMDAwXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcy5wdXNoKCh2YWx1ZSA+PiAxMikgfCAwYjExMTAwMDAwLCAoKHZhbHVlID4+IDYpICYgMGIxMTExMTEpIHwgMGIxMDAwMDAwMCwgKHZhbHVlICYgMGIxMTExMTEpIHwgMGIxMDAwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShieXRlcyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgdHlwZWQgYXJyYXkgb2YgYnl0ZXMgY29udGFpbmluZyBVVEYtOCBkYXRhIGludG8gYSBuYXRpdmUgSlNcbiAqIHN0cmluZy5cbiAqXG4gKiBQYXJ0bHkgY3JpYmJlZCBmcm9tIHRoZSBgZ29vZy5jcnlwdC51dGY4Qnl0ZUFycmF5VG9TdHJpbmdgIGZ1bmN0aW9uIGluIHRoZVxuICogR29vZ2xlIENsb3N1cmUgbGlicmFyeSwgdGhvdWdoIHVwZGF0ZWQgdG8gdXNlIHR5cGVkIGFycmF5cyBhbmQgdG8gYmV0dGVyXG4gKiBoYW5kbGUgYXN0cmFsIHBsYW5lIGNvZGUgcG9pbnRzLlxuICovXG5leHBvcnQgY29uc3QgdG9VdGY4ID0gKGlucHV0OiBVaW50OEFycmF5KTogc3RyaW5nID0+IHtcbiAgbGV0IGRlY29kZWQgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW5wdXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBieXRlID0gaW5wdXRbaV07XG4gICAgaWYgKGJ5dGUgPCAweDgwKSB7XG4gICAgICBkZWNvZGVkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSk7XG4gICAgfSBlbHNlIGlmICgwYjExMDAwMDAwIDw9IGJ5dGUgJiYgYnl0ZSA8IDBiMTExMDAwMDApIHtcbiAgICAgIGNvbnN0IG5leHRCeXRlID0gaW5wdXRbKytpXTtcbiAgICAgIGRlY29kZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGJ5dGUgJiAwYjExMTExKSA8PCA2KSB8IChuZXh0Qnl0ZSAmIDBiMTExMTExKSk7XG4gICAgfSBlbHNlIGlmICgwYjExMTEwMDAwIDw9IGJ5dGUgJiYgYnl0ZSA8IDBiMTAxMTAxMTAxKSB7XG4gICAgICBjb25zdCBzdXJyb2dhdGVQYWlyID0gW2J5dGUsIGlucHV0WysraV0sIGlucHV0WysraV0sIGlucHV0WysraV1dO1xuICAgICAgY29uc3QgZW5jb2RlZCA9IFwiJVwiICsgc3Vycm9nYXRlUGFpci5tYXAoKGJ5dGVWYWx1ZSkgPT4gYnl0ZVZhbHVlLnRvU3RyaW5nKDE2KSkuam9pbihcIiVcIik7XG4gICAgICBkZWNvZGVkICs9IGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjb2RlZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAoKGJ5dGUgJiAwYjExMTEpIDw8IDEyKSB8ICgoaW5wdXRbKytpXSAmIDBiMTExMTExKSA8PCA2KSB8IChpbnB1dFsrK2ldICYgMGIxMTExMTEpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufTtcbiJdfQ==
            ;// CONCATENATED MODULE: ./node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
            function whatwgEncodingApi_fromUtf8(input) {
                return new TextEncoder().encode(input);
            }
            function whatwgEncodingApi_toUtf8(input) {
                return new TextDecoder("utf-8").decode(input);
            }
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hhdHdnRW5jb2RpbmdBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2hhdHdnRW5jb2RpbmdBcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUNBLE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBYTtJQUNwQyxPQUFPLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEtBQWlCO0lBQ3RDLE9BQU8sSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgZGVjbGFyYXRpb24gb2YgdGhlIGdsb2JhbCBUZXh0RW5jb2RlciBhbmQgVGV4dERlY29kZXIgY29uc3RydWN0b3JzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9lbmNvZGluZy5zcGVjLndoYXR3Zy5vcmcvXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5uYW1lc3BhY2UgRW5jb2Rpbmcge1xuICBpbnRlcmZhY2UgVGV4dERlY29kZXJPcHRpb25zIHtcbiAgICBmYXRhbD86IGJvb2xlYW47XG4gICAgaWdub3JlQk9NPzogYm9vbGVhbjtcbiAgfVxuXG4gIGludGVyZmFjZSBUZXh0RGVjb2RlT3B0aW9ucyB7XG4gICAgc3RyZWFtPzogYm9vbGVhbjtcbiAgfVxuXG4gIGludGVyZmFjZSBUZXh0RGVjb2RlciB7XG4gICAgcmVhZG9ubHkgZW5jb2Rpbmc6IHN0cmluZztcbiAgICByZWFkb25seSBmYXRhbDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpZ25vcmVCT006IGJvb2xlYW47XG4gICAgZGVjb2RlKGlucHV0PzogQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcsIG9wdGlvbnM/OiBUZXh0RGVjb2RlT3B0aW9ucyk6IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGV4dERlY29kZXJDb25zdHJ1Y3RvciB7XG4gICAgbmV3IChsYWJlbD86IHN0cmluZywgb3B0aW9ucz86IFRleHREZWNvZGVyT3B0aW9ucyk6IFRleHREZWNvZGVyO1xuICB9XG5cbiAgaW50ZXJmYWNlIFRleHRFbmNvZGVyIHtcbiAgICByZWFkb25seSBlbmNvZGluZzogXCJ1dGYtOFwiO1xuICAgIGVuY29kZShpbnB1dD86IHN0cmluZyk6IFVpbnQ4QXJyYXk7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFRleHRFbmNvZGVyQ29uc3RydWN0b3Ige1xuICAgIG5ldyAoKTogVGV4dEVuY29kZXI7XG4gIH1cbn1cblxuZGVjbGFyZSBjb25zdCBUZXh0RGVjb2RlcjogRW5jb2RpbmcuVGV4dERlY29kZXJDb25zdHJ1Y3RvcjtcblxuZGVjbGFyZSBjb25zdCBUZXh0RW5jb2RlcjogRW5jb2RpbmcuVGV4dEVuY29kZXJDb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21VdGY4KGlucHV0OiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShpbnB1dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjgoaW5wdXQ6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICByZXR1cm4gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIikuZGVjb2RlKGlucHV0KTtcbn1cbiJdfQ==
            ;// CONCATENATED MODULE: ./node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js


            var es_fromUtf8 = function (input) {
                return typeof TextEncoder === "function" ? whatwgEncodingApi_fromUtf8(input) : fromUtf8(input);
            };
            var es_toUtf8 = function (input) {
                return typeof TextDecoder === "function" ? whatwgEncodingApi_toUtf8(input) : toUtf8(input);
            };
            //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsSUFBSSxVQUFVLEVBQUUsTUFBTSxJQUFJLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsUUFBUSxJQUFJLG1CQUFtQixFQUFFLE1BQU0sSUFBSSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS25HLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxVQUFDLEtBQWE7SUFDcEMsT0FBQSxPQUFPLFdBQVcsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0FBQWxGLENBQWtGLENBQUM7QUFFckYsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLFVBQUMsS0FBaUI7SUFDdEMsT0FBQSxPQUFPLFdBQVcsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQTlFLENBQThFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tVXRmOCBhcyBqc0Zyb21VdGY4LCB0b1V0ZjggYXMganNUb1V0ZjggfSBmcm9tIFwiLi9wdXJlSnNcIjtcbmltcG9ydCB7IGZyb21VdGY4IGFzIHRleHRFbmNvZGVyRnJvbVV0ZjgsIHRvVXRmOCBhcyB0ZXh0RW5jb2RlclRvVXRmOCB9IGZyb20gXCIuL3doYXR3Z0VuY29kaW5nQXBpXCI7XG5cbmRlY2xhcmUgY29uc3QgVGV4dERlY29kZXI6IEZ1bmN0aW9uIHwgdW5kZWZpbmVkO1xuZGVjbGFyZSBjb25zdCBUZXh0RW5jb2RlcjogRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBmcm9tVXRmOCA9IChpbnB1dDogc3RyaW5nKTogVWludDhBcnJheSA9PlxuICB0eXBlb2YgVGV4dEVuY29kZXIgPT09IFwiZnVuY3Rpb25cIiA/IHRleHRFbmNvZGVyRnJvbVV0ZjgoaW5wdXQpIDoganNGcm9tVXRmOChpbnB1dCk7XG5cbmV4cG9ydCBjb25zdCB0b1V0ZjggPSAoaW5wdXQ6IFVpbnQ4QXJyYXkpOiBzdHJpbmcgPT5cbiAgdHlwZW9mIFRleHREZWNvZGVyID09PSBcImZ1bmN0aW9uXCIgPyB0ZXh0RW5jb2RlclRvVXRmOChpbnB1dCkgOiBqc1RvVXRmOChpbnB1dCk7XG4iXX0=

            /***/
}),

    /***/ 6949:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                t4: () => (/* binding */ Platform),
                ij: () => (/* binding */ getUserAgent)
            });

            // UNUSED EXPORTS: default

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/Platform/version.js
            // generated by genversion
            var version = '5.0.4';
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/Platform/index.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */

            var BASE_USER_AGENT = "aws-amplify/" + version;
            var Platform = {
                userAgent: BASE_USER_AGENT,
                isReactNative: typeof navigator !== 'undefined' && navigator.product === 'ReactNative'
            };
            var getUserAgent = function getUserAgent() {
                return Platform.userAgent;
            };

    /**
     * @deprecated use named import
     */
    /* harmony default export */ const es_Platform = ((/* unused pure expression or super */ null && (Platform)));

            /***/
}),

    /***/ 4716:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                Bs: () => (/* binding */ addAuthCategoryToCognitoUserAgent),
                m0: () => (/* binding */ addFrameworkToCognitoUserAgent),
                Ib: () => (/* binding */ appendToCognitoUserAgent),
                Zm: () => (/* binding */ getAmplifyUserAgent)
            });

            // UNUSED EXPORTS: default

            // EXTERNAL MODULE: ./node_modules/amazon-cognito-identity-js/es/Platform/index.js + 1 modules
            var Platform = __webpack_require__(6949);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/Platform/constants.js
            var FRAMEWORK = {
                None: '0',
                ReactNative: '1'
            };
            var AUTH_CATEGORY = 'auth';
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/UserAgent.js



            // constructor
            function UserAgent() { }
            // public
            UserAgent.prototype.userAgent = (0, Platform/* getUserAgent */.ij)();
            var appendToCognitoUserAgent = function appendToCognitoUserAgent(content) {
                if (!content) {
                    return;
                }
                if (UserAgent.prototype.userAgent && !UserAgent.prototype.userAgent.includes(content)) {
                    UserAgent.prototype.userAgent = UserAgent.prototype.userAgent.concat(' ', content);
                }
                if (!UserAgent.prototype.userAgent || UserAgent.prototype.userAgent === '') {
                    UserAgent.prototype.userAgent = content;
                }
            };
            var addAuthCategoryToCognitoUserAgent = function addAuthCategoryToCognitoUserAgent() {
                UserAgent.category = AUTH_CATEGORY;
            };
            var addFrameworkToCognitoUserAgent = function addFrameworkToCognitoUserAgent(framework) {
                UserAgent.framework = framework;
            };
            var getAmplifyUserAgent = function getAmplifyUserAgent(action) {
                var uaCategoryAction = UserAgent.category ? " " + UserAgent.category : '';
                var uaFramework = UserAgent.framework ? " framework/" + UserAgent.framework : '';
                var userAgent = "" + UserAgent.prototype.userAgent + uaCategoryAction + uaFramework;
                return userAgent;
            };

    // class for defining the amzn user-agent
    /* harmony default export */ const es_UserAgent = ((/* unused pure expression or super */ null && (UserAgent)));

            /***/
}),

    /***/ 3477:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                sD: () => (/* reexport */ AuthenticationDetails),
                ZA: () => (/* reexport */ CognitoAccessToken),
                xk: () => (/* reexport */ CognitoIdToken),
                bR: () => (/* reexport */ CognitoRefreshToken),
                ws: () => (/* reexport */ CognitoUser),
                KC: () => (/* reexport */ CognitoUserAttribute),
                AM: () => (/* reexport */ CognitoUserPool),
                MZ: () => (/* reexport */ CognitoUserSession),
                eR: () => (/* reexport */ CookieStorage),
                Ib: () => (/* reexport */ UserAgent/* appendToCognitoUserAgent */.Ib)
            });

            // UNUSED EXPORTS: AuthenticationHelper, DateHelper, WordArray

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */
            /** @class */
            var AuthenticationDetails = /*#__PURE__*/function () {
                /**
                 * Constructs a new AuthenticationDetails object
                 * @param {object=} data Creation options.
                 * @param {string} data.Username User being authenticated.
                 * @param {string} data.Password Plain-text password to authenticate with.
                 * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.
                 * @param {(AttributeArg[])?} data.AuthParamaters Authentication paramaters for custom auth.
                 */
                function AuthenticationDetails(data) {
                    var _ref = data || {},
                        ValidationData = _ref.ValidationData,
                        Username = _ref.Username,
                        Password = _ref.Password,
                        AuthParameters = _ref.AuthParameters,
                        ClientMetadata = _ref.ClientMetadata;
                    this.validationData = ValidationData || {};
                    this.authParameters = AuthParameters || {};
                    this.clientMetadata = ClientMetadata || {};
                    this.username = Username;
                    this.password = Password;
                }

                /**
                 * @returns {string} the record's username
                 */
                var _proto = AuthenticationDetails.prototype;
                _proto.getUsername = function getUsername() {
                    return this.username;
                }

      /**
       * @returns {string} the record's password
       */;
                _proto.getPassword = function getPassword() {
                    return this.password;
                }

      /**
       * @returns {Array} the record's validationData
       */;
                _proto.getValidationData = function getValidationData() {
                    return this.validationData;
                }

      /**
       * @returns {Array} the record's authParameters
       */;
                _proto.getAuthParameters = function getAuthParameters() {
                    return this.authParameters;
                }

      /**
       * @returns {ClientMetadata} the clientMetadata for a Lambda trigger
       */;
                _proto.getClientMetadata = function getClientMetadata() {
                    return this.clientMetadata;
                };
                return AuthenticationDetails;
            }();

            // EXTERNAL MODULE: ./node_modules/buffer/index.js
            var buffer = __webpack_require__(8764);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js
            var cryptoSecureRandomInt_crypto;

            // Native crypto from window (Browser)
            if (typeof window !== 'undefined' && window.crypto) {
                cryptoSecureRandomInt_crypto = window.crypto;
            }

            // Native (experimental IE 11) crypto from window (Browser)
            if (!cryptoSecureRandomInt_crypto && typeof window !== 'undefined' && window.msCrypto) {
                cryptoSecureRandomInt_crypto = window.msCrypto;
            }

            // Native crypto from global (NodeJS)
            if (!cryptoSecureRandomInt_crypto && typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.crypto) {
                cryptoSecureRandomInt_crypto = __webpack_require__.g.crypto;
            }

            // Native crypto import via require (NodeJS)
            if (!cryptoSecureRandomInt_crypto && "function" === 'function') {
                try {
                    cryptoSecureRandomInt_crypto = __webpack_require__(6249);
                } catch (err) { }
            }

            /*
             * Cryptographically secure pseudorandom number generator
             * As Math.random() is cryptographically not safe to use
             */
            function cryptoSecureRandomInt() {
                if (cryptoSecureRandomInt_crypto) {
                    // Use getRandomValues method (Browser)
                    if (typeof cryptoSecureRandomInt_crypto.getRandomValues === 'function') {
                        try {
                            return cryptoSecureRandomInt_crypto.getRandomValues(new Uint32Array(1))[0];
                        } catch (err) { }
                    }

                    // Use randomBytes method (NodeJS)
                    if (typeof cryptoSecureRandomInt_crypto.randomBytes === 'function') {
                        try {
                            return cryptoSecureRandomInt_crypto.randomBytes(4).readInt32LE();
                        } catch (err) { }
                    }
                }
                throw new Error('Native crypto module could not be used to get secure random number.');
            }
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/utils/WordArray.js


            /**
             * Hex encoding strategy.
             * Converts a word array to a hex string.
             * @param {WordArray} wordArray The word array.
             * @return {string} The hex string.
             * @static
             */
            function hexStringify(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;

                // Convert
                var hexChars = [];
                for (var i = 0; i < sigBytes; i++) {
                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    hexChars.push((bite >>> 4).toString(16));
                    hexChars.push((bite & 0x0f).toString(16));
                }
                return hexChars.join('');
            }
            var WordArray = /*#__PURE__*/function () {
                function WordArray(words, sigBytes) {
                    words = this.words = words || [];
                    if (sigBytes != undefined) {
                        this.sigBytes = sigBytes;
                    } else {
                        this.sigBytes = words.length * 4;
                    }
                }
                var _proto = WordArray.prototype;
                _proto.random = function random(nBytes) {
                    var words = [];
                    for (var i = 0; i < nBytes; i += 4) {
                        words.push(cryptoSecureRandomInt());
                    }
                    return new WordArray(words, nBytes);
                };
                _proto.toString = function toString() {
                    return hexStringify(this);
                };
                return WordArray;
            }();

            // EXTERNAL MODULE: ./node_modules/@aws-crypto/sha256-js/build/index.js
            var build = __webpack_require__(1938);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/BigInteger.js
    // A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/
    //
    // All public methods have been removed except the following:
    //   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)
    //   toString (only radix 2, 4, 8, 16 and 32 supported)
    //   negate
    //   abs
    //   compareTo
    //   bitLength
    //   mod
    //   equals
    //   add
    //   subtract
    //   multiply
    //   divide
    //   modPow

    /* harmony default export */ const BigInteger = (BigInteger_BigInteger);

            /*
             * Copyright (c) 2003-2005  Tom Wu
             * All Rights Reserved.
             *
             * Permission is hereby granted, free of charge, to any person obtaining
             * a copy of this software and associated documentation files (the
             * "Software"), to deal in the Software without restriction, including
             * without limitation the rights to use, copy, modify, merge, publish,
             * distribute, sublicense, and/or sell copies of the Software, and to
             * permit persons to whom the Software is furnished to do so, subject to
             * the following conditions:
             *
             * The above copyright notice and this permission notice shall be
             * included in all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
             * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
             * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
             *
             * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
             * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
             * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
             * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
             * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
             *
             * In addition, the following condition applies:
             *
             * All redistributions must retain an intact copy of this copyright notice
             * and disclaimer.
             */

            // (public) Constructor
            function BigInteger_BigInteger(a, b) {
                if (a != null) this.fromString(a, b);
            }

            // return new, unset BigInteger
            function nbi() {
                return new BigInteger_BigInteger(null);
            }

            // Bits per digit
            var dbits;

            // JavaScript engine analysis
            var canary = 0xdeadbeefcafe;
            var j_lm = (canary & 0xffffff) == 0xefcafe;

            // am: Compute w_j += (x*this_i), propagate carries,
            // c is initial carry, returns final carry.
            // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
            // We need to select the fastest one that works in this environment.

            // am1: use a single mult and divide to get the high bits,
            // max digit bits should be 26 because
            // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
            function am1(i, x, w, j, c, n) {
                while (--n >= 0) {
                    var v = x * this[i++] + w[j] + c;
                    c = Math.floor(v / 0x4000000);
                    w[j++] = v & 0x3ffffff;
                }
                return c;
            }
            // am2 avoids a big mult-and-extract completely.
            // Max digit bits should be <= 30 because we do bitwise ops
            // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
            function am2(i, x, w, j, c, n) {
                var xl = x & 0x7fff,
                    xh = x >> 15;
                while (--n >= 0) {
                    var l = this[i] & 0x7fff;
                    var h = this[i++] >> 15;
                    var m = xh * l + h * xl;
                    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
                    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
                    w[j++] = l & 0x3fffffff;
                }
                return c;
            }
            // Alternately, set max digit bits to 28 since some
            // browsers slow down when dealing with 32-bit numbers.
            function am3(i, x, w, j, c, n) {
                var xl = x & 0x3fff,
                    xh = x >> 14;
                while (--n >= 0) {
                    var l = this[i] & 0x3fff;
                    var h = this[i++] >> 14;
                    var m = xh * l + h * xl;
                    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
                    c = (l >> 28) + (m >> 14) + xh * h;
                    w[j++] = l & 0xfffffff;
                }
                return c;
            }
            var inBrowser = typeof navigator !== 'undefined';
            if (inBrowser && j_lm && navigator.appName == 'Microsoft Internet Explorer') {
                BigInteger_BigInteger.prototype.am = am2;
                dbits = 30;
            } else if (inBrowser && j_lm && navigator.appName != 'Netscape') {
                BigInteger_BigInteger.prototype.am = am1;
                dbits = 26;
            } else {
                // Mozilla/Netscape seems to prefer am3
                BigInteger_BigInteger.prototype.am = am3;
                dbits = 28;
            }
            BigInteger_BigInteger.prototype.DB = dbits;
            BigInteger_BigInteger.prototype.DM = (1 << dbits) - 1;
            BigInteger_BigInteger.prototype.DV = 1 << dbits;
            var BI_FP = 52;
            BigInteger_BigInteger.prototype.FV = Math.pow(2, BI_FP);
            BigInteger_BigInteger.prototype.F1 = BI_FP - dbits;
            BigInteger_BigInteger.prototype.F2 = 2 * dbits - BI_FP;

            // Digit conversions
            var BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';
            var BI_RC = new Array();
            var rr, vv;
            rr = '0'.charCodeAt(0);
            for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
            rr = 'a'.charCodeAt(0);
            for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
            rr = 'A'.charCodeAt(0);
            for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
            function int2char(n) {
                return BI_RM.charAt(n);
            }
            function intAt(s, i) {
                var c = BI_RC[s.charCodeAt(i)];
                return c == null ? -1 : c;
            }

            // (protected) copy this to r
            function bnpCopyTo(r) {
                for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
                r.t = this.t;
                r.s = this.s;
            }

            // (protected) set from integer value x, -DV <= x < DV
            function bnpFromInt(x) {
                this.t = 1;
                this.s = x < 0 ? -1 : 0;
                if (x > 0) this[0] = x; else if (x < -1) this[0] = x + this.DV; else this.t = 0;
            }

            // return bigint initialized to value
            function nbv(i) {
                var r = nbi();
                r.fromInt(i);
                return r;
            }

            // (protected) set from string and radix
            function bnpFromString(s, b) {
                var k;
                if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
                this.t = 0;
                this.s = 0;
                var i = s.length,
                    mi = false,
                    sh = 0;
                while (--i >= 0) {
                    var x = intAt(s, i);
                    if (x < 0) {
                        if (s.charAt(i) == '-') mi = true;
                        continue;
                    }
                    mi = false;
                    if (sh == 0) this[this.t++] = x; else if (sh + k > this.DB) {
                        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
                        this[this.t++] = x >> this.DB - sh;
                    } else this[this.t - 1] |= x << sh;
                    sh += k;
                    if (sh >= this.DB) sh -= this.DB;
                }
                this.clamp();
                if (mi) BigInteger_BigInteger.ZERO.subTo(this, this);
            }

            // (protected) clamp off excess high words
            function bnpClamp() {
                var c = this.s & this.DM;
                while (this.t > 0 && this[this.t - 1] == c) --this.t;
            }

            // (public) return string representation in given radix
            function bnToString(b) {
                if (this.s < 0) return '-' + this.negate().toString(b);
                var k;
                if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
                var km = (1 << k) - 1,
                    d,
                    m = false,
                    r = '',
                    i = this.t;
                var p = this.DB - i * this.DB % k;
                if (i-- > 0) {
                    if (p < this.DB && (d = this[i] >> p) > 0) {
                        m = true;
                        r = int2char(d);
                    }
                    while (i >= 0) {
                        if (p < k) {
                            d = (this[i] & (1 << p) - 1) << k - p;
                            d |= this[--i] >> (p += this.DB - k);
                        } else {
                            d = this[i] >> (p -= k) & km;
                            if (p <= 0) {
                                p += this.DB;
                                --i;
                            }
                        }
                        if (d > 0) m = true;
                        if (m) r += int2char(d);
                    }
                }
                return m ? r : '0';
            }

            // (public) -this
            function bnNegate() {
                var r = nbi();
                BigInteger_BigInteger.ZERO.subTo(this, r);
                return r;
            }

            // (public) |this|
            function bnAbs() {
                return this.s < 0 ? this.negate() : this;
            }

            // (public) return + if this > a, - if this < a, 0 if equal
            function bnCompareTo(a) {
                var r = this.s - a.s;
                if (r != 0) return r;
                var i = this.t;
                r = i - a.t;
                if (r != 0) return this.s < 0 ? -r : r;
                while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
                return 0;
            }

            // returns bit length of the integer x
            function nbits(x) {
                var r = 1,
                    t;
                if ((t = x >>> 16) != 0) {
                    x = t;
                    r += 16;
                }
                if ((t = x >> 8) != 0) {
                    x = t;
                    r += 8;
                }
                if ((t = x >> 4) != 0) {
                    x = t;
                    r += 4;
                }
                if ((t = x >> 2) != 0) {
                    x = t;
                    r += 2;
                }
                if ((t = x >> 1) != 0) {
                    x = t;
                    r += 1;
                }
                return r;
            }

            // (public) return the number of bits in "this"
            function bnBitLength() {
                if (this.t <= 0) return 0;
                return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
            }

            // (protected) r = this << n*DB
            function bnpDLShiftTo(n, r) {
                var i;
                for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
                for (i = n - 1; i >= 0; --i) r[i] = 0;
                r.t = this.t + n;
                r.s = this.s;
            }

            // (protected) r = this >> n*DB
            function bnpDRShiftTo(n, r) {
                for (var i = n; i < this.t; ++i) r[i - n] = this[i];
                r.t = Math.max(this.t - n, 0);
                r.s = this.s;
            }

            // (protected) r = this << n
            function bnpLShiftTo(n, r) {
                var bs = n % this.DB;
                var cbs = this.DB - bs;
                var bm = (1 << cbs) - 1;
                var ds = Math.floor(n / this.DB),
                    c = this.s << bs & this.DM,
                    i;
                for (i = this.t - 1; i >= 0; --i) {
                    r[i + ds + 1] = this[i] >> cbs | c;
                    c = (this[i] & bm) << bs;
                }
                for (i = ds - 1; i >= 0; --i) r[i] = 0;
                r[ds] = c;
                r.t = this.t + ds + 1;
                r.s = this.s;
                r.clamp();
            }

            // (protected) r = this >> n
            function bnpRShiftTo(n, r) {
                r.s = this.s;
                var ds = Math.floor(n / this.DB);
                if (ds >= this.t) {
                    r.t = 0;
                    return;
                }
                var bs = n % this.DB;
                var cbs = this.DB - bs;
                var bm = (1 << bs) - 1;
                r[0] = this[ds] >> bs;
                for (var i = ds + 1; i < this.t; ++i) {
                    r[i - ds - 1] |= (this[i] & bm) << cbs;
                    r[i - ds] = this[i] >> bs;
                }
                if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
                r.t = this.t - ds;
                r.clamp();
            }

            // (protected) r = this - a
            function bnpSubTo(a, r) {
                var i = 0,
                    c = 0,
                    m = Math.min(a.t, this.t);
                while (i < m) {
                    c += this[i] - a[i];
                    r[i++] = c & this.DM;
                    c >>= this.DB;
                }
                if (a.t < this.t) {
                    c -= a.s;
                    while (i < this.t) {
                        c += this[i];
                        r[i++] = c & this.DM;
                        c >>= this.DB;
                    }
                    c += this.s;
                } else {
                    c += this.s;
                    while (i < a.t) {
                        c -= a[i];
                        r[i++] = c & this.DM;
                        c >>= this.DB;
                    }
                    c -= a.s;
                }
                r.s = c < 0 ? -1 : 0;
                if (c < -1) r[i++] = this.DV + c; else if (c > 0) r[i++] = c;
                r.t = i;
                r.clamp();
            }

            // (protected) r = this * a, r != this,a (HAC 14.12)
            // "this" should be the larger one if appropriate.
            function bnpMultiplyTo(a, r) {
                var x = this.abs(),
                    y = a.abs();
                var i = x.t;
                r.t = i + y.t;
                while (--i >= 0) r[i] = 0;
                for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
                r.s = 0;
                r.clamp();
                if (this.s != a.s) BigInteger_BigInteger.ZERO.subTo(r, r);
            }

            // (protected) r = this^2, r != this (HAC 14.16)
            function bnpSquareTo(r) {
                var x = this.abs();
                var i = r.t = 2 * x.t;
                while (--i >= 0) r[i] = 0;
                for (i = 0; i < x.t - 1; ++i) {
                    var c = x.am(i, x[i], r, 2 * i, 0, 1);
                    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                        r[i + x.t] -= x.DV;
                        r[i + x.t + 1] = 1;
                    }
                }
                if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
                r.s = 0;
                r.clamp();
            }

            // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
            // r != q, this != m.  q or r may be null.
            function bnpDivRemTo(m, q, r) {
                var pm = m.abs();
                if (pm.t <= 0) return;
                var pt = this.abs();
                if (pt.t < pm.t) {
                    if (q != null) q.fromInt(0);
                    if (r != null) this.copyTo(r);
                    return;
                }
                if (r == null) r = nbi();
                var y = nbi(),
                    ts = this.s,
                    ms = m.s;
                var nsh = this.DB - nbits(pm[pm.t - 1]);
                // normalize modulus
                if (nsh > 0) {
                    pm.lShiftTo(nsh, y);
                    pt.lShiftTo(nsh, r);
                } else {
                    pm.copyTo(y);
                    pt.copyTo(r);
                }
                var ys = y.t;
                var y0 = y[ys - 1];
                if (y0 == 0) return;
                var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
                var d1 = this.FV / yt,
                    d2 = (1 << this.F1) / yt,
                    e = 1 << this.F2;
                var i = r.t,
                    j = i - ys,
                    t = q == null ? nbi() : q;
                y.dlShiftTo(j, t);
                if (r.compareTo(t) >= 0) {
                    r[r.t++] = 1;
                    r.subTo(t, r);
                }
                BigInteger_BigInteger.ONE.dlShiftTo(ys, t);
                t.subTo(y, y);
                // "negative" y so we can replace sub with am later
                while (y.t < ys) y[y.t++] = 0;
                while (--j >= 0) {
                    // Estimate quotient digit
                    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
                    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                        // Try it out
                        y.dlShiftTo(j, t);
                        r.subTo(t, r);
                        while (r[i] < --qd) r.subTo(t, r);
                    }
                }
                if (q != null) {
                    r.drShiftTo(ys, q);
                    if (ts != ms) BigInteger_BigInteger.ZERO.subTo(q, q);
                }
                r.t = ys;
                r.clamp();
                if (nsh > 0) r.rShiftTo(nsh, r);
                // Denormalize remainder
                if (ts < 0) BigInteger_BigInteger.ZERO.subTo(r, r);
            }

            // (public) this mod a
            function bnMod(a) {
                var r = nbi();
                this.abs().divRemTo(a, null, r);
                if (this.s < 0 && r.compareTo(BigInteger_BigInteger.ZERO) > 0) a.subTo(r, r);
                return r;
            }

            // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
            // justification:
            //         xy == 1 (mod m)
            //         xy =  1+km
            //   xy(2-xy) = (1+km)(1-km)
            // x[y(2-xy)] = 1-k^2m^2
            // x[y(2-xy)] == 1 (mod m^2)
            // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
            // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
            // JS multiply "overflows" differently from C/C++, so care is needed here.
            function bnpInvDigit() {
                if (this.t < 1) return 0;
                var x = this[0];
                if ((x & 1) == 0) return 0;
                var y = x & 3;
                // y == 1/x mod 2^2
                y = y * (2 - (x & 0xf) * y) & 0xf;
                // y == 1/x mod 2^4
                y = y * (2 - (x & 0xff) * y) & 0xff;
                // y == 1/x mod 2^8
                y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;
                // y == 1/x mod 2^16
                // last step - calculate inverse mod DV directly;
                // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
                y = y * (2 - x * y % this.DV) % this.DV;
                // y == 1/x mod 2^dbits
                // we really want the negative inverse, and -DV < y < DV
                return y > 0 ? this.DV - y : -y;
            }
            function bnEquals(a) {
                return this.compareTo(a) == 0;
            }

            // (protected) r = this + a
            function bnpAddTo(a, r) {
                var i = 0,
                    c = 0,
                    m = Math.min(a.t, this.t);
                while (i < m) {
                    c += this[i] + a[i];
                    r[i++] = c & this.DM;
                    c >>= this.DB;
                }
                if (a.t < this.t) {
                    c += a.s;
                    while (i < this.t) {
                        c += this[i];
                        r[i++] = c & this.DM;
                        c >>= this.DB;
                    }
                    c += this.s;
                } else {
                    c += this.s;
                    while (i < a.t) {
                        c += a[i];
                        r[i++] = c & this.DM;
                        c >>= this.DB;
                    }
                    c += a.s;
                }
                r.s = c < 0 ? -1 : 0;
                if (c > 0) r[i++] = c; else if (c < -1) r[i++] = this.DV + c;
                r.t = i;
                r.clamp();
            }

            // (public) this + a
            function bnAdd(a) {
                var r = nbi();
                this.addTo(a, r);
                return r;
            }

            // (public) this - a
            function bnSubtract(a) {
                var r = nbi();
                this.subTo(a, r);
                return r;
            }

            // (public) this * a
            function bnMultiply(a) {
                var r = nbi();
                this.multiplyTo(a, r);
                return r;
            }

            // (public) this / a
            function bnDivide(a) {
                var r = nbi();
                this.divRemTo(a, r, null);
                return r;
            }

            // Montgomery reduction
            function Montgomery(m) {
                this.m = m;
                this.mp = m.invDigit();
                this.mpl = this.mp & 0x7fff;
                this.mph = this.mp >> 15;
                this.um = (1 << m.DB - 15) - 1;
                this.mt2 = 2 * m.t;
            }

            // xR mod m
            function montConvert(x) {
                var r = nbi();
                x.abs().dlShiftTo(this.m.t, r);
                r.divRemTo(this.m, null, r);
                if (x.s < 0 && r.compareTo(BigInteger_BigInteger.ZERO) > 0) this.m.subTo(r, r);
                return r;
            }

            // x/R mod m
            function montRevert(x) {
                var r = nbi();
                x.copyTo(r);
                this.reduce(r);
                return r;
            }

            // x = x/R mod m (HAC 14.32)
            function montReduce(x) {
                while (x.t <= this.mt2)
                    // pad x so am has enough room later
                    x[x.t++] = 0;
                for (var i = 0; i < this.m.t; ++i) {
                    // faster way of calculating u0 = x[i]*mp mod DV
                    var j = x[i] & 0x7fff;
                    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
                    // use am to combine the multiply-shift-add into one call
                    j = i + this.m.t;
                    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
                    // propagate carry
                    while (x[j] >= x.DV) {
                        x[j] -= x.DV;
                        x[++j]++;
                    }
                }
                x.clamp();
                x.drShiftTo(this.m.t, x);
                if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
            }

            // r = "x^2/R mod m"; x != r
            function montSqrTo(x, r) {
                x.squareTo(r);
                this.reduce(r);
            }

            // r = "xy/R mod m"; x,y != r
            function montMulTo(x, y, r) {
                x.multiplyTo(y, r);
                this.reduce(r);
            }
            Montgomery.prototype.convert = montConvert;
            Montgomery.prototype.revert = montRevert;
            Montgomery.prototype.reduce = montReduce;
            Montgomery.prototype.mulTo = montMulTo;
            Montgomery.prototype.sqrTo = montSqrTo;

            // (public) this^e % m (HAC 14.85)
            function bnModPow(e, m, callback) {
                var i = e.bitLength(),
                    k,
                    r = nbv(1),
                    z = new Montgomery(m);
                if (i <= 0) return r; else if (i < 18) k = 1; else if (i < 48) k = 3; else if (i < 144) k = 4; else if (i < 768) k = 5; else k = 6;

                // precomputation
                var g = new Array(),
                    n = 3,
                    k1 = k - 1,
                    km = (1 << k) - 1;
                g[1] = z.convert(this);
                if (k > 1) {
                    var g2 = nbi();
                    z.sqrTo(g[1], g2);
                    while (n <= km) {
                        g[n] = nbi();
                        z.mulTo(g2, g[n - 2], g[n]);
                        n += 2;
                    }
                }
                var j = e.t - 1,
                    w,
                    is1 = true,
                    r2 = nbi(),
                    t;
                i = nbits(e[j]) - 1;
                while (j >= 0) {
                    if (i >= k1) w = e[j] >> i - k1 & km; else {
                        w = (e[j] & (1 << i + 1) - 1) << k1 - i;
                        if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
                    }
                    n = k;
                    while ((w & 1) == 0) {
                        w >>= 1;
                        --n;
                    }
                    if ((i -= n) < 0) {
                        i += this.DB;
                        --j;
                    }
                    if (is1) {
                        // ret == 1, don't bother squaring or multiplying it
                        g[w].copyTo(r);
                        is1 = false;
                    } else {
                        while (n > 1) {
                            z.sqrTo(r, r2);
                            z.sqrTo(r2, r);
                            n -= 2;
                        }
                        if (n > 0) z.sqrTo(r, r2); else {
                            t = r;
                            r = r2;
                            r2 = t;
                        }
                        z.mulTo(r2, g[w], r);
                    }
                    while (j >= 0 && (e[j] & 1 << i) == 0) {
                        z.sqrTo(r, r2);
                        t = r;
                        r = r2;
                        r2 = t;
                        if (--i < 0) {
                            i = this.DB - 1;
                            --j;
                        }
                    }
                }
                var result = z.revert(r);
                callback(null, result);
                return result;
            }

            // protected
            BigInteger_BigInteger.prototype.copyTo = bnpCopyTo;
            BigInteger_BigInteger.prototype.fromInt = bnpFromInt;
            BigInteger_BigInteger.prototype.fromString = bnpFromString;
            BigInteger_BigInteger.prototype.clamp = bnpClamp;
            BigInteger_BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
            BigInteger_BigInteger.prototype.drShiftTo = bnpDRShiftTo;
            BigInteger_BigInteger.prototype.lShiftTo = bnpLShiftTo;
            BigInteger_BigInteger.prototype.rShiftTo = bnpRShiftTo;
            BigInteger_BigInteger.prototype.subTo = bnpSubTo;
            BigInteger_BigInteger.prototype.multiplyTo = bnpMultiplyTo;
            BigInteger_BigInteger.prototype.squareTo = bnpSquareTo;
            BigInteger_BigInteger.prototype.divRemTo = bnpDivRemTo;
            BigInteger_BigInteger.prototype.invDigit = bnpInvDigit;
            BigInteger_BigInteger.prototype.addTo = bnpAddTo;

            // public
            BigInteger_BigInteger.prototype.toString = bnToString;
            BigInteger_BigInteger.prototype.negate = bnNegate;
            BigInteger_BigInteger.prototype.abs = bnAbs;
            BigInteger_BigInteger.prototype.compareTo = bnCompareTo;
            BigInteger_BigInteger.prototype.bitLength = bnBitLength;
            BigInteger_BigInteger.prototype.mod = bnMod;
            BigInteger_BigInteger.prototype.equals = bnEquals;
            BigInteger_BigInteger.prototype.add = bnAdd;
            BigInteger_BigInteger.prototype.subtract = bnSubtract;
            BigInteger_BigInteger.prototype.multiply = bnMultiply;
            BigInteger_BigInteger.prototype.divide = bnDivide;
            BigInteger_BigInteger.prototype.modPow = bnModPow;

            // "constants"
            BigInteger_BigInteger.ZERO = nbv(0);
            BigInteger_BigInteger.ONE = nbv(1);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */





            /**
             * Returns a Buffer with a sequence of random nBytes
             *
             * @param {number} nBytes
             * @returns {Buffer} fixed-length sequence of random bytes
             */

            function randomBytes(nBytes) {
                return buffer/* Buffer */.lW.from(new WordArray().random(nBytes).toString(), 'hex');
            }


            /**
             * Tests if a hex string has it most significant bit set (case-insensitive regex)
             */
            var HEX_MSB_REGEX = /^[89a-f]/i;
            var initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';
            var newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';

            /** @class */
            var AuthenticationHelper = /*#__PURE__*/function () {
                /**
                 * Constructs a new AuthenticationHelper object
                 * @param {string} PoolName Cognito user pool name.
                 */
                function AuthenticationHelper(PoolName) {
                    this.N = new BigInteger(initN, 16);
                    this.g = new BigInteger('2', 16);
                    this.k = new BigInteger(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
                    this.smallAValue = this.generateRandomSmallA();
                    this.getLargeAValue(function () { });
                    this.infoBits = buffer/* Buffer */.lW.from('Caldera Derived Key', 'utf8');
                    this.poolName = PoolName;
                }

                /**
                 * @returns {BigInteger} small A, a random number
                 */
                var _proto = AuthenticationHelper.prototype;
                _proto.getSmallAValue = function getSmallAValue() {
                    return this.smallAValue;
                }

      /**
       * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
       * @returns {void}
       */;
                _proto.getLargeAValue = function getLargeAValue(callback) {
                    var _this = this;
                    if (this.largeAValue) {
                        callback(null, this.largeAValue);
                    } else {
                        this.calculateA(this.smallAValue, function (err, largeAValue) {
                            if (err) {
                                callback(err, null);
                            }
                            _this.largeAValue = largeAValue;
                            callback(null, _this.largeAValue);
                        });
                    }
                }

      /**
       * helper function to generate a random big integer
       * @returns {BigInteger} a random value.
       * @private
       */;
                _proto.generateRandomSmallA = function generateRandomSmallA() {
                    // This will be interpreted as a postive 128-bit integer
                    var hexRandom = randomBytes(128).toString('hex');
                    var randomBigInt = new BigInteger(hexRandom, 16);

                    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)

                    return randomBigInt;
                }

      /**
       * helper function to generate a random string
       * @returns {string} a random value.
       * @private
       */;
                _proto.generateRandomString = function generateRandomString() {
                    return randomBytes(40).toString('base64');
                }

      /**
       * @returns {string} Generated random value included in password hash.
       */;
                _proto.getRandomPassword = function getRandomPassword() {
                    return this.randomPassword;
                }

      /**
       * @returns {string} Generated random value included in devices hash.
       */;
                _proto.getSaltDevices = function getSaltDevices() {
                    return this.SaltToHashDevices;
                }

      /**
       * @returns {string} Value used to verify devices.
       */;
                _proto.getVerifierDevices = function getVerifierDevices() {
                    return this.verifierDevices;
                }

      /**
       * Generate salts and compute verifier.
       * @param {string} deviceGroupKey Devices to generate verifier for.
       * @param {string} username User to generate verifier for.
       * @param {nodeCallback<null>} callback Called with (err, null)
       * @returns {void}
       */;
                _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
                    var _this2 = this;
                    this.randomPassword = this.generateRandomString();
                    var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
                    var hashedString = this.hash(combinedString);
                    var hexRandom = randomBytes(16).toString('hex');

                    // The random hex will be unambiguously represented as a postive integer
                    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));
                    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {
                        if (err) {
                            callback(err, null);
                        }
                        _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
                        callback(null, null);
                    });
                }

      /**
       * Calculate the client's public value A = g^a%N
       * with the generated random number a
       * @param {BigInteger} a Randomly generated small A.
       * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
       * @returns {void}
       * @private
       */;
                _proto.calculateA = function calculateA(a, callback) {
                    var _this3 = this;
                    this.g.modPow(a, this.N, function (err, A) {
                        if (err) {
                            callback(err, null);
                        }
                        if (A.mod(_this3.N).equals(BigInteger.ZERO)) {
                            callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);
                        }
                        callback(null, A);
                    });
                }

      /**
       * Calculate the client's value U which is the hash of A and B
       * @param {BigInteger} A Large A value.
       * @param {BigInteger} B Server B value.
       * @returns {BigInteger} Computed U value.
       * @private
       */;
                _proto.calculateU = function calculateU(A, B) {
                    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));
                    var finalU = new BigInteger(this.UHexHash, 16);
                    return finalU;
                }

      /**
       * Calculate a hash from a bitArray
       * @param {Buffer} buf Value to hash.
       * @returns {String} Hex-encoded hash.
       * @private
       */;
                _proto.hash = function hash(buf) {
                    var awsCryptoHash = new build.Sha256();
                    awsCryptoHash.update(buf);
                    var resultFromAWSCrypto = awsCryptoHash.digestSync();
                    var hashHex = buffer/* Buffer */.lW.from(resultFromAWSCrypto).toString('hex');
                    return new Array(64 - hashHex.length).join('0') + hashHex;
                }

      /**
       * Calculate a hash from a hex string
       * @param {String} hexStr Value to hash.
       * @returns {String} Hex-encoded hash.
       * @private
       */;
                _proto.hexHash = function hexHash(hexStr) {
                    return this.hash(buffer/* Buffer */.lW.from(hexStr, 'hex'));
                }

      /**
       * Standard hkdf algorithm
       * @param {Buffer} ikm Input key material.
       * @param {Buffer} salt Salt value.
       * @returns {Buffer} Strong key material.
       * @private
       */;
                _proto.computehkdf = function computehkdf(ikm, salt) {
                    var infoBitsBuffer = buffer/* Buffer */.lW.concat([this.infoBits, buffer/* Buffer */.lW.from(String.fromCharCode(1), 'utf8')]);
                    var awsCryptoHash = new build.Sha256(salt);
                    awsCryptoHash.update(ikm);
                    var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
                    var awsCryptoHashHmac = new build.Sha256(resultFromAWSCryptoPrk);
                    awsCryptoHashHmac.update(infoBitsBuffer);
                    var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
                    var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
                    var currentHex = hashHexFromAWSCrypto.slice(0, 16);
                    return currentHex;
                }

      /**
       * Calculates the final hkdf based on computed S value, and computed U value and the key
       * @param {String} username Username.
       * @param {String} password Password.
       * @param {BigInteger} serverBValue Server B value.
       * @param {BigInteger} salt Generated salt.
       * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)
       * @returns {void}
       */;
                _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
                    var _this4 = this;
                    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {
                        throw new Error('B cannot be zero.');
                    }
                    this.UValue = this.calculateU(this.largeAValue, serverBValue);
                    if (this.UValue.equals(BigInteger.ZERO)) {
                        throw new Error('U cannot be zero.');
                    }
                    var usernamePassword = "" + this.poolName + username + ":" + password;
                    var usernamePasswordHash = this.hash(usernamePassword);
                    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
                    this.calculateS(xValue, serverBValue, function (err, sValue) {
                        if (err) {
                            callback(err, null);
                        }
                        var hkdf = _this4.computehkdf(buffer/* Buffer */.lW.from(_this4.padHex(sValue), 'hex'), buffer/* Buffer */.lW.from(_this4.padHex(_this4.UValue), 'hex'));
                        callback(null, hkdf);
                    });
                }

      /**
       * Calculates the S value used in getPasswordAuthenticationKey
       * @param {BigInteger} xValue Salted password hash value.
       * @param {BigInteger} serverBValue Server B value.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
                    var _this5 = this;
                    this.g.modPow(xValue, this.N, function (err, gModPowXN) {
                        if (err) {
                            callback(err, null);
                        }
                        var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
                        intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {
                            if (err2) {
                                callback(err2, null);
                            }
                            callback(null, result.mod(_this5.N));
                        });
                    });
                }

      /**
       * Return constant newPasswordRequiredChallengeUserAttributePrefix
       * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value
       */;
                _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
                    return newPasswordRequiredChallengeUserAttributePrefix;
                }

      /**
       * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.
       *
       * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a
       * byte array containing the two's-complement representation of a BigInteger. The array contains
       * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.
       *
       * Examples showing how ambiguity is avoided by left padding with:
       * 	"00" (for positive values where the most-significant-bit is set)
       *  "FF" (for negative values where the most-significant-bit is set)
       *
       * padHex(bigInteger.fromInt(-236))  === "FF14"
       * padHex(bigInteger.fromInt(20))    === "14"
       *
       * padHex(bigInteger.fromInt(-200))  === "FF38"
       * padHex(bigInteger.fromInt(56))    === "38"
       *
       * padHex(bigInteger.fromInt(-20))   === "EC"
       * padHex(bigInteger.fromInt(236))   === "00EC"
       *
       * padHex(bigInteger.fromInt(-56))   === "C8"
       * padHex(bigInteger.fromInt(200))   === "00C8"
       *
       * @param {BigInteger} bigInt Number to encode.
       * @returns {String} even-length hex string of the two's complement encoding.
       */;
                _proto.padHex = function padHex(bigInt) {
                    if (!(bigInt instanceof BigInteger)) {
                        throw new Error('Not a BigInteger');
                    }
                    var isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;

                    /* Get a hex string for abs(bigInt) */
                    var hexStr = bigInt.abs().toString(16);

                    /* Pad hex to even length if needed */
                    hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;

                    /* Prepend "00" if the most significant bit is set */
                    hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
                    if (isNegative) {
                        /* Flip the bits of the representation */
                        var invertedNibbles = hexStr.split('').map(function (x) {
                            var invertedNibble = ~parseInt(x, 16) & 0xf;
                            return '0123456789ABCDEF'.charAt(invertedNibble);
                        }).join('');

                        /* After flipping the bits, add one to get the 2's complement representation */
                        var flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);
                        hexStr = flippedBitsBI.toString(16);

                        /*
                        For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128
                                Any sequence of '1' bits on the left can always be substituted with a single '1' bit
                        without changing the represented value.
                                This only happens in the case when the input is 80...00
                        */
                        if (hexStr.toUpperCase().startsWith('FF8')) {
                            hexStr = hexStr.substring(2);
                        }
                    }
                    return hexStr;
                };
                return AuthenticationHelper;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */



            /** @class */
            var CognitoJwtToken = /*#__PURE__*/function () {
                /**
                 * Constructs a new CognitoJwtToken object
                 * @param {string=} token The JWT token.
                 */
                function CognitoJwtToken(token) {
                    // Assign object
                    this.jwtToken = token || '';
                    this.payload = this.decodePayload();
                }

                /**
                 * @returns {string} the record's token.
                 */
                var _proto = CognitoJwtToken.prototype;
                _proto.getJwtToken = function getJwtToken() {
                    return this.jwtToken;
                }

      /**
       * @returns {int} the token's expiration (exp member).
       */;
                _proto.getExpiration = function getExpiration() {
                    return this.payload.exp;
                }

      /**
       * @returns {int} the token's "issued at" (iat member).
       */;
                _proto.getIssuedAt = function getIssuedAt() {
                    return this.payload.iat;
                }

      /**
       * @returns {object} the token's payload.
       */;
                _proto.decodePayload = function decodePayload() {
                    var payload = this.jwtToken.split('.')[1];
                    try {
                        return JSON.parse(buffer/* Buffer */.lW.from(payload, 'base64').toString('utf8'));
                    } catch (err) {
                        return {};
                    }
                };
                return CognitoJwtToken;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js
            function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
            function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */



            /** @class */
            var CognitoAccessToken = /*#__PURE__*/function (_CognitoJwtToken) {
                _inheritsLoose(CognitoAccessToken, _CognitoJwtToken);
                /**
                 * Constructs a new CognitoAccessToken object
                 * @param {string=} AccessToken The JWT access token.
                 */
                function CognitoAccessToken(_temp) {
                    var _ref = _temp === void 0 ? {} : _temp,
                        AccessToken = _ref.AccessToken;
                    return _CognitoJwtToken.call(this, AccessToken || '') || this;
                }
                return CognitoAccessToken;
            }(CognitoJwtToken);

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js
            function CognitoIdToken_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; CognitoIdToken_setPrototypeOf(subClass, superClass); }
            function CognitoIdToken_setPrototypeOf(o, p) { CognitoIdToken_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return CognitoIdToken_setPrototypeOf(o, p); }
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */



            /** @class */
            var CognitoIdToken = /*#__PURE__*/function (_CognitoJwtToken) {
                CognitoIdToken_inheritsLoose(CognitoIdToken, _CognitoJwtToken);
                /**
                 * Constructs a new CognitoIdToken object
                 * @param {string=} IdToken The JWT Id token
                 */
                function CognitoIdToken(_temp) {
                    var _ref = _temp === void 0 ? {} : _temp,
                        IdToken = _ref.IdToken;
                    return _CognitoJwtToken.call(this, IdToken || '') || this;
                }
                return CognitoIdToken;
            }(CognitoJwtToken);

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */
            /** @class */
            var CognitoRefreshToken = /*#__PURE__*/function () {
                /**
                 * Constructs a new CognitoRefreshToken object
                 * @param {string=} RefreshToken The JWT refresh token.
                 */
                function CognitoRefreshToken(_temp) {
                    var _ref = _temp === void 0 ? {} : _temp,
                        RefreshToken = _ref.RefreshToken;
                    // Assign object
                    this.token = RefreshToken || '';
                }

                /**
                 * @returns {string} the record's token.
                 */
                var _proto = CognitoRefreshToken.prototype;
                _proto.getToken = function getToken() {
                    return this.token;
                };
                return CognitoRefreshToken;
            }();

            // EXTERNAL MODULE: ./node_modules/amazon-cognito-identity-js/es/Platform/index.js + 1 modules
            var Platform = __webpack_require__(6949);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */
            /** @class */
            var CognitoUserSession = /*#__PURE__*/function () {
                /**
                 * Constructs a new CognitoUserSession object
                 * @param {CognitoIdToken} IdToken The session's Id token.
                 * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.
                 * @param {CognitoAccessToken} AccessToken The session's access token.
                 * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.
                 */
                function CognitoUserSession(_temp) {
                    var _ref = _temp === void 0 ? {} : _temp,
                        IdToken = _ref.IdToken,
                        RefreshToken = _ref.RefreshToken,
                        AccessToken = _ref.AccessToken,
                        ClockDrift = _ref.ClockDrift;
                    if (AccessToken == null || IdToken == null) {
                        throw new Error('Id token and Access Token must be present.');
                    }
                    this.idToken = IdToken;
                    this.refreshToken = RefreshToken;
                    this.accessToken = AccessToken;
                    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;
                }

                /**
                 * @returns {CognitoIdToken} the session's Id token
                 */
                var _proto = CognitoUserSession.prototype;
                _proto.getIdToken = function getIdToken() {
                    return this.idToken;
                }

      /**
       * @returns {CognitoRefreshToken} the session's refresh token
       */;
                _proto.getRefreshToken = function getRefreshToken() {
                    return this.refreshToken;
                }

      /**
       * @returns {CognitoAccessToken} the session's access token
       */;
                _proto.getAccessToken = function getAccessToken() {
                    return this.accessToken;
                }

      /**
       * @returns {int} the session's clock drift
       */;
                _proto.getClockDrift = function getClockDrift() {
                    return this.clockDrift;
                }

      /**
       * @returns {int} the computer's clock drift
       */;
                _proto.calculateClockDrift = function calculateClockDrift() {
                    var now = Math.floor(new Date() / 1000);
                    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
                    return now - iat;
                }

      /**
       * Checks to see if the session is still valid based on session expiry information found
       * in tokens and the current time (adjusted with clock drift)
       * @returns {boolean} if the session is still valid
       */;
                _proto.isValid = function isValid() {
                    var now = Math.floor(new Date() / 1000);
                    var adjusted = now - this.clockDrift;
                    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
                };
                return CognitoUserSession;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/DateHelper.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */

            var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            var weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            /** @class */
            var DateHelper = /*#__PURE__*/function () {
                function DateHelper() { }
                var _proto = DateHelper.prototype;
                /**
                 * @returns {string} The current time in "ddd MMM D HH:mm:ss UTC YYYY" format.
                 */
                _proto.getNowString = function getNowString() {
                    var now = new Date();
                    var weekDay = weekNames[now.getUTCDay()];
                    var month = monthNames[now.getUTCMonth()];
                    var day = now.getUTCDate();
                    var hours = now.getUTCHours();
                    if (hours < 10) {
                        hours = "0" + hours;
                    }
                    var minutes = now.getUTCMinutes();
                    if (minutes < 10) {
                        minutes = "0" + minutes;
                    }
                    var seconds = now.getUTCSeconds();
                    if (seconds < 10) {
                        seconds = "0" + seconds;
                    }
                    var year = now.getUTCFullYear();

                    // ddd MMM D HH:mm:ss UTC YYYY
                    var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
                    return dateNow;
                };
                return DateHelper;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */
            /** @class */
            var CognitoUserAttribute = /*#__PURE__*/function () {
                /**
                 * Constructs a new CognitoUserAttribute object
                 * @param {string=} Name The record's name
                 * @param {string=} Value The record's value
                 */
                function CognitoUserAttribute(_temp) {
                    var _ref = _temp === void 0 ? {} : _temp,
                        Name = _ref.Name,
                        Value = _ref.Value;
                    this.Name = Name || '';
                    this.Value = Value || '';
                }

                /**
                 * @returns {string} the record's value.
                 */
                var _proto = CognitoUserAttribute.prototype;
                _proto.getValue = function getValue() {
                    return this.Value;
                }

      /**
       * Sets the record's value.
       * @param {string} value The new value.
       * @returns {CognitoUserAttribute} The record for method chaining.
       */;
                _proto.setValue = function setValue(value) {
                    this.Value = value;
                    return this;
                }

      /**
       * @returns {string} the record's name.
       */;
                _proto.getName = function getName() {
                    return this.Name;
                }

      /**
       * Sets the record's name
       * @param {string} name The new name.
       * @returns {CognitoUserAttribute} The record for method chaining.
       */;
                _proto.setName = function setName(name) {
                    this.Name = name;
                    return this;
                }

      /**
       * @returns {string} a string representation of the record.
       */;
                _proto.toString = function toString() {
                    return JSON.stringify(this);
                }

      /**
       * @returns {object} a flat object representing the record.
       */;
                _proto.toJSON = function toJSON() {
                    return {
                        Name: this.Name,
                        Value: this.Value
                    };
                };
                return CognitoUserAttribute;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/StorageHelper.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */

            var dataMemory = {};

            /** @class */
            var MemoryStorage = /*#__PURE__*/function () {
                function MemoryStorage() { }
                /**
                 * This is used to set a specific item in storage
                 * @param {string} key - the key for the item
                 * @param {object} value - the value
                 * @returns {string} value that was set
                 */
                MemoryStorage.setItem = function setItem(key, value) {
                    dataMemory[key] = value;
                    return dataMemory[key];
                }

      /**
       * This is used to get a specific key from storage
       * @param {string} key - the key for the item
       * This is used to clear the storage
       * @returns {string} the data item
       */;
                MemoryStorage.getItem = function getItem(key) {
                    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;
                }

      /**
       * This is used to remove an item from storage
       * @param {string} key - the key being set
       * @returns {boolean} return true
       */;
                MemoryStorage.removeItem = function removeItem(key) {
                    return delete dataMemory[key];
                }

      /**
       * This is used to clear the storage
       * @returns {string} nothing
       */;
                MemoryStorage.clear = function clear() {
                    dataMemory = {};
                    return dataMemory;
                };
                return MemoryStorage;
            }();

            /** @class */
            var StorageHelper = /*#__PURE__*/function () {
                /**
                 * This is used to get a storage object
                 * @returns {object} the storage
                 */
                function StorageHelper() {
                    try {
                        this.storageWindow = window.localStorage;
                        this.storageWindow.setItem('aws.cognito.test-ls', 1);
                        this.storageWindow.removeItem('aws.cognito.test-ls');
                    } catch (exception) {
                        this.storageWindow = MemoryStorage;
                    }
                }

                /**
                 * This is used to return the storage
                 * @returns {object} the storage
                 */
                var _proto = StorageHelper.prototype;
                _proto.getStorage = function getStorage() {
                    return this.storageWindow;
                };
                return StorageHelper;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoUser.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */














            /**
             * @callback nodeCallback
             * @template T result
             * @param {*} err The operation failure reason, or null.
             * @param {T} result The operation result.
             */

            /**
             * @callback onFailure
             * @param {*} err Failure reason.
             */

            /**
             * @callback onSuccess
             * @template T result
             * @param {T} result The operation result.
             */

            /**
             * @callback mfaRequired
             * @param {*} details MFA challenge details.
             */

            /**
             * @callback customChallenge
             * @param {*} details Custom challenge details.
             */

            /**
             * @callback inputVerificationCode
             * @param {*} data Server response.
             */

            /**
             * @callback authSuccess
             * @param {CognitoUserSession} session The new session.
             * @param {bool=} userConfirmationNecessary User must be confirmed.
             */

            var isNavigatorAvailable = typeof navigator !== 'undefined';
            var userAgent = isNavigatorAvailable ? Platform/* Platform */.t4.isReactNative ? 'react-native' : navigator.userAgent : 'nodejs';

            /** @class */
            var CognitoUser = /*#__PURE__*/function () {
                /**
                 * Constructs a new CognitoUser object
                 * @param {object} data Creation options
                 * @param {string} data.Username The user's username.
                 * @param {CognitoUserPool} data.Pool Pool containing the user.
                 * @param {object} data.Storage Optional storage object.
                 */
                function CognitoUser(data) {
                    if (data == null || data.Username == null || data.Pool == null) {
                        throw new Error('Username and Pool information are required.');
                    }
                    this.username = data.Username || '';
                    this.pool = data.Pool;
                    this.Session = null;
                    this.client = data.Pool.client;
                    this.signInUserSession = null;
                    this.authenticationFlowType = 'USER_SRP_AUTH';
                    this.storage = data.Storage || new StorageHelper().getStorage();
                    this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
                    this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
                }

                /**
                 * Sets the session for this user
                 * @param {CognitoUserSession} signInUserSession the session
                 * @returns {void}
                 */
                var _proto = CognitoUser.prototype;
                _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
                    this.clearCachedUserData();
                    this.signInUserSession = signInUserSession;
                    this.cacheTokens();
                }

      /**
       * @returns {CognitoUserSession} the current session for this user
       */;
                _proto.getSignInUserSession = function getSignInUserSession() {
                    return this.signInUserSession;
                }

      /**
       * @returns {string} the user's username
       */;
                _proto.getUsername = function getUsername() {
                    return this.username;
                }

      /**
       * @returns {String} the authentication flow type
       */;
                _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
                    return this.authenticationFlowType;
                }

      /**
       * sets authentication flow type
       * @param {string} authenticationFlowType New value.
       * @returns {void}
       */;
                _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
                    this.authenticationFlowType = authenticationFlowType;
                }

      /**
       * This is used for authenticating the user through the custom authentication flow.
       * @param {AuthenticationDetails} authDetails Contains the authentication data
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *        response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */;
                _proto.initiateAuth = function initiateAuth(authDetails, callback) {
                    var _this = this;
                    var authParameters = authDetails.getAuthParameters();
                    authParameters.USERNAME = this.username;
                    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
                    var jsonReq = {
                        AuthFlow: 'CUSTOM_AUTH',
                        ClientId: this.pool.getClientId(),
                        AuthParameters: authParameters,
                        ClientMetadata: clientMetaData
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('InitiateAuth', jsonReq, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        var challengeName = data.ChallengeName;
                        var challengeParameters = data.ChallengeParameters;
                        if (challengeName === 'CUSTOM_CHALLENGE') {
                            _this.Session = data.Session;
                            return callback.customChallenge(challengeParameters);
                        }
                        _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
                        _this.cacheTokens();
                        return callback.onSuccess(_this.signInUserSession);
                    });
                }

      /**
       * This is used for authenticating the user.
       * stuff
       * @param {AuthenticationDetails} authDetails Contains the authentication data
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {newPasswordRequired} callback.newPasswordRequired new
       *        password and any required attributes are required to continue
       * @param {mfaRequired} callback.mfaRequired MFA code
       *        required to continue.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *        response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */;
                _proto.authenticateUser = function authenticateUser(authDetails, callback) {
                    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {
                        return this.authenticateUserPlainUsernamePassword(authDetails, callback);
                    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {
                        return this.authenticateUserDefaultAuth(authDetails, callback);
                    }
                    return callback.onFailure(new Error('Authentication flow type is invalid.'));
                }

      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       * It calls the AuthenticationHelper for SRP related
       * stuff
       * @param {AuthenticationDetails} authDetails Contains the authentication data
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {newPasswordRequired} callback.newPasswordRequired new
       *        password and any required attributes are required to continue
       * @param {mfaRequired} callback.mfaRequired MFA code
       *        required to continue.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *        response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */;
                _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
                    var _this2 = this;
                    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
                    var dateHelper = new DateHelper();
                    var serverBValue;
                    var salt;
                    var authParameters = {};
                    if (this.deviceKey != null) {
                        authParameters.DEVICE_KEY = this.deviceKey;
                    }
                    authParameters.USERNAME = this.username;
                    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {
                        // getLargeAValue callback start
                        if (errOnAValue) {
                            callback.onFailure(errOnAValue);
                        }
                        authParameters.SRP_A = aValue.toString(16);
                        if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {
                            authParameters.CHALLENGE_NAME = 'SRP_A';
                        }
                        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
                        var jsonReq = {
                            AuthFlow: _this2.authenticationFlowType,
                            ClientId: _this2.pool.getClientId(),
                            AuthParameters: authParameters,
                            ClientMetadata: clientMetaData
                        };
                        if (_this2.getUserContextData(_this2.username)) {
                            jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
                        }
                        _this2.client.request('InitiateAuth', jsonReq, function (err, data) {
                            if (err) {
                                return callback.onFailure(err);
                            }
                            var challengeParameters = data.ChallengeParameters;
                            _this2.username = challengeParameters.USER_ID_FOR_SRP;
                            _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
                            serverBValue = new BigInteger(challengeParameters.SRP_B, 16);
                            salt = new BigInteger(challengeParameters.SALT, 16);
                            _this2.getCachedDeviceKeyAndPassword();
                            authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {
                                // getPasswordAuthenticationKey callback start
                                if (errOnHkdf) {
                                    callback.onFailure(errOnHkdf);
                                }
                                var dateNow = dateHelper.getNowString();
                                var concatBuffer = buffer/* Buffer */.lW.concat([buffer/* Buffer */.lW.from(_this2.pool.getUserPoolName(), 'utf8'), buffer/* Buffer */.lW.from(_this2.username, 'utf8'), buffer/* Buffer */.lW.from(challengeParameters.SECRET_BLOCK, 'base64'), buffer/* Buffer */.lW.from(dateNow, 'utf8')]);
                                var awsCryptoHash = new build.Sha256(hkdf);
                                awsCryptoHash.update(concatBuffer);
                                var resultFromAWSCrypto = awsCryptoHash.digestSync();
                                var signatureString = buffer/* Buffer */.lW.from(resultFromAWSCrypto).toString('base64');
                                var challengeResponses = {};
                                challengeResponses.USERNAME = _this2.username;
                                challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
                                challengeResponses.TIMESTAMP = dateNow;
                                challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
                                if (_this2.deviceKey != null) {
                                    challengeResponses.DEVICE_KEY = _this2.deviceKey;
                                }
                                var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {
                                    return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {
                                        if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {
                                            challengeResponses.DEVICE_KEY = null;
                                            _this2.deviceKey = null;
                                            _this2.randomPassword = null;
                                            _this2.deviceGroupKey = null;
                                            _this2.clearCachedDeviceKeyAndPassword();
                                            return respondToAuthChallenge(challenge, challengeCallback);
                                        }
                                        return challengeCallback(errChallenge, dataChallenge);
                                    });
                                };
                                var jsonReqResp = {
                                    ChallengeName: 'PASSWORD_VERIFIER',
                                    ClientId: _this2.pool.getClientId(),
                                    ChallengeResponses: challengeResponses,
                                    Session: data.Session,
                                    ClientMetadata: clientMetaData
                                };
                                if (_this2.getUserContextData()) {
                                    jsonReqResp.UserContextData = _this2.getUserContextData();
                                }
                                respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {
                                    if (errAuthenticate) {
                                        return callback.onFailure(errAuthenticate);
                                    }
                                    return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
                                });
                                return undefined;
                                // getPasswordAuthenticationKey callback end
                            });

                            return undefined;
                        });
                        // getLargeAValue callback end
                    });
                }

      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       * @param {AuthenticationDetails} authDetails Contains the authentication data.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {mfaRequired} callback.mfaRequired MFA code
       *        required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @returns {void}
       */;
                _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
                    var _this3 = this;
                    var authParameters = {};
                    authParameters.USERNAME = this.username;
                    authParameters.PASSWORD = authDetails.getPassword();
                    if (!authParameters.PASSWORD) {
                        callback.onFailure(new Error('PASSWORD parameter is required'));
                        return;
                    }
                    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
                    this.getCachedDeviceKeyAndPassword();
                    if (this.deviceKey != null) {
                        authParameters.DEVICE_KEY = this.deviceKey;
                    }
                    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
                    var jsonReq = {
                        AuthFlow: 'USER_PASSWORD_AUTH',
                        ClientId: this.pool.getClientId(),
                        AuthParameters: authParameters,
                        ClientMetadata: clientMetaData
                    };
                    if (this.getUserContextData(this.username)) {
                        jsonReq.UserContextData = this.getUserContextData(this.username);
                    }
                    // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,
                    // Cognito UserPools verifies password and returns tokens.
                    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
                    });
                }

      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       * @param {object} dataAuthenticate authentication data
       * @param {object} authenticationHelper helper created
       * @param {callback} callback passed on from caller
       * @returns {void}
       */;
                _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
                    var _this4 = this;
                    var challengeName = dataAuthenticate.ChallengeName;
                    var challengeParameters = dataAuthenticate.ChallengeParameters;
                    if (challengeName === 'SMS_MFA') {
                        this.Session = dataAuthenticate.Session;
                        return callback.mfaRequired(challengeName, challengeParameters);
                    }
                    if (challengeName === 'SELECT_MFA_TYPE') {
                        this.Session = dataAuthenticate.Session;
                        return callback.selectMFAType(challengeName, challengeParameters);
                    }
                    if (challengeName === 'MFA_SETUP') {
                        this.Session = dataAuthenticate.Session;
                        return callback.mfaSetup(challengeName, challengeParameters);
                    }
                    if (challengeName === 'SOFTWARE_TOKEN_MFA') {
                        this.Session = dataAuthenticate.Session;
                        return callback.totpRequired(challengeName, challengeParameters);
                    }
                    if (challengeName === 'CUSTOM_CHALLENGE') {
                        this.Session = dataAuthenticate.Session;
                        return callback.customChallenge(challengeParameters);
                    }
                    if (challengeName === 'NEW_PASSWORD_REQUIRED') {
                        this.Session = dataAuthenticate.Session;
                        var userAttributes = null;
                        var rawRequiredAttributes = null;
                        var requiredAttributes = [];
                        var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
                        if (challengeParameters) {
                            userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
                            rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
                        }
                        if (rawRequiredAttributes) {
                            for (var i = 0; i < rawRequiredAttributes.length; i++) {
                                requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
                            }
                        }
                        return callback.newPasswordRequired(userAttributes, requiredAttributes);
                    }
                    if (challengeName === 'DEVICE_SRP_AUTH') {
                        this.Session = dataAuthenticate.Session;
                        this.getDeviceResponse(callback);
                        return undefined;
                    }
                    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
                    this.challengeName = challengeName;
                    this.cacheTokens();
                    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
                    if (newDeviceMetadata == null) {
                        return callback.onSuccess(this.signInUserSession);
                    }
                    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {
                        if (errGenHash) {
                            return callback.onFailure(errGenHash);
                        }
                        var deviceSecretVerifierConfig = {
                            Salt: buffer/* Buffer */.lW.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),
                            PasswordVerifier: buffer/* Buffer */.lW.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')
                        };
                        _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
                        _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
                        _this4.randomPassword = authenticationHelper.getRandomPassword();
                        _this4.client.request('ConfirmDevice', {
                            DeviceKey: newDeviceMetadata.DeviceKey,
                            AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
                            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
                            DeviceName: userAgent
                        }, function (errConfirm, dataConfirm) {
                            if (errConfirm) {
                                return callback.onFailure(errConfirm);
                            }
                            _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
                            _this4.cacheDeviceKeyAndPassword();
                            if (dataConfirm.UserConfirmationNecessary === true) {
                                return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
                            }
                            return callback.onSuccess(_this4.signInUserSession);
                        });
                        return undefined;
                    });
                    return undefined;
                }

      /**
       * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.
       * Pass the new password with any new user attributes to be updated.
       * User attribute keys must be of format userAttributes.<attribute_name>.
       * @param {string} newPassword new password for this user
       * @param {object} requiredAttributeData map with values for all required attributes
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {mfaRequired} callback.mfaRequired MFA code required to continue.
       * @param {customChallenge} callback.customChallenge Custom challenge
       *         response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
                    var _this5 = this;
                    if (!newPassword) {
                        return callback.onFailure(new Error('New password is required.'));
                    }
                    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
                    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
                    var finalUserAttributes = {};
                    if (requiredAttributeData) {
                        Object.keys(requiredAttributeData).forEach(function (key) {
                            finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
                        });
                    }
                    finalUserAttributes.NEW_PASSWORD = newPassword;
                    finalUserAttributes.USERNAME = this.username;
                    var jsonReq = {
                        ChallengeName: 'NEW_PASSWORD_REQUIRED',
                        ClientId: this.pool.getClientId(),
                        ChallengeResponses: finalUserAttributes,
                        Session: this.Session,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {
                        if (errAuthenticate) {
                            return callback.onFailure(errAuthenticate);
                        }
                        return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
                    });
                    return undefined;
                }

      /**
       * This is used to get a session using device authentication. It is called at the end of user
       * authentication
       *
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       * @private
       */;
                _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
                    var _this6 = this;
                    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);
                    var dateHelper = new DateHelper();
                    var authParameters = {};
                    authParameters.USERNAME = this.username;
                    authParameters.DEVICE_KEY = this.deviceKey;
                    authenticationHelper.getLargeAValue(function (errAValue, aValue) {
                        // getLargeAValue callback start
                        if (errAValue) {
                            callback.onFailure(errAValue);
                        }
                        authParameters.SRP_A = aValue.toString(16);
                        var jsonReq = {
                            ChallengeName: 'DEVICE_SRP_AUTH',
                            ClientId: _this6.pool.getClientId(),
                            ChallengeResponses: authParameters,
                            ClientMetadata: clientMetadata,
                            Session: _this6.Session
                        };
                        if (_this6.getUserContextData()) {
                            jsonReq.UserContextData = _this6.getUserContextData();
                        }
                        _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {
                            if (err) {
                                return callback.onFailure(err);
                            }
                            var challengeParameters = data.ChallengeParameters;
                            var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);
                            var salt = new BigInteger(challengeParameters.SALT, 16);
                            authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {
                                // getPasswordAuthenticationKey callback start
                                if (errHkdf) {
                                    return callback.onFailure(errHkdf);
                                }
                                var dateNow = dateHelper.getNowString();
                                var concatBuffer = buffer/* Buffer */.lW.concat([buffer/* Buffer */.lW.from(_this6.deviceGroupKey, 'utf8'), buffer/* Buffer */.lW.from(_this6.deviceKey, 'utf8'), buffer/* Buffer */.lW.from(challengeParameters.SECRET_BLOCK, 'base64'), buffer/* Buffer */.lW.from(dateNow, 'utf8')]);
                                var awsCryptoHash = new build.Sha256(hkdf);
                                awsCryptoHash.update(concatBuffer);
                                var resultFromAWSCrypto = awsCryptoHash.digestSync();
                                var signatureString = buffer/* Buffer */.lW.from(resultFromAWSCrypto).toString('base64');
                                var challengeResponses = {};
                                challengeResponses.USERNAME = _this6.username;
                                challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
                                challengeResponses.TIMESTAMP = dateNow;
                                challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
                                challengeResponses.DEVICE_KEY = _this6.deviceKey;
                                var jsonReqResp = {
                                    ChallengeName: 'DEVICE_PASSWORD_VERIFIER',
                                    ClientId: _this6.pool.getClientId(),
                                    ChallengeResponses: challengeResponses,
                                    Session: data.Session
                                };
                                if (_this6.getUserContextData()) {
                                    jsonReqResp.UserContextData = _this6.getUserContextData();
                                }
                                _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {
                                    if (errAuthenticate) {
                                        return callback.onFailure(errAuthenticate);
                                    }
                                    _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
                                    _this6.cacheTokens();
                                    return callback.onSuccess(_this6.signInUserSession);
                                });
                                return undefined;
                                // getPasswordAuthenticationKey callback end
                            });

                            return undefined;
                        });
                        // getLargeAValue callback end
                    });
                }

      /**
       * This is used for a certain user to confirm the registration by using a confirmation code
       * @param {string} confirmationCode Code entered by user.
       * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
                    var jsonReq = {
                        ClientId: this.pool.getClientId(),
                        ConfirmationCode: confirmationCode,
                        Username: this.username,
                        ForceAliasCreation: forceAliasCreation,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('ConfirmSignUp', jsonReq, function (err) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, 'SUCCESS');
                    });
                }

      /**
       * This is used by the user once he has the responses to a custom challenge
       * @param {string} answerChallenge The custom challenge answer.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {customChallenge} callback.customChallenge
       *    Custom challenge response required to continue.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
                    var _this7 = this;
                    var challengeResponses = {};
                    challengeResponses.USERNAME = this.username;
                    challengeResponses.ANSWER = answerChallenge;
                    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
                    this.getCachedDeviceKeyAndPassword();
                    if (this.deviceKey != null) {
                        challengeResponses.DEVICE_KEY = this.deviceKey;
                    }
                    var jsonReq = {
                        ChallengeName: 'CUSTOM_CHALLENGE',
                        ChallengeResponses: challengeResponses,
                        ClientId: this.pool.getClientId(),
                        Session: this.Session,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return _this7.authenticateUserInternal(data, authenticationHelper, callback);
                    });
                }

      /**
       * This is used by the user once he has an MFA code
       * @param {string} confirmationCode The MFA code entered by the user.
       * @param {object} callback Result callback map.
       * @param {string} mfaType The mfa we are replying to.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {authSuccess} callback.onSuccess Called on success with the new session.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
                    var _this8 = this;
                    var challengeResponses = {};
                    challengeResponses.USERNAME = this.username;
                    challengeResponses.SMS_MFA_CODE = confirmationCode;
                    var mfaTypeSelection = mfaType || 'SMS_MFA';
                    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {
                        challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
                    }
                    if (this.deviceKey != null) {
                        challengeResponses.DEVICE_KEY = this.deviceKey;
                    }
                    var jsonReq = {
                        ChallengeName: mfaTypeSelection,
                        ChallengeResponses: challengeResponses,
                        ClientId: this.pool.getClientId(),
                        Session: this.Session,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        var challengeName = dataAuthenticate.ChallengeName;
                        if (challengeName === 'DEVICE_SRP_AUTH') {
                            _this8.getDeviceResponse(callback);
                            return undefined;
                        }
                        _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
                        _this8.cacheTokens();
                        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {
                            return callback.onSuccess(_this8.signInUserSession);
                        }
                        var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolName());
                        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {
                            if (errGenHash) {
                                return callback.onFailure(errGenHash);
                            }
                            var deviceSecretVerifierConfig = {
                                Salt: buffer/* Buffer */.lW.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),
                                PasswordVerifier: buffer/* Buffer */.lW.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')
                            };
                            _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
                            _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
                            _this8.randomPassword = authenticationHelper.getRandomPassword();
                            _this8.client.request('ConfirmDevice', {
                                DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
                                AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
                                DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
                                DeviceName: userAgent
                            }, function (errConfirm, dataConfirm) {
                                if (errConfirm) {
                                    return callback.onFailure(errConfirm);
                                }
                                _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
                                _this8.cacheDeviceKeyAndPassword();
                                if (dataConfirm.UserConfirmationNecessary === true) {
                                    return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
                                }
                                return callback.onSuccess(_this8.signInUserSession);
                            });
                            return undefined;
                        });
                        return undefined;
                    });
                }

      /**
       * This is used by an authenticated user to change the current password
       * @param {string} oldUserPassword The current password.
       * @param {string} newUserPassword The requested new password.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('ChangePassword', {
                        PreviousPassword: oldUserPassword,
                        ProposedPassword: newUserPassword,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        ClientMetadata: clientMetadata
                    }, function (err) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, 'SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used by an authenticated user to enable MFA for itself
       * @deprecated
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.enableMFA = function enableMFA(callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    var mfaOptions = [];
                    var mfaEnabled = {
                        DeliveryMedium: 'SMS',
                        AttributeName: 'phone_number'
                    };
                    mfaOptions.push(mfaEnabled);
                    this.client.request('SetUserSettings', {
                        MFAOptions: mfaOptions,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, 'SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used by an authenticated user to enable MFA for itself
       * @param {IMfaSettings} smsMfaSettings the sms mfa settings
       * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('SetUserMFAPreference', {
                        SMSMfaSettings: smsMfaSettings,
                        SoftwareTokenMfaSettings: softwareTokenMfaSettings,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, 'SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used by an authenticated user to disable MFA for itself
       * @deprecated
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.disableMFA = function disableMFA(callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    var mfaOptions = [];
                    this.client.request('SetUserSettings', {
                        MFAOptions: mfaOptions,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, 'SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used by an authenticated user to delete itself
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.deleteUser = function deleteUser(callback, clientMetadata) {
                    var _this9 = this;
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('DeleteUser', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        ClientMetadata: clientMetadata
                    }, function (err) {
                        if (err) {
                            return callback(err, null);
                        }
                        _this9.clearCachedUser();
                        return callback(null, 'SUCCESS');
                    });
                    return undefined;
                }

      /**
       * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg
       */
      /**
       * This is used by an authenticated user to change a list of attributes
       * @param {AttributeArg[]} attributes A list of the new user attributes.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
                    var _this10 = this;
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('UpdateUserAttributes', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        UserAttributes: attributes,
                        ClientMetadata: clientMetadata
                    }, function (err, result) {
                        if (err) {
                            return callback(err, null);
                        }

                        // update cached user
                        return _this10.getUserData(function () {
                            return callback(null, 'SUCCESS', result);
                        }, {
                            bypassCache: true
                        });
                    });
                    return undefined;
                }

      /**
       * This is used by an authenticated user to get a list of attributes
       * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.getUserAttributes = function getUserAttributes(callback) {
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('GetUser', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err, userData) {
                        if (err) {
                            return callback(err, null);
                        }
                        var attributeList = [];
                        for (var i = 0; i < userData.UserAttributes.length; i++) {
                            var attribute = {
                                Name: userData.UserAttributes[i].Name,
                                Value: userData.UserAttributes[i].Value
                            };
                            var userAttribute = new CognitoUserAttribute(attribute);
                            attributeList.push(userAttribute);
                        }
                        return callback(null, attributeList);
                    });
                    return undefined;
                }

      /**
       * This was previously used by an authenticated user to get MFAOptions,
       * but no longer returns a meaningful response. Refer to the documentation for
       * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
       * @deprecated
       * @param {nodeCallback<MFAOptions>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.getMFAOptions = function getMFAOptions(callback) {
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('GetUser', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err, userData) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, userData.MFAOptions);
                    });
                    return undefined;
                }

      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */;
                _proto.createGetUserRequest = function createGetUserRequest() {
                    return this.client.promisifyRequest('GetUser', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    });
                }

      /**
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */;
                _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
                    var _this11 = this;
                    if (options === void 0) {
                        options = {};
                    }
                    // best effort, if not possible
                    return new Promise(function (resolve) {
                        var refresh = _this11.signInUserSession.getRefreshToken();
                        if (refresh && refresh.getToken()) {
                            _this11.refreshSession(refresh, resolve, options.clientMetadata);
                        } else {
                            resolve();
                        }
                    });
                }

      /**
       * @typedef {Object} GetUserDataOptions
       * @property {boolean} bypassCache - force getting data from Cognito service
       * @property {Record<string, string>} clientMetadata - clientMetadata for getSession
       */

      /**
       * This is used by an authenticated users to get the userData
       * @param {nodeCallback<UserData>} callback Called on success or error.
       * @param {GetUserDataOptions} params
       * @returns {void}
       */;
                _proto.getUserData = function getUserData(callback, params) {
                    var _this12 = this;
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        this.clearCachedUserData();
                        return callback(new Error('User is not authenticated'), null);
                    }
                    var userData = this.getUserDataFromCache();
                    if (!userData) {
                        this.fetchUserData().then(function (data) {
                            callback(null, data);
                        })["catch"](callback);
                        return;
                    }
                    if (this.isFetchUserDataAndTokenRequired(params)) {
                        this.fetchUserData().then(function (data) {
                            return _this12.refreshSessionIfPossible(params).then(function () {
                                return data;
                            });
                        }).then(function (data) {
                            return callback(null, data);
                        })["catch"](callback);
                        return;
                    }
                    try {
                        callback(null, JSON.parse(userData));
                        return;
                    } catch (err) {
                        this.clearCachedUserData();
                        callback(err, null);
                        return;
                    }
                }

      /**
       *
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */;
                _proto.getUserDataFromCache = function getUserDataFromCache() {
                    var userData = this.storage.getItem(this.userDataKey);
                    return userData;
                }

      /**
       *
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */;
                _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
                    var _ref = params || {},
                        _ref$bypassCache = _ref.bypassCache,
                        bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
                    return bypassCache;
                }
      /**
       *
       * PRIVATE ONLY: This is an internal only method and should not
       * be directly called by the consumers.
       */;
                _proto.fetchUserData = function fetchUserData() {
                    var _this13 = this;
                    return this.createGetUserRequest().then(function (data) {
                        _this13.cacheUserData(data);
                        return data;
                    });
                }

      /**
       * This is used by an authenticated user to delete a list of attributes
       * @param {string[]} attributeList Names of the attributes to delete.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
                    var _this14 = this;
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        return callback(new Error('User is not authenticated'), null);
                    }
                    this.client.request('DeleteUserAttributes', {
                        UserAttributeNames: attributeList,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err) {
                        if (err) {
                            return callback(err, null);
                        }

                        // update cached user
                        return _this14.getUserData(function () {
                            return callback(null, 'SUCCESS');
                        }, {
                            bypassCache: true
                        });
                    });
                    return undefined;
                }

      /**
       * This is used by a user to resend a confirmation code
       * @param {nodeCallback<string>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
                    var jsonReq = {
                        ClientId: this.pool.getClientId(),
                        Username: this.username,
                        ClientMetadata: clientMetadata
                    };
                    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {
                        if (err) {
                            return callback(err, null);
                        }
                        return callback(null, result);
                    });
                }

      /**
       * @typedef {Object} GetSessionOptions
       * @property {Record<string, string>} clientMetadata - clientMetadata for getSession
       */

      /**
       * This is used to get a session, either from the session object
       * or from  the local storage, or by using a refresh token
       *
       * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
       * @param {GetSessionOptions} options
       * @returns {void}
       */;
                _proto.getSession = function getSession(callback, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    if (this.username == null) {
                        return callback(new Error('Username is null. Cannot retrieve a new session'), null);
                    }
                    if (this.signInUserSession != null && this.signInUserSession.isValid()) {
                        return callback(null, this.signInUserSession);
                    }
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
                    var idTokenKey = keyPrefix + ".idToken";
                    var accessTokenKey = keyPrefix + ".accessToken";
                    var refreshTokenKey = keyPrefix + ".refreshToken";
                    var clockDriftKey = keyPrefix + ".clockDrift";
                    if (this.storage.getItem(idTokenKey)) {
                        var idToken = new CognitoIdToken({
                            IdToken: this.storage.getItem(idTokenKey)
                        });
                        var accessToken = new CognitoAccessToken({
                            AccessToken: this.storage.getItem(accessTokenKey)
                        });
                        var refreshToken = new CognitoRefreshToken({
                            RefreshToken: this.storage.getItem(refreshTokenKey)
                        });
                        var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
                        var sessionData = {
                            IdToken: idToken,
                            AccessToken: accessToken,
                            RefreshToken: refreshToken,
                            ClockDrift: clockDrift
                        };
                        var cachedSession = new CognitoUserSession(sessionData);
                        if (cachedSession.isValid()) {
                            this.signInUserSession = cachedSession;
                            return callback(null, this.signInUserSession);
                        }
                        if (!refreshToken.getToken()) {
                            return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);
                        }
                        this.refreshSession(refreshToken, callback, options.clientMetadata);
                    } else {
                        callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);
                    }
                    return undefined;
                }

      /**
       * This uses the refreshToken to retrieve a new session
       * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.
       * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
                    var _this15 = this;
                    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
                    var authParameters = {};
                    authParameters.REFRESH_TOKEN = refreshToken.getToken();
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
                    var lastUserKey = keyPrefix + ".LastAuthUser";
                    if (this.storage.getItem(lastUserKey)) {
                        this.username = this.storage.getItem(lastUserKey);
                        var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
                        this.deviceKey = this.storage.getItem(deviceKeyKey);
                        authParameters.DEVICE_KEY = this.deviceKey;
                    }
                    var jsonReq = {
                        ClientId: this.pool.getClientId(),
                        AuthFlow: 'REFRESH_TOKEN_AUTH',
                        AuthParameters: authParameters,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {
                        if (err) {
                            if (err.code === 'NotAuthorizedException') {
                                _this15.clearCachedUser();
                            }
                            return wrappedCallback(err, null);
                        }
                        if (authResult) {
                            var authenticationResult = authResult.AuthenticationResult;
                            if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {
                                authenticationResult.RefreshToken = refreshToken.getToken();
                            }
                            _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
                            _this15.cacheTokens();
                            return wrappedCallback(null, _this15.signInUserSession);
                        }
                        return undefined;
                    });
                }

      /**
       * This is used to save the session tokens to local storage
       * @returns {void}
       */;
                _proto.cacheTokens = function cacheTokens() {
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
                    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
                    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
                    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
                    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
                    var lastUserKey = keyPrefix + ".LastAuthUser";
                    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
                    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
                    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
                    this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
                    this.storage.setItem(lastUserKey, this.username);
                }

      /**
       * This is to cache user data
       */;
                _proto.cacheUserData = function cacheUserData(userData) {
                    this.storage.setItem(this.userDataKey, JSON.stringify(userData));
                }

      /**
       * This is to remove cached user data
       */;
                _proto.clearCachedUserData = function clearCachedUserData() {
                    this.storage.removeItem(this.userDataKey);
                };
                _proto.clearCachedUser = function clearCachedUser() {
                    this.clearCachedTokens();
                    this.clearCachedUserData();
                }

      /**
       * This is used to cache the device key and device group and device password
       * @returns {void}
       */;
                _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
                    var deviceKeyKey = keyPrefix + ".deviceKey";
                    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
                    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
                    this.storage.setItem(deviceKeyKey, this.deviceKey);
                    this.storage.setItem(randomPasswordKey, this.randomPassword);
                    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
                }

      /**
       * This is used to get current device key and device group and device password
       * @returns {void}
       */;
                _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
                    var deviceKeyKey = keyPrefix + ".deviceKey";
                    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
                    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
                    if (this.storage.getItem(deviceKeyKey)) {
                        this.deviceKey = this.storage.getItem(deviceKeyKey);
                        this.randomPassword = this.storage.getItem(randomPasswordKey);
                        this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
                    }
                }

      /**
       * This is used to clear the device key info from local storage
       * @returns {void}
       */;
                _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
                    var deviceKeyKey = keyPrefix + ".deviceKey";
                    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
                    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
                    this.storage.removeItem(deviceKeyKey);
                    this.storage.removeItem(randomPasswordKey);
                    this.storage.removeItem(deviceGroupKeyKey);
                }

      /**
       * This is used to clear the session tokens from local storage
       * @returns {void}
       */;
                _proto.clearCachedTokens = function clearCachedTokens() {
                    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
                    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
                    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
                    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
                    var lastUserKey = keyPrefix + ".LastAuthUser";
                    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
                    this.storage.removeItem(idTokenKey);
                    this.storage.removeItem(accessTokenKey);
                    this.storage.removeItem(refreshTokenKey);
                    this.storage.removeItem(lastUserKey);
                    this.storage.removeItem(clockDriftKey);
                }

      /**
       * This is used to build a user session from tokens retrieved in the authentication result
       * @param {object} authResult Successful auth response from server.
       * @returns {CognitoUserSession} The new user session.
       * @private
       */;
                _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
                    var idToken = new CognitoIdToken(authResult);
                    var accessToken = new CognitoAccessToken(authResult);
                    var refreshToken = new CognitoRefreshToken(authResult);
                    var sessionData = {
                        IdToken: idToken,
                        AccessToken: accessToken,
                        RefreshToken: refreshToken
                    };
                    return new CognitoUserSession(sessionData);
                }

      /**
       * This is used to initiate a forgot password request
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {inputVerificationCode?} callback.inputVerificationCode
       *    Optional callback raised instead of onSuccess with response data.
       * @param {onSuccess} callback.onSuccess Called on success.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
                    var jsonReq = {
                        ClientId: this.pool.getClientId(),
                        Username: this.username,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('ForgotPassword', jsonReq, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        if (typeof callback.inputVerificationCode === 'function') {
                            return callback.inputVerificationCode(data);
                        }
                        return callback.onSuccess(data);
                    });
                }

      /**
       * This is used to confirm a new password using a confirmationCode
       * @param {string} confirmationCode Code entered by user.
       * @param {string} newPassword Confirm new password.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<void>} callback.onSuccess Called on success.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
                    var jsonReq = {
                        ClientId: this.pool.getClientId(),
                        Username: this.username,
                        ConfirmationCode: confirmationCode,
                        Password: newPassword,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess('SUCCESS');
                    });
                }

      /**
       * This is used to initiate an attribute confirmation request
       * @param {string} attributeName User attribute that needs confirmation.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {inputVerificationCode} callback.inputVerificationCode Called on success.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('GetUserAttributeVerificationCode', {
                        AttributeName: attributeName,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        ClientMetadata: clientMetadata
                    }, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        if (typeof callback.inputVerificationCode === 'function') {
                            return callback.inputVerificationCode(data);
                        }
                        return callback.onSuccess('SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used to confirm an attribute using a confirmation code
       * @param {string} attributeName Attribute being confirmed.
       * @param {string} confirmationCode Code entered by user.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */;
                _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('VerifyUserAttribute', {
                        AttributeName: attributeName,
                        Code: confirmationCode,
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess('SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used to get the device information using the current device key
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<*>} callback.onSuccess Called on success with device data.
       * @returns {void}
       */;
                _proto.getDevice = function getDevice(callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('GetDevice', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        DeviceKey: this.deviceKey
                    }, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess(data);
                    });
                    return undefined;
                }

      /**
       * This is used to forget a specific device
       * @param {string} deviceKey Device key.
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */;
                _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('ForgetDevice', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        DeviceKey: deviceKey
                    }, function (err) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess('SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used to forget the current device
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */;
                _proto.forgetDevice = function forgetDevice(callback) {
                    var _this16 = this;
                    this.forgetSpecificDevice(this.deviceKey, {
                        onFailure: callback.onFailure,
                        onSuccess: function onSuccess(result) {
                            _this16.deviceKey = null;
                            _this16.deviceGroupKey = null;
                            _this16.randomPassword = null;
                            _this16.clearCachedDeviceKeyAndPassword();
                            return callback.onSuccess(result);
                        }
                    });
                }

      /**
       * This is used to set the device status as remembered
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */;
                _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('UpdateDeviceStatus', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        DeviceKey: this.deviceKey,
                        DeviceRememberedStatus: 'remembered'
                    }, function (err) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess('SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used to set the device status as not remembered
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */;
                _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('UpdateDeviceStatus', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        DeviceKey: this.deviceKey,
                        DeviceRememberedStatus: 'not_remembered'
                    }, function (err) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess('SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used to list all devices for a user
       *
       * @param {int} limit the number of devices returned in a call
       * @param {string | null} paginationToken the pagination token in case any was returned before
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<*>} callback.onSuccess Called on success with device list.
       * @returns {void}
       */;
                _proto.listDevices = function listDevices(limit, paginationToken, callback) {
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    var requestParams = {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                        Limit: limit
                    };
                    if (paginationToken) {
                        requestParams.PaginationToken = paginationToken;
                    }
                    this.client.request('ListDevices', requestParams, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        return callback.onSuccess(data);
                    });
                    return undefined;
                }

      /**
       * This is used to globally revoke all tokens issued to a user
       * @param {object} callback Result callback map.
       * @param {onFailure} callback.onFailure Called on any error.
       * @param {onSuccess<string>} callback.onSuccess Called on success.
       * @returns {void}
       */;
                _proto.globalSignOut = function globalSignOut(callback) {
                    var _this17 = this;
                    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
                        return callback.onFailure(new Error('User is not authenticated'));
                    }
                    this.client.request('GlobalSignOut', {
                        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                    }, function (err) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        _this17.clearCachedUser();
                        return callback.onSuccess('SUCCESS');
                    });
                    return undefined;
                }

      /**
       * This is used for the user to signOut of the application and clear the cached tokens.
       * @returns {void}
       */;
                _proto.signOut = function signOut(revokeTokenCallback) {
                    var _this18 = this;
                    // If tokens won't be revoked, we just clean the client data.
                    if (!revokeTokenCallback || typeof revokeTokenCallback !== 'function') {
                        this.cleanClientData();
                        return;
                    }
                    this.getSession(function (error, _session) {
                        if (error) {
                            return revokeTokenCallback(error);
                        }
                        _this18.revokeTokens(function (err) {
                            _this18.cleanClientData();
                            revokeTokenCallback(err);
                        });
                    });
                };
                _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
                    if (revokeTokenCallback === void 0) {
                        revokeTokenCallback = function revokeTokenCallback() { };
                    }
                    if (typeof revokeTokenCallback !== 'function') {
                        throw new Error('Invalid revokeTokenCallback. It should be a function.');
                    }
                    var tokensToBeRevoked = [];
                    if (!this.signInUserSession) {
                        var error = new Error('User is not authenticated');
                        return revokeTokenCallback(error);
                    }
                    if (!this.signInUserSession.getAccessToken()) {
                        var _error = new Error('No Access token available');
                        return revokeTokenCallback(_error);
                    }
                    var refreshToken = this.signInUserSession.getRefreshToken().getToken();
                    var accessToken = this.signInUserSession.getAccessToken();
                    if (this.isSessionRevocable(accessToken)) {
                        if (refreshToken) {
                            return this.revokeToken({
                                token: refreshToken,
                                callback: revokeTokenCallback
                            });
                        }
                    }
                    revokeTokenCallback();
                };
                _proto.isSessionRevocable = function isSessionRevocable(token) {
                    if (token && typeof token.decodePayload === 'function') {
                        try {
                            var _token$decodePayload = token.decodePayload(),
                                origin_jti = _token$decodePayload.origin_jti;
                            return !!origin_jti;
                        } catch (err) {
                            // Nothing to do, token doesnt have origin_jti claim
                        }
                    }
                    return false;
                };
                _proto.cleanClientData = function cleanClientData() {
                    this.signInUserSession = null;
                    this.clearCachedUser();
                };
                _proto.revokeToken = function revokeToken(_ref2) {
                    var token = _ref2.token,
                        callback = _ref2.callback;
                    this.client.requestWithRetry('RevokeToken', {
                        Token: token,
                        ClientId: this.pool.getClientId()
                    }, function (err) {
                        if (err) {
                            return callback(err);
                        }
                        callback();
                    });
                }

      /**
       * This is used by a user trying to select a given MFA
       * @param {string} answerChallenge the mfa the user wants
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
                    var _this19 = this;
                    var challengeResponses = {};
                    challengeResponses.USERNAME = this.username;
                    challengeResponses.ANSWER = answerChallenge;
                    var jsonReq = {
                        ChallengeName: 'SELECT_MFA_TYPE',
                        ChallengeResponses: challengeResponses,
                        ClientId: this.pool.getClientId(),
                        Session: this.Session
                    };
                    if (this.getUserContextData()) {
                        jsonReq.UserContextData = this.getUserContextData();
                    }
                    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {
                        if (err) {
                            return callback.onFailure(err);
                        }
                        _this19.Session = data.Session;
                        if (answerChallenge === 'SMS_MFA') {
                            return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
                        }
                        if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {
                            return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
                        }
                        return undefined;
                    });
                }

      /**
       * This returns the user context data for advanced security feature.
       * @returns {string} the user context data from CognitoUserPool
       */;
                _proto.getUserContextData = function getUserContextData() {
                    var pool = this.pool;
                    return pool.getUserContextData(this.username);
                }

      /**
       * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
                    var _this20 = this;
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        this.client.request('AssociateSoftwareToken', {
                            Session: this.Session
                        }, function (err, data) {
                            if (err) {
                                return callback.onFailure(err);
                            }
                            _this20.Session = data.Session;
                            return callback.associateSecretCode(data.SecretCode);
                        });
                    } else {
                        this.client.request('AssociateSoftwareToken', {
                            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
                        }, function (err, data) {
                            if (err) {
                                return callback.onFailure(err);
                            }
                            return callback.associateSecretCode(data.SecretCode);
                        });
                    }
                }

      /**
       * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA
       * @param {string} totpCode The MFA code entered by the user.
       * @param {string} friendlyDeviceName The device name we are assigning to the device.
       * @param {nodeCallback<string>} callback Called on success or error.
       * @returns {void}
       */;
                _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
                    var _this21 = this;
                    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
                        this.client.request('VerifySoftwareToken', {
                            Session: this.Session,
                            UserCode: totpCode,
                            FriendlyDeviceName: friendlyDeviceName
                        }, function (err, data) {
                            if (err) {
                                return callback.onFailure(err);
                            }
                            _this21.Session = data.Session;
                            var challengeResponses = {};
                            challengeResponses.USERNAME = _this21.username;
                            var jsonReq = {
                                ChallengeName: 'MFA_SETUP',
                                ClientId: _this21.pool.getClientId(),
                                ChallengeResponses: challengeResponses,
                                Session: _this21.Session
                            };
                            if (_this21.getUserContextData()) {
                                jsonReq.UserContextData = _this21.getUserContextData();
                            }
                            _this21.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {
                                if (errRespond) {
                                    return callback.onFailure(errRespond);
                                }
                                _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);
                                _this21.cacheTokens();
                                return callback.onSuccess(_this21.signInUserSession);
                            });
                            return undefined;
                        });
                    } else {
                        this.client.request('VerifySoftwareToken', {
                            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
                            UserCode: totpCode,
                            FriendlyDeviceName: friendlyDeviceName
                        }, function (err, data) {
                            if (err) {
                                return callback.onFailure(err);
                            }
                            return callback.onSuccess(data);
                        });
                    }
                };
                return CognitoUser;
            }();

            // EXTERNAL MODULE: ./node_modules/isomorphic-unfetch/browser.js
            var browser = __webpack_require__(204);
            // EXTERNAL MODULE: ./node_modules/amazon-cognito-identity-js/es/UserAgent.js + 1 modules
            var UserAgent = __webpack_require__(4716);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/Client.js
            function Client_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; Client_setPrototypeOf(subClass, superClass); }
            function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return Client_setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
            function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) Client_setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
            function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })); return true; } catch (e) { return false; } }
            function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
            function Client_setPrototypeOf(o, p) { Client_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Client_setPrototypeOf(o, p); }
            function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


            var CognitoError = /*#__PURE__*/function (_Error) {
                Client_inheritsLoose(CognitoError, _Error);
                function CognitoError(message, code, name, statusCode) {
                    var _this;
                    _this = _Error.call(this, message) || this;
                    _this.code = code;
                    _this.name = name;
                    _this.statusCode = statusCode;
                    return _this;
                }
                return CognitoError;
            }( /*#__PURE__*/_wrapNativeSuper(Error));
            /** @class */
            var Client = /*#__PURE__*/function () {
                /**
                 * Constructs a new AWS Cognito Identity Provider client object
                 * @param {string} region AWS region
                 * @param {string} endpoint endpoint
                 * @param {object} fetchOptions options for fetch API (only credentials is supported)
                 */
                function Client(region, endpoint, fetchOptions) {
                    this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
                    var _ref = fetchOptions || {},
                        credentials = _ref.credentials;
                    this.fetchOptions = credentials ? {
                        credentials: credentials
                    } : {};
                }

                /**
                 * Makes an unauthenticated request on AWS Cognito Identity Provider API
                 * using fetch
                 * @param {string} operation API operation
                 * @param {object} params Input parameters
                 * @returns Promise<object>
                 */
                var _proto = Client.prototype;
                _proto.promisifyRequest = function promisifyRequest(operation, params) {
                    var _this2 = this;
                    return new Promise(function (resolve, reject) {
                        _this2.request(operation, params, function (err, data) {
                            if (err) {
                                reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
                            } else {
                                resolve(data);
                            }
                        });
                    });
                };
                _proto.requestWithRetry = function requestWithRetry(operation, params, callback) {
                    var _this3 = this;
                    var MAX_DELAY_IN_MILLIS = 5 * 1000;
                    jitteredExponentialRetry(function (p) {
                        return new Promise(function (res, rej) {
                            _this3.request(operation, p, function (error, result) {
                                if (error) {
                                    rej(error);
                                } else {
                                    res(result);
                                }
                            });
                        });
                    }, [params], MAX_DELAY_IN_MILLIS).then(function (result) {
                        return callback(null, result);
                    })["catch"](function (error) {
                        return callback(error);
                    });
                }

      /**
       * Makes an unauthenticated request on AWS Cognito Identity Provider API
       * using fetch
       * @param {string} operation API operation
       * @param {object} params Input parameters
       * @param {function} callback Callback called when a response is returned
       * @returns {void}
       */;
                _proto.request = function request(operation, params, callback) {
                    var headers = {
                        'Content-Type': 'application/x-amz-json-1.1',
                        'X-Amz-Target': "AWSCognitoIdentityProviderService." + operation,
                        'X-Amz-User-Agent': (0, UserAgent/* getAmplifyUserAgent */.Zm)(),
                        'Cache-Control': 'no-store'
                    };
                    var options = Object.assign({}, this.fetchOptions, {
                        headers: headers,
                        method: 'POST',
                        mode: 'cors',
                        body: JSON.stringify(params)
                    });
                    var response;
                    var responseJsonData;
                    fetch(this.endpoint, options).then(function (resp) {
                        response = resp;
                        return resp;
                    }, function (err) {
                        // If error happens here, the request failed
                        // if it is TypeError throw network error
                        if (err instanceof TypeError) {
                            throw new Error('Network error');
                        }
                        throw err;
                    }).then(function (resp) {
                        return resp.json()["catch"](function () {
                            return {};
                        });
                    }).then(function (data) {
                        // return parsed body stream
                        if (response.ok) return callback(null, data);
                        responseJsonData = data;

                        // Taken from aws-sdk-js/lib/protocol/json.js
                        // eslint-disable-next-line no-underscore-dangle
                        var code = (data.__type || data.code).split('#').pop();
                        var error = new Error(data.message || data.Message || null);
                        error.name = code;
                        error.code = code;
                        return callback(error);
                    })["catch"](function (err) {
                        // first check if we have a service error
                        if (response && response.headers && response.headers.get('x-amzn-errortype')) {
                            try {
                                var code = response.headers.get('x-amzn-errortype').split(':')[0];
                                var error = new Error(response.status ? response.status.toString() : null);
                                error.code = code;
                                error.name = code;
                                error.statusCode = response.status;
                                return callback(error);
                            } catch (ex) {
                                return callback(err);
                            }
                            // otherwise check if error is Network error
                        } else if (err instanceof Error && err.message === 'Network error') {
                            err.code = 'NetworkError';
                        }
                        return callback(err);
                    });
                };
                return Client;
            }();

            var logger = {
                debug: function debug() {
                    // Intentionally blank. This package doesn't have logging
                }
            };

            /**
             * For now, all errors are retryable.
             */
            var NonRetryableError = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Error2) {
                Client_inheritsLoose(NonRetryableError, _Error2);
                function NonRetryableError(message) {
                    var _this4;
                    _this4 = _Error2.call(this, message) || this;
                    _this4.nonRetryable = true;
                    return _this4;
                }
                return NonRetryableError;
            }( /*#__PURE__*/_wrapNativeSuper(Error))));
            var isNonRetryableError = function isNonRetryableError(obj) {
                var key = 'nonRetryable';
                return obj && obj[key];
            };
            function retry(functionToRetry, args, delayFn, attempt) {
                if (attempt === void 0) {
                    attempt = 1;
                }
                if (typeof functionToRetry !== 'function') {
                    throw Error('functionToRetry must be a function');
                }
                logger.debug(functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args));
                return functionToRetry.apply(void 0, args)["catch"](function (err) {
                    logger.debug("error on " + functionToRetry.name, err);
                    if (isNonRetryableError(err)) {
                        logger.debug(functionToRetry.name + " non retryable error", err);
                        throw err;
                    }
                    var retryIn = delayFn(attempt, args, err);
                    logger.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
                    if (retryIn !== false) {
                        return new Promise(function (res) {
                            return setTimeout(res, retryIn);
                        }).then(function () {
                            return retry(functionToRetry, args, delayFn, attempt + 1);
                        });
                    } else {
                        throw err;
                    }
                });
            }
            function jitteredBackoff(maxDelayMs) {
                var BASE_TIME_MS = 100;
                var JITTER_FACTOR = 100;
                return function (attempt) {
                    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
                    return delay > maxDelayMs ? false : delay;
                };
            }
            var MAX_DELAY_MS = 5 * 60 * 1000;
            function jitteredExponentialRetry(functionToRetry, args, maxDelayMs) {
                if (maxDelayMs === void 0) {
                    maxDelayMs = MAX_DELAY_MS;
                }
                return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
            }
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */




            var USER_POOL_ID_MAX_LENGTH = 55;

            /** @class */
            var CognitoUserPool = /*#__PURE__*/function () {
                /**
                 * Constructs a new CognitoUserPool object
                 * @param {object} data Creation options.
                 * @param {string} data.UserPoolId Cognito user pool id.
                 * @param {string} data.ClientId User pool application client id.
                 * @param {string} data.endpoint Optional custom service endpoint.
                 * @param {object} data.fetchOptions Optional options for fetch API.
                 *        (only credentials option is supported)
                 * @param {object} data.Storage Optional storage object.
                 * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:
                 *        boolean flag indicating if the data collection is enabled
                 *        to support cognito advanced security features. By default, this
                 *        flag is set to true.
                 */
                function CognitoUserPool(data, wrapRefreshSessionCallback) {
                    var _ref = data || {},
                        UserPoolId = _ref.UserPoolId,
                        ClientId = _ref.ClientId,
                        endpoint = _ref.endpoint,
                        fetchOptions = _ref.fetchOptions,
                        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
                    if (!UserPoolId || !ClientId) {
                        throw new Error('Both UserPoolId and ClientId are required.');
                    }
                    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {
                        throw new Error('Invalid UserPoolId format.');
                    }
                    var region = UserPoolId.split('_')[0];
                    this.userPoolId = UserPoolId;
                    this.clientId = ClientId;
                    this.client = new Client(region, endpoint, fetchOptions);

                    /**
                     * By default, AdvancedSecurityDataCollectionFlag is set to true,
                     * if no input value is provided.
                     */
                    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
                    this.storage = data.Storage || new StorageHelper().getStorage();
                    if (wrapRefreshSessionCallback) {
                        this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
                    }
                }

                /**
                 * @returns {string} the user pool id
                 */
                var _proto = CognitoUserPool.prototype;
                _proto.getUserPoolId = function getUserPoolId() {
                    return this.userPoolId;
                }

      /**
       * @returns {string} the user pool name
       */;
                _proto.getUserPoolName = function getUserPoolName() {
                    return this.getUserPoolId().split('_')[1];
                }

      /**
       * @returns {string} the client id
       */;
                _proto.getClientId = function getClientId() {
                    return this.clientId;
                }

      /**
       * @typedef {object} SignUpResult
       * @property {CognitoUser} user New user.
       * @property {bool} userConfirmed If the user is already confirmed.
       */
      /**
       * method for signing up a user
       * @param {string} username User's username.
       * @param {string} password Plain-text initial password entered by user.
       * @param {(AttributeArg[])=} userAttributes New user attributes.
       * @param {(AttributeArg[])=} validationData Application metadata.
       * @param {(AttributeArg[])=} clientMetadata Client metadata.
       * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.
       * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
       * @returns {void}
       */;
                _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {
                    var _this = this;
                    var jsonReq = {
                        ClientId: this.clientId,
                        Username: username,
                        Password: password,
                        UserAttributes: userAttributes,
                        ValidationData: validationData,
                        ClientMetadata: clientMetadata
                    };
                    if (this.getUserContextData(username)) {
                        jsonReq.UserContextData = this.getUserContextData(username);
                    }
                    this.client.request('SignUp', jsonReq, function (err, data) {
                        if (err) {
                            return callback(err, null);
                        }
                        var cognitoUser = {
                            Username: username,
                            Pool: _this,
                            Storage: _this.storage
                        };
                        var returnData = {
                            user: new CognitoUser(cognitoUser),
                            userConfirmed: data.UserConfirmed,
                            userSub: data.UserSub,
                            codeDeliveryDetails: data.CodeDeliveryDetails
                        };
                        return callback(null, returnData);
                    });
                }

      /**
       * method for getting the current user of the application from the local storage
       *
       * @returns {CognitoUser} the user retrieved from storage
       */;
                _proto.getCurrentUser = function getCurrentUser() {
                    var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
                    var lastAuthUser = this.storage.getItem(lastUserKey);
                    if (lastAuthUser) {
                        var cognitoUser = {
                            Username: lastAuthUser,
                            Pool: this,
                            Storage: this.storage
                        };
                        return new CognitoUser(cognitoUser);
                    }
                    return null;
                }

      /**
       * This method returns the encoded data string used for cognito advanced security feature.
       * This would be generated only when developer has included the JS used for collecting the
       * data on their client. Please refer to documentation to know more about using AdvancedSecurity
       * features
       * @param {string} username the username for the context data
       * @returns {string} the user context data
       **/;
                _proto.getUserContextData = function getUserContextData(username) {
                    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {
                        return undefined;
                    }
                    /* eslint-disable */
                    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
                    /* eslint-enable */

                    if (this.advancedSecurityDataCollectionFlag) {
                        var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);
                        if (advancedSecurityData) {
                            var userContextData = {
                                EncodedData: advancedSecurityData
                            };
                            return userContextData;
                        }
                    }
                    return {};
                };
                return CognitoUserPool;
            }();

            // EXTERNAL MODULE: ./node_modules/js-cookie/src/js.cookie.js
            var js_cookie = __webpack_require__(6808);
            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/CookieStorage.js


            /** @class */
            var CookieStorage = /*#__PURE__*/function () {
                /**
                 * Constructs a new CookieStorage object
                 * @param {object} data Creation options.
                 * @param {string} data.domain Cookies domain (default: domain of the page
                 * 				where the cookie was created, excluding subdomains)
                 * @param {string} data.path Cookies path (default: '/')
                 * @param {integer} data.expires Cookie expiration (in days, default: 365)
                 * @param {boolean} data.secure Cookie secure flag (default: true)
                 * @param {string} data.sameSite Cookie request behavior (default: null)
                 */
                function CookieStorage(data) {
                    if (data === void 0) {
                        data = {};
                    }
                    if (data.domain) {
                        this.domain = data.domain;
                    }
                    if (data.path) {
                        this.path = data.path;
                    } else {
                        this.path = '/';
                    }
                    if (Object.prototype.hasOwnProperty.call(data, 'expires')) {
                        this.expires = data.expires;
                    } else {
                        this.expires = 365;
                    }
                    if (Object.prototype.hasOwnProperty.call(data, 'secure')) {
                        this.secure = data.secure;
                    } else {
                        this.secure = true;
                    }
                    if (Object.prototype.hasOwnProperty.call(data, 'sameSite')) {
                        if (!['strict', 'lax', 'none'].includes(data.sameSite)) {
                            throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
                        }
                        if (data.sameSite === 'none' && !this.secure) {
                            throw new Error('sameSite = None requires the Secure attribute in latest browser versions.');
                        }
                        this.sameSite = data.sameSite;
                    } else {
                        this.sameSite = null;
                    }
                }

                /**
                 * This is used to set a specific item in storage
                 * @param {string} key - the key for the item
                 * @param {object} value - the value
                 * @returns {string} value that was set
                 */
                var _proto = CookieStorage.prototype;
                _proto.setItem = function setItem(key, value) {
                    var options = {
                        path: this.path,
                        expires: this.expires,
                        domain: this.domain,
                        secure: this.secure
                    };
                    if (this.sameSite) {
                        options.sameSite = this.sameSite;
                    }
                    js_cookie.set(key, value, options);
                    return js_cookie.get(key);
                }

      /**
       * This is used to get a specific key from storage
       * @param {string} key - the key for the item
       * This is used to clear the storage
       * @returns {string} the data item
       */;
                _proto.getItem = function getItem(key) {
                    return js_cookie.get(key);
                }

      /**
       * This is used to remove an item from storage
       * @param {string} key - the key being set
       * @returns {string} value - value that was deleted
       */;
                _proto.removeItem = function removeItem(key) {
                    var options = {
                        path: this.path,
                        expires: this.expires,
                        domain: this.domain,
                        secure: this.secure
                    };
                    if (this.sameSite) {
                        options.sameSite = this.sameSite;
                    }
                    return js_cookie.remove(key, options);
                }

      /**
       * This is used to clear the storage of optional
       * items that were previously set
       * @returns {} an empty object
       */;
                _proto.clear = function clear() {
                    var cookies = js_cookie.get();
                    var numKeys = Object.keys(cookies).length;
                    for (var index = 0; index < numKeys; ++index) {
                        this.removeItem(Object.keys(cookies)[index]);
                    }
                    return {};
                };
                return CookieStorage;
            }();

            ;// CONCATENATED MODULE: ./node_modules/amazon-cognito-identity-js/es/index.js
            /*!
             * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
             * SPDX-License-Identifier: Apache-2.0
             */















            /***/
}),

    /***/ 8171:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   a: () => (/* binding */ sessionSubject),
    /* harmony export */   k: () => (/* binding */ logout)
                /* harmony export */
});
    /* harmony import */ var aws_amplify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9056);
    /* harmony import */ var aws_amplify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(490);
    /* harmony import */ var _shared_BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8932);
    /* harmony import */ var _shared_auth_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3756);



            // we cant set null from the beginning cause it can give a false impression that user is not logged in before first auth check
            var sessionSubject = new _shared_BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__/* .BehaviorSubject */.X((0, _shared_auth_helper__WEBPACK_IMPORTED_MODULE_1__/* .getIsAuthenticated */.j3)() ? {} : null);
            var logout = function logout() {
                try {
                    aws_amplify__WEBPACK_IMPORTED_MODULE_2__/* .Auth */.g.signOut();
                } catch (error) {
                    console.log(error);
                }
            };

            // https://docs.amplify.aws/react/build-a-backend/auth/auth-events/#listen-to-and-log-auth-events
            aws_amplify__WEBPACK_IMPORTED_MODULE_3__/* .Hub */.X.listen('auth', function (_ref) {
                var _ref$payload = _ref.payload,
                    event = _ref$payload.event,
                    data = _ref$payload.data;
                switch (event) {
                    case 'signIn':
                        sessionSubject.next(data);
                        break;
                    case 'signOut':
                        sessionSubject.next(null);
                        break;
                }
            });

            // Check user session on init and push result to session subject
            aws_amplify__WEBPACK_IMPORTED_MODULE_2__/* .Auth */.g.currentAuthenticatedUser().then(function (user) {
                sessionSubject.next(user);
            })["catch"](function () {
                sessionSubject.next(null);
            });

            /***/
}),

    /***/ 7556:
    /***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

            "use strict";

            // UNUSED EXPORTS: App

            // NAMESPACE OBJECT: ./node_modules/xstate/es/actions.js
            var actions_namespaceObject = {};
            __webpack_require__.r(actions_namespaceObject);
            __webpack_require__.d(actions_namespaceObject, {
                e4: () => (actions_after),
                assign: () => (actions_assign),
                al: () => (actions_cancel),
                choose: () => (actions_choose),
                aT: () => (done),
                Sl: () => (actions_doneInvoke),
                vU: () => (actions_error),
                Tn: () => (forwardTo),
                o$: () => (getActionFunction),
                bf: () => (initEvent),
                OU: () => (actions_raise),
                yC: () => (resolveActions),
                lW: () => (actions_send),
                xc: () => (sendUpdate),
                BL: () => (actions_start),
                stop: () => (actions_stop),
                Q8: () => (toActionObject),
                AE: () => (toActionObjects),
                XA: () => (toActivityDefinition)
            });

            // NAMESPACE OBJECT: ./node_modules/@radix-ui/react-tabs/dist/index.module.js
            var react_tabs_dist_index_module_namespaceObject = {};
            __webpack_require__.r(react_tabs_dist_index_module_namespaceObject);
            __webpack_require__.d(react_tabs_dist_index_module_namespaceObject, {
                Content: () => ($69cb30bb0017df05$export$7c6e2c02157bb7d2),
                List: () => ($69cb30bb0017df05$export$54c2e3dc7acea9f5),
                Root: () => ($69cb30bb0017df05$export$be92b6f5f03c0fe9),
                Tabs: () => ($69cb30bb0017df05$export$b2539bed5023c21c),
                TabsContent: () => ($69cb30bb0017df05$export$bd905d70e8fd2ebb),
                TabsList: () => ($69cb30bb0017df05$export$9712d22edc0d78c1),
                TabsTrigger: () => ($69cb30bb0017df05$export$8114b9fdfdf9f3ba),
                Trigger: () => ($69cb30bb0017df05$export$41fb9f06171c75f4),
                createTabsScope: () => ($69cb30bb0017df05$export$355f5bd209d7b13a)
            });

            // EXTERNAL MODULE: ./node_modules/react-dom/client.js
            var client = __webpack_require__(745);
            // EXTERNAL MODULE: ./node_modules/react/index.js
            var react = __webpack_require__(7294);
            var react_namespaceObject = /*#__PURE__*/__webpack_require__.t(react, 2);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/utils/index.mjs
            const utils_t = t => { var n; const r = Object.assign({ default: void 0 }, t); return null !== (n = r.default) && void 0 !== n ? n : r }; function n(t) { return null != t && !Array.isArray(t) && "object" == typeof t } function r(t) { return "string" == typeof t || "object" == typeof t && "[object String]" === Object.prototype.toString.call(t) } function e(t) { return n(t) && "[object Map]" === Object.prototype.toString.call(t) } function utils_o(t) { return n(t) && "[object Set]" === Object.prototype.toString.call(t) } function u(t) { return void 0 === t } function c(t) { return null == t } function i(t) { if (null == t) return !0; if (n(t) && (e(t) || utils_o(t))) return !t.size; if (n(t) && (r(t) || Array.isArray(t))) return !t.length; for (const n in t) if (utils_s(t, n)) return !1; return !0 } function f(t) { return Array.isArray(t) && i(t) } function l(...t) { return t.every(f) } function a(t) { return n(t) && i(t) } function p(...t) { return t.every(a) } function y(t) { return r(t) ? t.charAt(0).toUpperCase() + t.slice(1) : "" } function utils_s(t, n) { return null != t && Object.prototype.hasOwnProperty.call(t, n) } function utils_b(t) { return "function" == typeof t } const utils_j = (t, n) => n ? `${t}--${n}` : "", utils_g = (t, n, r) => r ? `${t}--${n}` : ""; function A(t) { return utils_b(t) } function d(t, n) { return t.reduce(((t, e) => `${t}${r(e) ? n(e) : ""}`), "") } function v(...t) { }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/node_modules/tslib/tslib.es6.js
            /******************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise */

            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                return extendStatics(d, b);
            };

            function __extends(d, b) {
                if (typeof b !== "function" && b !== null)
                    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var tslib_es6_assign = function () {
                tslib_es6_assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                }
                return tslib_es6_assign.apply(this, arguments);
            }

            function __rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }

            function __param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); }
            }

            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
            }

            function __awaiter(thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }

            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            }

            var __createBinding = Object.create ? (function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                var desc = Object.getOwnPropertyDescriptor(m, k);
                if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                    desc = { enumerable: true, get: function () { return m[k]; } };
                }
                Object.defineProperty(o, k2, desc);
            }) : (function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            });

            function __exportStar(m, o) {
                for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
            }

            function tslib_es6_values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            /** @deprecated */
            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }

            /** @deprecated */
            function __spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            }

            function __spreadArray(to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
            }

            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }

            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
            }

            function __asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
            }

            function __asyncValues(o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof tslib_es6_values === "function" ? tslib_es6_values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }

            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
                return cooked;
            };

            var __setModuleDefault = Object.create ? (function (o, v) {
                Object.defineProperty(o, "default", { enumerable: true, value: v });
            }) : function (o, v) {
                o["default"] = v;
            };

            function __importStar(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                __setModuleDefault(result, mod);
                return result;
            }

            function __importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }

            function __classPrivateFieldGet(receiver, state, kind, f) {
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
            }

            function __classPrivateFieldSet(receiver, state, value, kind, f) {
                if (kind === "m") throw new TypeError("Private method is not writable");
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
            }

            function __classPrivateFieldIn(state, receiver) {
                if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
                return typeof state === "function" ? receiver === state : state.has(receiver);
            }

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Hub.js
            var Hub = __webpack_require__(490);
            // EXTERNAL MODULE: ./node_modules/amazon-cognito-identity-js/es/index.js + 17 modules
            var es = __webpack_require__(3477);
            // EXTERNAL MODULE: ./node_modules/xstate/lib/waitFor.js
            var waitFor = __webpack_require__(4531);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/country-dial-codes.mjs
            const country_dial_codes_o = ["+1", "+7", "+20", "+27", "+30", "+31", "+32", "+33", "+34", "+36", "+39", "+40", "+41", "+43", "+44", "+45", "+46", "+47", "+48", "+49", "+51", "+52", "+53", "+54", "+55", "+56", "+57", "+58", "+60", "+61", "+62", "+63", "+64", "+65", "+66", "+81", "+82", "+84", "+86", "+90", "+91", "+92", "+93", "+94", "+95", "+98", "+212", "+213", "+216", "+218", "+220", "+221", "+222", "+223", "+224", "+225", "+226", "+227", "+228", "+229", "+230", "+231", "+232", "+233", "+234", "+235", "+236", "+237", "+238", "+239", "+240", "+241", "+242", "+243", "+244", "+245", "+246", "+248", "+249", "+250", "+251", "+252", "+253", "+254", "+255", "+256", "+257", "+258", "+260", "+261", "+262", "+263", "+264", "+265", "+266", "+267", "+268", "+269", "+290", "+291", "+297", "+298", "+299", "+345", "+350", "+351", "+352", "+353", "+354", "+355", "+356", "+357", "+358", "+359", "+370", "+371", "+372", "+373", "+374", "+375", "+376", "+377", "+378", "+379", "+380", "+381", "+382", "+385", "+386", "+387", "+389", "+420", "+421", "+423", "+500", "+501", "+502", "+503", "+504", "+505", "+506", "+507", "+508", "+509", "+537", "+590", "+591", "+593", "+594", "+595", "+596", "+597", "+598", "+599", "+670", "+672", "+673", "+674", "+675", "+676", "+677", "+678", "+679", "+680", "+681", "+682", "+683", "+685", "+686", "+687", "+688", "+689", "+690", "+691", "+692", "+850", "+852", "+853", "+855", "+856", "+872", "+880", "+886", "+960", "+961", "+962", "+963", "+964", "+965", "+966", "+967", "+968", "+970", "+971", "+972", "+973", "+974", "+975", "+976", "+977", "+992", "+993", "+994", "+995", "+996", "+998"];

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/constants.mjs
            const constants_a = { birthdate: { label: "Birthdate", placeholder: "Enter your Birthdate", type: "date", autocomplete: "bday", isRequired: !0 }, confirmation_code: { label: "Confirmation Code", placeholder: "Enter your Confirmation Code", type: "number", autocomplete: "one-time-code", isRequired: !0 }, confirm_password: { label: "Confirm Password", placeholder: "Please confirm your Password", type: "password", autocomplete: "new-password", isRequired: !0 }, email: { label: "Email", placeholder: "Enter your Email", type: "email", autocomplete: "username", isRequired: !0 }, family_name: { label: "Family Name", placeholder: "Enter your Family Name", type: "text", autocomplete: "family-name", isRequired: !0 }, given_name: { label: "Given Name", placeholder: "Enter your Given Name", type: "text", autocomplete: "given-name", isRequired: !0 }, middle_name: { label: "Middle Name", placeholder: "Enter your Middle Name", type: "text", autocomplete: "additional-name", isRequired: !0 }, name: { label: "Name", placeholder: "Enter your Name", type: "text", autocomplete: "name", isRequired: !0 }, nickname: { label: "Nickname", placeholder: "Enter your Nickname", type: "text", autocomplete: "tel", isRequired: !0 }, password: { label: "Password", placeholder: "Enter your Password", type: "password", autocomplete: "new-password", isRequired: !0 }, phone_number: { label: "Phone Number", placeholder: "Enter your Phone Number", type: "tel", autocomplete: "tel", dialCode: "+1", dialCodeList: country_dial_codes_o, isRequired: !0 }, preferred_username: { label: "Preferred Username", placeholder: "Enter your Preferred Username", type: "text", isRequired: !0 }, profile: { label: "Profile", placeholder: "Add your Profile", type: "url", autocomplete: "url", isRequired: !0 }, website: { label: "Website", placeholder: "Add your Website", type: "url", autocomplete: "url", isRequired: !0 }, username: { label: "Username", placeholder: "Enter your Username", type: "text", autocomplete: "username", isRequired: !0 } }, constants_r = ["^", "$", "*", ".", "[", "]", "{", "}", "(", ")", "?", '"', "!", "@", "#", "%", "&", "/", "\\", ",", ">", "<", "'", ":", ";", "|", "_", "~", "`", "=", "+", "-", " "], constants_l = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/actor.mjs
            const actor_t = t => { var o; return null === (o = t.context.actorRef) || void 0 === o ? void 0 : o.getSnapshot() }, actor_o = o => { var n; return null === (n = actor_t(o)) || void 0 === n ? void 0 : n.context };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/utils.mjs
            const utils_c = ({ packageName: t, version: e }) => { (0, es/* appendToCognitoUserAgent */.Ib)(`${t}/${e}`) }, utils_l = t => { const e = t.trim().split(""); for (let t = 0; t < e.length; t++)t > 0 && t < e.length - 1 && (e[t] = "*"); return e.join("") }, utils_u = t => { if (t.length < 4) return t; const e = t.split(""); for (let t = 0; t < e.length - 4; t++)e[t] = "*"; return e.join("") }, m = e => __awaiter(void 0, void 0, void 0, (function* () { try { yield (0, waitFor/* waitFor */.x)(e, (t => actor_t(t).matches("autoSignIn"))) } catch (t) { } })), utils_d = ({ payload: { data: e, event: n } }, i, a) => __awaiter(void 0, void 0, void 0, (function* () { const { send: t } = i, o = i.getSnapshot(), { onSignIn: c, onSignOut: l } = null != a ? a : {}; switch (n) { case "tokenRefresh": o.matches("authenticated.idle") && t("TOKEN_REFRESH"); break; case "autoSignIn": if (!o.matches("authenticated")) { yield m(i); const n = actor_t(i.getSnapshot()); (null == n ? void 0 : n.matches("autoSignIn")) && t({ type: "AUTO_SIGN_IN", data: e }) } break; case "autoSignIn_failure": { yield m(i); const n = actor_t(i.getSnapshot()); (null == n ? void 0 : n.matches("autoSignIn")) && t({ type: "AUTO_SIGN_IN_FAILURE", data: e }); break } case "signIn": utils_b(c) && c(); break; case "signOut": case "tokenRefresh_failure": utils_b(l) && l(), o.matches("authenticated.idle") && t("SIGN_OUT") } })), h = (t, n = utils_d) => Hub/* Hub */.X.listen("auth", ((t, e) => n => { e(n, t) })(t, n), "authenticator-hub-handler"), utils_p = t => constants_r.some((e => t.includes(e))), utils_f = (t, e, n) => encodeURI(`otpauth://totp/${t}:${e}?secret=${n}&issuer=${t}`); function g(t, ...e) { return Object.entries(t).reduce(((t, [n, i]) => Object.assign(Object.assign({}, t), { [n]: e.includes(n) ? i : null == i ? void 0 : i.trim() })), {}) } const I = t => !!t && o.test(t);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/node_modules/tslib/tslib.es6.mjs
            /******************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */

            function tslib_es6_rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function tslib_es6_awaiter(thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }



            // EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/with-selector.js
            var with_selector = __webpack_require__(2798);
            ;// CONCATENATED MODULE: ./node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js


            var index = react.useLayoutEffect;

    /* harmony default export */ const use_isomorphic_layout_effect_browser_esm = (index);

            // EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/index.js
            var shim = __webpack_require__(1688);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/node_modules/@xstate/react/es/useActor.js




            function isActorWithState(actorRef) {
                return 'state' in actorRef;
            }
            function isDeferredActor(actorRef) {
                return 'deferred' in actorRef;
            }
            function defaultGetSnapshot(actorRef) {
                return 'getSnapshot' in actorRef
                    ? actorRef.getSnapshot()
                    : isActorWithState(actorRef)
                        ? actorRef.state
                        : undefined;
            }
            function useActor(actorRef, getSnapshot) {
                if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }
                var actorRefRef = useRef(actorRef);
                var deferredEventsRef = useRef([]);
                var subscribe = useCallback(function (handleStoreChange) {
                    var unsubscribe = actorRef.subscribe(handleStoreChange).unsubscribe;
                    return unsubscribe;
                }, [actorRef]);
                var boundGetSnapshot = useCallback(function () { return getSnapshot(actorRef); }, [
                    actorRef,
                    getSnapshot
                ]);
                var storeSnapshot = useSyncExternalStore(subscribe, boundGetSnapshot, boundGetSnapshot);
                var send = useConstant(function () {
                    return function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var event = args[0];
                        if (false) { }
                        var currentActorRef = actorRefRef.current;
                        // If the previous actor is a deferred actor,
                        // queue the events so that they can be replayed
                        // on the non-deferred actor.
                        if (isDeferredActor(currentActorRef) && currentActorRef.deferred) {
                            deferredEventsRef.current.push(event);
                        }
                        else {
                            currentActorRef.send(event);
                        }
                    };
                });
                useIsomorphicLayoutEffect(function () {
                    actorRefRef.current = actorRef;
                    // Dequeue deferred events from the previous deferred actorRef
                    while (deferredEventsRef.current.length > 0) {
                        var deferredEvent = deferredEventsRef.current.shift();
                        actorRef.send(deferredEvent);
                    }
                }, [actorRef]);
                return [storeSnapshot, send];
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/node_modules/@xstate/react/es/utils.js
            var utils_read = (undefined && undefined.__read) || function (o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            };
            var utils_values = (undefined && undefined.__values) || function (o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            };
            function partition(items, predicate) {
                var e_1, _a;
                var _b = utils_read([[], []], 2), truthy = _b[0], falsy = _b[1];
                try {
                    for (var items_1 = utils_values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        if (predicate(item)) {
                            truthy.push(item);
                        }
                        else {
                            falsy.push(item);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [truthy, falsy];
            }
            function getServiceSnapshot(service) {
                return service.status !== 0 ? service.state : service.machine.initialState;
            }
            // From https://github.com/reduxjs/react-redux/blob/master/src/utils/shallowEqual.ts
            function is(x, y) {
                if (x === y) {
                    return x !== 0 || y !== 0 || 1 / x === 1 / y;
                }
                else {
                    return x !== x && y !== y;
                }
            }
            function shallowEqual(objA, objB) {
                if (is(objA, objB))
                    return true;
                if (typeof objA !== 'object' ||
                    objA === null ||
                    typeof objB !== 'object' ||
                    objB === null) {
                    return false;
                }
                var keysA = Object.keys(objA);
                var keysB = Object.keys(objB);
                if (keysA.length !== keysB.length)
                    return false;
                for (var i = 0; i < keysA.length; i++) {
                    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||
                        !is(objA[keysA[i]], objB[keysA[i]])) {
                        return false;
                    }
                }
                return true;
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/node_modules/@xstate/react/es/useSelector.js




            function isService(actor) {
                return 'state' in actor && 'machine' in actor;
            }
            var defaultCompare = function (a, b) { return a === b; };
            var useSelector_defaultGetSnapshot = function (a, initialStateCacheRef) {
                if (isService(a)) {
                    // A status of 0 = interpreter not started
                    if (a.status === 0 && initialStateCacheRef.current) {
                        return initialStateCacheRef.current;
                    }
                    var snapshot = getServiceSnapshot(a);
                    initialStateCacheRef.current = a.status === 0 ? snapshot : null;
                    return snapshot;
                }
                return isActorWithState(a) ? a.state : undefined;
            };
            function useSelector(actor, selector, compare, getSnapshot) {
                if (compare === void 0) { compare = defaultCompare; }
                var initialStateCacheRef = (0, react.useRef)(null);
                var subscribe = (0, react.useCallback)(function (handleStoreChange) {
                    var unsubscribe = actor.subscribe(handleStoreChange).unsubscribe;
                    return unsubscribe;
                }, [actor]);
                var boundGetSnapshot = (0, react.useCallback)(function () {
                    if (getSnapshot) {
                        return getSnapshot(actor);
                    }
                    return useSelector_defaultGetSnapshot(actor, initialStateCacheRef);
                }, [actor, getSnapshot]);
                var selectedSnapshot = (0, with_selector.useSyncExternalStoreWithSelector)(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);
                return selectedSnapshot;
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/facade.mjs
            const facade_r = e => { const t = t => r => e({ type: t, data: r }); return { initializeMachine: t("INIT"), resendCode: t("RESEND"), signOut: t("SIGN_OUT"), submitForm: t("SUBMIT"), updateForm: t("CHANGE"), updateBlur: t("BLUR"), toFederatedSignIn: t("FEDERATED_SIGN_IN"), toResetPassword: t("RESET_PASSWORD"), toSignIn: t("SIGN_IN"), toSignUp: t("SIGN_UP"), skipVerification: t("SKIP") } }, facade_n = r => { var n, s, i, a, o; const c = null !== (n = actor_o(r)) && void 0 !== n ? n : {}, { codeDeliveryDetails: u, remoteError: d, unverifiedContactMethods: l, validationError: m, totpSecretCode: h = null } = c, { socialProviders: v } = null !== (i = null === (s = r.context) || void 0 === s ? void 0 : s.config) && void 0 !== i ? i : {}, g = null !== (a = null == c ? void 0 : c.user) && void 0 !== a ? a : null === (o = r.context) || void 0 === o ? void 0 : o.user, f = m && Object.keys(m).length > 0, p = actor_t(r), S = r.hasTag("pending") || (null == p ? void 0 : p.hasTag("pending")), I = (() => { switch (!0) { case r.matches("idle"): return "idle"; case r.matches("setup"): return "setup"; case r.matches("signOut"): return "signOut"; case r.matches("authenticated"): return "authenticated"; case null == p ? void 0 : p.matches("confirmSignUp"): return "confirmSignUp"; case null == p ? void 0 : p.matches("confirmSignIn"): return "confirmSignIn"; case null == p ? void 0 : p.matches("setupTOTP.edit"): case null == p ? void 0 : p.matches("setupTOTP.submit"): return "setupTOTP"; case null == p ? void 0 : p.matches("signIn"): return "signIn"; case null == p ? void 0 : p.matches("signUp"): return "signUp"; case null == p ? void 0 : p.matches("forceNewPassword"): return "forceNewPassword"; case null == p ? void 0 : p.matches("resetPassword"): return "resetPassword"; case null == p ? void 0 : p.matches("confirmResetPassword"): return "confirmResetPassword"; case null == p ? void 0 : p.matches("verifyUser"): return "verifyUser"; case null == p ? void 0 : p.matches("confirmVerifyUser"): return "confirmVerifyUser"; case null == p ? void 0 : p.matches("setupTOTP.getTotpSecretCode"): case r.matches("signIn.runActor"): return "transition"; default: return console.debug("Cannot infer `route` from Authenticator state:", r.value), null } })(), P = (e => { switch (e) { case "idle": case "setup": return "configuring"; case "authenticated": return "authenticated"; default: return "unauthenticated" } })(I); return { authStatus: P, codeDeliveryDetails: u, error: d, hasValidationErrors: f, isPending: S, route: I, socialProviders: v, totpSecretCode: h, unverifiedContactMethods: l, user: g, validationErrors: m } }, s = ({ send: e, state: t }) => { const s = facade_r(e), i = facade_n(t); return Object.assign(Object.assign({}, s), i) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorContext.mjs


            /**
             * AuthenticatorContext serves static reference to the auth machine service.
             *
             * https://xstate.js.org/docs/recipes/react.html#context-provider
             */
            const AuthenticatorContext = react.createContext(null);



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/constants.mjs
            const USE_AUTHENTICATOR_ERROR = '`useAuthenticator` must be used inside an `Authenticator.Provider`.';



            // EXTERNAL MODULE: ./node_modules/@aws-amplify/auth/lib-esm/Auth.js + 14 modules
            var Auth = __webpack_require__(9056);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/types/authenticator/attributes.mjs
            const attributes_e = ["birthdate", "email", "family_name", "given_name", "middle_name", "name", "nickname", "phone_number", "preferred_username", "profile", "website"], attributes_n = (/* unused pure expression or super */ null && (["address", "gender", "locale", "picture", "updated_at", "zoneinfo"])), attributes_a = ["username", "email", "phone_number"], attributes_r = [...attributes_a, ...attributes_e, "confirmation_code", "password", "confirm_password"], attributes_i = e => attributes_r.includes(e);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/context.mjs
            const context_i = t => { var i; const s = null === (i = null == t ? void 0 : t.context.config) || void 0 === i ? void 0 : i.loginMechanisms, [n] = null != s ? s : ["username"]; return n }, context_s = i => { var s; const n = (null === (s = i.config) || void 0 === s ? void 0 : s.loginMechanisms).filter((i => t.includes(i))), [o, ...e] = n; return { primaryAlias: o, secondaryAliases: e } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/form.mjs
            const form_t = r => { const t = new FormData(r.target); return Object.fromEntries(t) }, form_e = (r, t) => { let e = []; return r && (e = Object.keys(r).reduce(((t, e) => { var o; return t.push([e, null === (o = r[e]) || void 0 === o ? void 0 : o.order]), t }), []).sort(((r, t) => r[1] - t[1])).filter((r => void 0 !== r[1])).map((r => r[0]))), Array.from(new Set([...e, ...t])) }, form_o = t => attributes_r.includes(t), form_s = r => { return r ? (t = r, Array.isArray(t) ? r : [r]) : null; var t };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/defaults.mjs
            const defaults_n = (s, r) => { const { country_code: t } = actor_o(s); let n = constants_a[r]; const { type: a } = n; return "tel" === a && (n = Object.assign(Object.assign({}, n), { dialCode: t })), n }, defaults_a = o => { const s = context_i(o); return Object.assign(Object.assign({}, defaults_n(o, s)), { autocomplete: "username" }) }, defaults_c = o => ({ confirmation_code: Object.assign(Object.assign({}, defaults_n(o, "confirmation_code")), { label: "Code *", placeholder: "Code" }) }), defaults_i = { signIn: o => ({ username: Object.assign({}, defaults_a(o)), password: Object.assign(Object.assign({}, defaults_n(o, "password")), { autocomplete: "current-password" }) }), signUp: o => { const { loginMechanisms: s, signUpAttributes: e } = o.context.config, c = context_i(o), i = Array.from(new Set([...s, "password", "confirm_password", ...e])), d = {}; for (const s of i) if (form_o(s)) { const e = s === c ? defaults_a(o) : defaults_n(o, s); d[s] = Object.assign({}, e) } else console.debug(`Authenticator does not have a default implementation for ${s}. Customize SignUp FormFields to add your own.`); return d }, confirmSignUp: o => ({ confirmation_code: Object.assign(Object.assign({}, defaults_n(o, "confirmation_code")), { placeholder: "Enter your code" }) }), confirmSignIn: defaults_c, forceNewPassword: o => { const e = actor_t(o), { requiredAttributes: r } = e.context, a = Array.from(new Set(["password", "confirm_password", ...r])), c = {}; for (const s of a) form_o(s) ? c[s] = Object.assign({}, defaults_n(o, s)) : console.debug(`Authenticator does not have a default implementation for ${s}. Customize ForceNewPassword FormFields to add your own.`); return c }, resetPassword: o => { const s = context_i(o), { label: t } = constants_a[s]; return { username: Object.assign(Object.assign({}, defaults_a(o)), { label: `Enter your ${t.toLowerCase()}`, placeholder: `Enter your ${t.toLowerCase()}` }) } }, confirmResetPassword: o => Object.assign(Object.assign({}, defaults_c(o)), { password: Object.assign(Object.assign({}, defaults_n(o, "password")), { label: "New Password", placeholder: "New Password" }), confirm_password: Object.assign(Object.assign({}, defaults_n(o, "confirm_password")), { label: "Confirm Password", placeholder: "Confirm Password" }) }), confirmVerifyUser: defaults_c, setupTOTP: defaults_c };

            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js + 1 modules
            var ConsoleLogger = __webpack_require__(9719);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0
            var I18n_assign = (undefined && undefined.__assign) || function () {
                I18n_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return I18n_assign.apply(this, arguments);
            };

            var logger = new ConsoleLogger/* ConsoleLogger */.k('I18n');
            /**
             * Language transition class
             */
            var I18n_I18n = /** @class */ (function () {
                /**
                 * @constructor
                 * Initialize with configurations
                 * @param {Object} options
                 */
                function I18n(options) {
                    /**
                     * @private
                     */
                    this._options = null;
                    /**
                     * @private
                     */
                    this._lang = null;
                    /**
                     * @private
                     */
                    this._dict = {};
                    this._options = Object.assign({}, options);
                    this._lang = this._options.language;
                    if (!this._lang &&
                        typeof window !== 'undefined' &&
                        window &&
                        window.navigator) {
                        this._lang = window.navigator.language;
                    }
                    logger.debug(this._lang);
                }
                /**
                 * @method
                 * Explicitly setting language
                 * @param {String} lang
                 */
                I18n.prototype.setLanguage = function (lang) {
                    this._lang = lang;
                };
                /**
                 * @method
                 * Get value
                 * @param {String} key
                 * @param {String} defVal - Default value
                 */
                I18n.prototype.get = function (key, defVal) {
                    if (defVal === void 0) { defVal = undefined; }
                    if (!this._lang) {
                        return typeof defVal !== 'undefined' ? defVal : key;
                    }
                    var lang = this._lang;
                    var val = this.getByLanguage(key, lang);
                    if (val) {
                        return val;
                    }
                    if (lang.indexOf('-') > 0) {
                        val = this.getByLanguage(key, lang.split('-')[0]);
                    }
                    if (val) {
                        return val;
                    }
                    return typeof defVal !== 'undefined' ? defVal : key;
                };
                /**
                 * @method
                 * Get value according to specified language
                 * @param {String} key
                 * @param {String} language - Specified langurage to be used
                 * @param {String} defVal - Default value
                 */
                I18n.prototype.getByLanguage = function (key, language, defVal) {
                    if (defVal === void 0) { defVal = null; }
                    if (!language) {
                        return defVal;
                    }
                    var lang_dict = this._dict[language];
                    if (!lang_dict) {
                        return defVal;
                    }
                    return lang_dict[key];
                };
                /**
                 * @method
                 * Add vocabularies for one language
                 * @param {String} language - Language of the dictionary
                 * @param {Object} vocabularies - Object that has key-value as dictionary entry
                 */
                I18n.prototype.putVocabulariesForLanguage = function (language, vocabularies) {
                    var lang_dict = this._dict[language];
                    if (!lang_dict) {
                        lang_dict = this._dict[language] = {};
                    }
                    this._dict[language] = I18n_assign(I18n_assign({}, lang_dict), vocabularies);
                };
                /**
                 * @method
                 * Add vocabularies for one language
                 * @param {Object} vocabularies - Object that has language as key,
                 *                                vocabularies of each language as value
                 */
                I18n.prototype.putVocabularies = function (vocabularies) {
                    var _this = this;
                    Object.keys(vocabularies).map(function (key) {
                        _this.putVocabulariesForLanguage(key, vocabularies[key]);
                    });
                };
                return I18n;
            }());


            // EXTERNAL MODULE: ./node_modules/@aws-amplify/core/lib-esm/Amplify.js
            var Amplify = __webpack_require__(5387);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/core/lib-esm/I18n/index.js
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: Apache-2.0



            var I18n_logger = new ConsoleLogger/* ConsoleLogger */.k('I18n');
            var _config = null;
            var _i18n = null;
            /**
             * Export I18n APIs
             */
            var I18n = /** @class */ (function () {
                function I18n() {
                }
                /**
                 * @static
                 * @method
                 * Configure I18n part
                 * @param {Object} config - Configuration of the I18n
                 */
                I18n.configure = function (config) {
                    I18n_logger.debug('configure I18n');
                    if (!config) {
                        return _config;
                    }
                    _config = Object.assign({}, _config, config.I18n || config);
                    I18n.createInstance();
                    return _config;
                };
                I18n.getModuleName = function () {
                    return 'I18n';
                };
                /**
                 * @static
                 * @method
                 * Create an instance of I18n for the library
                 */
                I18n.createInstance = function () {
                    I18n_logger.debug('create I18n instance');
                    if (_i18n) {
                        return;
                    }
                    _i18n = new I18n_I18n(_config);
                };
                /**
                 * @static @method
                 * Explicitly setting language
                 * @param {String} lang
                 */
                I18n.setLanguage = function (lang) {
                    I18n.checkConfig();
                    return _i18n.setLanguage(lang);
                };
                /**
                 * @static @method
                 * Get value
                 * @param {String} key
                 * @param {String} defVal - Default value
                 */
                I18n.get = function (key, defVal) {
                    if (!I18n.checkConfig()) {
                        return typeof defVal === 'undefined' ? key : defVal;
                    }
                    return _i18n.get(key, defVal);
                };
                /**
                 * @static
                 * @method
                 * Add vocabularies for one language
                 * @param {String} langurage - Language of the dictionary
                 * @param {Object} vocabularies - Object that has key-value as dictionary entry
                 */
                I18n.putVocabulariesForLanguage = function (language, vocabularies) {
                    I18n.checkConfig();
                    return _i18n.putVocabulariesForLanguage(language, vocabularies);
                };
                /**
                 * @static
                 * @method
                 * Add vocabularies for one language
                 * @param {Object} vocabularies - Object that has language as key,
                 *                                vocabularies of each language as value
                 */
                I18n.putVocabularies = function (vocabularies) {
                    I18n.checkConfig();
                    return _i18n.putVocabularies(vocabularies);
                };
                I18n.checkConfig = function () {
                    if (!_i18n) {
                        _i18n = new I18n_I18n(_config);
                    }
                    return true;
                };
                return I18n;
            }());

            Amplify/* Amplify */.d.register(I18n);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/de.mjs
            const de_e = { "Account recovery requires verified contact information": "ZurÃ¼cksetzen des Account benÃ¶tigt einen verifizierten Account", "Back to Sign In": "ZurÃ¼ck zur Anmeldung", "Change Password": "Passwort Ã¤ndern", Changing: "Ã„ndern von", Code: "Code", "Confirm Password": "Passwort bestÃ¤tigen", "Please confirm your Password": "Bitte bestÃ¤tigen Sie Ihr Passwort", "Confirm Sign Up": "Registrierung bestÃ¤tigen", "Confirm SMS Code": "SMS-Code bestÃ¤tigen", "Confirm TOTP Code": "TOTP-Code bestÃ¤tigen", Confirm: "BestÃ¤tigen", "Confirmation Code": "BestÃ¤tigungs-Code", Confirming: "Wird bestÃ¤tigt", "Create a new account": "Einen neuen Account erstellen", "Create Account": "Account erstellen", "Creating Account": "Account wird erstellt", "Dismiss alert": "Warnung verwerfen", Email: "Email", "Enter your code": "Geben Sie Ihren Code ein", "Enter your Email": "Geben Sie Ihre E-Mail ein", "Enter your phone number": "Geben Sie Ihre Telefonnummer ein", "Enter your username": "Geben Sie Ihren Benutzernamen ein", "Forgot your password?": "Passwort vergessen? ", "Hide password": "Passwort verbergen", "It may take a minute to arrive": "Es kann eine Minute dauern, bis er ankommt", Loading: "Wird geladen", "New password": "Neues Passwort", or: "oder", Password: "Passwort", "Phone Number": "Telefonnummer", "Resend Code": "Code erneut senden", "Reset your Password": "ZurÃ¼cksetzen des Passwort", "Reset your password": "ZurÃ¼cksetzen des passwort", "Send code": "Code senden", "Send Code": "Code senden", Sending: "Wird gesendet", "Setup TOTP": "TOTP einrichten", "Show password": "Passwort anzeigen", "Sign in to your account": "Melden Sie sich mit Ihrem Account an", "Sign In with Amazon": "Mit Amazon anmelden", "Sign In with Apple": "Mit Apple anmelden", "Sign In with Facebook": "Mit Facebook anmelden", "Sign In with Google": "Mit Google anmelden", "Sign in": "Anmelden", "Sign In": "Anmelden", "Signing in": "Wird angemeldet", Skip: "Ãœberspringen", Submit: "Abschicken", Submitting: "Wird gesendet", Username: "Benutzername", "Verify Contact": "Kontakt verifizieren", Verify: "Verifizieren", "We Sent A Code": "Wir haben einen Code gesendet", "We Texted You": "Wir haben Ihnen eine SMS gesendet", "Your code is on the way. To log in, enter the code we sent you": "Ihr Code ist unterwegs. Um sich anzumelden, geben Sie den Code ein, den wir Ihnen gesendet haben", "An account with the given email already exists.": "Ein Account mit dieser Email existiert bereits.", "Confirm a Code": "Code bestÃ¤tigen", "Confirm Sign In": "Anmeldung bestÃ¤tigen", "Create account": "Hier registrieren", "Enter your password": "Geben Sie Ihr Passwort ein", "Enter your Password": "Geben Sie Ihr Passwort ein", "Sign Up with Facebook": "Mit Facebook registrieren", "Sign Up with Google": "Mit Google registrieren", "Forgot Password": "Passwort vergessen", "Have an account? ": "Schon registriert? ", "Incorrect username or password": "Falscher Benutzername oder falsches Passwort", "Invalid password format": "UngÃ¼ltiges Passwort-Format", "Invalid phone number format": "UngÃ¼ltiges Telefonummern-Format. Benutze eine Nummer im Format: +12345678900", "It may take a minute to arrive.": "Es kÃ¶nnte eine Minute dauern, bis der Code eintrifft.", "Lost your code? ": "Code verloren? ", "New Password": "Neues Passwort", "No account? ": "Kein Account? ", "Password attempts exceeded": "Die maximale Anzahl der fehlerhaften Anmeldeversuche wurde erreicht", "Reset password": "Passwort zurÃ¼cksetzen", "Sign Out": "Abmelden", "Sign Up": "Registrieren", "User already exists": "Dieser Benutzer existiert bereits", "User does not exist": "Dieser Benutzer existiert nicht", "Username cannot be empty": "Benutzername darf nicht leer sein", "We Emailed You": "Email wurde versendet", "Your code is on the way. To log in, enter the code we emailed to": "Ihr BestÃ¤tigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir verschickt haben an", "Your code is on the way. To log in, enter the code we texted to": "Ihr BestÃ¤tigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir verschickt haben an" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/en.mjs
            const en_e = { "Account recovery requires verified contact information": "Account recovery requires verified contact information", "Add your Profile": "Add your Profile", "Add your Website": "Add your Website", "Back to Sign In": "Back to Sign In", "Change Password": "Change Password", Changing: "Changing", Code: "Code", "Confirm Password": "Confirm Password", "Confirm Sign Up": "Confirm Sign Up", "Confirm SMS Code": "Confirm SMS Code", "Confirm TOTP Code": "Confirm TOTP Code", Confirm: "Confirm", "Confirmation Code": "Confirmation Code", Confirming: "Confirming", "Create a new account": "Create a new account", "Create Account": "Create Account", "Creating Account": "Creating Account", "Dismiss alert": "Dismiss alert", Email: "Email", "Enter your Birthdate": "Enter your Birthdate", "Enter your code": "Enter your code", "Enter your Confirmation Code": "Enter your Confirmation Code", "Enter your Email": "Enter your Email", "Enter your Family Name": "Enter your Family Name", "Enter your Given Name": "Enter your Given Name", "Enter your Middle Name": "Enter your Middle Name", "Enter your Name": "Enter your Name", "Enter your Nickname": "Enter your Nickname", "Enter your Password": "Enter your Password", "Enter your phone number": "Enter your phone number", "Enter your Preferred Username": "Enter your Preferred Username", "Enter your username": "Enter your username", "Forgot password?": "Forgot password?", "Forgot your password?": "Forgot your password?", "Hide password": "Hide password", "It may take a minute to arrive": "It may take a minute to arrive", Loading: "Loading", "New password": "New password", or: "or", Password: "Password", "Phone Number": "Phone Number", "Please confirm your Password": "Please confirm your Password", "Resend Code": "Resend Code", "Reset your password": "Reset your password", "Reset your Password": "Reset your Password", "Send code": "Send code", "Send Code": "Send Code", Sending: "Sending", "Setup TOTP": "Setup TOTP", "Show password": "Show password", "Sign in to your account": "Sign in to your account", "Sign In with Amazon": "Sign In with Amazon", "Sign In with Apple": "Sign In with Apple", "Sign In with Facebook": "Sign In with Facebook", "Sign In with Google": "Sign In with Google", "Sign in": "Sign in", "Sign In": "Sign In", "Signing in": "Signing in", Skip: "Skip", Submit: "Submit", Submitting: "Submitting", Username: "Username", "Verify Contact": "Verify Contact", Verify: "Verify", "We Emailed You": "We Emailed You", "We Sent A Code": "We Sent A Code", "We Texted You": "We Texted You", "Your code is on the way. To log in, enter the code we emailed to": "Your code is on the way. To log in, enter the code we emailed to", "Your code is on the way. To log in, enter the code we sent you": "Your code is on the way. To log in, enter the code we sent you", "Your code is on the way. To log in, enter the code we texted to": "Your code is on the way. To log in, enter the code we texted to" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/es.mjs
            const es_e = { "Account recovery requires verified contact information": "La recuperaciÃ³n de la cuenta requiere informaciÃ³n de contacto verificada", "Back to Sign In": "Volver a inicio de sesiÃ³n", "Change Password": "Cambiar contraseÃ±a", Changing: "Cambiando", Code: "CÃ³digo", "Confirm Password": "Confirmar contraseÃ±a", "Confirm Sign Up": "Confirmar registro", "Confirm SMS Code": "Confirmar el cÃ³digo de SMS", "Confirm TOTP Code": "Confirmar cÃ³digo TOTP", Confirm: "Confirmar", "Confirmation Code": "CÃ³digo de confirmaciÃ³n", Confirming: "Confirmando", "Create a new account": "Crear una cuenta nueva", "Create Account": "Crear cuenta", "Creating Account": "Creando cuenta", "Dismiss alert": "Descartar alerta", Email: "Email", "Enter your code": "Ingrese el cÃ³digo", "Enter your Email": "Escriba su Email", "Enter your Password": "Escriba su ContraseÃ±a", "Enter your phone number": "Ingrese el nÃºmero de telÃ©fono", "Enter your username": "Ingrese el nombre de usuario", "Forgot your password?": "Â¿OlvidÃ³ su contraseÃ±a?", "Hide password": "Ocultar contraseÃ±a", "It may take a minute to arrive": "Es posible que tarde un minuto en llegar", Loading: "Cargando", "New password": "Nueva contraseÃ±a", or: "o", Password: "ContraseÃ±a", "Phone Number": "NÃºmero de telÃ©fono", "Resend Code": "Reenviar cÃ³digo", "Reset your password": "Restablecer su contraseÃ±a", "Reset your Password": "Restablecer su ContraseÃ±a", "Send code": "Enviar cÃ³digo", "Send Code": "Enviar cÃ³digo", Sending: "Enviando", "Setup TOTP": "Configurar TOTP", "Show password": "Mostrar contraseÃ±a", "Sign in to your account": "Iniciar sesiÃ³n en tu cuenta", "Sign In with Amazon": "Iniciar SesiÃ³n con Amazon", "Sign In with Apple": "Iniciar SesiÃ³n con Apple", "Sign In with Facebook": "Iniciar SesiÃ³n con Facebook", "Sign In with Google": "Iniciar SesiÃ³n con Google", "Sign in": "Iniciar sesiÃ³n", "Sign In": "Iniciar SesiÃ³n", "Signing in": "Iniciando sesiÃ³n", Skip: "Omitir", Submit: "Enviar", Submitting: "Enviando", Username: "Nombre de usuario", "Verify Contact": "Verificar contacto", Verify: "Verificar", "We Emailed You": "Le hemos enviado un correo electrÃ³nico", "We Sent A Code": "Hemos enviado un cÃ³digo", "We Texted You": "Le hemos enviado un mensaje de texto", "Your code is on the way. To log in, enter the code we emailed to": "El cÃ³digo estÃ¡ en camino. Para iniciar sesiÃ³n, escriba el cÃ³digo que hemos enviado por correo electrÃ³nico a", "Your code is on the way. To log in, enter the code we sent you": "El cÃ³digo estÃ¡ en camino. Para iniciar sesiÃ³n, escriba el cÃ³digo que le hemos enviado", "Your code is on the way. To log in, enter the code we texted to": "El cÃ³digo estÃ¡ en camino. Para iniciar sesiÃ³n, escriba el cÃ³digo que hemos enviado por mensaje de texto a", "An account with the given email already exists.": "Ya existe una cuenta con el correo ingresado.", "Confirm a Code": "Confirmar un cÃ³digo", "Confirm Sign In": "Confirmar inicio de sesiÃ³n", "Forgot Password": "OlvidÃ© mi contraseÃ±a", "Incorrect username or password.": "Nombre de usuario o contraseÃ±a incorrecta", "Invalid password format": "Formato de contraseÃ±a invÃ¡lido", "Invalid phone number format": "Formato de nÃºmero de telÃ©fono invÃ¡lido", "Loading...": "Cargando...", "New Password": "Nueva contraseÃ±a", "Resend a Code": "Reenviar un cÃ³digo", "Sign Out": "Cerrar sesiÃ³n", "Sign Up with Amazon": "Crear cuenta con Amazon", "Sign Up with Apple": "Crear cuenta con Apple", "Sign Up with Facebook": "Crear cuenta con Facebook", "Sign Up with Google": "Crear cuenta con Google", "Sign Up": "Crear cuenta", "User already exists": "El usuario ya existe", "User does not exist": "El usuario no existe", "Username cannot be empty": "El nombre de usuario no puede estar vacÃ­o", "Your passwords must match": "Las contraseÃ±as deben coincidir" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/fr.mjs
            const fr_e = { "Account recovery requires verified contact information": "La rÃ©cupÃ©ration du compte nÃ©cessite des informations de contact vÃ©rifiÃ©es", "Back to Sign In": "Retour Ã  la connexion", "Change Password": "Modifier le mot de passe", Changing: "Modification en cours", Code: "Code", "Confirm Password": "Confirmez le mot de passe", "Confirm Sign Up": "Confirmer l'inscription", "Confirm SMS Code": "Confirmer le code SMS", "Confirm TOTP Code": "Confirmer le code TOTP", Confirm: "Confirmer", "Confirmation Code": "Code de confirmation", Confirming: "Confirmation", "Create a new account": "CrÃ©er un nouveau compte", "Create Account": "CrÃ©er un compte", "Creating Account": "CrÃ©ation d'un compte", "Dismiss alert": "Supprimer l'alerte", Email: "Email", "Enter your code": "Saisissez cotre code de confirmation", "Enter your Email": "Saisissez votre adresse email", "Enter your phone number": "Saisissez votre numÃ©ro de tÃ©lÃ©phone", "Enter your username": "Saisissez votre nom d'utilisateur", "Forgot your password?": "Mot de passe oubliÃ© ? ", "Hide password": "Masquer le mot de passe", "It may take a minute to arrive": "Cela peut prendre une minute", Loading: "Chargement en cours", "New password": "Nouveau mot de passe", or: "ou", Password: "Mot de passe", "Phone Number": "NumÃ©ro de tÃ©lÃ©phone", "Resend Code": "Renvoyer le code", "Reset your Password": "RÃ©initialiser votre mot de passe", "Reset your password": "RÃ©initialisez votre mot de passe", "Send code": "Envoyer le code", "Send Code": "M'envoyer un code", Sending: "Envoi en cours", "Setup TOTP": "Configuration de TOTP", "Show password": "Afficher le mot de passe", "Sign in to your account": "Connexion Ã  votre compte", "Sign In with Amazon": "Se connecter avec Amazon", "Sign In with Apple": "Se connecter avec Apple", "Sign In with Facebook": "Se connecter avec Facebook", "Sign In with Google": "Se connecter avec Google", "Sign in": "Se connecter", "Sign In": "Se connecter", "Signing in": "Connexion en cours", Skip: "Passer", Submit: "Soumettre", Submitting: "Envoi en cours", Username: "Nom d'utilisateur", "Verify Contact": "VÃ©rifier le contact", Verify: "VÃ©rifier", "We Sent A Code": "Nous avons envoyÃ© un code", "We Texted You": "Nous vous avons envoyÃ© un SMS", "Your code is on the way. To log in, enter the code we sent you": "Votre code est en cours d'envoi. Pour vous connecter, saisissez le code que nous vous avons envoyÃ©", "An account with the given email already exists.": "Un utilisateur avec cette adresse email existe dÃ©jÃ .", Change: "Modifier", "Confirm a Code": "Confirmer un code", "Confirm Sign In": "Confirmer la connexion", "Create account": "CrÃ©er un compte", "Enter your password": "Saisissez votre mot de passe", "Forgot Password": "Mot de passe oubliÃ©", "Have an account? ": "DÃ©jÃ  un compte ? ", Hello: "Bonjour", "Incorrect username or password": "Identifiant ou mot de passe incorrect", "Invalid password format": "Format de mot de passe invalide", "Invalid phone number format": "Format de numÃ©ro de tÃ©lÃ©phone invalide. Veuillez utiliser un format +12345678900", "Loading...": "Chargement...", "Lost your code? ": "Vous avez perdu votre code ? ", "Network error": "Erreur rÃ©seau", "New Password": "Nouveau mot de passe", "No account? ": "Pas de compte ? ", "Resend a Code": "Renvoyer un code", "Reset password": "RÃ©initialisez votre mot de passe", Send: "Envoyer", "Sign In with AWS": "Se connecter avec AWS", "Sign Out": "DÃ©connexion", "Sign Up": "S'inscrire", SMS: "SMS", "User already exists": "L'utilisateur existe dÃ©jÃ ", "User does not exist": "L'utilisateur n'existe pas", "Username cannot be empty": "Le nom d'utilisateur doit Ãªtre renseignÃ©", "Username/client id combination not found.": "L'utilisateur n'existe pas", "We Emailed You": "Nous vous avons envoyÃ© un code", "Your code is on the way. To log in, enter the code we emailed to": "Votre code est en route. Pour vous connecter entrez le code reÃ§u sur cette adresse email", "Your code is on the way. To log in, enter the code we texted to": "Votre code est en route. Pour vous connecter entrez le code reÃ§u sur ce numÃ©ro de tÃ©lÃ©phone", "Your passwords must match": "Vos mots de passe doivent Ãªtre identiques", "It may take a minute to arrive.": "Cela peut prendre quelques minutes." };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/it.mjs
            const it_o = { "Account recovery requires verified contact information": "Il ripristino dell'account richiede informazioni di contatto verificate", "Back to Sign In": "Torna alla schermata di accesso", "Change Password": "Cambia la password", Changing: "Modifica in corso", Code: "Codice", "Confirm Password": "Conferma la password", "Confirm Sign Up": "Conferma registrazione", "Confirm SMS Code": "Conferma codice SMS", "Confirm TOTP Code": "Conferma codice TOTP", Confirm: "Conferma", "Confirmation Code": "Codice di verifica", Confirming: "Conferma in corso", "Create a new account": "Crea un nuovo account", "Create Account": "Crea Account", "Creating Account": "Creazione account in corso", "Dismiss alert": "Ignora l'avviso", Email: "Email", "Enter your code": "Inserisci il tuo codice", "Enter your Email": "Inserisci la tua e-mail", "Enter your phone number": 'Inserisci il tuo numero di telefono"', "Enter your username": "Inserisci il tuo nome utente", "Forgot your password?": "Password dimenticata?", "Hide password": "Nascondi password", "It may take a minute to arrive": "L'arrivo potrebbe richiedere qualche minuto", Loading: "Caricamento in corso", "New password": "Nuova password", or: "oppure", Password: "Password", "Phone Number": "Numero di telefono", "Resend Code": "Invia nuovamente il codice", "Reset your Password": "Reimposta la tua Password", "Reset your password": "Reimposta la tua password", "Send code": "Invia codice", "Send Code": "Invia codice", Sending: "Invio in corso", "Setup TOTP": "Configura TOTP", "Show password": "Mostra password", "Sign in to your account": "Accedi al tuo account", "Sign In with Amazon": "Accedi con Amazon", "Sign In with Apple": "Accedi con Apple", "Sign In with Facebook": "Accedi con Facebook", "Sign In with Google": "Accedi con Google", "Sign in": "Accedi", "Sign In": "Accedi", "Signing in": "Accesso in corso", Skip: "Salta", Submit: "Invia", Submitting: "Invio in corso", Username: "Nome utente", "Verify Contact": "Verifica contatto", Verify: "Verifica", "We Emailed You": "Ti abbiamo inviato un'e-mail", "We Sent A Code": "Ti abbiamo inviato un codice", "We Texted You": "Ti abbiamo inviato un SMS", "Your code is on the way. To log in, enter the code we emailed to": "Il codice Ã¨ in arrivo. Per effettuare l'accesso, immetti il codice che ti abbiamo inviato via e-mail", "Your code is on the way. To log in, enter the code we sent you": "Il codice Ã¨ in arrivo. Per accedere, immetti il codice che ti abbiamo inviato", "Your code is on the way. To log in, enter the code we texted to": "Il codice Ã¨ in arrivo. Per accedere, immetti il codice che abbiamo inviato tramite SMS", "An account with the given email already exists.": "Questa email Ã¨ giÃ  utilizzata da un altro account.", "Confirm a Code": "Conferma un codice", "Confirm Sign In": "Conferma l'accesso", "Create account": "Crea account", "Enter your password": "Inserisci la tua password", "Forgot Password?": "Password dimenticata?", "Have an account? ": "GiÃ  registrato?", "Incorrect username or password": "Nome utente o password errati", "Invalid password format": "Formato della password non valido", "Invalid phone number format": "Formato del numero di telefono non valido", "Lost your code?": "Codice smarrito?", "New Password": "Nuova password", "No account? ": "Non hai un account?", "Password attempts exceeded": "Il numero massimo di tentativi di accesso falliti Ã¨ stato raggiunto", "Reset password": "Reimposta password", "Sign Out": "Esci", "Sign Up": "Registrati", "User already exists": "Utente giÃ  esistente", "User does not exist": "Utente inesistente", "Username cannot be empty": "Il nome utente non puÃ² essere vuoto" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ja.mjs
            const ja_e = { "Account recovery requires verified contact information": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã®å¾©æ—§ã«ã¯ç¢ºèªæ¸ˆã¿ã®é€£çµ¡å…ˆãŒå¿…è¦ã§ã™", "Back to Sign In": "ã‚µã‚¤ãƒ³ã‚¤ãƒ³ã«æˆ»ã‚‹", "Change Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å¤‰ãˆã‚‹ ", Changing: "å¤‰æ›´ä¸­", Code: "ã‚³ãƒ¼ãƒ‰", "Confirm Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã®ç¢ºèª", "Confirm Sign Up": "ç™»éŒ²ã™ã‚‹", "Confirm SMS Code": "SMS ã‚³ãƒ¼ãƒ‰ã‚’ç¢ºèª", "Confirm TOTP Code": "TOTP ã‚³ãƒ¼ãƒ‰ã‚’ç¢ºèª", Confirm: "ç¢ºå®š", "Confirmation Code": "ç¢ºèªã‚³ãƒ¼ãƒ‰", Confirming: "ç¢ºèªä¸­", "Create a new account": "æ–°ã—ã„ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã‚’ä½œã‚‹", "Create Account": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã‚’ä½œã‚‹", "Creating Account": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã®ä½œæˆä¸­", "Dismiss alert": "ã‚¢ãƒ©ãƒ¼ãƒˆã‚’é–‰ã˜ã‚‹", Email: "ãƒ¡ãƒ¼ãƒ«ã‚¢ãƒ‰ãƒ¬ã‚¹", "Enter your code": "ã‚³ãƒ¼ãƒ‰ã‚’å…¥åŠ›", "Enter your Email": "ãƒ¡ãƒ¼ãƒ«ã‚¢ãƒ‰ãƒ¬ã‚¹ã‚’å…¥åŠ›", "Enter your phone number": "é›»è©±ç•ªå·ã‚’å…¥åŠ›", "Enter your username": "ãƒ¦ãƒ¼ã‚¶ãƒ¼åã‚’å…¥åŠ› ", "Forgot your password?": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å¿˜ã‚Œã¾ã—ãŸã‹ï¼Ÿ ", "Hide password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’éžè¡¨ç¤º", "It may take a minute to arrive": "åˆ°ç€ã™ã‚‹ã¾ã§ã« 1 åˆ†ã‹ã‹ã‚‹ã“ã¨ãŒã‚ã‚Šã¾ã™ã€‚", Loading: "ãƒ­ãƒ¼ãƒ‰ä¸­", "New password": "æ–°ã—ã„ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰", or: "åˆã¯", Password: "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ ", "Phone Number": "é›»è©±ç•ªå·", "Resend Code": "ã‚³ãƒ¼ãƒ‰ã‚’å†é€ä¿¡", "Reset your Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’ãƒªã‚»ãƒƒãƒˆ", "Reset your password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’ãƒªã‚»ãƒƒãƒˆã™ã‚‹", "Send code": "ã‚³ãƒ¼ãƒ‰ã‚’é€ä¿¡", "Send Code": "ã‚³ãƒ¼ãƒ‰ã‚’é€ä¿¡", Sending: "é€ä¿¡ä¸­", "Setup TOTP": "TOTP ã‚’ã‚»ãƒƒãƒˆã‚¢ãƒƒãƒ—", "Show password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’è¡¨ç¤º", "Sign in to your account": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã«ã‚µã‚¤ãƒ³ã‚¤ãƒ³ ", "Sign In with Amazon": "Amazonã§ã‚µã‚¤ãƒ³ã‚¤ãƒ³", "Sign In with Apple": "Apple ã§ã‚µã‚¤ãƒ³ã‚¤ãƒ³", "Sign In with Facebook": "Facebookã§ã‚µã‚¤ãƒ³ã‚¤ãƒ³", "Sign In with Google": "Googleã§ã‚µã‚¤ãƒ³ã‚¤ãƒ³", "Sign In": "ã‚µã‚¤ãƒ³ã‚¤ãƒ³ ", "Sign in": "ã‚µã‚¤ãƒ³ã‚¤ãƒ³", "Signing in": "ã‚µã‚¤ãƒ³ã‚¤ãƒ³ä¸­", Skip: "ã‚¹ã‚­ãƒƒãƒ—", Submit: "é€ä¿¡", Submitting: "é€ä¿¡ä¸­", Username: "ãƒ¦ãƒ¼ã‚¶ãƒ¼å ", "Verify Contact": "é€£çµ¡å…ˆã‚’ç¢ºèª", Verify: "ç¢ºèª", "We Sent A Code": "ã‚³ãƒ¼ãƒ‰ãŒé€ä¿¡ã•ã‚Œã¾ã—ãŸ", "We Texted You": "ãƒ†ã‚­ã‚¹ãƒˆãŒé€ä¿¡ã•ã‚Œã¾ã—ãŸ", "Your code is on the way. To log in, enter the code we sent you": "ã‚³ãƒ¼ãƒ‰ãŒé€”ä¸­ã§ã™ã€‚ãƒ­ã‚°ã‚¤ãƒ³ã™ã‚‹ã«ã¯ã€é€ä¿¡ã—ãŸã‚³ãƒ¼ãƒ‰ã‚’å…¥åŠ›ã—ã¦ãã ã•ã„ã€‚", "An account with the given email already exists.": "å…¥åŠ›ã•ã‚ŒãŸãƒ¡ãƒ¼ãƒ«ã‚¢ãƒ‰ãƒ¬ã‚¹ã®ã‚¢ã‚«ã‚¦ãƒ³ãƒˆãŒæ—¢ã«å­˜åœ¨ã—ã¾ã™", "Confirm a Code": "ã‚³ãƒ¼ãƒ‰ã‚’ç¢ºèª", "Confirm Sign In": "ã‚µã‚¤ãƒ³ã‚¤ãƒ³ã™ã‚‹", "Create account": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã‚’ä½œã‚‹ ", "Enter your password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å…¥åŠ› ", "Enter your Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å…¥åŠ›", "Please confirm your Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å…¥åŠ›", "Forgot Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’å¿˜ã‚ŒãŸ ", "Have an account? ": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆã‚’æŒã£ã¦ã„ã¾ã™ã‹ï¼Ÿ", "Incorrect username or password": "ãƒ¦ãƒ¼ã‚¶ãƒ¼åã‹ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ãŒç•°ãªã‚Šã¾ã™ ", "Invalid password format": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã®å½¢å¼ãŒç„¡åŠ¹ã§ã™ ", "Invalid phone number format": "ä¸æ­£ãªé›»è©±ç•ªå·ã®å½¢å¼ã§ã™ã€‚\n+12345678900 ã®å½¢å¼ã§å…¥åŠ›ã—ã¦ãã ã•ã„", "It may take a minute to arrive.": "ã‚³ãƒ¼ãƒ‰ã‚’å—ä¿¡ã™ã‚‹ã¾ã§æ•°åˆ†ã‹ã‹ã‚‹å ´åˆãŒã‚ã‚Šã¾ã™ã€‚", "Lost your code? ": "ã‚³ãƒ¼ãƒ‰ã‚’å¤±ãã—ã¾ã—ãŸã‹ï¼Ÿ", "New Password": "æ–°ã—ã„ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰", "No account? ": "ã‚¢ã‚«ã‚¦ãƒ³ãƒˆãŒç„¡ã„ã¨ã ", "Password attempts exceeded": "ã‚µã‚¤ãƒ³ã‚¤ãƒ³ã®è©¦è¡Œå›žæ•°ãŒä¸Šé™ã«é”ã—ã¾ã—ãŸ", "Reset password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’ãƒªã‚»ãƒƒãƒˆ ", "Reset Password": "ãƒ‘ã‚¹ãƒ¯ãƒ¼ãƒ‰ã‚’ãƒªã‚»ãƒƒãƒˆ", "Sign Out": "ã‚µã‚¤ãƒ³ã‚¢ã‚¦ãƒˆ ", "Sign Up": "ç™»éŒ² ", "User already exists": "æ—¢ã«ãƒ¦ãƒ¼ã‚¶ãƒ¼ãŒå­˜åœ¨ã—ã¦ã„ã¾ã™ ", "User does not exist": "ãƒ¦ãƒ¼ã‚¶ãƒ¼ãŒå­˜åœ¨ã—ã¾ã›ã‚“ ", "Username cannot be empty": "ãƒ¦ãƒ¼ã‚¶ãƒ¼åã¯å…¥åŠ›å¿…é ˆã§ã™", "We Emailed You": "ã‚³ãƒ¼ãƒ‰ã‚’é€ä¿¡ã—ã¾ã—ãŸ", "Your code is on the way. To log in, enter the code we emailed to": "ãƒ­ã‚°ã‚¤ãƒ³ã™ã‚‹ã«ã¯ã€ãƒ¡ãƒ¼ãƒ«ã«è¨˜è¼‰ã•ã‚ŒãŸã‚³ãƒ¼ãƒ‰ã‚’å…¥åŠ›ã—ã¦ãã ã•ã„ã€‚é€ä¿¡å…ˆ:", "Your code is on the way. To log in, enter the code we texted to": "ãƒ­ã‚°ã‚¤ãƒ³ã™ã‚‹ã«ã¯ã€ãƒ†ã‚­ã‚¹ãƒˆãƒ¡ãƒƒã‚»ãƒ¼ã‚¸ã«è¨˜è¼‰ã•ã‚ŒãŸã‚³ãƒ¼ãƒ‰ã‚’å…¥åŠ›ã—ã¦ãã ã•ã„ã€‚é€ä¿¡å…ˆ:" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/kr.mjs
            const kr_e = { "Account recovery requires verified contact information": "ê³„ì • ë³µêµ¬ë¥¼ ìœ„í•´ ì—°ë½ì²˜ í™•ì¸ì´ í•„ìš”í•©ë‹ˆë‹¤", "Back to Sign In": "ë¡œê·¸ì¸ìœ¼ë¡œ ëŒì•„ê°€ê¸°", "Change Password": "ë¹„ë°€ë²ˆí˜¸ ë³€ê²½í•˜ê¸°", Changing: "ë³€ê²½ì¤‘", Code: "ì½”ë“œ", "Confirm Password": "ë¹„ë°€ë²ˆí˜¸ ìž¬í™•ì¸", "Confirm Sign Up": "íšŒì›ê°€ìž… í™•ì¸", "Confirm SMS Code": "íœ´ëŒ€í° ë³¸ì¸ í™•ì¸", "Confirm TOTP Code": "TOTP ì¸ì¦ë²ˆí˜¸ í™•ì¸", Confirm: "í™•ì¸", "Confirmation Code": "ì¸ì¦ë²ˆí˜¸", Confirming: "í™•ì¸ì¤‘", "Create a new account": "íšŒì›ê°€ìž…", "Create Account": "íšŒì›ê°€ìž…", "Creating Account": "íšŒì›ê°€ìž…ì¤‘", "Dismiss alert": "ì•Œë¦¼ ë¬´ì‹œ", Email: "ì´ë©”ì¼", "Enter your code": "ì¸ì¦ë²ˆí˜¸ë¥¼ ìž…ë ¥í•´ì£¼ì„¸ìš”", "Enter your Email": "ì´ë©”ì¼ ìž…ë ¥", "Enter your phone number": "ì „í™”ë²ˆí˜¸ ìž…ë ¥", "Enter your username": "ì•„ì´ë””ë¥¼ ìž…ë ¥í•´ì£¼ì„¸ìš”", "Hide password": "ë¹„ë°€ë²ˆí˜¸ ìˆ¨ê¸°ê¸°", "It may take a minute to arrive": "ë„ì°©í•˜ëŠ” ë° 1ë¶„ ì •ë„ ê±¸ë¦´ ìˆ˜ ìžˆìŠµë‹ˆë‹¤", Loading: "ë¡œë”©ì¤‘", "New password": "ìƒˆ ë¹„ë°€ë²ˆí˜¸", or: "ë˜ëŠ”", Password: "ë¹„ë°€ë²ˆí˜¸", "Phone Number": "ì „í™”ë²ˆí˜¸", "Resend Code": "ì¸ì¦ë²ˆí˜¸ ìž¬ì „ì†¡", "Reset your password": "ë¹„ë°€ë²ˆí˜¸ ìž¬ì„¤ì •", "Reset your Password": "ë¹„ë°€ë²ˆí˜¸ ìž¬ì„¤ì •", "Send code": "ì¸ì¦ì½”ë“œ ë³´ë‚´ê¸°", "Send Code": "ì½”ë“œ ì „ì†¡", Sending: "ì „ì†¡ì¤‘", "Setup TOTP": "TOTP ì„¤ì •í•˜ê¸°", "Show password": "ë¹„ë°€ë²ˆí˜¸ ë³´ì´ê¸°", "Sign in to your account": "ë¡œê·¸ì¸", "Sign In with Amazon": "Amazon ë¡œê·¸ì¸", "Sign In with Apple": "Apple ë¡œê·¸ì¸", "Sign In with Facebook": "Facebook ë¡œê·¸ì¸", "Sign In with Google": "Google ë¡œê·¸ì¸", "Sign in": "ë¡œê·¸ì¸", "Sign In": "ë¡œê·¸ì¸", "Signing in": "ë¡œê·¸ì¸ì¤‘", Skip: "ë‹¤ìŒì— í•˜ê¸°", Submit: "í™•ì¸", Submitting: "í™•ì¸ì¤‘", Username: "ì•„ì´ë””", "Verify Contact": "ì—°ë½ì²˜ í™•ì¸", Verify: "ì¸ì¦", "We Emailed You": "ì´ë©”ì¼ì„ ë³´ëƒ„", "We Sent A Code": "ì½”ë“œë¥¼ ë³´ëƒ„", "We Texted You": "ë¬¸ìž ë©”ì‹œì§€ë¥¼ ë³´ëƒ„", "Your code is on the way. To log in, enter the code we emailed to": "ì½”ë“œê°€ ì „ì†¡ ì¤‘ìž…ë‹ˆë‹¤. ë¡œê·¸ì¸í•˜ë ¤ë©´ ì´ë©”ì¼ë¡œ ì „ì†¡í•œ ì½”ë“œë¥¼ ìž…ë ¥í•˜ì„¸ìš”", "Your code is on the way. To log in, enter the code we sent you": "ì½”ë“œê°€ ì „ì†¡ ì¤‘ìž…ë‹ˆë‹¤. ë¡œê·¸ì¸í•˜ë ¤ë©´ ì „ì†¡í•œ ì½”ë“œë¥¼ ìž…ë ¥í•˜ì„¸ìš”", "Your code is on the way. To log in, enter the code we texted to": "ì½”ë“œê°€ ì „ì†¡ ì¤‘ìž…ë‹ˆë‹¤. ë¡œê·¸ì¸í•˜ë ¤ë©´ ë¬¸ìž ë©”ì‹œì§€ë¡œ ì „ì†¡í•œ ì½”ë“œë¥¼ ìž…ë ¥í•˜ì„¸ìš”", Birthdate: "ìƒë…„ì›”ì¼", "Family Name": "ì„±", "Forgot your password?": "ë¹„ë°€ë²ˆí˜¸ë¥¼ ìžŠìœ¼ì…¨ë‚˜ìš”?", "Given Name": "ì´ë¦„", Name: "ì„±í•¨", Nickname: "ë‹‰ë„¤ìž„", "Preferred Username": "ë‹‰ë„¤ìž„", Profile: "í”„ë¡œí•„", "Reset Password": "ë¹„ë°€ë²ˆí˜¸ ìž¬ì„¤ì •", Website: "ì›¹ì‚¬ì´íŠ¸" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/nb.mjs
            const nb_e = { "Account recovery requires verified contact information": "Gjenoppretting av konto krever verifisert kontaktinformajson", "Add your Profile": "Legg til profilen din", "Add your Website": "Legg til nettsiden din", "Back to Sign In": "Tilbake til innlogging", "Change Password": "Bytt passord", Changing: "Endre", Code: "Kode", "Confirm Password": "Bekreft passordet", "Confirm Sign Up": "Bekreft registrering", "Confirm SMS Code": "Bekreft SMS-kode", "Confirm TOTP Code": "Bekreft TOTP-kode", Confirm: "Bekreft", "Confirmation Code": "Bekreftelseskode", Confirming: "Bekrefter", "Create a new account": "Opprett en ny konto", "Create Account": "Opprett konto", "Creating Account": "Oppretter konto", "Dismiss alert": "Avvis varsel", Email: "E-post", "Enter your Birthdate": "Skriv inn fÃ¸dselsdatoen din", "Enter your code": "Skriv inn koden din", "Enter your Confirmation Code": "Skriv inn bekreftelseskoden din", "Enter your Email": "Skriv inn e-postadressen din", "Enter your Family Name": "Skriv inn etternavnet ditt", "Enter your Given Name": "Skriv inn fornavnet ditt", "Enter your Middle Name": "Skriv inn mellomnavnet ditt", "Enter your Name": "Skriv inn navnet ditt", "Enter your Nickname": "Skriv inn kallenavnet ditt", "Enter your Password": "Skriv inn passordet ditt", "Enter your phone number": "Skriv inn telefonnummeret ditt", "Enter your Preferred Username": "Skriv inn det foretrukne brukernavnet ditt", "Enter your username": "Skriv inn brukernavnet ditt", "Forgot password?": "Glemt passord?", "Forgot your password?": "Glemt passordet ditt?", "Hide password": "Skjul passordet", "It may take a minute to arrive": "Det kan ta et minutt for Ã¥ komme frem", Loading: "Laster inn", "New password": "Nytt passord", or: "eller", Password: "Passord", "Phone Number": "Telefonnummer", "Please confirm your Password": "Vennligst bekreft passordet ditt", "Resend Code": "Send koden pÃ¥ nytt", "Reset your password": "Nullstill passordet ditt", "Reset your Password": "Nullstill passordet ditt", "Send code": "Send kode", "Send Code": "Send kode", Sending: "Sender", "Setup TOTP": "Konfigurer TOTP", "Show password": "Vis passordet", "Sign in to your account": "Logg inn pÃ¥ kontoen din", "Sign In with Amazon": "Logg inn med Amazon", "Sign In with Apple": "Logg inn med Apple", "Sign In with Facebook": "Logg inn med Facebook", "Sign In with Google": "Logg inn med Google", "Sign in": "Logg inn", "Sign In": "Logg inn", "Signing in": "Logger inn", Skip: "Hopp over", Submit: "Send inn", Submitting: "Sender inn", Username: "Brukernavn", "Verify Contact": "Bekreft kontakt", Verify: "Bekreft", "We Emailed You": "Vi sendte deg en e-post", "We Sent A Code": "Vi sendte en kode", "We Texted You": "Vi sendte deg en tekstmelding", "Your code is on the way. To log in, enter the code we emailed to": "Koden din er pÃ¥ vei. For Ã¥ logge inn, skriv inn koden vi sendte e-post til", "Your code is on the way. To log in, enter the code we sent you": "Koden din er pÃ¥ vei. For Ã¥ logge inn, skriv inn koden vi sendte deg", "Your code is on the way. To log in, enter the code we texted to": "Koden din er pÃ¥ vei. For Ã¥ logge inn, skriv inn koden vi sendte tekstmelding til", "An account with the given email already exists.": "Det finnes allerede en konto med denne e-postadressen", "Confirm a Code": "Bekreft koden", "Confirm Sign In": "Bekreft innlogging", "Create account": "Opprett konto", "Enter your password": "Skriv inn passordet ditt", "Forgot Password": "Glemt passordet", "Have an account? ": "Har en konto allerede? ", "Incorrect username or password": "Feil brukernavn eller passord", "Invalid password format": "Ugyldig passordformat", "Invalid phone number format": "Ugyldig telefonnummerformat", "Lost your code? ": "Mistet koden? ", "New Password": "Nytt passord", "No account? ": "Ingen konto? ", "Password attempts exceeded": "For mange mislykkede passordforsÃ¸k", "Reset password": "Nullstill passord", "Sign Out": "Logg ut", "Sign Up": "Registrering", "User already exists": "Brukeren finnes allerede", "User does not exist": "Brukeren finnes ikke", "Username cannot be empty": "Brukernavnet kan ikke vÃ¦re tomt" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/nl.mjs
            const nl_e = { "Account recovery requires verified contact information": "Accountherstel vereist geverifieerde contactgegevens", "Back to Sign In": "Terug naar inloggen", "Change Password": "Wachtwoord wijzigen", Changing: "Wordt aangepast", Code: "Code", "Confirm Password": "Bevestig Wachtwoord", "Confirm Sign Up": "Bevestig inschrijving", "Confirm SMS Code": "Bevestig SMS Code", "Confirm TOTP Code": "Bevestig TOTP Code", Confirm: "Bevestig", "Confirmation Code": "Bevestigingscode", Confirming: "Bevestigen", "Create a new account": "Nieuw account aanmaken", "Create Account": "Account aanmaken", "Creating Account": "Account wordt aangemaakt", "Dismiss alert": "Waarschuwing sluiten", Email: "E-mail", "Enter your code": "Vul je code in", "Enter your Email": "Vul je e-mail in", "Enter your Password": "Vul je wachtwoord in", "Enter your phone number": "Vul je telefoonnummer in", "Enter your username": "Vul je gebruikersnaam in", "Enter your Username": "Vul je gebruikersnaam in", "Forgot your password?": "Wachtwoord vergeten? ", "Hide password": "Verberg wachtwoord", "It may take a minute to arrive": "Het kan even duren voordat deze aankomt", Loading: "Laden", "New password": "Nieuw wachtwoord", "New Password": "Nieuw Wachtwoord", or: "of", Password: "Wachtwoord", "Phone Number": "Telefoonnummer", "Please confirm your Password": "Bevestig je wachtwoord", "Resend Code": "Verstuur code nogmaals", "Reset Password": "Wachtwoord resetten", "Reset your password": "Reset je wachtwoord", "Reset your Password": "Wachtwoord resetten", "Send code": "Verstuur code", "Send Code": "Verstuur Code", Sending: "Versturen", "Setup TOTP": "TOTP Instellingen", "Show password": "Toon wachtwoord", "Sign in to your account": "Inloggen op je account", "Sign In with Amazon": "Inloggen met Amazon", "Sign In with Apple": "Inloggen met Apple", "Sign In with Facebook": "Inloggen met Facebook", "Sign In with Google": "Inloggen met Google", "Sign in": "Inloggen", "Sign In": "Inloggen", "Signing in": "Inloggen", Skip: "Overslaan", Submit: "Versturen", Submitting: "Wordt verstuurd", Username: "Gebruikersnaam", "Verify Contact": "Verifieer Contact", Verify: "Verifieer", "We Emailed You": "We hebben u een e-mail gestuurd", "We Sent A Code": "We hebben een code gestuurd", "We Texted You": "We hebben u een sms gestuurd", "Your code is on the way. To log in, enter the code we emailed to": "Uw code is onderweg. Om in te loggen, voer de code in die we gemaild hebben naar", "Your code is on the way. To log in, enter the code we sent you": "Uw code is onderweg. Om in te loggen, voer de code in die we u hebben gestuurd", "Your code is on the way. To log in, enter the code we texted to": "Uw code is onderweg. Om in te loggen, voer de code in die we hebben gestuurd naar", "Your passwords must match": "Je wachtwoorden moeten overeenkomen" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/pl.mjs
            const pl_o = { "Account recovery requires verified contact information": "Odzyskanie konta wymaga zweryfikowanych danych kontaktowych", "Back to Sign In": "PowrÃ³t do logowania", "Change Password": "ZmieÅ„ hasÅ‚o", Changing: "Zmienianie", Code: "Kod", "Confirm Password": "PotwierdÅº HasÅ‚o", "Confirm Sign Up": "PotwierdÅº rejestracjÄ™", "Confirm SMS Code": "PotwierdÅº kod SMS", "Confirm TOTP Code": "PotwierdÅº hasÅ‚o jednorazowe", Confirm: "PotwierdÅº", "Confirmation Code": "Kod potwierdzenia", Confirming: "Potwierdzanie", "Create a new account": "UtwÃ³rz nowe konto", "Create Account": "UtwÃ³rz konto", "Creating Account": "Tworzenie konta", "Dismiss alert": "OdrzuÄ‡ alert", Email: "E-mail", "Enter your code": "WprowadÅº swÃ³j kod", "Enter your Email": "Wpisz swÃ³j adres e-mail", "Enter your phone number": "Wpisz swÃ³j numer telefonu", "Enter your username": "WprowadÅº swojÄ… nazwÄ™ uÅ¼ytkownika", "Forgot your password?": "ZapomniaÅ‚eÅ› hasÅ‚a? ", "Hide password": "Ukryj hasÅ‚o", "It may take a minute to arrive": "MoÅ¼e to chwilÄ™ potrwaÄ‡", Loading: "Åadowanie", "New password": "Nowe hasÅ‚o", or: "albo", Password: "HasÅ‚o", "Phone Number": "Numer telefonu", "Resend Code": "WyÅ›lij kod ponownie", "Reset your password": "Zresetuj swoje hasÅ‚o", "Reset your Password": "Zresetuj swoje hasÅ‚o", "Send code": "WyÅ›lij kod", "Send Code": "Zresetuj hasÅ‚o", Sending: "WysyÅ‚anie", "Setup TOTP": "Konfiguruj TOTP", "Show password": "PokaÅ¼ hasÅ‚o", "Sign in to your account": "Zaloguj siÄ™ na swoje konto", "Sign In with Amazon": "Zaloguj z Amazon", "Sign In with Apple": "Zaloguj z Apple", "Sign In with Facebook": "Zaloguj z Facebook", "Sign In with Google": "Zaloguj z Google", "Sign In": "Logowanie", "Sign in": "Zaloguj", "Signing in": "Logowanie", Skip: "PomiÅ„", Submit: "WyÅ›lij", Submitting: "WysyÅ‚anie", Username: "Nazwa uÅ¼ytkownika", "Verify Contact": "Weryfikacja danych kontaktowych", Verify: "Zweryfikuj", Birthdate: "Data urodzenia", "Family Name": "Nazwisko", "Given Name": "Pierwsze imiÄ™", "Middle Name": "Drugie imiÄ™", Name: "ImiÄ™ i nazwisko", Nickname: "Pseudonim", "Preferred Username": "Preferowana nazwa uÅ¼ytkownika", Profile: "Profil", Website: "Strona internetowa", "We Emailed You": "WysÅ‚aliÅ›my Ci wiadomoÅ›Ä‡ e-mail", "We Sent A Code": "WysÅ‚aliÅ›my kod", "We Texted You": "WysÅ‚aliÅ›my Ci wiadomoÅ›Ä‡ SMS", "Your code is on the way. To log in, enter the code we emailed to": "TwÃ³j kod zostaÅ‚ wysÅ‚any. Aby siÄ™ zalogowaÄ‡, wprowadÅº kod wysÅ‚any na adres e-mail", "Your code is on the way. To log in, enter the code we sent you": "TwÃ³j kod zostaÅ‚ wysÅ‚any. Aby siÄ™ zalogowaÄ‡, wprowadÅº wysÅ‚any do Ciebie kod", "Your code is on the way. To log in, enter the code we texted to": "TwÃ³j kod zostaÅ‚ wysÅ‚any. Aby siÄ™ zalogowaÄ‡, wprowadÅº kod wysÅ‚any do Ciebie w wiadomoÅ›ci SMS pod numer" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/pt.mjs
            const pt_o = { "Account recovery requires verified contact information": "A recuperaÃ§Ã£o da conta requer informaÃ§Ãµes de contato verificadas", "Back to Sign In": "Voltar para Entrar", "Change Password": "Mudar senha", Changing: "Mudando", Code: "CÃ³digo", "Confirm Password": "Confirme a Senha", "Confirm Sign Up": "Confirmar inscriÃ§Ã£o", "Confirm SMS Code": "Confirme o cÃ³digo SMS", "Confirm TOTP Code": "Confirme o cÃ³digo TOTP", Confirm: "confirme", "Confirmation Code": "CÃ³digo de confirmaÃ§Ã£o", Confirming: "Confirmando", "Create a new account": "Criar uma nova conta", "Create Account": "Criar Conta", "Creating Account": "Criando conta", "Dismiss alert": "Descartar alerta", Email: "O email", "Enter your code": "Insira seu cÃ³digo", "Enter your Email": "Digite seu e-mail", "Enter your phone number": "Digite seu nÃºmero de telefone", "Enter your username": "entre com seu nome de usuÃ¡rio", "Forgot your password?": "Esqueceu sua senha? ", "Hide password": "Esconder a senha", "It may take a minute to arrive": "Pode levar um minuto para chegar", Loading: "Carregando", "New password": "Nova Senha", or: "ou", Password: "Senha", "Phone Number": "NÃºmero de telefone", "Resend Code": "Reenviar cÃ³digo", "Reset your password": "Redefina sua senha", "Reset your Password": "Redefina sua senha", "Send code": "Enviar cÃ³digo", "Send Code": "Enviar cÃ³digo", Sending: "Enviando", "Setup TOTP": "Configurar TOTP", "Show password": "Mostrar senha", "Sign in to your account": "FaÃ§a login em sua conta", "Sign In with Amazon": "Entrar com a Amazon", "Sign In with Apple": "Entrar com a Apple", "Sign In with Facebook": "Entrar com o Facebook", "Sign In with Google": "FaÃ§a login no Google", "Sign in": "Entrar", "Sign In": "Entrar", "Signing in": "Entrando", Skip: "Pular", Submit: "Enviar", Submitting: "Enviando", Username: "Nome do usuÃ¡rio", "Verify Contact": "Verificar contato", Verify: "Verificar", "We Emailed You": "Enviamos um e-mail para vocÃª", "We Sent A Code": "Enviamos um cÃ³digo", "We Texted You": "Enviamos um SMS para vocÃª", "Your code is on the way. To log in, enter the code we emailed to": "Seu cÃ³digo estÃ¡ a caminho. Para fazer login, insira o cÃ³digo para o qual enviamos um e-mail", "Your code is on the way. To log in, enter the code we sent you": "Seu cÃ³digo estÃ¡ a caminho. Para fazer login, insira o cÃ³digo que enviamos para vocÃª", "Your code is on the way. To log in, enter the code we texted to": "Seu cÃ³digo estÃ¡ a caminho. Para fazer login, insira o cÃ³digo para o qual enviamos uma mensagem de texto" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/zh.mjs
            const zh_e = { "Account recovery requires verified contact information": "è´¦æˆ·æ¢å¤éœ€è¦éªŒè¯è¿‡çš„è”ç³»æ–¹å¼", "Back to Sign In": "å›žåˆ°ç™»å½•", "Change Password": "æ›´æ”¹å¯†ç ", Changing: "æ­£åœ¨ä¿®æ”¹", Code: "ç¡®è®¤ç ", "Confirm Password": "ç¡®è®¤å¯†ç ", "Confirm Sign Up": "ç¡®è®¤æ³¨å†Œ", "Confirm SMS Code": "ç¡®è®¤çŸ­ä¿¡éªŒè¯ç ", "Confirm TOTP Code": "ç¡®è®¤ TOTP ä»£ç ", Confirm: "ç¡®è®¤", "Confirmation Code": "ç¡®è®¤ç ", Confirming: "æ­£åœ¨ç¡®è®¤", "Create a new account": "åˆ›å»ºæ–°è´¦æˆ·", "Create Account": "åˆ›å»ºè´¦æˆ·", "Creating Account": "æ­£åœ¨åˆ›å»ºè´¦æˆ·", "Dismiss alert": "å…³é—­è­¦æŠ¥", Email: "é‚®ç®±", "Enter your code": "è¾“å…¥éªŒè¯ç ", "Enter your Email": "è¾“å…¥ç”µå­é‚®ä»¶", "Enter your phone number": "è¾“å…¥ç”µè¯å·ç ", "Enter your username": "è¾“å…¥ç”¨æˆ·å", "Forgot your password?": "å¿˜è®°å¯†ç äº†ï¼Ÿ", "Hide password": "éšè—å¯†ç ", "It may take a minute to arrive": "å¯èƒ½éœ€è¦ä¸€åˆ†é’Ÿæ‰èƒ½åˆ°è¾¾", Loading: "æ­£åœ¨åŠ è½½", "New password": "æ–°å¯†ç ", or: "æˆ–è€…", Password: "å¯†ç ", "Phone Number": "ç”µè¯", "Resend Code": "é‡å‘éªŒè¯ç ", "Reset your password": "é‡ç½®å¯†ç ", "Reset your Password": "é‡ç½®å¯†ç ", "Send Code": "å‘é€ç¡®è®¤ç ", "Send code": "å‘é€éªŒè¯ç ", Sending: "æ­£åœ¨å‘é€", "Setup TOTP": "è®¾ç½® TOTP", "Show password": "æ˜¾ç¤ºå¯†ç ", "Sign in to your account": "ç™»å½•è´¦æˆ·", "Sign In with Amazon": "é€šè¿‡ Amazon ç™»å½•", "Sign In with Apple": "é€šè¿‡ Apple ç™»å½•", "Sign In with Facebook": "é€šè¿‡ Facebook ç™»å½•", "Sign In with Google": "é€šè¿‡ Google ç™»å½•", "Sign in": "ç™»å½•", "Sign In": "ç™»å½•", "Signing in": "æ­£åœ¨ç™»å½•", Skip: "è·³è¿‡", Submit: "æäº¤", Submitting: "æ­£åœ¨æäº¤", Username: "ç”¨æˆ·å", "Verify Contact": "éªŒè¯è”ç³»æ–¹å¼", Verify: "éªŒè¯", "We Emailed You": "æˆ‘ä»¬ç»™æ‚¨å‘é€äº†ç”µå­é‚®ä»¶", "We Sent A Code": "æˆ‘ä»¬å‘é€äº†ä»£ç ", "We Texted You": "æˆ‘ä»¬ç»™æ‚¨å‘é€äº†çŸ­ä¿¡", "Your code is on the way. To log in, enter the code we emailed to": "æ‚¨çš„ä»£ç æ­£åœ¨å‘é€ä¸­ã€‚è¦ç™»å½•ï¼Œè¯·è¾“å…¥æˆ‘ä»¬é€šè¿‡ç”µå­é‚®ä»¶å‘é€ç»™ä»¥ä¸‹äººå‘˜çš„ä»£ç ï¼š", "Your code is on the way. To log in, enter the code we sent you": "æ‚¨çš„ä»£ç æ­£åœ¨å‘é€ä¸­ã€‚è¦ç™»å½•ï¼Œè¯·è¾“å…¥æˆ‘ä»¬å‘é€ç»™æ‚¨çš„ä»£ç ", "Your code is on the way. To log in, enter the code we texted to": "æ‚¨çš„ä»£ç æ­£åœ¨å‘é€ä¸­ã€‚è¦ç™»å½•ï¼Œè¯·è¾“å…¥æˆ‘ä»¬é€šè¿‡çŸ­ä¿¡å‘é€ç»™ä»¥ä¸‹äººå‘˜çš„ä»£ç ï¼š", "Confirm a Code": "ç¡®è®¤ç ", "Confirm Sign In": "ç¡®è®¤ç™»å½•", "Forgot Password": "å¿˜è®°å¯†ç ", "Incorrect username or password": "ç”¨æˆ·åæˆ–å¯†ç é”™è¯¯", "Invalid password format": "å¯†ç æ ¼å¼é”™è¯¯", "Invalid phone number format": "ç”µè¯æ ¼å¼é”™è¯¯ï¼Œè¯·ä½¿ç”¨æ ¼å¼ +12345678900", "New Password": "æ–°å¯†ç ", "Resend a Code": "é‡å‘ç¡®è®¤ç ", "Sign Out": "é€€å‡º", "Sign Up": "æ³¨å†Œ", "User already exists": "ç”¨æˆ·å·²ç»å­˜åœ¨", "User does not exist": "ç”¨æˆ·ä¸å­˜åœ¨" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/sv.mjs
            const sv_e = { "Account recovery requires verified contact information": "FÃ¶r att Ã¥terstÃ¤lla kontot behÃ¶ver du ett verifierat konto", "Back to Sign In": "Tillbaka till inloggningen", "Change Password": "Byt lÃ¶senord", Changing: "Ã„ndra", Code: "Kod", "Confirm Password": "BekrÃ¤fta lÃ¶senord", "Confirm Sign Up": "BekrÃ¤fta registrering", "Confirm SMS Code": "BekrÃ¤fta SMS-kod", "Confirm TOTP Code": "BekrÃ¤fta TOTP-kod", Confirm: "BekrÃ¤fta", "Confirmation Code": "Verifikationskod", Confirming: "BekrÃ¤ftar", "Create a new account": "Skapa ett nytt konto", "Create Account": "Skapa konto", "Creating Account": "Skapar konto", "Dismiss alert": "Avvisa varning", Email: "E-post", "Enter your code": "Skriv din kod", "Enter your Email": "Fyll i din e-post", "Enter your phone number": "Ange ditt telefonnummer", "Enter your username": "Ange ditt anvÃ¤ndarnamn", "Forgot your password?": "GlÃ¶mt ditt lÃ¶senord? ", "Hide password": "DÃ¶lj lÃ¶senord", "It may take a minute to arrive": "Det kan ta en minut att komma fram", Loading: "Laddar", "New password": "Nytt lÃ¶senord", or: "eller", Password: "LÃ¶senord", "Phone Number": "Telefonnummer", "Resend Code": "Skicka koden igen", "Reset your password": "Ã…terstÃ¤ll ditt lÃ¶senord", "Reset your Password": "Ã…terstÃ¤ll ditt lÃ¶senord", "Send code": "Skicka kod", "Send Code": "Skicka kod", Sending: "Skickar", "Setup TOTP": "Konfigurera TOTP", "Show password": "Visa lÃ¶senord", "Sign in to your account": "Logga in till ditt konto", "Sign In with Amazon": "Logga in med Amazon", "Sign In with Apple": "Logga in med Apple", "Sign In with Facebook": "Logga in med Facebook", "Sign In with Google": "Logga in med Google", "Sign in": "Logga in", "Sign In": "Logga in", "Signing in": "Loggar in", Skip: "Hoppa Ã¶ver", Submit: "Skicka", Submitting: "Skickar in", Username: "AnvÃ¤ndarnamn", "Verify Contact": "Verifiera kontakt", Verify: "Verifiera", "We Sent A Code": "Vi skickade en kod", "We Texted You": "Vi sms:ade dig", "Your code is on the way. To log in, enter the code we emailed to": "Din kod Ã¤r pÃ¥ vÃ¤g. FÃ¶r att logga in, ange koden vi mejlade till", "Your code is on the way. To log in, enter the code we sent you": "Din kod Ã¤r pÃ¥ vÃ¤g. FÃ¶r att logga in, ange koden vi skickade till dig", "Your code is on the way. To log in, enter the code we texted to": "Din kod Ã¤r pÃ¥ vÃ¤g. FÃ¶r att logga in, ange koden vi sms:ade till", "An account with the given email already exists.": "Det finns redan ett konto med denna e-postadress", "Confirm a Code": "BekrÃ¤fta koden", "Confirm Sign In": "BekrÃ¤fta inloggning", "Create account": "Skapa konto", "Enter your password": "Ange ditt lÃ¶senord", "Forgot Password": "GlÃ¶mt lÃ¶senordet", "Have an account? ": "Redan registrerad? ", "Incorrect username or password": "Felaktigt anvÃ¤ndarnamn eller lÃ¶senord", "Invalid password format": "Ogiltigt lÃ¶senordsformat", "Invalid phone number format": "Ogiltigt format fÃ¶r telefonnummer", "Lost your code? ": "FÃ¶rlorat koden? ", "New Password": "Nytt lÃ¶senord", "No account? ": "Inget konto? ", "Password attempts exceeded": "Maximalt antal felaktiga inloggningsfÃ¶rsÃ¶k har uppnÃ¥tts", "Reset password": "Ã…terstÃ¤ll lÃ¶senord", "Sign Out": "Logga ut", "Sign Up": "Registrering", "User already exists": "AnvÃ¤ndaren finns redan", "User does not exist": "AnvÃ¤ndaren finns inte", "Username cannot be empty": "AnvÃ¤ndarnamnet kan inte vara tomt", "We Emailed You": "Vi har skickat e-post till dig" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/id.mjs
            const id_a = { "Account recovery requires verified contact information": "Pemulihan akun memerlukan informasi kontak terverifikasi", "Back to Sign In": "Kembali ke Masuk", "Change Password": "Ubah kata sandi", Changing: "Mengubah", Code: "Kode", "Confirm Password": "Konfirmasi kata sandi", "Confirm Sign Up": "Konfirmasi Pendaftaran", "Confirm SMS Code": "Konfirmasi Kode SMS", "Confirm TOTP Code": "Konfirmasi Kode TOTP", Confirm: "Konfirmasi", "Confirmation Code": "Kode Konfirmasi", Confirming: "Mengkonfirmasi", "Create a new account": "Buat akun baru", "Create Account": "Buat Akun", "Creating Account": "Membuat Akun", "Dismiss alert": "Hentikan pemberitahuan", Email: "Email", "Enter your code": "Masukkan kode anda", "Enter your Email": "Masukkan email anda", "Enter your phone number": "Masukkan nomor telepon anda", "Enter your username": "Masukkan nama akun anda", "Forgot your password?": "Lupa kata sandi? ", "Hide password": "Sembunyikan kata sandi", "It may take a minute to arrive": "Mungkin perlu waktu satu menit untuk tiba", Loading: "Memuat", "New password": "Kata sandi baru", or: "atau", Password: "Kata sandi", "Phone Number": "Nomor telepon", "Resend Code": "Kirim ulang kodenya", "Reset your Password": "Reset Kata Sandi", "Reset your password": "Ubah kata sandi anda", "Send code": "Kirim kode", "Send Code": "Kirim Kode", Sending: "Mengirim", "Setup TOTP": "Siapkan TOTP", "Show password": "Tampilkan kata sandi", "Sign in to your account": "Masuk akun anda", "Sign In with Amazon": "Masuk dengan Amazon", "Sign In with Apple": "Masuk dengan Apple", "Sign In with Facebook": "Masuk dengan Facebook", "Sign In with Google": "Masuk dengan Google", "Sign in": "Masuk", "Sign In": "Masuk", "Signing in": "Memasuki", Skip: "Lewati", Submit: "Ajukan", Submitting: "Mengajukan", Username: "Nama akun", "Verify Contact": "Verifikasi Kontak", Verify: "Verifikasi", "We Sent A Code": "Kami Mengirim Kode", "We Texted You": "Kami mengirim SMS kepada Anda", "Your code is on the way. To log in, enter the code we sent you": "Kode Anda segera hadir. Untuk masuk, masukkan kode yang kami kirimkan kepada Anda", "An account with the given email already exists.": "Akun dengan email tersebut sudah terdaftar.", "Attempt limit exceeded, please try after some time.": "Batas percobaan terlampaui, mohon coba lagi setelah beberapa waktu.", "Cannot reset password for the user as there is no registered/verified email or phone_number": "Tidak dapat mengatur ulang kata sandi karena tidak ada email terdaftar / terverifikasi atau nomor telepon", Change: "Ubah", "Confirm a Code": "Konfirmasi kode", "Create account": "Buat akun", "Enter your password": "Masukkan kata sandi anda", "Forgot Password": "Lupa kata sandi", "Have an account? ": "Sudah punya akun? ", Hello: "Halo", "Incorrect username or password.": "Nama akun atau kata sandi salah.", "Invalid phone number format": "Nomor telepon tidak sesuai dengan format.", "Invalid verification code provided, please try again.": "Kode verifikasi tidak sesuai, mohon coba lagi.", "It may take a minute to arrive.": "Mungkin perlu beberapa waktu untuk tiba.", "Lost your code? ": "Kode anda hilang?", Name: "Nama", "Network error": "Galat jaringan", "No account? ": "Tidak ada akun?", "Password did not conform with policy: Password not long enough": "Kata sandi tidak sesuai dengan aturan: Kata sandi kurang panjang", "Resend a Code": "Renvoyer un code", "Reset password": "Ubah kata sandi anda", Send: "Kirim", "Sign In with AWS": "Masuk dengan AWS", "Sign Up with Amazon": "Daftar dengan Amazon", "Sign Up with AWS": "Daftar dengan AWS", "Sign Up with Facebook": "Daftar dengan Facebook", "Sign Up with Google": "Daftar dengan Google", SMS: "SMS", "User already exists": "Akun sudah terdaftar", "User does not exist.": "Akun tidak terdaftar.", "User is disabled.": "Akun dinonaktifkan.", "Username cannot be empty": "Nama akun tidak boleh kosong", "Username/client id combination not found.": "Nama akun atau id tidak ditemukan.", "We Emailed You": "Kami mengirimkanmu email", "Your code is on the way. To log in, enter the code we emailed to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami emailkan ke", "Your code is on the way. To log in, enter the code we texted to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami tuliskan ke", "Your passwords must match": "Kata sandi harus sama" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/tr.mjs
            const tr_e = { "Account recovery requires verified contact information": "Hesap kurtarma, doÄŸrulanmÄ±ÅŸ iletiÅŸim bilgilerini gerektirir", "Back to Sign In": "Oturum AÃ§maya Geri DÃ¶n", "Change Password": "Åžifreyi DeÄŸiÅŸtir", Changing: "DeÄŸiÅŸtiriliyor", Code: "Kod", "Confirm Password": "Åžifreyi DoÄŸrula", "Confirm Sign Up": "KayÄ±t Ä°ÅŸlemini DoÄŸrula", "Confirm SMS Code": "SMS Kodunu DoÄŸrula", "Confirm TOTP Code": "Tek KullanÄ±mlÄ±k Åžifreyi DoÄŸrula", Confirm: "DoÄŸrula", "Confirmation Code": "DoÄŸrulama Kodu", Confirming: "DoÄŸrulanÄ±yor", "Create a new account": "Yeni bir hesap oluÅŸtur", "Create Account": "Hesap OluÅŸtur", "Creating Account": "Hesap OluÅŸturuluyor", "Dismiss alert": "UyarÄ±yÄ± reddet", Email: "E-posta", "Enter your code": "Kodu girin", "Enter your Email": "E-posta adresinizi girin", "Enter your phone number": "Telefon numaranÄ±zÄ± girin", "Enter your username": "KullanÄ±cÄ± adÄ±nÄ±zÄ± girin", "Forgot your password?": "Åžifrenizi mi unuttunuz?", "Hide password": "Åžifreyi gizle", "It may take a minute to arrive": "Kodun gelmesi bir dakika sÃ¼rebilir", Loading: "YÃ¼kleniyor", "New password": "Yeni ÅŸifre", or: "veya", Password: "Åžifre", "Phone Number": "Telefon NumarasÄ±", "Resend Code": "Kodu Yeniden GÃ¶nder", "Reset your password": "Åžifrenizi sÄ±fÄ±rlayÄ±n", "Reset your Password": "Åžifrenizi SÄ±fÄ±rlayÄ±n", "Send code": "Kod gÃ¶nder", "Send Code": "Kod GÃ¶nder", Sending: "GÃ¶nderiliyor", "Setup TOTP": "Tek kullanÄ±mlÄ±k ÅŸifre kurulumu yap", "Show password": "Åžifreyi gÃ¶ster", "Sign in to your account": "HesabÄ±nÄ±zda oturum aÃ§Ä±n", "Sign In with Amazon": "Amazon ile Oturum AÃ§", "Sign In with Apple": "Apple ile Oturum AÃ§", "Sign In with Facebook": "Facebook ile Oturum AÃ§", "Sign In with Google": "Google ile Oturum AÃ§", "Sign in": "Oturum aÃ§", "Sign In": "Oturum AÃ§", "Signing in": "Oturum aÃ§Ä±lÄ±yor", Skip: "Atla", Submit: "GÃ¶nder", Submitting: "GÃ¶nderiliyor", Username: "KullanÄ±cÄ± adÄ±", "Verify Contact": "KiÅŸiyi DoÄŸrula", Verify: "DoÄŸrula", "We Emailed You": "Size E-posta GÃ¶nderdik", "We Sent A Code": "Bir Kod GÃ¶nderdik", "We Texted You": "Size Mesaj GÃ¶nderdik", "Your code is on the way. To log in, enter the code we emailed to": "Kodunuz yolda. Oturum aÃ§mak iÃ§in, gÃ¶nderdiÄŸimiz e-postadaki kodu girin", "Your code is on the way. To log in, enter the code we sent you": "Kodunuz yolda. Oturum aÃ§mak iÃ§in, size gÃ¶nderdiÄŸimiz kodu girin", "Your code is on the way. To log in, enter the code we texted to": "Kodunuz yolda. Oturum aÃ§mak iÃ§in, gÃ¶nderdiÄŸimiz mesajdaki kodu girin", "An account with the given email already exists.": "Bu e-postaya ait zaten bir hesap var.", "Confirm Sign In": "Oturum AÃ§mayÄ± DoÄŸrula", "Have an account? ": "HesabÄ±nÄ±z var mÄ±? ", "Incorrect username or password": "YanlÄ±ÅŸ kullanÄ±cÄ± adÄ± ya da ÅŸifre", "Invalid password format": "GeÃ§ersiz parola formatÄ±", "Invalid phone number format": "GeÃ§ersiz telefon numarasÄ± formatÄ±", "Lost your code? ": "Kodu mu kaybettiniz? ", "No account? ": "HesabÄ±nÄ±z yok mu? ", "Password attempts exceeded": "Maksimum oturum aÃ§ma giriÅŸimi aÅŸÄ±ldÄ±", "Sign Out": "Ã‡Ä±kÄ±ÅŸ yap", "Sign Up": "KayÄ±t Ol", "User already exists": "Bu kullanÄ±cÄ± zaten var", "User does not exist": "BÃ¶yle bir kullanÄ±cÄ± mevcut deÄŸil", "Username cannot be empty": "KullanÄ±cÄ± adÄ± boÅŸ olamaz" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ru.mjs
            const ru_e = { "Account recovery requires verified contact information": "Ð’Ð¾ÑÑÑ‚Ð°Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ðµ ÑƒÑ‡ÐµÑ‚Ð½Ð¾Ð¹ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ñ‚Ñ€ÐµÐ±ÑƒÐµÑ‚ Ð¿Ñ€Ð¾Ð²ÐµÑ€ÐºÐ¸ ÐºÐ¾Ð½Ñ‚Ð°ÐºÑ‚Ð½Ð¾Ð¹ Ð¸Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ð¸Ð¸", "Back to Sign In": "ÐÐ°Ð·Ð°Ð´, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð²Ð¾Ð¹Ñ‚Ð¸", "Change Password": "Ð¸Ð·Ð¼ÐµÐ½ÑÑ‚ÑŒ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", Changing: "Ð˜Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ", Code: "ÐšÐ¾Ð´", "Confirm Password": "ÐŸÐ¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ðµ Ð¿Ð°Ñ€Ð¾Ð»Ñ", "Confirm Sign Up": "ÐŸÐ¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ðµ Ð·Ð°Ñ€ÐµÐ³Ð¸ÑÑ‚Ñ€Ð¸Ñ€Ð¾Ð²Ð°Ñ‚ÑŒÑÑ", "Confirm SMS Code": "ÐŸÐ¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ðµ CMC-ÐšÐ¾Ð´", "Confirm TOTP Code": "ÐŸÐ¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ðµ TOTP-ÐšÐ¾Ð´", Confirm: "ÐŸÐ¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´Ð°Ñ‚ÑŒ", "Confirmation Code": "ÐºÐ¾Ð´ Ð¿Ð¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ñ", Confirming: "Ð¿Ð¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ðµ", "Create a new account": "Ð¡Ð¾Ð·Ð´Ð°Ð²Ð°Ñ‚ÑŒ Ð½Ð¾Ð²ÑƒÑŽ ÑƒÑ‡ÐµÑ‚Ð½ÑƒÑŽ Ð·Ð°Ð¿Ð¸ÑÑŒ", "Create Account": "Ð¡Ð¾Ð·Ð´Ð°Ñ‚ÑŒ ÑƒÑ‡ÐµÑ‚Ð½ÑƒÑŽ Ð·Ð°Ð¿Ð¸ÑÑŒ", "Creating Account": "ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ðµ ÑƒÑ‡ÐµÑ‚Ð½Ð°Ñ Ð·Ð°Ð¿Ð¸ÑÑŒ", "Dismiss alert": "Ð—Ð°ÐºÑ€Ñ‹Ñ‚ÑŒ Ð¾Ð¿Ð¾Ð²ÐµÑ‰ÐµÐ½Ð¸Ðµ", Email: "ÑÐ»ÐµÐºÑ‚Ñ€Ð¾Ð½Ð½Ð°Ñ Ð¿Ð¾Ñ‡Ñ‚Ð°", "Enter your code": "Ð²Ð²ÐµÑÑ‚Ð¸ Ð²Ð°Ñˆ ÐšÐ¾Ð´", "Enter your Email": "Ð²Ð²ÐµÑÑ‚Ð¸ Ð²Ð°Ñˆ ÑÐ»ÐµÐºÑ‚Ñ€Ð¾Ð½Ð½Ð°Ñ Ð¿Ð¾Ñ‡Ñ‚Ð°", "Enter your phone number": "Ð²Ð²ÐµÑÑ‚Ð¸ Ð²Ð°Ñˆ Ð½Ð¾Ð¼ÐµÑ€ Ñ‚ÐµÐ»ÐµÑ„Ð¾Ð½Ð°", "Enter your username": "Ð²Ð²ÐµÑÑ‚Ð¸ Ð²Ð°Ñˆ Ð¸Ð¼Ñ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ", "Forgot your password?": "Ð—Ð°Ð±Ñ‹Ð»Ð¸ Ð²Ð°Ñˆ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ?", "Hide password": "Ð¡ÐºÑ€Ñ‹Ð²Ð°Ñ‚ÑŒ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "It may take a minute to arrive": "Ð”Ð¾ÑÑ‚Ð°Ð²ÐºÐ° Ð¼Ð¾Ð¶ÐµÑ‚ Ð·Ð°Ð½ÑÑ‚ÑŒ Ð½ÐµÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ðµ Ð²Ñ€ÐµÐ¼Ñ", Loading: "Ð—Ð°Ð³Ñ€ÑƒÐ·ÐºÐ°", "New password": "ÐÐ¾Ð²Ñ‹Ð¹ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", or: "Ð¸Ð»Ð¸", Password: "ÐŸÐ°Ñ€Ð¾Ð»ÑŒ", "Phone Number": "ÐÐ¾Ð¼ÐµÑ€ Ñ‚ÐµÐ»ÐµÑ„Ð¾Ð½Ð°", "Resend Code": "ÐžÑ‚Ð¿Ñ€Ð°Ð²ÑŒ ÐµÑ‰Ðµ Ñ€Ð°Ð· ÐšÐ¾Ð´", "Reset your password": "ÑÐ±Ñ€Ð¾Ñ Ð²Ð°Ñˆ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Reset your Password": "ÑÐ±Ñ€Ð¾Ñ Ð²Ð°Ñˆ ÐŸÐ°Ñ€Ð¾Ð»ÑŒ", "Send code": "ÐžÑ‚Ð¿Ñ€Ð°Ð²Ð»ÑÑ‚ÑŒ ÐšÐ¾Ð´", "Send Code": "ÐžÑ‚Ð¿Ñ€Ð°Ð²Ð»ÑÑ‚ÑŒ ÐšÐ¾Ð´", Sending: "Ð¾Ñ‚Ð¿Ñ€Ð°Ð²ÐºÐ°", "Setup TOTP": "ÐÐ°ÑÑ‚Ñ€Ð°Ð¸Ð²Ð°Ñ‚ÑŒ TOTP", "Show password": "ÐŸÐ¾ÐºÐ°Ð·Ñ‹Ð²Ð°Ñ‚ÑŒ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Sign in to your account": "Ð·Ð½Ð°Ðº Ð² ÑÐ²Ð¾Ð¹ Ð°ÐºÐºÐ°ÑƒÐ½Ñ‚", "Sign In with Amazon": "Ð·Ð½Ð°Ðº Ð² Ñ Amazon", "Sign In with Apple": "Ð·Ð½Ð°Ðº Ð² Ñ Apple", "Sign In with Facebook": "Ð·Ð½Ð°Ðº Ð² Ñ Facebook", "Sign In with Google": "Ð·Ð½Ð°Ðº Ð² Ñ Google", "Sign in": "Ð·Ð½Ð°Ðº Ð²", "Sign In": "Ð·Ð½Ð°Ðº Ð²", "Signing in": "Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð²", Skip: "ÐŸÑ€Ð¾Ð¿ÑƒÑÐºÐ°Ñ‚ÑŒ", Submit: "ÐŸÑ€ÐµÐ´ÑÑ‚Ð°Ð²Ð»ÑÑ‚ÑŒ Ð½Ð° Ñ€Ð°ÑÑÐ¼Ð¾Ñ‚Ñ€ÐµÐ½Ð¸Ðµ", Submitting: "ÐŸÑ€ÐµÐ´ÑÑ‚Ð°Ð²Ð¸Ð²", Username: "Ð˜Ð¼Ñ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ", "Verify Contact": "ÐŸÑ€Ð¾Ð²ÐµÑ€Ð¸Ñ‚ÑŒ ÐºÐ¾Ð½Ñ‚Ð°ÐºÑ‚", Verify: "ÐŸÑ€Ð¾Ð²ÐµÑ€Ð¸Ñ‚ÑŒ", "We Emailed You": "ÐœÑ‹ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð²Ð°Ð¼ ÑÐ»ÐµÐºÑ‚Ñ€Ð¾Ð½Ð½Ð¾Ðµ Ð¿Ð¸ÑÑŒÐ¼Ð¾", "We Sent A Code": "ÐœÑ‹ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ ÐºÐ¾Ð´", "We Texted You": "ÐœÑ‹ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð²Ð°Ð¼ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ð¾Ðµ ÑÐ¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ðµ", "Your code is on the way. To log in, enter the code we emailed to": "Ð’Ð°Ñˆ ÐºÐ¾Ð´ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½. Ð§Ñ‚Ð¾Ð±Ñ‹ Ð²Ð¾Ð¹Ñ‚Ð¸ Ð² ÑÐ¸ÑÑ‚ÐµÐ¼Ñƒ, Ð²Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÐºÐ¾Ð´, ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¹ Ð¼Ñ‹ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð¿Ð¾ ÑÐ»ÐµÐºÑ‚Ñ€Ð¾Ð½Ð½Ð¾Ð¹ Ð¿Ð¾Ñ‡Ñ‚Ðµ", "Your code is on the way. To log in, enter the code we sent you": "Ð’Ð°Ñˆ ÐºÐ¾Ð´ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½. Ð§Ñ‚Ð¾Ð±Ñ‹ Ð²Ð¾Ð¹Ñ‚Ð¸ Ð² ÑÐ¸ÑÑ‚ÐµÐ¼Ñƒ, Ð²Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÐºÐ¾Ð´, ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¹ Ð¼Ñ‹ Ð¿Ð¾ÑÐ»Ð°Ð»Ð¸ Ð²Ð°Ð¼", "Your code is on the way. To log in, enter the code we texted to": "Ð’Ð°Ñˆ ÐºÐ¾Ð´ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½. Ð§Ñ‚Ð¾Ð±Ñ‹ Ð²Ð¾Ð¹Ñ‚Ð¸ Ð² ÑÐ¸ÑÑ‚ÐµÐ¼Ñƒ, Ð²Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÐºÐ¾Ð´, ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¹ Ð¼Ñ‹ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ñ‹Ð¼ ÑÐ¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸ÐµÐ¼" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/he.mjs
            const he_n = { "Account recovery requires verified contact information": "×©×—×–×•×¨ ×œ×§×•×— ×“×•×¨×© ×¢×•×“ ×ž×™×“×¢", "Back to Sign In": "×—×–×•×¨ ×œ×”×¨×©×ž×”", "Change Password": "×¢×“×›×•×Ÿ ×¡×™×¡×ž×", Changing: "×ž×¢×“×›×Ÿ", Code: "×§×•×“", "Confirm Password": "××©×¨ ×¡×™×¡×ž×", "Confirm Sign Up": "××©×¨ ×”×¨×©×ž×”", "Confirm SMS Code": "××©×¨ sms ×§×•×“", "Confirm TOTP Code": "××©×¨ totp ×§×•×“", Confirm: "××™×©×•×¨", "Confirmation Code": "××™×©×•×¨ ×§×•×“", Confirming: "×ž××©×¨", "Create a new account": "×¦×•×¨ ×ž×©×ª×ž×© ×—×“×©", "Create Account": "×¦×•×¨ ×ž×©×ª×ž×©", "Creating Account": "×™×¦×™×¨×ª ×ž×©×ª×ž×©", "Dismiss alert": "×”×¡×¨ ×”×ª×¨××”", Email: "××™×ž×™×™×œ", "Enter your code": "×”×›× ×¡ ××ª ×”×§×•×“", "Enter your Email": "×”×›× ×¡ ××ª ×”×ž×™×™×œ ×©×œ×š", "Enter your phone number": "×”×›× ×¡ ××ª ×ž×¡×¤×¨ ×”×˜×œ×¤×•×Ÿ ×©×œ×š", "Enter your username": "×”×›× ×¡ ××ª ×©× ×”×ž×ª×ž×© ×©×œ×š", "Forgot your password?": "×©×—×›×ª ×¡×™×¡×ž× ?", "Hide password": "×”×¡×ª×¨ ×¡×™×¡×ž×", Loading: "×˜×•×¢×Ÿ", "New password": "×¡×™×¡×ž× ×—×“×©×”", or: "××•Ö¹", Password: "×¡×™×¡×ž×", "Phone Number": "×ž×¡×¤×¨ ×˜×œ×¤×•×Ÿ", "Resend Code": "×©×œ×— ×§×•×“ ×©×•×‘", "Reset your password": "××¤×¡ ×¡×™×¡×ž×", "Reset your Password": "××¤×¡ ×¡×™×¡×ž×", "Send code": "×©×œ×— ×§×•×“", "Send Code": "×©×œ×— ×§×•×“", Sending: "×©×•×œ×—", "Setup TOTP": "Setup TOTP", "Show password": "×”×¦×’ ×¡×™×¡×ž×", "Sign in to your account": "×”×ª×—×‘×¨ ×œ×—×©×‘×•×Ÿ ×©×œ×š", "Sign In with Amazon": "Sign In with Amazon", "Sign In with Apple": "Sign In with Apple", "Sign In with Facebook": "Sign In with Facebook", "Sign In with Google": "Sign In with Google", "Sign in": "×”×ª×—×‘×¨", "Sign In": "×”×ª×—×‘×¨", "Signing in": "×ž×ª×—×‘×¨", Skip: "×“×œ×’", Submit: "×©×œ×—", Submitting: "×©×•×œ×—", Username: "×©× ×ž×©×ª×ž×©", "Verify Contact": "××ž×ª ××™×© ×§×©×¨", Verify: "××ž×ª" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ua.mjs
            const ua_e = { "Account recovery requires verified contact information": "Ð’Ñ–Ð´Ð½Ð¾Ð²Ð»ÐµÐ½Ð½Ñ Ð¾Ð±Ð»Ñ–ÐºÐ¾Ð²Ð¾Ð³Ð¾ Ð·Ð°Ð¿Ð¸ÑÑƒ Ð¿Ð¾Ñ‚Ñ€ÐµÐ±ÑƒÑ” ÐºÐ¾Ð½Ñ‚Ð°ÐºÑ‚Ð½Ð¾Ñ— Ñ–Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ñ–Ñ—", "Back to Sign In": "ÐÐ°Ð·Ð°Ð´ Ð½Ð° ÑÑ‚Ð¾Ñ€Ñ–Ð½ÐºÑƒ Ð²Ñ…Ð¾Ð´Ñƒ", "Change Password": "Ð—Ð¼Ñ–Ð½Ð¸Ñ‚Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", Changing: "Ð—Ð¼Ñ–Ð½ÑŽÑ”Ð¼Ð¾", Code: "ÐšÐ¾Ð´", "Confirm Password": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ñ–Ñ‚ÑŒ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Confirm Sign Up": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ñ–Ñ‚ÑŒ Ñ€ÐµÑ”ÑÑ‚Ñ€Ð°Ñ†Ñ–ÑŽ", "Confirm SMS Code": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ñ–Ñ‚ÑŒ SMS ÐºÐ¾Ð´", "Confirm TOTP Code": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ñ–Ñ‚ÑŒ TOTP ÐºÐ¾Ð´", Confirm: "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ð¸Ñ‚Ð¸", "Confirmation Code": "ÐšÐ¾Ð´ Ð¿Ñ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ð¶ÐµÐ½Ð½Ñ", Confirming: "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ð¶ÑƒÑ”Ð¼Ð¾", "Create a new account": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ", "Create Account": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ", "Creating Account": "Ð ÐµÑ”ÑÑ‚Ñ€ÑƒÑ”Ð¼Ð¾", "Dismiss alert": "Ð’Ñ–Ð´Ñ…Ð¸Ð»Ð¸Ñ‚Ð¸ ÑÐ¿Ð¾Ð²Ñ–Ñ‰ÐµÐ½Ð½Ñ", Email: "Email", "Enter your code": "Ð’Ð²ÐµÐ´Ñ–Ñ‚ÑŒ ÐºÐ¾Ð´", "Enter your Email": "Ð’Ð²ÐµÐ´Ñ–Ñ‚ÑŒ Ð²Ð°Ñˆ email", "Enter your phone number": "Ð’Ð²ÐµÐ´Ñ–Ñ‚ÑŒ Ð²Ð°Ñˆ Ð½Ð¾Ð¼ÐµÑ€ Ñ‚ÐµÐ»ÐµÑ„Ð¾Ð½Ñƒ", "Enter your username": "Ð’Ð²ÐµÐ´Ñ–Ñ‚ÑŒ Ð²Ð°ÑˆÐµ Ñ–Ð¼Ê¼Ñ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‡Ð°", "Forgot password?": "Ð—Ð°Ð±ÑƒÐ»Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ?", "Forgot your password?": "Ð—Ð°Ð±ÑƒÐ»Ð¸ Ð²Ð°Ñˆ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ?", "Hide password": "Ð¡Ñ…Ð¾Ð²Ð°Ñ‚Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "It may take a minute to arrive": "Ð”Ð¾ÑÑ‚Ð°Ð²ÐºÐ° Ð¼Ð¾Ð¶Ðµ Ñ‚Ñ€Ð¸Ð²Ð°Ñ‚Ð¸ Ñ…Ð²Ð¸Ð»Ð¸Ð½Ñƒ", Loading: "Ð—Ð°Ð³Ñ€ÑƒÐ¶Ð°Ñ”Ð¼Ð¾", "New password": "ÐÐ¾Ð²Ð¸Ð¹ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", or: "Ð°Ð±Ð¾", Password: "ÐŸÐ°Ñ€Ð¾Ð»ÑŒ", "Phone Number": "ÐÐ¾Ð¼ÐµÑ€ Ð¢ÐµÐ»ÐµÑ„Ð¾Ð½Ñƒ", "Resend Code": "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸ ÐºÐ¾Ð´ Ð¿Ð¾Ð²Ñ‚Ð¾Ñ€Ð½Ð¾", "Reset your password": "Ð¡ÐºÐ¸Ð½ÑƒÑ‚Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Reset your Password": "Ð¡ÐºÐ¸Ð½ÑƒÑ‚Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Send code": "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸ ÐºÐ¾Ð´", "Send Code": "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸ ÐºÐ¾Ð´", Sending: "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð»ÑÑ”Ð¼Ð¾", "Setup TOTP": "ÐÐ°Ð»Ð°ÑˆÑ‚ÑƒÐ²Ð°Ñ‚Ð¸ TOTP", "Show password": "ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Sign in to your account": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ñƒ Ð²Ð°Ñˆ Ð¾Ð±Ð»Ñ–ÐºÐ¾Ð²Ð¸Ð¹ Ð·Ð°Ð¿Ð¸Ñ", "Sign In with Amazon": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð· Amazon", "Sign In with Apple": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð· Apple", "Sign In with Facebook": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð· Facebook", "Sign In with Google": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð· Google", "Sign in": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸", "Sign In": "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸", "Signing in": "Ð’Ñ…Ð¾Ð´Ð¸Ð¼Ð¾", Skip: "ÐŸÑ€Ð¾Ð¿ÑƒÑÑ‚Ð¸Ñ‚Ð¸", Submit: "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸", Submitting: "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð»ÑÑ”Ð¼Ð¾", Username: "Ð†Ð¼Ê¼Ñ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‡Ð°", "Verify Contact": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ð¸Ñ‚Ð¸ ÐšÐ¾Ð½Ñ‚Ð°ÐºÑ‚", Verify: "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ð¸Ñ‚Ð¸", "We Emailed You": "ÐœÐ¸ Ð²Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð²Ð°Ð¼ Email", "We Sent A Code": "ÐœÐ¸ Ð²Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ ÐºÐ¾Ð´", "We Texted You": "ÐœÐ¸ Ð²Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð²Ð°Ð¼ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ðµ Ð¿Ð¾Ð²Ñ–Ð´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ", "Your code is on the way. To log in, enter the code we emailed to": "Ð’Ð°Ñˆ ÐºÐ¾Ð´ Ð²Ð¶Ðµ Ð² Ð´Ð¾Ñ€Ð¾Ð·Ñ–. Ð©Ð¾Ð± ÑƒÐ²Ñ–Ð¹Ñ‚Ð¸, Ð²Ð²ÐµÐ´Ñ–Ñ‚ÑŒ ÐºÐ¾Ð´, Ñ‰Ð¾ Ð¼Ð¸ Ð²Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð²Ð°Ð¼ Ð½Ð° Email", "Your code is on the way. To log in, enter the code we sent you": "Ð’Ð°Ñˆ ÐºÐ¾Ð´ Ð²Ð¶Ðµ Ð² Ð´Ð¾Ñ€Ð¾Ð·Ñ–. Ð©Ð¾Ð± ÑƒÐ²Ñ–Ð¹Ñ‚Ð¸, Ð²Ð²ÐµÐ´Ñ–Ñ‚ÑŒ ÐºÐ¾Ð´, Ñ‰Ð¾ Ð¼Ð¸ Ð²Ð°Ð¼ Ð²Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸", "Your code is on the way. To log in, enter the code we texted to": "Ð’Ð°Ñˆ ÐºÐ¾Ð´ Ð²Ð¶Ðµ Ð² Ð´Ð¾Ñ€Ð¾Ð·Ñ–. Ð©Ð¾Ð± ÑƒÐ²Ñ–Ð¹Ñ‚Ð¸, Ð²Ð²ÐµÐ´Ñ–Ñ‚ÑŒ ÐºÐ¾Ð´, Ñ‰Ð¾ Ð¼Ð¸ Ð²Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð¸ Ð²Ð°Ð¼ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ð¸Ð¼ Ð¿Ð¾Ð²Ñ–Ð´Ð¾Ð¼Ð»ÐµÐ½Ð½ÑÐ¼", "An account with the given email already exists.": "ÐžÐ±Ð»Ñ–ÐºÐ¾Ð²Ð¸Ð¹ Ð·Ð°Ð¿Ð¸Ñ Ð· Ñ†Ð¸Ð¼ Email Ð²Ð¶Ðµ Ñ–ÑÐ½ÑƒÑ”.", "Confirm a Code": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ñ–Ñ‚ÑŒ ÐºÐ¾Ð´", "Confirm Sign In": "ÐŸÑ–Ð´Ñ‚Ð²ÐµÑ€Ð´Ñ–Ñ‚ÑŒ Ð²Ñ…Ñ–Ð´", "Forgot Password": "Ð—Ð°Ð±ÑƒÐ»Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Incorrect username or password.": "ÐÐµÐ²Ñ–Ñ€Ð½Ðµ Ñ–Ð¼Ê¼Ñ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‡Ð° Ð°Ð±Ð¾ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Invalid password format": "ÐÐµÐ²Ñ–Ñ€Ð½Ð¸Ð¹ Ñ„Ð¾Ñ€Ð¼Ð°Ñ‚ Ð¿Ð°Ñ€Ð¾Ð»ÑŽ", "Invalid phone number format": "ÐÐµÐ²Ñ–Ñ€Ð½Ð¸Ð¹ Ñ„Ð¾Ñ€Ð¼Ð°Ñ‚ Ð½Ð¾Ð¼ÐµÑ€Ñƒ Ñ‚ÐµÐ»ÐµÑ„Ð¾Ð½Ñƒ", "Loading...": "Ð—Ð°Ð³Ñ€ÑƒÐ¶Ð°Ñ”Ð¼Ð¾...", "New Password": "ÐÐ¾Ð²Ð¸Ð¹ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Resend a Code": "Ð’Ñ–Ð´Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸ ÐºÐ¾Ð´ Ð¿Ð¾Ð²Ñ‚Ð¾Ñ€Ð½Ð¾", "Reset Password": "Ð¡ÐºÐ¸Ð½ÑƒÑ‚Ð¸ Ð¿Ð°Ñ€Ð¾Ð»ÑŒ", "Sign Out": "Ð’Ð¸Ð¹Ñ‚Ð¸", "Sign Up with Amazon": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ Ð· Amazon", "Sign Up with Apple": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ Ð· Apple", "Sign Up with Facebook": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ Ð· Facebook", "Sign Up with Google": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ Ð· Google", "Sign Up": "Ð—Ð°Ñ€ÐµÑ”ÑÑ‚Ñ€ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ", "User already exists": "ÐšÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‡ Ð²Ð¶Ðµ Ñ–ÑÐ½ÑƒÑ”", "User does not exist": "Ð¢Ð°ÐºÐ¸Ð¹ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‡ Ð½Ðµ Ñ–ÑÐ½ÑƒÑ”", "Username cannot be empty": "Ð†Ð¼Ê¼Ñ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‡Ð° Ð½Ðµ Ð¼Ð¾Ð¶Ðµ Ð±ÑƒÑ‚Ð¸ Ð¿ÑƒÑÑ‚Ð¸Ð¼", "Your passwords must match": "ÐŸÐ°Ñ€Ð¾Ð»Ñ– Ð¼Ð°ÑŽÑ‚ÑŒ Ð·Ð±Ñ–Ð³Ð°Ñ‚Ð¸ÑÑ" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/defaultTexts.mjs
            const E = { ADD_PROFILE: "Add your Profile", ADD_WEBSITE: "Add your Website", BACK_SIGN_IN: "Back to Sign In", BIRTHDATE: "Birthdate", CHANGE_PASSWORD: "Change Password", CHANGING_PASSWORD: "Changing", CODE: "Code", CODE_ARRIVAL: "It may take a minute to arrive", CODE_EMAILED: "Your code is on the way. To log in, enter the code we emailed to", CODE_SENT: "Your code is on the way. To log in, enter the code we sent you", CODE_TEXTED: "Your code is on the way. To log in, enter the code we texted to", CONFIRM_PASSWORD: "Confirm Password", CONFIRM_PASSWORD_PLACEHOLDER: "Please confirm your Password", CONFIRM_RESET_PASSWORD_HEADING: "Reset your Password", CONFIRM_SIGNUP_HEADING: "Confirm Sign Up", CONFIRM_SMS: "Confirm SMS Code", CONFIRM_TOTP: "Confirm TOTP Code", CONFIRM: "Confirm", CONFIRMATION_CODE: "Confirmation Code", CONFIRMING: "Confirming", CREATE_ACCOUNT: "Create Account", CREATING_ACCOUNT: "Creating Account", EMAIL_ADDRESS: "Email", ENTER_BIRTHDATE: "Enter your Birthdate", ENTER_CODE: "Enter your code", ENTER_CONFIRMATION_CODE: "Enter your Confirmation Code", ENTER_EMAIL: "Enter your Email", ENTER_FAMILY_NAME: "Enter your Family Name", ENTER_GIVEN_NAME: "Enter your Given Name", ENTER_MIDDLE_NAME: "Enter your Middle Name", ENTER_NAME: "Enter your Name", ENTER_NICK_NAME: "Enter your Nickname", ENTER_PASSWORD: "Enter your Password", ENTER_PHONE_NUMBER: "Enter your Phone Number", ENTER_PREFERRED_USERNAME: "Enter your Preferred Username", ENTER_USERNAME: "Enter your username", FAMILY_NAME: "Family Name", GIVEN_NAME: "Given Name", FORGOT_PASSWORD: "Forgot Password?", FORGOT_YOUR_PASSWORD: "Forgot your password?", HIDE_PASSWORD: "Hide password", LOADING: "Loading", LOGIN_NAME: "Username", MIDDLE_NAME: "Middle Name", NAME: "Name", NICKNAME: "Nickname", NEW_PASSWORD: "New password", OR: "or", PASSWORD: "Password", PHONE_NUMBER: "Phone Number", PREFERRED_USERNAME: "Preferred Username", PROFILE: "Profile", RESEND_CODE: "Resend Code", RESET_PASSWORD_HEADING: "Reset your password", RESET_PASSWORD: "Reset Password", SEND_CODE: "Send code", SENDING: "Sending", SETUP_TOTP: "Setup TOTP", SHOW_PASSWORD: "Show password", SIGN_IN_BUTTON: "Sign in", SIGN_IN_TAB: "Sign In", SIGN_IN_WITH_AMAZON: "Sign In with Amazon", SIGN_IN_WITH_APPLE: "Sign In with Apple", SIGN_IN_WITH_FACEBOOK: "Sign In with Facebook", SIGN_IN_WITH_GOOGLE: "Sign In with Google", SIGN_IN: "Sign in to your account", SIGN_UP_BUTTON: "Create a new account", SIGNING_IN_BUTTON: "Signing in", SKIP: "Skip", SUBMIT: "Submit", SUBMITTING: "Submitting", UPPERCASE_COPY: "COPY", VERIFY_CONTACT: "Verify Contact", VERIFY_HEADING: "Account recovery requires verified contact information", VERIFY: "Verify", WE_EMAILED: "We Emailed You", WE_SENT_CODE: "We Sent A Code", WE_TEXTED: "We Texted You", WEBSITE: "Website" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/index.mjs
            const dictionaries_d = Object.assign({}, de_e), dictionaries_l = Object.assign({}, en_e), x = Object.assign({}, es_e), k = Object.assign({}, fr_e), dictionaries_v = Object.assign({}, it_o), z = Object.assign({}, ja_e), T = Object.assign({}, kr_e), q = Object.assign({}, nb_e), w = Object.assign({}, nl_e), dictionaries_y = Object.assign({}, pl_o), dictionaries_A = Object.assign({}, pt_o), B = Object.assign({}, zh_e), C = Object.assign({}, sv_e), dictionaries_E = Object.assign({}, id_a), F = Object.assign({}, tr_e), G = Object.assign({}, ru_e), H = Object.assign({}, he_n), dictionaries_I = Object.assign({}, ua_e), J = Object.assign({}, E);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/i18n/translations.mjs
            const translations_x = Object.assign({}, J); function translations_v(n) { return I18n.get(n) } function translations_w(n) { return t.get(n) !== n } const translations_y = { de: dictionaries_d, en: dictionaries_l, es: x, fr: k, id: dictionaries_E, it: dictionaries_v, ja: z, kr: T, ko: T, nb: q, nl: w, pl: dictionaries_y, pt: dictionaries_A, zh: B, sv: C, tr: F, ru: G, he: H, ua: dictionaries_I };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/util.mjs
            const util_r = r => { const o = Object.assign({}, r); for (const [t, s] of Object.entries(r)) { const { label: r, placeholder: n } = s; o[t] = Object.assign(Object.assign({}, s), { label: r ? translations_v(r) : void 0, placeholder: n ? translations_v(n) : void 0 }) } return o }, util_o = e => Object.entries(e).sort(((e, r) => (e[1].order || Number.MAX_VALUE) - (r[1].order || Number.MAX_VALUE))).filter((e => void 0 !== e[1]));

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/formFields.mjs
            const formFields_a = (s, t) => (0, defaults_i[s])(t), formFields_c = (r, i) => { var o, a; const c = null === (a = null === (o = actor_o(i)) || void 0 === o ? void 0 : o.formFields) || void 0 === a ? void 0 : a[r]; return c && 0 !== Object.keys(c).length ? Object.entries(c).reduce(((t, [o, a]) => { if ("signIn" !== r && "resetPassword" !== r || "username" !== o) { if (attributes_i(o)) { const s = constants_a[o], r = Object.assign(Object.assign({}, s), a); return Object.assign(Object.assign({}, t), { [o]: r }) } return Object.assign(Object.assign({}, t), { [o]: a }) } { const s = defaults_a(i), e = Object.assign(Object.assign({}, s), a); return Object.assign(Object.assign({}, t), { [o]: e }) } }), {}) : {} }, formFields_m = (s, t) => { const e = formFields_a(s, t), r = formFields_c(s, t), n = Object.assign(Object.assign({}, e), r); return delete n.QR, util_r(n) }, j = s => s.map((s => [s[0], Object.assign(Object.assign({}, s[1]), { order: void 0 })])), b = (s, t) => { const e = formFields_m(s, t); return j(util_o(e)) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/constants.mjs
            const COMPONENT_ROUTE_KEYS = [
                'confirmResetPassword',
                'confirmSignIn',
                'confirmSignUp',
                'confirmVerifyUser',
                'forceNewPassword',
                'resetPassword',
                'setupTOTP',
                'signIn',
                'signUp',
                'verifyUser',
            ];
            const constants_COMPONENT_ROUTE_NAMES = (/* unused pure expression or super */ null && ([
                'ConfirmResetPassword',
                'ConfirmSignIn',
                'ConfirmSignUp',
                'ConfirmVerifyUser',
                'ForceNewPassword',
                'ResetPassword',
                'SetupTOTP',
                'SignIn',
                'SignUp',
                'VerifyUser',
            ]));



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/utils.mjs


            const isComponentRouteKey = (route) => COMPONENT_ROUTE_KEYS.some((componentRoute) => componentRoute === route);
            function resolveAuthenticatorComponents(defaults, overrides) {
                if (!overrides) {
                    return defaults;
                }
                return COMPONENT_ROUTE_NAMES.reduce((components, route) => {
                    const Default = defaults[route];
                    const Override = overrides[route];
                    if (typeof Override !== 'function') {
                        return Object.assign(Object.assign({}, components), { [route]: Default });
                    }
                    const { Footer, FormFields, Header } = Default;
                    // cast to allow assigning of component slots
                    const Component = Override;
                    Component.Footer = Footer;
                    Component.FormFields = FormFields;
                    Component.Header = Header;
                    return Object.assign(Object.assign({}, components), { [route]: Component });
                }, {});
            }



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.mjs





            const defaultComparator = () => false;
            /**
             * Does an ordering and shallow comparison of each array value,
             * plus a value equality check for empty objects and arrays.
             */
            function areSelectorDepsEqual(currentDeps, nextDeps) {
                if (currentDeps.length !== nextDeps.length) {
                    return false;
                }
                return currentDeps.every((currentDep, index) => {
                    const nextDep = nextDeps[index];
                    if (l(currentDep, nextDep) ||
                        p(currentDep, nextDep)) {
                        return true;
                    }
                    return currentDep === nextDep;
                });
            }
            const getComparator = (selector) => (currentFacade, nextFacade) => {
                const currentSelectorDeps = selector(currentFacade);
                const nextSelectorDeps = selector(nextFacade);
                // Shallow compare the array values
                return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);
            };
            const getQRFields = (state) => {
                var _a, _b, _c;
                return (Object.assign({}, (_c = (_b = (_a = actor_o(state)) === null || _a === void 0 ? void 0 : _a.formFields) === null || _b === void 0 ? void 0 : _b.setupTOTP) === null || _c === void 0 ? void 0 : _c.QR));
            };
            const getTotpSecretCodeCallback = (user) => function getTotpSecretCode() {
                return tslib_es6_awaiter(this, void 0, void 0, function* () {
                    return yield Auth/* Auth */.g.setupTOTP(user);
                });
            };
            const flattenFormFields = (fields) => fields.flatMap(([name, options]) => (Object.assign({ name }, options)));
            const convertContactMethodsToFields = (unverifiedContactMethods) => {
                return (unverifiedContactMethods &&
                    Object.entries(unverifiedContactMethods).map(([name, value]) => {
                        const valueIsString = r(value);
                        if (!valueIsString || !name) {
                            return {};
                        }
                        return { name, label: value, type: 'radio', value };
                    }));
            };
            /**
             * Retrieves default and custom (RWA only, to be updated) form field values from state machine
             * for subcomponent routes that render fields
             */
            const getMachineFields = (route, state, unverifiedContactMethods) => {
                if (isComponentRouteKey(route)) {
                    return route === 'verifyUser'
                        ? convertContactMethodsToFields(unverifiedContactMethods)
                        : flattenFormFields(b(route, state));
                }
                return [];
            };



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs









            /**
             * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)
             */
            function useAuthenticator(selector) {
                const context = react.useContext(AuthenticatorContext);
                if (!context) {
                    throw new Error(USE_AUTHENTICATOR_ERROR);
                }
                const { service } = context;
                const { send } = service;
                const xstateSelector = (0, react.useCallback)((state) => (Object.assign({}, s({ send, state }))), [send]);
                const comparator = selector ? getComparator(selector) : defaultComparator;
                // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does
                // not update on external sign in events (for example when a user is not using the `Authenticator`).
                const { authStatus } = context;
                const facade = useSelector(service, xstateSelector, comparator);
                const { route, totpSecretCode, unverifiedContactMethods, user } = facade, rest = tslib_es6_rest(facade, ["route", "totpSecretCode", "unverifiedContactMethods", "user"]);
                // do not memoize output. `service.getSnapshot` reference remains stable preventing
                // `fields` from updating with current form state on value changes
                const serviceSnapshot = service.getSnapshot();
                // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future
                const QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null;
                // legacy `formFields` values required until form state is removed from state machine
                const fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);
                return Object.assign(Object.assign({}, rest), {
                    authStatus,
                    route,
                    totpSecretCode,
                    unverifiedContactMethods,
                    user,
                    /** @deprecated For internal use only */
                    fields, getTotpSecretCode: getTotpSecretCodeCallback(user), QRFields
                });
            }



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorInitMachine/useAuthenticatorInitMachine.mjs



            // only select `route` from machine context
            const routeSelector = ({ route }) => [route];
            function useAuthenticatorInitMachine(data) {
                const { route, initializeMachine } = useAuthenticator(routeSelector);
                const hasInitialized = react.useRef(false);
                react.useEffect(() => {
                    if (!hasInitialized.current && route === 'setup') {
                        initializeMachine(data);
                        hasInitialized.current = true;
                    }
                }, [initializeMachine, route, data]);
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/_virtual/_tslib.js
            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */

            var _tslib_assign = function () {
                _tslib_assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
                return _tslib_assign.apply(this, arguments);
            };

            function _tslib_rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function _tslib_values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function _tslib_read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            function _tslib_spreadArray(to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/types.js
            var types_ActionTypes;

            (function (ActionTypes) {
                ActionTypes["Start"] = "xstate.start";
                ActionTypes["Stop"] = "xstate.stop";
                ActionTypes["Raise"] = "xstate.raise";
                ActionTypes["Send"] = "xstate.send";
                ActionTypes["Cancel"] = "xstate.cancel";
                ActionTypes["NullEvent"] = "";
                ActionTypes["Assign"] = "xstate.assign";
                ActionTypes["After"] = "xstate.after";
                ActionTypes["DoneState"] = "done.state";
                ActionTypes["DoneInvoke"] = "done.invoke";
                ActionTypes["Log"] = "xstate.log";
                ActionTypes["Init"] = "xstate.init";
                ActionTypes["Invoke"] = "xstate.invoke";
                ActionTypes["ErrorExecution"] = "error.execution";
                ActionTypes["ErrorCommunication"] = "error.communication";
                ActionTypes["ErrorPlatform"] = "error.platform";
                ActionTypes["ErrorCustom"] = "xstate.error";
                ActionTypes["Update"] = "xstate.update";
                ActionTypes["Pure"] = "xstate.pure";
                ActionTypes["Choose"] = "xstate.choose";
            })(types_ActionTypes || (types_ActionTypes = {}));

            var types_SpecialTargets;

            (function (SpecialTargets) {
                SpecialTargets["Parent"] = "#_parent";
                SpecialTargets["Internal"] = "#_internal";
            })(types_SpecialTargets || (types_SpecialTargets = {}));



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/constants.js
            var STATE_DELIMITER = '.';
            var EMPTY_ACTIVITY_MAP = {};
            var DEFAULT_GUARD_TYPE = 'xstate.guard';
            var TARGETLESS_KEY = '';



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/actionTypes.js


            var start = types_ActionTypes.Start;
            var stop = types_ActionTypes.Stop;
            var raise = types_ActionTypes.Raise;
            var send = types_ActionTypes.Send;
            var cancel = types_ActionTypes.Cancel;
            var nullEvent = types_ActionTypes.NullEvent;
            var actionTypes_assign = types_ActionTypes.Assign;
            var after = types_ActionTypes.After;
            var doneState = types_ActionTypes.DoneState;
            var log = types_ActionTypes.Log;
            var init = types_ActionTypes.Init;
            var invoke = types_ActionTypes.Invoke;
            var errorExecution = types_ActionTypes.ErrorExecution;
            var errorPlatform = types_ActionTypes.ErrorPlatform;
            var actionTypes_error = types_ActionTypes.ErrorCustom;
            var update = types_ActionTypes.Update;
            var choose = types_ActionTypes.Choose;
            var pure = types_ActionTypes.Pure;



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/environment.js
            var IS_PRODUCTION = "production" === 'production';



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/utils.js






            var _a;
            function keys(value) {
                return Object.keys(value);
            }
            function matchesState(parentStateId, childStateId, delimiter) {
                if (delimiter === void 0) {
                    delimiter = STATE_DELIMITER;
                }

                var parentStateValue = toStateValue(parentStateId, delimiter);
                var childStateValue = toStateValue(childStateId, delimiter);

                if (isString(childStateValue)) {
                    if (isString(parentStateValue)) {
                        return childStateValue === parentStateValue;
                    } // Parent more specific than child


                    return false;
                }

                if (isString(parentStateValue)) {
                    return parentStateValue in childStateValue;
                }

                return Object.keys(parentStateValue).every(function (key) {
                    if (!(key in childStateValue)) {
                        return false;
                    }

                    return matchesState(parentStateValue[key], childStateValue[key]);
                });
            }
            function getEventType(event) {
                try {
                    return isString(event) || typeof event === 'number' ? "".concat(event) : event.type;
                } catch (e) {
                    throw new Error('Events must be strings or objects with a string event.type property.');
                }
            }
            function getActionType(action) {
                try {
                    return isString(action) || typeof action === 'number' ? "".concat(action) : utils_isFunction(action) ? action.name : action.type;
                } catch (e) {
                    throw new Error('Actions must be strings or objects with a string action.type property.');
                }
            }
            function toStatePath(stateId, delimiter) {
                try {
                    if (isArray(stateId)) {
                        return stateId;
                    }

                    return stateId.toString().split(delimiter);
                } catch (e) {
                    throw new Error("'".concat(stateId, "' is not a valid state path."));
                }
            }
            function isStateLike(state) {
                return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state && '_event' in state;
            }
            function toStateValue(stateValue, delimiter) {
                if (isStateLike(stateValue)) {
                    return stateValue.value;
                }

                if (isArray(stateValue)) {
                    return pathToStateValue(stateValue);
                }

                if (typeof stateValue !== 'string') {
                    return stateValue;
                }

                var statePath = toStatePath(stateValue, delimiter);
                return pathToStateValue(statePath);
            }
            function pathToStateValue(statePath) {
                if (statePath.length === 1) {
                    return statePath[0];
                }

                var value = {};
                var marker = value;

                for (var i = 0; i < statePath.length - 1; i++) {
                    if (i === statePath.length - 2) {
                        marker[statePath[i]] = statePath[i + 1];
                    } else {
                        marker[statePath[i]] = {};
                        marker = marker[statePath[i]];
                    }
                }

                return value;
            }
            function mapValues(collection, iteratee) {
                var result = {};
                var collectionKeys = Object.keys(collection);

                for (var i = 0; i < collectionKeys.length; i++) {
                    var key = collectionKeys[i];
                    result[key] = iteratee(collection[key], key, collection, i);
                }

                return result;
            }
            function mapFilterValues(collection, iteratee, predicate) {
                var e_1, _a;

                var result = {};

                try {
                    for (var _b = _tslib_values(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        var item = collection[key];

                        if (!predicate(item)) {
                            continue;
                        }

                        result[key] = iteratee(item, key, collection);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }

                return result;
            }
            /**
             * Retrieves a value at the given path.
             * @param props The deep path to the prop of the desired value
             */

            var path = function (props) {
                return function (object) {
                    var e_2, _a;

                    var result = object;

                    try {
                        for (var props_1 = _tslib_values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                            var prop = props_1_1.value;
                            result = result[prop];
                        }
                    } catch (e_2_1) {
                        e_2 = {
                            error: e_2_1
                        };
                    } finally {
                        try {
                            if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                        } finally {
                            if (e_2) throw e_2.error;
                        }
                    }

                    return result;
                };
            };
            /**
             * Retrieves a value at the given path via the nested accessor prop.
             * @param props The deep path to the prop of the desired value
             */

            function nestedPath(props, accessorProp) {
                return function (object) {
                    var e_3, _a;

                    var result = object;

                    try {
                        for (var props_2 = _tslib_values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
                            var prop = props_2_1.value;
                            result = result[accessorProp][prop];
                        }
                    } catch (e_3_1) {
                        e_3 = {
                            error: e_3_1
                        };
                    } finally {
                        try {
                            if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
                        } finally {
                            if (e_3) throw e_3.error;
                        }
                    }

                    return result;
                };
            }
            function toStatePaths(stateValue) {
                if (!stateValue) {
                    return [[]];
                }

                if (isString(stateValue)) {
                    return [[stateValue]];
                }

                var result = flatten(Object.keys(stateValue).map(function (key) {
                    var subStateValue = stateValue[key];

                    if (typeof subStateValue !== 'string' && (!subStateValue || !Object.keys(subStateValue).length)) {
                        return [[key]];
                    }

                    return toStatePaths(stateValue[key]).map(function (subPath) {
                        return [key].concat(subPath);
                    });
                }));
                return result;
            }
            function pathsToStateValue(paths) {
                var e_4, _a;

                var result = {};

                if (paths && paths.length === 1 && paths[0].length === 1) {
                    return paths[0][0];
                }

                try {
                    for (var paths_1 = __values(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
                        var currentPath = paths_1_1.value;
                        var marker = result; // tslint:disable-next-line:prefer-for-of

                        for (var i = 0; i < currentPath.length; i++) {
                            var subPath = currentPath[i];

                            if (i === currentPath.length - 2) {
                                marker[subPath] = currentPath[i + 1];
                                break;
                            }

                            marker[subPath] = marker[subPath] || {};
                            marker = marker[subPath];
                        }
                    }
                } catch (e_4_1) {
                    e_4 = {
                        error: e_4_1
                    };
                } finally {
                    try {
                        if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
                    } finally {
                        if (e_4) throw e_4.error;
                    }
                }

                return result;
            }
            function flatten(array) {
                var _a;

                return (_a = []).concat.apply(_a, _tslib_spreadArray([], _tslib_read(array), false));
            }
            function toArrayStrict(value) {
                if (isArray(value)) {
                    return value;
                }

                return [value];
            }
            function toArray(value) {
                if (value === undefined) {
                    return [];
                }

                return toArrayStrict(value);
            }
            function mapContext(mapper, context, _event) {
                var e_5, _a;

                if (utils_isFunction(mapper)) {
                    return mapper(context, _event.data);
                }

                var result = {};

                try {
                    for (var _b = _tslib_values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        var subMapper = mapper[key];

                        if (utils_isFunction(subMapper)) {
                            result[key] = subMapper(context, _event.data);
                        } else {
                            result[key] = subMapper;
                        }
                    }
                } catch (e_5_1) {
                    e_5 = {
                        error: e_5_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_5) throw e_5.error;
                    }
                }

                return result;
            }
            function isBuiltInEvent(eventType) {
                return /^(done|error)\./.test(eventType);
            }
            function isPromiseLike(value) {
                if (value instanceof Promise) {
                    return true;
                } // Check if shape matches the Promise/A+ specification for a "thenable".


                if (value !== null && (utils_isFunction(value) || typeof value === 'object') && utils_isFunction(value.then)) {
                    return true;
                }

                return false;
            }
            function isBehavior(value) {
                return value !== null && typeof value === 'object' && 'transition' in value && typeof value.transition === 'function';
            }
            function utils_partition(items, predicate) {
                var e_6, _a;

                var _b = _tslib_read([[], []], 2),
                    truthy = _b[0],
                    falsy = _b[1];

                try {
                    for (var items_1 = _tslib_values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;

                        if (predicate(item)) {
                            truthy.push(item);
                        } else {
                            falsy.push(item);
                        }
                    }
                } catch (e_6_1) {
                    e_6 = {
                        error: e_6_1
                    };
                } finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                    } finally {
                        if (e_6) throw e_6.error;
                    }
                }

                return [truthy, falsy];
            }
            function updateHistoryStates(hist, stateValue) {
                return mapValues(hist.states, function (subHist, key) {
                    if (!subHist) {
                        return undefined;
                    }

                    var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);

                    if (!subStateValue) {
                        return undefined;
                    }

                    return {
                        current: subStateValue,
                        states: updateHistoryStates(subHist, subStateValue)
                    };
                });
            }
            function updateHistoryValue(hist, stateValue) {
                return {
                    current: stateValue,
                    states: updateHistoryStates(hist, stateValue)
                };
            }
            function updateContext(context, _event, assignActions, state) {
                if (!IS_PRODUCTION) {
                    warn(!!context, 'Attempting to update undefined context');
                }

                var updatedContext = context ? assignActions.reduce(function (acc, assignAction) {
                    var e_7, _a;

                    var assignment = assignAction.assignment;
                    var meta = {
                        state: state,
                        action: assignAction,
                        _event: _event
                    };
                    var partialUpdate = {};

                    if (utils_isFunction(assignment)) {
                        partialUpdate = assignment(acc, _event.data, meta);
                    } else {
                        try {
                            for (var _b = _tslib_values(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var key = _c.value;
                                var propAssignment = assignment[key];
                                partialUpdate[key] = utils_isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
                            }
                        } catch (e_7_1) {
                            e_7 = {
                                error: e_7_1
                            };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            } finally {
                                if (e_7) throw e_7.error;
                            }
                        }
                    }

                    return Object.assign({}, acc, partialUpdate);
                }, context) : context;
                return updatedContext;
            } // tslint:disable-next-line:no-empty

            var warn = function () { };

            if (!IS_PRODUCTION) {
                warn = function (condition, message) {
                    var error = condition instanceof Error ? condition : undefined;

                    if (!error && condition) {
                        return;
                    }

                    if (console !== undefined) {
                        var args = ["Warning: ".concat(message)];

                        if (error) {
                            args.push(error);
                        } // tslint:disable-next-line:no-console


                        console.warn.apply(console, args);
                    }
                };
            }
            function isArray(value) {
                return Array.isArray(value);
            } // tslint:disable-next-line:ban-types

            function utils_isFunction(value) {
                return typeof value === 'function';
            }
            function isString(value) {
                return typeof value === 'string';
            }
            function toGuard(condition, guardMap) {
                if (!condition) {
                    return undefined;
                }

                if (isString(condition)) {
                    return {
                        type: DEFAULT_GUARD_TYPE,
                        name: condition,
                        predicate: guardMap ? guardMap[condition] : undefined
                    };
                }

                if (utils_isFunction(condition)) {
                    return {
                        type: DEFAULT_GUARD_TYPE,
                        name: condition.name,
                        predicate: condition
                    };
                }

                return condition;
            }
            function isObservable(value) {
                try {
                    return 'subscribe' in value && utils_isFunction(value.subscribe);
                } catch (e) {
                    return false;
                }
            }
            var symbolObservable = /*#__PURE__*/function () {
                return typeof Symbol === 'function' && Symbol.observable || '@@observable';
            }(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages

            var interopSymbols = (_a = {}, _a[symbolObservable] = function () {
                return this;
            }, _a[Symbol.observable] = function () {
                return this;
            }, _a);
            function isMachine(value) {
                return !!value && '__xstatenode' in value;
            }
            function isActor(value) {
                return !!value && typeof value.send === 'function';
            }
            var uniqueId = /*#__PURE__*/function () {
                var currentId = 0;
                return function () {
                    currentId++;
                    return currentId.toString(16);
                };
            }();
            function toEventObject(event, payload // id?: TEvent['type']
            ) {
                if (isString(event) || typeof event === 'number') {
                    return _tslib_assign({
                        type: event
                    }, payload);
                }

                return event;
            }
            function toSCXMLEvent(event, scxmlEvent) {
                if (!isString(event) && '$$type' in event && event.$$type === 'scxml') {
                    return event;
                }

                var eventObject = toEventObject(event);
                return _tslib_assign({
                    name: eventObject.type,
                    data: eventObject,
                    $$type: 'scxml',
                    type: 'external'
                }, scxmlEvent);
            }
            function toTransitionConfigArray(event, configLike) {
                var transitions = toArrayStrict(configLike).map(function (transitionLike) {
                    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string' || isMachine(transitionLike)) {
                        return {
                            target: transitionLike,
                            event: event
                        };
                    }

                    return _tslib_assign(_tslib_assign({}, transitionLike), {
                        event: event
                    });
                });
                return transitions;
            }
            function normalizeTarget(target) {
                if (target === undefined || target === TARGETLESS_KEY) {
                    return undefined;
                }

                return toArray(target);
            }
            function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
                if (!IS_PRODUCTION) {
                    var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : '';

                    if (originalError === currentError) {
                        // tslint:disable-next-line:no-console
                        console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
                    } else {
                        var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : ''; // tslint:disable-next-line:no-console

                        console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
                    }
                }
            }
            function evaluateGuard(machine, guard, context, _event, state) {
                var guards = machine.options.guards;
                var guardMeta = {
                    state: state,
                    cond: guard,
                    _event: _event
                }; // TODO: do not hardcode!

                if (guard.type === DEFAULT_GUARD_TYPE) {
                    return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
                }

                var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];

                if (!condFn) {
                    throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
                }

                return condFn(context, _event.data, guardMeta);
            }
            function toInvokeSource(src) {
                if (typeof src === 'string') {
                    return {
                        type: src
                    };
                }

                return src;
            }
            function toObserver(nextHandler, errorHandler, completionHandler) {
                var noop = function () { };

                var isObserver = typeof nextHandler === 'object';
                var self = isObserver ? nextHandler : null;
                return {
                    next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),
                    error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),
                    complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)
                };
            }
            function createInvokeId(stateNodeId, index) {
                return "".concat(stateNodeId, ":invocation[").concat(index, "]");
            }
            function isRaisableAction(action) {
                return (action.type === raise || action.type === send && action.to === types_SpecialTargets.Internal) && typeof action.delay !== 'number';
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/stateUtils.js



            var isLeafNode = function (stateNode) {
                return stateNode.type === 'atomic' || stateNode.type === 'final';
            };
            function getAllChildren(stateNode) {
                return Object.keys(stateNode.states).map(function (key) {
                    return stateNode.states[key];
                });
            }
            function getChildren(stateNode) {
                return getAllChildren(stateNode).filter(function (sn) {
                    return sn.type !== 'history';
                });
            }
            function getAllStateNodes(stateNode) {
                var stateNodes = [stateNode];

                if (isLeafNode(stateNode)) {
                    return stateNodes;
                }

                return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));
            }
            function getConfiguration(prevStateNodes, stateNodes) {
                var e_1, _a, e_2, _b, e_3, _c, e_4, _d;

                var prevConfiguration = new Set(prevStateNodes);
                var prevAdjList = getAdjList(prevConfiguration);
                var configuration = new Set(stateNodes);

                try {
                    // add all ancestors
                    for (var configuration_1 = _tslib_values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
                        var s = configuration_1_1.value;
                        var m = s.parent;

                        while (m && !configuration.has(m)) {
                            configuration.add(m);
                            m = m.parent;
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }

                var adjList = getAdjList(configuration);

                try {
                    // add descendants
                    for (var configuration_2 = _tslib_values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
                        var s = configuration_2_1.value; // if previously active, add existing child nodes

                        if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
                            if (prevAdjList.get(s)) {
                                prevAdjList.get(s).forEach(function (sn) {
                                    return configuration.add(sn);
                                });
                            } else {
                                s.initialStateNodes.forEach(function (sn) {
                                    return configuration.add(sn);
                                });
                            }
                        } else {
                            if (s.type === 'parallel') {
                                try {
                                    for (var _e = (e_3 = void 0, _tslib_values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                        var child = _f.value;

                                        if (!configuration.has(child)) {
                                            configuration.add(child);

                                            if (prevAdjList.get(child)) {
                                                prevAdjList.get(child).forEach(function (sn) {
                                                    return configuration.add(sn);
                                                });
                                            } else {
                                                child.initialStateNodes.forEach(function (sn) {
                                                    return configuration.add(sn);
                                                });
                                            }
                                        }
                                    }
                                } catch (e_3_1) {
                                    e_3 = {
                                        error: e_3_1
                                    };
                                } finally {
                                    try {
                                        if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
                                    } finally {
                                        if (e_3) throw e_3.error;
                                    }
                                }
                            }
                        }
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }

                try {
                    // add all ancestors
                    for (var configuration_3 = _tslib_values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
                        var s = configuration_3_1.value;
                        var m = s.parent;

                        while (m && !configuration.has(m)) {
                            configuration.add(m);
                            m = m.parent;
                        }
                    }
                } catch (e_4_1) {
                    e_4 = {
                        error: e_4_1
                    };
                } finally {
                    try {
                        if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);
                    } finally {
                        if (e_4) throw e_4.error;
                    }
                }

                return configuration;
            }

            function getValueFromAdj(baseNode, adjList) {
                var childStateNodes = adjList.get(baseNode);

                if (!childStateNodes) {
                    return {}; // todo: fix?
                }

                if (baseNode.type === 'compound') {
                    var childStateNode = childStateNodes[0];

                    if (childStateNode) {
                        if (isLeafNode(childStateNode)) {
                            return childStateNode.key;
                        }
                    } else {
                        return {};
                    }
                }

                var stateValue = {};
                childStateNodes.forEach(function (csn) {
                    stateValue[csn.key] = getValueFromAdj(csn, adjList);
                });
                return stateValue;
            }

            function getAdjList(configuration) {
                var e_5, _a;

                var adjList = new Map();

                try {
                    for (var configuration_4 = _tslib_values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
                        var s = configuration_4_1.value;

                        if (!adjList.has(s)) {
                            adjList.set(s, []);
                        }

                        if (s.parent) {
                            if (!adjList.has(s.parent)) {
                                adjList.set(s.parent, []);
                            }

                            adjList.get(s.parent).push(s);
                        }
                    }
                } catch (e_5_1) {
                    e_5 = {
                        error: e_5_1
                    };
                } finally {
                    try {
                        if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);
                    } finally {
                        if (e_5) throw e_5.error;
                    }
                }

                return adjList;
            }
            function getValue(rootNode, configuration) {
                var config = getConfiguration([rootNode], configuration);
                return getValueFromAdj(rootNode, getAdjList(config));
            }
            function has(iterable, item) {
                if (Array.isArray(iterable)) {
                    return iterable.some(function (member) {
                        return member === item;
                    });
                }

                if (iterable instanceof Set) {
                    return iterable.has(item);
                }

                return false; // TODO: fix
            }
            function nextEvents(configuration) {
                return _tslib_spreadArray([], _tslib_read(new Set(flatten(_tslib_spreadArray([], _tslib_read(configuration.map(function (sn) {
                    return sn.ownEvents;
                })), false)))), false);
            }
            function isInFinalState(configuration, stateNode) {
                if (stateNode.type === 'compound') {
                    return getChildren(stateNode).some(function (s) {
                        return s.type === 'final' && has(configuration, s);
                    });
                }

                if (stateNode.type === 'parallel') {
                    return getChildren(stateNode).every(function (sn) {
                        return isInFinalState(configuration, sn);
                    });
                }

                return false;
            }
            function getMeta(configuration) {
                if (configuration === void 0) {
                    configuration = [];
                }

                return configuration.reduce(function (acc, stateNode) {
                    if (stateNode.meta !== undefined) {
                        acc[stateNode.id] = stateNode.meta;
                    }

                    return acc;
                }, {});
            }
            function getTagsFromConfiguration(configuration) {
                return new Set(flatten(configuration.map(function (sn) {
                    return sn.tags;
                })));
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/actions.js








            var initEvent = /*#__PURE__*/toSCXMLEvent({
                type: init
            });
            function getActionFunction(actionType, actionFunctionMap) {
                return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;
            }
            function toActionObject(action, actionFunctionMap) {
                var actionObject;

                if (isString(action) || typeof action === 'number') {
                    var exec = getActionFunction(action, actionFunctionMap);

                    if (utils_isFunction(exec)) {
                        actionObject = {
                            type: action,
                            exec: exec
                        };
                    } else if (exec) {
                        actionObject = exec;
                    } else {
                        actionObject = {
                            type: action,
                            exec: undefined
                        };
                    }
                } else if (utils_isFunction(action)) {
                    actionObject = {
                        // Convert action to string if unnamed
                        type: action.name || action.toString(),
                        exec: action
                    };
                } else {
                    var exec = getActionFunction(action.type, actionFunctionMap);

                    if (utils_isFunction(exec)) {
                        actionObject = _tslib_assign(_tslib_assign({}, action), {
                            exec: exec
                        });
                    } else if (exec) {
                        var actionType = exec.type || action.type;
                        actionObject = _tslib_assign(_tslib_assign(_tslib_assign({}, exec), action), {
                            type: actionType
                        });
                    } else {
                        actionObject = action;
                    }
                }

                return actionObject;
            }
            var toActionObjects = function (action, actionFunctionMap) {
                if (!action) {
                    return [];
                }

                var actions = isArray(action) ? action : [action];
                return actions.map(function (subAction) {
                    return toActionObject(subAction, actionFunctionMap);
                });
            };
            function toActivityDefinition(action) {
                var actionObject = toActionObject(action);
                return _tslib_assign(_tslib_assign({
                    id: isString(action) ? action : actionObject.id
                }, actionObject), {
                    type: actionObject.type
                });
            }
            /**
             * Raises an event. This places the event in the internal event queue, so that
             * the event is immediately consumed by the machine in the current step.
             *
             * @param eventType The event to raise.
             */

            function actions_raise(event, options) {
                return {
                    type: raise,
                    event: typeof event === 'function' ? event : toEventObject(event),
                    delay: options ? options.delay : undefined,
                    id: options === null || options === void 0 ? void 0 : options.id
                };
            }
            function resolveRaise(action, ctx, _event, delaysMap) {
                var meta = {
                    _event: _event
                };
                var resolvedEvent = toSCXMLEvent(utils_isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
                var resolvedDelay;

                if (isString(action.delay)) {
                    var configDelay = delaysMap && delaysMap[action.delay];
                    resolvedDelay = utils_isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
                } else {
                    resolvedDelay = utils_isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
                }

                return _tslib_assign(_tslib_assign({}, action), {
                    type: raise,
                    _event: resolvedEvent,
                    delay: resolvedDelay
                });
            }
            /**
             * Sends an event. This returns an action that will be read by an interpreter to
             * send the event in the next step, after the current step is finished executing.
             *
             * @deprecated Use the `sendTo(...)` action creator instead.
             *
             * @param event The event to send.
             * @param options Options to pass into the send event:
             *  - `id` - The unique send event identifier (used with `cancel()`).
             *  - `delay` - The number of milliseconds to delay the sending of the event.
             *  - `to` - The target of this event (by default, the machine the event was sent from).
             */

            function actions_send(event, options) {
                return {
                    to: options ? options.to : undefined,
                    type: send,
                    event: utils_isFunction(event) ? event : toEventObject(event),
                    delay: options ? options.delay : undefined,
                    // TODO: don't auto-generate IDs here like that
                    // there is too big chance of the ID collision
                    id: options && options.id !== undefined ? options.id : utils_isFunction(event) ? event.name : getEventType(event)
                };
            }
            function resolveSend(action, ctx, _event, delaysMap) {
                var meta = {
                    _event: _event
                }; // TODO: helper function for resolving Expr

                var resolvedEvent = toSCXMLEvent(utils_isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
                var resolvedDelay;

                if (isString(action.delay)) {
                    var configDelay = delaysMap && delaysMap[action.delay];
                    resolvedDelay = utils_isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
                } else {
                    resolvedDelay = utils_isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
                }

                var resolvedTarget = utils_isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;
                return _tslib_assign(_tslib_assign({}, action), {
                    to: resolvedTarget,
                    _event: resolvedEvent,
                    event: resolvedEvent.data,
                    delay: resolvedDelay
                });
            }
            /**
             * Sends an event to this machine's parent.
             *
             * @param event The event to send to the parent machine.
             * @param options Options to pass into the send event.
             */

            function sendParent(event, options) {
                return actions_send(event, _tslib_assign(_tslib_assign({}, options), {
                    to: types_SpecialTargets.Parent
                }));
            }
            /**
             * Sends an event to an actor.
             *
             * @param actor The `ActorRef` to send the event to.
             * @param event The event to send, or an expression that evaluates to the event to send
             * @param options Send action options
             * @returns An XState send action object
             */

            function sendTo(actor, event, options) {
                return actions_send(event, __assign(__assign({}, options), {
                    to: actor
                }));
            }
            /**
             * Sends an update event to this machine's parent.
             */

            function sendUpdate() {
                return sendParent(update);
            }
            /**
             * Sends an event back to the sender of the original event.
             *
             * @param event The event to send back to the sender
             * @param options Options to pass into the send event
             */

            function respond(event, options) {
                return actions_send(event, __assign(__assign({}, options), {
                    to: function (_, __, _a) {
                        var _event = _a._event;
                        return _event.origin; // TODO: handle when _event.origin is undefined
                    }
                }));
            }

            var defaultLogExpr = function (context, event) {
                return {
                    context: context,
                    event: event
                };
            };
            /**
             *
             * @param expr The expression function to evaluate which will be logged.
             *  Takes in 2 arguments:
             *  - `ctx` - the current state context
             *  - `event` - the event that caused this action to be executed.
             * @param label The label to give to the logged expression.
             */


            function actions_log(expr, label) {
                if (expr === void 0) {
                    expr = defaultLogExpr;
                }

                return {
                    type: log$1,
                    label: label,
                    expr: expr
                };
            }
            var resolveLog = function (action, ctx, _event) {
                return _tslib_assign(_tslib_assign({}, action), {
                    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {
                        _event: _event
                    })
                });
            };
            /**
             * Cancels an in-flight `send(...)` action. A canceled sent action will not
             * be executed, nor will its event be sent, unless it has already been sent
             * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
             *
             * @param sendId The `id` of the `send(...)` action to cancel.
             */

            var actions_cancel = function (sendId) {
                return {
                    type: cancel,
                    sendId: sendId
                };
            };
            /**
             * Starts an activity.
             *
             * @param activity The activity to start.
             */

            function actions_start(activity) {
                var activityDef = toActivityDefinition(activity);
                return {
                    type: types_ActionTypes.Start,
                    activity: activityDef,
                    exec: undefined
                };
            }
            /**
             * Stops an activity.
             *
             * @param actorRef The activity to stop.
             */

            function actions_stop(actorRef) {
                var activity = utils_isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);
                return {
                    type: types_ActionTypes.Stop,
                    activity: activity,
                    exec: undefined
                };
            }
            function resolveStop(action, context, _event) {
                var actorRefOrString = utils_isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;
                var resolvedActorRef = typeof actorRefOrString === 'string' ? {
                    id: actorRefOrString
                } : actorRefOrString;
                var actionObject = {
                    type: types_ActionTypes.Stop,
                    activity: resolvedActorRef
                };
                return actionObject;
            }
            /**
             * Updates the current context of the machine.
             *
             * @param assignment An object that represents the partial context to update.
             */

            var actions_assign = function (assignment) {
                return {
                    type: actionTypes_assign,
                    assignment: assignment
                };
            };
            function isActionObject(action) {
                return typeof action === 'object' && 'type' in action;
            }
            /**
             * Returns an event type that represents an implicit event that
             * is sent after the specified `delay`.
             *
             * @param delayRef The delay in milliseconds
             * @param id The state node ID where this event is handled
             */

            function actions_after(delayRef, id) {
                var idSuffix = id ? "#".concat(id) : '';
                return "".concat(types_ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
            }
            /**
             * Returns an event that represents that a final state node
             * has been reached in the parent state node.
             *
             * @param id The final state node's parent state node `id`
             * @param data The data to pass into the event
             */

            function done(id, data) {
                var type = "".concat(types_ActionTypes.DoneState, ".").concat(id);
                var eventObject = {
                    type: type,
                    data: data
                };

                eventObject.toString = function () {
                    return type;
                };

                return eventObject;
            }
            /**
             * Returns an event that represents that an invoked service has terminated.
             *
             * An invoked service is terminated when it has reached a top-level final state node,
             * but not when it is canceled.
             *
             * @param id The final state node ID
             * @param data The data to pass into the event
             */

            function actions_doneInvoke(id, data) {
                var type = "".concat(types_ActionTypes.DoneInvoke, ".").concat(id);
                var eventObject = {
                    type: type,
                    data: data
                };

                eventObject.toString = function () {
                    return type;
                };

                return eventObject;
            }
            function actions_error(id, data) {
                var type = "".concat(types_ActionTypes.ErrorPlatform, ".").concat(id);
                var eventObject = {
                    type: type,
                    data: data
                };

                eventObject.toString = function () {
                    return type;
                };

                return eventObject;
            }
            function actions_pure(getActions) {
                return {
                    type: ActionTypes.Pure,
                    get: getActions
                };
            }
            /**
             * Forwards (sends) an event to a specified service.
             *
             * @param target The target service to forward the event to.
             * @param options Options to pass into the send action creator.
             */

            function forwardTo(target, options) {
                if (!IS_PRODUCTION && (!target || typeof target === 'function')) {
                    var originalTarget_1 = target;

                    target = function () {
                        var args = [];

                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }

                        var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, _tslib_spreadArray([], _tslib_read(args), false)) : originalTarget_1;

                        if (!resolvedTarget) {
                            throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
                        }

                        return resolvedTarget;
                    };
                }

                return actions_send(function (_, event) {
                    return event;
                }, _tslib_assign(_tslib_assign({}, options), {
                    to: target
                }));
            }
            /**
             * Escalates an error by sending it as an event to this machine's parent.
             *
             * @param errorData The error data to send, or the expression function that
             * takes in the `context`, `event`, and `meta`, and returns the error data to send.
             * @param options Options to pass into the send action creator.
             */

            function escalate(errorData, options) {
                return sendParent(function (context, event, meta) {
                    return {
                        type: error$1,
                        data: isFunction(errorData) ? errorData(context, event, meta) : errorData
                    };
                }, __assign(__assign({}, options), {
                    to: SpecialTargets.Parent
                }));
            }
            function actions_choose(conds) {
                return {
                    type: types_ActionTypes.Choose,
                    conds: conds
                };
            }

            var pluckAssigns = function (actionBlocks) {
                var e_1, _a;

                var assignActions = [];

                try {
                    for (var actionBlocks_1 = _tslib_values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
                        var block = actionBlocks_1_1.value;
                        var i = 0;

                        while (i < block.actions.length) {
                            if (block.actions[i].type === actionTypes_assign) {
                                assignActions.push(block.actions[i]);
                                block.actions.splice(i, 1);
                                continue;
                            }

                            i++;
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }

                return assignActions;
            };

            function resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {
                if (preserveActionOrder === void 0) {
                    preserveActionOrder = false;
                }

                var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);
                var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;
                var preservedContexts = preserveActionOrder ? [currentContext] : undefined;
                var deferredToBlockEnd = [];

                function handleAction(blockType, actionObject) {
                    var _a;

                    switch (actionObject.type) {
                        case raise:
                            {
                                var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);

                                if (predictableExec && typeof raisedAction.delay === 'number') {
                                    predictableExec(raisedAction, updatedContext, _event);
                                }

                                return raisedAction;
                            }

                        case send:
                            var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init

                            if (!IS_PRODUCTION) {
                                var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here

                                warn(!isString(configuredDelay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length
                                    "No delay reference for delay expression '".concat(configuredDelay, "' was found on machine '").concat(machine.id, "'"));
                            }

                            if (predictableExec && sendAction.to !== types_SpecialTargets.Internal) {
                                if (blockType === 'entry') {
                                    deferredToBlockEnd.push(sendAction);
                                } else {
                                    predictableExec(sendAction, updatedContext, _event);
                                }
                            }

                            return sendAction;

                        case log:
                            {
                                var resolved = resolveLog(actionObject, updatedContext, _event);
                                predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
                                return resolved;
                            }

                        case choose:
                            {
                                var chooseAction = actionObject;
                                var matchedActions = (_a = chooseAction.conds.find(function (condition) {
                                    var guard = toGuard(condition.cond, machine.options.guards);
                                    return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);
                                })) === null || _a === void 0 ? void 0 : _a.actions;

                                if (!matchedActions) {
                                    return [];
                                }

                                var _b = _tslib_read(resolveActions(machine, currentState, updatedContext, _event, [{
                                    type: blockType,
                                    actions: toActionObjects(toArray(matchedActions), machine.options.actions)
                                }], predictableExec, preserveActionOrder), 2),
                                    resolvedActionsFromChoose = _b[0],
                                    resolvedContextFromChoose = _b[1];

                                updatedContext = resolvedContextFromChoose;
                                preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
                                return resolvedActionsFromChoose;
                            }

                        case pure:
                            {
                                var matchedActions = actionObject.get(updatedContext, _event.data);

                                if (!matchedActions) {
                                    return [];
                                }

                                var _c = _tslib_read(resolveActions(machine, currentState, updatedContext, _event, [{
                                    type: blockType,
                                    actions: toActionObjects(toArray(matchedActions), machine.options.actions)
                                }], predictableExec, preserveActionOrder), 2),
                                    resolvedActionsFromPure = _c[0],
                                    resolvedContext = _c[1];

                                updatedContext = resolvedContext;
                                preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
                                return resolvedActionsFromPure;
                            }

                        case stop:
                            {
                                var resolved = resolveStop(actionObject, updatedContext, _event);
                                predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);
                                return resolved;
                            }

                        case actionTypes_assign:
                            {
                                updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);
                                preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
                                break;
                            }

                        default:
                            var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
                            var exec_1 = resolvedActionObject.exec;

                            if (predictableExec) {
                                predictableExec(resolvedActionObject, updatedContext, _event);
                            } else if (exec_1 && preservedContexts) {
                                var contextIndex_1 = preservedContexts.length - 1;

                                var wrapped = _tslib_assign(_tslib_assign({}, resolvedActionObject), {
                                    exec: function (_ctx) {
                                        var args = [];

                                        for (var _i = 1; _i < arguments.length; _i++) {
                                            args[_i - 1] = arguments[_i];
                                        }

                                        exec_1.apply(void 0, _tslib_spreadArray([preservedContexts[contextIndex_1]], _tslib_read(args), false));
                                    }
                                });

                                resolvedActionObject = wrapped;
                            }

                            return resolvedActionObject;
                    }
                }

                function processBlock(block) {
                    var e_2, _a;

                    var resolvedActions = [];

                    try {
                        for (var _b = _tslib_values(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var action = _c.value;
                            var resolved = handleAction(block.type, action);

                            if (resolved) {
                                resolvedActions = resolvedActions.concat(resolved);
                            }
                        }
                    } catch (e_2_1) {
                        e_2 = {
                            error: e_2_1
                        };
                    } finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        } finally {
                            if (e_2) throw e_2.error;
                        }
                    }

                    deferredToBlockEnd.forEach(function (action) {
                        predictableExec(action, updatedContext, _event);
                    });
                    deferredToBlockEnd.length = 0;
                    return resolvedActions;
                }

                var resolvedActions = flatten(actionBlocks.map(processBlock));
                return [resolvedActions, updatedContext];
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/State.js







            function stateValuesEqual(a, b) {
                if (a === b) {
                    return true;
                }

                if (a === undefined || b === undefined) {
                    return false;
                }

                if (isString(a) || isString(b)) {
                    return a === b;
                }

                var aKeys = Object.keys(a);
                var bKeys = Object.keys(b);
                return aKeys.length === bKeys.length && aKeys.every(function (key) {
                    return stateValuesEqual(a[key], b[key]);
                });
            }
            function isStateConfig(state) {
                if (typeof state !== 'object' || state === null) {
                    return false;
                }

                return 'value' in state && '_event' in state;
            }
            /**
             * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.
             */

            var isState = (/* unused pure expression or super */ null && (isStateConfig));
            function bindActionToState(action, state) {
                var exec = action.exec;

                var boundAction = _tslib_assign(_tslib_assign({}, action), {
                    exec: exec !== undefined ? function () {
                        return exec(state.context, state.event, {
                            action: action,
                            state: state,
                            _event: state._event
                        });
                    } : undefined
                });

                return boundAction;
            }

            var State =
                /*#__PURE__*/

                /** @class */
                function () {
                    /**
                     * Creates a new State instance.
                     * @param value The state value
                     * @param context The extended state
                     * @param historyValue The tree representing historical values of the state nodes
                     * @param history The previous state
                     * @param actions An array of action objects to execute as side-effects
                     * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).
                     * @param meta
                     * @param events Internal event queue. Should be empty with run-to-completion semantics.
                     * @param configuration
                     */
                    function State(config) {
                        var _this = this;

                        var _a;

                        this.actions = [];
                        this.activities = EMPTY_ACTIVITY_MAP;
                        this.meta = {};
                        this.events = [];
                        this.value = config.value;
                        this.context = config.context;
                        this._event = config._event;
                        this._sessionid = config._sessionid;
                        this.event = this._event.data;
                        this.historyValue = config.historyValue;
                        this.history = config.history;
                        this.actions = config.actions || [];
                        this.activities = config.activities || EMPTY_ACTIVITY_MAP;
                        this.meta = getMeta(config.configuration);
                        this.events = config.events || [];
                        this.matches = this.matches.bind(this);
                        this.toStrings = this.toStrings.bind(this);
                        this.configuration = config.configuration;
                        this.transitions = config.transitions;
                        this.children = config.children;
                        this.done = !!config.done;
                        this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();
                        this.machine = config.machine;
                        Object.defineProperty(this, 'nextEvents', {
                            get: function () {
                                return nextEvents(_this.configuration);
                            }
                        });
                    }
                    /**
                     * Creates a new State instance for the given `stateValue` and `context`.
                     * @param stateValue
                     * @param context
                     */


                    State.from = function (stateValue, context) {
                        if (stateValue instanceof State) {
                            if (stateValue.context !== context) {
                                return new State({
                                    value: stateValue.value,
                                    context: context,
                                    _event: stateValue._event,
                                    _sessionid: null,
                                    historyValue: stateValue.historyValue,
                                    history: stateValue.history,
                                    actions: [],
                                    activities: stateValue.activities,
                                    meta: {},
                                    events: [],
                                    configuration: [],
                                    transitions: [],
                                    children: {}
                                });
                            }

                            return stateValue;
                        }

                        var _event = initEvent;
                        return new State({
                            value: stateValue,
                            context: context,
                            _event: _event,
                            _sessionid: null,
                            historyValue: undefined,
                            history: undefined,
                            actions: [],
                            activities: undefined,
                            meta: undefined,
                            events: [],
                            configuration: [],
                            transitions: [],
                            children: {}
                        });
                    };
                    /**
                     * Creates a new State instance for the given `config`.
                     * @param config The state config
                     */


                    State.create = function (config) {
                        return new State(config);
                    };
                    /**
                     * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).
                     * @param stateValue
                     * @param context
                     */


                    State.inert = function (stateValue, context) {
                        if (stateValue instanceof State) {
                            if (!stateValue.actions.length) {
                                return stateValue;
                            }

                            var _event = initEvent;
                            return new State({
                                value: stateValue.value,
                                context: context,
                                _event: _event,
                                _sessionid: null,
                                historyValue: stateValue.historyValue,
                                history: stateValue.history,
                                activities: stateValue.activities,
                                configuration: stateValue.configuration,
                                transitions: [],
                                children: {}
                            });
                        }

                        return State.from(stateValue, context);
                    };
                    /**
                     * Returns an array of all the string leaf state node paths.
                     * @param stateValue
                     * @param delimiter The character(s) that separate each subpath in the string state node path.
                     */


                    State.prototype.toStrings = function (stateValue, delimiter) {
                        var _this = this;

                        if (stateValue === void 0) {
                            stateValue = this.value;
                        }

                        if (delimiter === void 0) {
                            delimiter = '.';
                        }

                        if (isString(stateValue)) {
                            return [stateValue];
                        }

                        var valueKeys = Object.keys(stateValue);
                        return valueKeys.concat.apply(valueKeys, _tslib_spreadArray([], _tslib_read(valueKeys.map(function (key) {
                            return _this.toStrings(stateValue[key], delimiter).map(function (s) {
                                return key + delimiter + s;
                            });
                        })), false));
                    };

                    State.prototype.toJSON = function () {
                        var _a = this;
                        _a.configuration;
                        _a.transitions;
                        var tags = _a.tags;
                        _a.machine;
                        var jsonValues = _tslib_rest(_a, ["configuration", "transitions", "tags", "machine"]);

                        return _tslib_assign(_tslib_assign({}, jsonValues), {
                            tags: Array.from(tags)
                        });
                    };

                    State.prototype.matches = function (parentStateValue) {
                        return matchesState(parentStateValue, this.value);
                    };
                    /**
                     * Whether the current state configuration has a state node with the specified `tag`.
                     * @param tag
                     */


                    State.prototype.hasTag = function (tag) {
                        return this.tags.has(tag);
                    };
                    /**
                     * Determines whether sending the `event` will cause a non-forbidden transition
                     * to be selected, even if the transitions have no actions nor
                     * change the state value.
                     *
                     * @param event The event to test
                     * @returns Whether the event will cause a transition
                     */


                    State.prototype.can = function (event) {
                        var _a;

                        if (IS_PRODUCTION) {
                            warn(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
                        }

                        var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
                        return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
                            transitionData.transitions.some(function (t) {
                                return t.target !== undefined || t.actions.length;
                            });
                    };

                    return State;
                }();



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/scheduler.js


            var defaultOptions = {
                deferEvents: false
            };

            var Scheduler =
                /*#__PURE__*/

                /** @class */
                function () {
                    function Scheduler(options) {
                        this.processingEvent = false;
                        this.queue = [];
                        this.initialized = false;
                        this.options = _tslib_assign(_tslib_assign({}, defaultOptions), options);
                    }

                    Scheduler.prototype.initialize = function (callback) {
                        this.initialized = true;

                        if (callback) {
                            if (!this.options.deferEvents) {
                                this.schedule(callback);
                                return;
                            }

                            this.process(callback);
                        }

                        this.flushEvents();
                    };

                    Scheduler.prototype.schedule = function (task) {
                        if (!this.initialized || this.processingEvent) {
                            this.queue.push(task);
                            return;
                        }

                        if (this.queue.length !== 0) {
                            throw new Error('Event queue should be empty when it is not processing events');
                        }

                        this.process(task);
                        this.flushEvents();
                    };

                    Scheduler.prototype.clear = function () {
                        this.queue = [];
                    };

                    Scheduler.prototype.flushEvents = function () {
                        var nextCallback = this.queue.shift();

                        while (nextCallback) {
                            this.process(nextCallback);
                            nextCallback = this.queue.shift();
                        }
                    };

                    Scheduler.prototype.process = function (callback) {
                        this.processingEvent = true;

                        try {
                            callback();
                        } catch (e) {
                            // there is no use to keep the future events
                            // as the situation is not anymore the same
                            this.clear();
                            throw e;
                        } finally {
                            this.processingEvent = false;
                        }
                    };

                    return Scheduler;
                }();



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/serviceScope.js
            /**
             * Maintains a stack of the current service in scope.
             * This is used to provide the correct service to spawn().
             */
            var serviceStack = [];
            var provide = function (service, fn) {
                serviceStack.push(service);
                var result = fn(service);
                serviceStack.pop();
                return result;
            };
            var consume = function (fn) {
                return fn(serviceStack[serviceStack.length - 1]);
            };



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/Actor.js




            function createNullActor(id) {
                var _a;

                return _a = {
                    id: id,
                    send: function () {
                        return void 0;
                    },
                    subscribe: function () {
                        return {
                            unsubscribe: function () {
                                return void 0;
                            }
                        };
                    },
                    getSnapshot: function () {
                        return undefined;
                    },
                    toJSON: function () {
                        return {
                            id: id
                        };
                    }
                }, _a[symbolObservable] = function () {
                    return this;
                }, _a;
            }
            /**
             * Creates a deferred actor that is able to be invoked given the provided
             * invocation information in its `.meta` value.
             *
             * @param invokeDefinition The meta information needed to invoke the actor.
             */

            function createInvocableActor(invokeDefinition, machine, context, _event) {
                var _a;

                var invokeSrc = toInvokeSource(invokeDefinition.src);
                var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
                var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;
                var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore

                tempActor.meta = invokeDefinition;
                return tempActor;
            }
            function createDeferredActor(entity, id, data) {
                var tempActor = createNullActor(id); // @ts-ignore

                tempActor.deferred = true;

                if (isMachine(entity)) {
                    // "mute" the existing service scope so potential spawned actors within the `.initialState` stay deferred here
                    var initialState_1 = tempActor.state = provide(undefined, function () {
                        return (data ? entity.withContext(data) : entity).initialState;
                    });

                    tempActor.getSnapshot = function () {
                        return initialState_1;
                    };
                }

                return tempActor;
            }
            function Actor_isActor(item) {
                try {
                    return typeof item.send === 'function';
                } catch (e) {
                    return false;
                }
            }
            function isSpawnedActor(item) {
                return Actor_isActor(item) && 'id' in item;
            } // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now

            function toActorRef(actorRefLike) {
                var _a;

                return _tslib_assign((_a = {
                    subscribe: function () {
                        return {
                            unsubscribe: function () {
                                return void 0;
                            }
                        };
                    },
                    id: 'anonymous',
                    getSnapshot: function () {
                        return undefined;
                    }
                }, _a[symbolObservable] = function () {
                    return this;
                }, _a), actorRefLike);
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/registry.js
            var children = /*#__PURE__*/new Map();
            var sessionIdIndex = 0;
            var registry = {
                bookId: function () {
                    return "x:".concat(sessionIdIndex++);
                },
                register: function (id, actor) {
                    children.set(id, actor);
                    return id;
                },
                get: function (id) {
                    return children.get(id);
                },
                free: function (id) {
                    children.delete(id);
                }
            };



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/devTools.js


            function getGlobal() {
                if (typeof globalThis !== 'undefined') {
                    return globalThis;
                }

                if (typeof self !== 'undefined') {
                    return self;
                }

                if (typeof window !== 'undefined') {
                    return window;
                }

                if (typeof __webpack_require__.g !== 'undefined') {
                    return __webpack_require__.g;
                }

                if (!IS_PRODUCTION) {
                    console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
                }
            }

            function getDevTools() {
                var global = getGlobal();

                if (global && '__xstate__' in global) {
                    return global.__xstate__;
                }

                return undefined;
            }

            function registerService(service) {
                if (!getGlobal()) {
                    return;
                }

                var devTools = getDevTools();

                if (devTools) {
                    devTools.register(service);
                }
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/behaviors.js




            /**
             * Returns an actor behavior from a reducer and its initial state.
             *
             * @param transition The pure reducer that returns the next state given the current state and event.
             * @param initialState The initial state of the reducer.
             * @returns An actor behavior
             */

            function fromReducer(transition, initialState) {
                return {
                    transition: transition,
                    initialState: initialState
                };
            }
            function fromPromise(promiseFn) {
                var initialState = {
                    error: undefined,
                    data: undefined,
                    status: 'pending'
                };
                return {
                    transition: function (state, event, _a) {
                        var parent = _a.parent,
                            id = _a.id,
                            observers = _a.observers;

                        switch (event.type) {
                            case 'fulfill':
                                parent === null || parent === void 0 ? void 0 : parent.send(doneInvoke(id, event.data));
                                return {
                                    error: undefined,
                                    data: event.data,
                                    status: 'fulfilled'
                                };

                            case 'reject':
                                parent === null || parent === void 0 ? void 0 : parent.send(error(id, event.error));
                                observers.forEach(function (observer) {
                                    observer.error(event.error);
                                });
                                return {
                                    error: event.error,
                                    data: undefined,
                                    status: 'rejected'
                                };

                            default:
                                return state;
                        }
                    },
                    initialState: initialState,
                    start: function (_a) {
                        var self = _a.self;
                        promiseFn().then(function (data) {
                            self.send({
                                type: 'fulfill',
                                data: data
                            });
                        }, function (reason) {
                            self.send({
                                type: 'reject',
                                error: reason
                            });
                        });
                        return initialState;
                    }
                };
            }
            function spawnBehavior(behavior, options) {
                if (options === void 0) {
                    options = {};
                }

                var state = behavior.initialState;
                var observers = new Set();
                var mailbox = [];
                var flushing = false;

                var flush = function () {
                    if (flushing) {
                        return;
                    }

                    flushing = true;

                    while (mailbox.length > 0) {
                        var event_1 = mailbox.shift();
                        state = behavior.transition(state, event_1, actorCtx);
                        observers.forEach(function (observer) {
                            return observer.next(state);
                        });
                    }

                    flushing = false;
                };

                var actor = toActorRef({
                    id: options.id,
                    send: function (event) {
                        mailbox.push(event);
                        flush();
                    },
                    getSnapshot: function () {
                        return state;
                    },
                    subscribe: function (next, handleError, complete) {
                        var observer = toObserver(next, handleError, complete);
                        observers.add(observer);
                        observer.next(state);
                        return {
                            unsubscribe: function () {
                                observers.delete(observer);
                            }
                        };
                    }
                });
                var actorCtx = {
                    parent: options.parent,
                    self: actor,
                    id: options.id || 'anonymous',
                    observers: observers
                };
                state = behavior.start ? behavior.start(actorCtx) : state;
                return actor;
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/interpreter.js














            var DEFAULT_SPAWN_OPTIONS = {
                sync: false,
                autoForward: false
            };
            var InterpreterStatus;

            (function (InterpreterStatus) {
                InterpreterStatus[InterpreterStatus["NotStarted"] = 0] = "NotStarted";
                InterpreterStatus[InterpreterStatus["Running"] = 1] = "Running";
                InterpreterStatus[InterpreterStatus["Stopped"] = 2] = "Stopped";
            })(InterpreterStatus || (InterpreterStatus = {}));

            var Interpreter =
                /*#__PURE__*/

                /** @class */
                function () {
                    /**
                     * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.
                     *
                     * @param machine The machine to be interpreted
                     * @param options Interpreter options
                     */
                    function Interpreter(machine, options) {
                        if (options === void 0) {
                            options = Interpreter.defaultOptions;
                        }

                        var _this = this;

                        this.machine = machine;
                        this.delayedEventsMap = {};
                        this.listeners = new Set();
                        this.contextListeners = new Set();
                        this.stopListeners = new Set();
                        this.doneListeners = new Set();
                        this.eventListeners = new Set();
                        this.sendListeners = new Set();
                        /**
                         * Whether the service is started.
                         */

                        this.initialized = false;
                        this.status = InterpreterStatus.NotStarted;
                        this.children = new Map();
                        this.forwardTo = new Set();
                        this._outgoingQueue = [];
                        /**
                         * Alias for Interpreter.prototype.start
                         */

                        this.init = this.start;
                        /**
                         * Sends an event to the running interpreter to trigger a transition.
                         *
                         * An array of events (batched) can be sent as well, which will send all
                         * batched events to the running interpreter. The listeners will be
                         * notified only **once** when all events are processed.
                         *
                         * @param event The event(s) to send
                         */

                        this.send = function (event, payload) {
                            if (isArray(event)) {
                                _this.batch(event);

                                return _this.state;
                            }

                            var _event = toSCXMLEvent(toEventObject(event, payload));

                            if (_this.status === InterpreterStatus.Stopped) {
                                // do nothing
                                if (!IS_PRODUCTION) {
                                    warn(false, "Event \"".concat(_event.name, "\" was sent to stopped service \"").concat(_this.machine.id, "\". This service has already reached its final state, and will not transition.\nEvent: ").concat(JSON.stringify(_event.data)));
                                }

                                return _this.state;
                            }

                            if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
                                throw new Error("Event \"".concat(_event.name, "\" was sent to uninitialized service \"").concat(_this.machine.id // tslint:disable-next-line:max-line-length
                                    , "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ").concat(JSON.stringify(_event.data)));
                            }

                            _this.scheduler.schedule(function () {
                                // Forward copy of event to child actors
                                _this.forward(_event);

                                var nextState = _this._nextState(_event);

                                _this.update(nextState, _event);
                            });

                            return _this._state; // TODO: deprecate (should return void)
                            // tslint:disable-next-line:semicolon
                        };

                        this.sendTo = function (event, to, immediate) {
                            var isParent = _this.parent && (to === types_SpecialTargets.Parent || _this.parent.id === to);
                            var target = isParent ? _this.parent : isString(to) ? to === types_SpecialTargets.Internal ? _this : _this.children.get(to) || registry.get(to) : isActor(to) ? to : undefined;

                            if (!target) {
                                if (!isParent) {
                                    throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
                                } // tslint:disable-next-line:no-console


                                if (!IS_PRODUCTION) {
                                    warn(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event.type));
                                }

                                return;
                            }

                            if ('machine' in target) {
                                // perhaps those events should be rejected in the parent
                                // but atm it doesn't have easy access to all of the information that is required to do it reliably
                                if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state
                                    _this.state.done) {
                                    // Send SCXML events to machines
                                    var scxmlEvent = _tslib_assign(_tslib_assign({}, event), {
                                        name: event.name === actionTypes_error ? "".concat(actions_error(_this.id)) : event.name,
                                        origin: _this.sessionId
                                    });

                                    if (!immediate && _this.machine.config.predictableActionArguments) {
                                        _this._outgoingQueue.push([target, scxmlEvent]);
                                    } else {
                                        target.send(scxmlEvent);
                                    }
                                }
                            } else {
                                // Send normal events to other targets
                                if (!immediate && _this.machine.config.predictableActionArguments) {
                                    _this._outgoingQueue.push([target, event.data]);
                                } else {
                                    target.send(event.data);
                                }
                            }
                        };

                        this._exec = function (action, context, _event, actionFunctionMap) {
                            if (actionFunctionMap === void 0) {
                                actionFunctionMap = _this.machine.options.actions;
                            }

                            var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);
                            var exec = utils_isFunction(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;

                            if (exec) {
                                try {
                                    return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {
                                        action: action,
                                        state: _this.state,
                                        _event: _event
                                    } : {
                                        action: action,
                                        _event: _event
                                    });
                                } catch (err) {
                                    if (_this.parent) {
                                        _this.parent.send({
                                            type: 'xstate.error',
                                            data: err
                                        });
                                    }

                                    throw err;
                                }
                            }

                            switch (action.type) {
                                case raise:
                                    {
                                        // if raise action reached the interpreter then it's a delayed one
                                        var sendAction_1 = action;

                                        _this.defer(sendAction_1);

                                        break;
                                    }

                                case send:
                                    var sendAction = action;

                                    if (typeof sendAction.delay === 'number') {
                                        _this.defer(sendAction);

                                        return;
                                    } else {
                                        if (sendAction.to) {
                                            _this.sendTo(sendAction._event, sendAction.to, _event === initEvent);
                                        } else {
                                            _this.send(sendAction._event);
                                        }
                                    }

                                    break;

                                case cancel:
                                    _this.cancel(action.sendId);

                                    break;

                                case start:
                                    {
                                        if (_this.status !== InterpreterStatus.Running) {
                                            return;
                                        }

                                        var activity = action.activity; // If the activity will be stopped right after it's started
                                        // (such as in transient states)
                                        // don't bother starting the activity.

                                        if ( // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
                                            !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {
                                            break;
                                        } // Invoked services


                                        if (activity.type === types_ActionTypes.Invoke) {
                                            var invokeSource = toInvokeSource(activity.src);
                                            var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;
                                            var id = activity.id,
                                                data = activity.data;

                                            if (!IS_PRODUCTION) {
                                                warn(!('forward' in activity), // tslint:disable-next-line:max-line-length
                                                    "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead.");
                                            }

                                            var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;

                                            if (!serviceCreator) {
                                                // tslint:disable-next-line:no-console
                                                if (!IS_PRODUCTION) {
                                                    warn(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                                                }

                                                return;
                                            }

                                            var resolvedData = data ? mapContext(data, context, _event) : undefined;

                                            if (typeof serviceCreator === 'string') {
                                                // TODO: warn
                                                return;
                                            }

                                            var source = utils_isFunction(serviceCreator) ? serviceCreator(context, _event.data, {
                                                data: resolvedData,
                                                src: invokeSource,
                                                meta: activity.meta
                                            }) : serviceCreator;

                                            if (!source) {
                                                // TODO: warn?
                                                return;
                                            }

                                            var options = void 0;

                                            if (isMachine(source)) {
                                                source = resolvedData ? source.withContext(resolvedData) : source;
                                                options = {
                                                    autoForward: autoForward
                                                };
                                            }

                                            _this.spawn(source, id, options);
                                        } else {
                                            _this.spawnActivity(activity);
                                        }

                                        break;
                                    }

                                case stop:
                                    {
                                        _this.stopChild(action.activity.id);

                                        break;
                                    }

                                case log:
                                    var _a = action,
                                        label = _a.label,
                                        value = _a.value;

                                    if (label) {
                                        _this.logger(label, value);
                                    } else {
                                        _this.logger(value);
                                    }

                                    break;

                                default:
                                    if (!IS_PRODUCTION) {
                                        warn(false, "No implementation found for action type '".concat(action.type, "'"));
                                    }

                                    break;
                            }
                        };

                        var resolvedOptions = _tslib_assign(_tslib_assign({}, Interpreter.defaultOptions), options);

                        var clock = resolvedOptions.clock,
                            logger = resolvedOptions.logger,
                            parent = resolvedOptions.parent,
                            id = resolvedOptions.id;
                        var resolvedId = id !== undefined ? id : machine.id;
                        this.id = resolvedId;
                        this.logger = logger;
                        this.clock = clock;
                        this.parent = parent;
                        this.options = resolvedOptions;
                        this.scheduler = new Scheduler({
                            deferEvents: this.options.deferEvents
                        });
                        this.sessionId = registry.bookId();
                    }

                    Object.defineProperty(Interpreter.prototype, "initialState", {
                        get: function () {
                            var _this = this;

                            if (this._initialState) {
                                return this._initialState;
                            }

                            return provide(this, function () {
                                _this._initialState = _this.machine.initialState;
                                return _this._initialState;
                            });
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(Interpreter.prototype, "state", {
                        /**
                         * @deprecated Use `.getSnapshot()` instead.
                         */
                        get: function () {
                            if (!IS_PRODUCTION) {
                                warn(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
                            }

                            return this._state;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    /**
                     * Executes the actions of the given state, with that state's `context` and `event`.
                     *
                     * @param state The state whose actions will be executed
                     * @param actionsConfig The action implementations to use
                     */

                    Interpreter.prototype.execute = function (state, actionsConfig) {
                        var e_1, _a;

                        try {
                            for (var _b = _tslib_values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var action = _c.value;
                                this.exec(action, state, actionsConfig);
                            }
                        } catch (e_1_1) {
                            e_1 = {
                                error: e_1_1
                            };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                    };

                    Interpreter.prototype.update = function (state, _event) {
                        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;

                        var _this = this; // Attach session ID to state


                        state._sessionid = this.sessionId; // Update state

                        this._state = state; // Execute actions

                        if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached
                            // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
                            _event === initEvent) && this.options.execute) {
                            this.execute(this.state);
                        } else {
                            var item = void 0;

                            while (item = this._outgoingQueue.shift()) {
                                item[0].send(item[1]);
                            }
                        } // Update children


                        this.children.forEach(function (child) {
                            _this.state.children[child.id] = child;
                        }); // Dev tools

                        if (this.devTools) {
                            this.devTools.send(_event.data, state);
                        } // Execute listeners


                        if (state.event) {
                            try {
                                for (var _e = _tslib_values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    var listener = _f.value;
                                    listener(state.event);
                                }
                            } catch (e_2_1) {
                                e_2 = {
                                    error: e_2_1
                                };
                            } finally {
                                try {
                                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                                } finally {
                                    if (e_2) throw e_2.error;
                                }
                            }
                        }

                        try {
                            for (var _g = _tslib_values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
                                var listener = _h.value;
                                listener(state, state.event);
                            }
                        } catch (e_3_1) {
                            e_3 = {
                                error: e_3_1
                            };
                        } finally {
                            try {
                                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                            } finally {
                                if (e_3) throw e_3.error;
                            }
                        }

                        try {
                            for (var _j = _tslib_values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
                                var contextListener = _k.value;
                                contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);
                            }
                        } catch (e_4_1) {
                            e_4 = {
                                error: e_4_1
                            };
                        } finally {
                            try {
                                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                            } finally {
                                if (e_4) throw e_4.error;
                            }
                        }

                        if (this.state.done) {
                            // get final child state node
                            var finalChildStateNode = state.configuration.find(function (sn) {
                                return sn.type === 'final' && sn.parent === _this.machine;
                            });
                            var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : undefined;
                            this._doneEvent = actions_doneInvoke(this.id, doneData);

                            try {
                                for (var _l = _tslib_values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
                                    var listener = _m.value;
                                    listener(this._doneEvent);
                                }
                            } catch (e_5_1) {
                                e_5 = {
                                    error: e_5_1
                                };
                            } finally {
                                try {
                                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                                } finally {
                                    if (e_5) throw e_5.error;
                                }
                            }

                            this._stop();

                            this._stopChildren();

                            registry.free(this.sessionId);
                        }
                    };
                    /*
                     * Adds a listener that is notified whenever a state transition happens. The listener is called with
                     * the next state and the event object that caused the state transition.
                     *
                     * @param listener The state listener
                     */


                    Interpreter.prototype.onTransition = function (listener) {
                        this.listeners.add(listener); // Send current state to listener

                        if (this.status === InterpreterStatus.Running) {
                            listener(this.state, this.state.event);
                        }

                        return this;
                    };

                    Interpreter.prototype.subscribe = function (nextListenerOrObserver, _, // TODO: error listener
                        completeListener) {
                        var _this = this;

                        var observer = toObserver(nextListenerOrObserver, _, completeListener);
                        this.listeners.add(observer.next); // Send current state to listener

                        if (this.status !== InterpreterStatus.NotStarted) {
                            observer.next(this.state);
                        }

                        var completeOnce = function () {
                            _this.doneListeners.delete(completeOnce);

                            _this.stopListeners.delete(completeOnce);

                            observer.complete();
                        };

                        if (this.status === InterpreterStatus.Stopped) {
                            observer.complete();
                        } else {
                            this.onDone(completeOnce);
                            this.onStop(completeOnce);
                        }

                        return {
                            unsubscribe: function () {
                                _this.listeners.delete(observer.next);

                                _this.doneListeners.delete(completeOnce);

                                _this.stopListeners.delete(completeOnce);
                            }
                        };
                    };
                    /**
                     * Adds an event listener that is notified whenever an event is sent to the running interpreter.
                     * @param listener The event listener
                     */


                    Interpreter.prototype.onEvent = function (listener) {
                        this.eventListeners.add(listener);
                        return this;
                    };
                    /**
                     * Adds an event listener that is notified whenever a `send` event occurs.
                     * @param listener The event listener
                     */


                    Interpreter.prototype.onSend = function (listener) {
                        this.sendListeners.add(listener);
                        return this;
                    };
                    /**
                     * Adds a context listener that is notified whenever the state context changes.
                     * @param listener The context listener
                     */


                    Interpreter.prototype.onChange = function (listener) {
                        this.contextListeners.add(listener);
                        return this;
                    };
                    /**
                     * Adds a listener that is notified when the machine is stopped.
                     * @param listener The listener
                     */


                    Interpreter.prototype.onStop = function (listener) {
                        this.stopListeners.add(listener);
                        return this;
                    };
                    /**
                     * Adds a state listener that is notified when the statechart has reached its final state.
                     * @param listener The state listener
                     */


                    Interpreter.prototype.onDone = function (listener) {
                        if (this.status === InterpreterStatus.Stopped && this._doneEvent) {
                            listener(this._doneEvent);
                        } else {
                            this.doneListeners.add(listener);
                        }

                        return this;
                    };
                    /**
                     * Removes a listener.
                     * @param listener The listener to remove
                     */


                    Interpreter.prototype.off = function (listener) {
                        this.listeners.delete(listener);
                        this.eventListeners.delete(listener);
                        this.sendListeners.delete(listener);
                        this.stopListeners.delete(listener);
                        this.doneListeners.delete(listener);
                        this.contextListeners.delete(listener);
                        return this;
                    };
                    /**
                     * Starts the interpreter from the given state, or the initial state.
                     * @param initialState The state to start the statechart from
                     */


                    Interpreter.prototype.start = function (initialState) {
                        var _this = this;

                        if (this.status === InterpreterStatus.Running) {
                            // Do not restart the service if it is already started
                            return this;
                        } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)
                        // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call
                        // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions
                        // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)


                        this.machine._init();

                        registry.register(this.sessionId, this);
                        this.initialized = true;
                        this.status = InterpreterStatus.Running;
                        var resolvedState = initialState === undefined ? this.initialState : provide(this, function () {
                            return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));
                        });

                        if (this.options.devTools) {
                            this.attachDev();
                        }

                        this.scheduler.initialize(function () {
                            _this.update(resolvedState, initEvent);
                        });
                        return this;
                    };

                    Interpreter.prototype._stopChildren = function () {
                        // TODO: think about converting those to actions
                        this.children.forEach(function (child) {
                            if (utils_isFunction(child.stop)) {
                                child.stop();
                            }
                        });
                        this.children.clear();
                    };

                    Interpreter.prototype._stop = function () {
                        var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;

                        try {
                            for (var _f = _tslib_values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var listener = _g.value;
                                this.listeners.delete(listener);
                            }
                        } catch (e_6_1) {
                            e_6 = {
                                error: e_6_1
                            };
                        } finally {
                            try {
                                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                            } finally {
                                if (e_6) throw e_6.error;
                            }
                        }

                        try {
                            for (var _h = _tslib_values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
                                var listener = _j.value; // call listener, then remove

                                listener();
                                this.stopListeners.delete(listener);
                            }
                        } catch (e_7_1) {
                            e_7 = {
                                error: e_7_1
                            };
                        } finally {
                            try {
                                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                            } finally {
                                if (e_7) throw e_7.error;
                            }
                        }

                        try {
                            for (var _k = _tslib_values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
                                var listener = _l.value;
                                this.contextListeners.delete(listener);
                            }
                        } catch (e_8_1) {
                            e_8 = {
                                error: e_8_1
                            };
                        } finally {
                            try {
                                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                            } finally {
                                if (e_8) throw e_8.error;
                            }
                        }

                        try {
                            for (var _m = _tslib_values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
                                var listener = _o.value;
                                this.doneListeners.delete(listener);
                            }
                        } catch (e_9_1) {
                            e_9 = {
                                error: e_9_1
                            };
                        } finally {
                            try {
                                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                            } finally {
                                if (e_9) throw e_9.error;
                            }
                        }

                        if (!this.initialized) {
                            // Interpreter already stopped; do nothing
                            return this;
                        }

                        this.initialized = false;
                        this.status = InterpreterStatus.Stopped;
                        this._initialState = undefined;

                        try {
                            // we are going to stop within the current sync frame
                            // so we can safely just cancel this here as nothing async should be fired anyway
                            for (var _p = _tslib_values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
                                var key = _q.value;
                                this.clock.clearTimeout(this.delayedEventsMap[key]);
                            }
                        } catch (e_10_1) {
                            e_10 = {
                                error: e_10_1
                            };
                        } finally {
                            try {
                                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                            } finally {
                                if (e_10) throw e_10.error;
                            }
                        } // clear everything that might be enqueued


                        this.scheduler.clear();
                        this.scheduler = new Scheduler({
                            deferEvents: this.options.deferEvents
                        });
                    };
                    /**
                     * Stops the interpreter and unsubscribe all listeners.
                     *
                     * This will also notify the `onStop` listeners.
                     */


                    Interpreter.prototype.stop = function () {
                        // TODO: add warning for stopping non-root interpreters
                        var _this = this; // grab the current scheduler as it will be replaced in _stop


                        var scheduler = this.scheduler;

                        this._stop(); // let what is currently processed to be finished


                        scheduler.schedule(function () {
                            var _a;

                            if ((_a = _this._state) === null || _a === void 0 ? void 0 : _a.done) {
                                return;
                            } // it feels weird to handle this here but we need to handle this even slightly "out of band"


                            var _event = toSCXMLEvent({
                                type: 'xstate.stop'
                            });

                            var nextState = provide(_this, function () {
                                var exitActions = flatten(_tslib_spreadArray([], _tslib_read(_this.state.configuration), false).sort(function (a, b) {
                                    return b.order - a.order;
                                }).map(function (stateNode) {
                                    return toActionObjects(stateNode.onExit, _this.machine.options.actions);
                                }));

                                var _a = _tslib_read(resolveActions(_this.machine, _this.state, _this.state.context, _event, [{
                                    type: 'exit',
                                    actions: exitActions
                                }], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),
                                    resolvedActions = _a[0],
                                    updatedContext = _a[1];

                                var newState = new State({
                                    value: _this.state.value,
                                    context: updatedContext,
                                    _event: _event,
                                    _sessionid: _this.sessionId,
                                    historyValue: undefined,
                                    history: _this.state,
                                    actions: resolvedActions.filter(function (action) {
                                        return !isRaisableAction(action);
                                    }),
                                    activities: {},
                                    events: [],
                                    configuration: [],
                                    transitions: [],
                                    children: {},
                                    done: _this.state.done,
                                    tags: _this.state.tags,
                                    machine: _this.machine
                                });
                                newState.changed = true;
                                return newState;
                            });

                            _this.update(nextState, _event);

                            _this._stopChildren();

                            registry.free(_this.sessionId);
                        });
                        return this;
                    };

                    Interpreter.prototype.batch = function (events) {
                        var _this = this;

                        if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
                            // tslint:disable-next-line:no-console
                            if (!IS_PRODUCTION) {
                                warn(false, "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\" and are deferred. Make sure .start() is called for this service.\nEvent: ").concat(JSON.stringify(event)));
                            }
                        } else if (this.status !== InterpreterStatus.Running) {
                            throw new Error( // tslint:disable-next-line:max-line-length
                                "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options."));
                        }

                        if (!events.length) {
                            return;
                        }

                        var exec = !!this.machine.config.predictableActionArguments && this._exec;
                        this.scheduler.schedule(function () {
                            var e_11, _a;

                            var nextState = _this.state;
                            var batchChanged = false;
                            var batchedActions = [];

                            var _loop_1 = function (event_1) {
                                var _event = toSCXMLEvent(event_1);

                                _this.forward(_event);

                                nextState = provide(_this, function () {
                                    return _this.machine.transition(nextState, _event, undefined, exec || undefined);
                                });
                                batchedActions.push.apply(batchedActions, _tslib_spreadArray([], _tslib_read(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function (a) {
                                    return bindActionToState(a, nextState);
                                })), false));
                                batchChanged = batchChanged || !!nextState.changed;
                            };

                            try {
                                for (var events_1 = _tslib_values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                                    var event_1 = events_1_1.value;

                                    _loop_1(event_1);
                                }
                            } catch (e_11_1) {
                                e_11 = {
                                    error: e_11_1
                                };
                            } finally {
                                try {
                                    if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
                                } finally {
                                    if (e_11) throw e_11.error;
                                }
                            }

                            nextState.changed = batchChanged;
                            nextState.actions = batchedActions;

                            _this.update(nextState, toSCXMLEvent(events[events.length - 1]));
                        });
                    };
                    /**
                     * Returns a send function bound to this interpreter instance.
                     *
                     * @param event The event to be sent by the sender.
                     */


                    Interpreter.prototype.sender = function (event) {
                        return this.send.bind(this, event);
                    };

                    Interpreter.prototype._nextState = function (event, exec) {
                        var _this = this;

                        if (exec === void 0) {
                            exec = !!this.machine.config.predictableActionArguments && this._exec;
                        }

                        var _event = toSCXMLEvent(event);

                        if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {
                            return nextEvent.indexOf(errorPlatform) === 0;
                        })) {
                            throw _event.data.data;
                        }

                        var nextState = provide(this, function () {
                            return _this.machine.transition(_this.state, _event, undefined, exec || undefined);
                        });
                        return nextState;
                    };
                    /**
                     * Returns the next state given the interpreter's current state and the event.
                     *
                     * This is a pure method that does _not_ update the interpreter's state.
                     *
                     * @param event The event to determine the next state
                     */


                    Interpreter.prototype.nextState = function (event) {
                        return this._nextState(event, false);
                    };

                    Interpreter.prototype.forward = function (event) {
                        var e_12, _a;

                        try {
                            for (var _b = _tslib_values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var id = _c.value;
                                var child = this.children.get(id);

                                if (!child) {
                                    throw new Error("Unable to forward event '".concat(event, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
                                }

                                child.send(event);
                            }
                        } catch (e_12_1) {
                            e_12 = {
                                error: e_12_1
                            };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            } finally {
                                if (e_12) throw e_12.error;
                            }
                        }
                    };

                    Interpreter.prototype.defer = function (sendAction) {
                        var _this = this;

                        var timerId = this.clock.setTimeout(function () {
                            if ('to' in sendAction && sendAction.to) {
                                _this.sendTo(sendAction._event, sendAction.to, true);
                            } else {
                                _this.send(sendAction._event);
                            }
                        }, sendAction.delay);

                        if (sendAction.id) {
                            this.delayedEventsMap[sendAction.id] = timerId;
                        }
                    };

                    Interpreter.prototype.cancel = function (sendId) {
                        this.clock.clearTimeout(this.delayedEventsMap[sendId]);
                        delete this.delayedEventsMap[sendId];
                    };

                    Interpreter.prototype.exec = function (action, state, actionFunctionMap) {
                        if (actionFunctionMap === void 0) {
                            actionFunctionMap = this.machine.options.actions;
                        }

                        this._exec(action, state.context, state._event, actionFunctionMap);
                    };

                    Interpreter.prototype.removeChild = function (childId) {
                        var _a;

                        this.children.delete(childId);
                        this.forwardTo.delete(childId); // this.state might not exist at the time this is called,
                        // such as when a child is added then removed while initializing the state

                        (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];
                    };

                    Interpreter.prototype.stopChild = function (childId) {
                        var child = this.children.get(childId);

                        if (!child) {
                            return;
                        }

                        this.removeChild(childId);

                        if (utils_isFunction(child.stop)) {
                            child.stop();
                        }
                    };

                    Interpreter.prototype.spawn = function (entity, name, options) {
                        if (this.status !== InterpreterStatus.Running) {
                            return createDeferredActor(entity, name);
                        }

                        if (isPromiseLike(entity)) {
                            return this.spawnPromise(Promise.resolve(entity), name);
                        } else if (utils_isFunction(entity)) {
                            return this.spawnCallback(entity, name);
                        } else if (isSpawnedActor(entity)) {
                            return this.spawnActor(entity, name);
                        } else if (isObservable(entity)) {
                            return this.spawnObservable(entity, name);
                        } else if (isMachine(entity)) {
                            return this.spawnMachine(entity, _tslib_assign(_tslib_assign({}, options), {
                                id: name
                            }));
                        } else if (isBehavior(entity)) {
                            return this.spawnBehavior(entity, name);
                        } else {
                            throw new Error("Unable to spawn entity \"".concat(name, "\" of type \"").concat(typeof entity, "\"."));
                        }
                    };

                    Interpreter.prototype.spawnMachine = function (machine, options) {
                        var _this = this;

                        if (options === void 0) {
                            options = {};
                        }

                        var childService = new Interpreter(machine, _tslib_assign(_tslib_assign({}, this.options), {
                            parent: this,
                            id: options.id || machine.id
                        }));

                        var resolvedOptions = _tslib_assign(_tslib_assign({}, DEFAULT_SPAWN_OPTIONS), options);

                        if (resolvedOptions.sync) {
                            childService.onTransition(function (state) {
                                _this.send(update, {
                                    state: state,
                                    id: childService.id
                                });
                            });
                        }

                        var actor = childService;
                        this.children.set(childService.id, actor);

                        if (resolvedOptions.autoForward) {
                            this.forwardTo.add(childService.id);
                        }

                        childService.onDone(function (doneEvent) {
                            _this.removeChild(childService.id);

                            _this.send(toSCXMLEvent(doneEvent, {
                                origin: childService.id
                            }));
                        }).start();
                        return actor;
                    };

                    Interpreter.prototype.spawnBehavior = function (behavior, id) {
                        var actorRef = spawnBehavior(behavior, {
                            id: id,
                            parent: this
                        });
                        this.children.set(id, actorRef);
                        return actorRef;
                    };

                    Interpreter.prototype.spawnPromise = function (promise, id) {
                        var _a;

                        var _this = this;

                        var canceled = false;
                        var resolvedData;
                        promise.then(function (response) {
                            if (!canceled) {
                                resolvedData = response;

                                _this.removeChild(id);

                                _this.send(toSCXMLEvent(actions_doneInvoke(id, response), {
                                    origin: id
                                }));
                            }
                        }, function (errorData) {
                            if (!canceled) {
                                _this.removeChild(id);

                                var errorEvent = actions_error(id, errorData);

                                try {
                                    // Send "error.platform.id" to this (parent).
                                    _this.send(toSCXMLEvent(errorEvent, {
                                        origin: id
                                    }));
                                } catch (error) {
                                    reportUnhandledExceptionOnInvocation(errorData, error, id);

                                    if (_this.devTools) {
                                        _this.devTools.send(errorEvent, _this.state);
                                    }

                                    if (_this.machine.strict) {
                                        // it would be better to always stop the state machine if unhandled
                                        // exception/promise rejection happens but because we don't want to
                                        // break existing code so enforce it on strict mode only especially so
                                        // because documentation says that onError is optional
                                        _this.stop();
                                    }
                                }
                            }
                        });
                        var actor = (_a = {
                            id: id,
                            send: function () {
                                return void 0;
                            },
                            subscribe: function (next, handleError, complete) {
                                var observer = toObserver(next, handleError, complete);
                                var unsubscribed = false;
                                promise.then(function (response) {
                                    if (unsubscribed) {
                                        return;
                                    }

                                    observer.next(response);

                                    if (unsubscribed) {
                                        return;
                                    }

                                    observer.complete();
                                }, function (err) {
                                    if (unsubscribed) {
                                        return;
                                    }

                                    observer.error(err);
                                });
                                return {
                                    unsubscribe: function () {
                                        return unsubscribed = true;
                                    }
                                };
                            },
                            stop: function () {
                                canceled = true;
                            },
                            toJSON: function () {
                                return {
                                    id: id
                                };
                            },
                            getSnapshot: function () {
                                return resolvedData;
                            }
                        }, _a[symbolObservable] = function () {
                            return this;
                        }, _a);
                        this.children.set(id, actor);
                        return actor;
                    };

                    Interpreter.prototype.spawnCallback = function (callback, id) {
                        var _a;

                        var _this = this;

                        var canceled = false;
                        var receivers = new Set();
                        var listeners = new Set();
                        var emitted;

                        var receive = function (e) {
                            emitted = e;
                            listeners.forEach(function (listener) {
                                return listener(e);
                            });

                            if (canceled) {
                                return;
                            }

                            _this.send(toSCXMLEvent(e, {
                                origin: id
                            }));
                        };

                        var callbackStop;

                        try {
                            callbackStop = callback(receive, function (newListener) {
                                receivers.add(newListener);
                            });
                        } catch (err) {
                            this.send(actions_error(id, err));
                        }

                        if (isPromiseLike(callbackStop)) {
                            // it turned out to be an async function, can't reliably check this before calling `callback`
                            // because transpiled async functions are not recognizable
                            return this.spawnPromise(callbackStop, id);
                        }

                        var actor = (_a = {
                            id: id,
                            send: function (event) {
                                return receivers.forEach(function (receiver) {
                                    return receiver(event);
                                });
                            },
                            subscribe: function (next) {
                                var observer = toObserver(next);
                                listeners.add(observer.next);
                                return {
                                    unsubscribe: function () {
                                        listeners.delete(observer.next);
                                    }
                                };
                            },
                            stop: function () {
                                canceled = true;

                                if (utils_isFunction(callbackStop)) {
                                    callbackStop();
                                }
                            },
                            toJSON: function () {
                                return {
                                    id: id
                                };
                            },
                            getSnapshot: function () {
                                return emitted;
                            }
                        }, _a[symbolObservable] = function () {
                            return this;
                        }, _a);
                        this.children.set(id, actor);
                        return actor;
                    };

                    Interpreter.prototype.spawnObservable = function (source, id) {
                        var _a;

                        var _this = this;

                        var emitted;
                        var subscription = source.subscribe(function (value) {
                            emitted = value;

                            _this.send(toSCXMLEvent(value, {
                                origin: id
                            }));
                        }, function (err) {
                            _this.removeChild(id);

                            _this.send(toSCXMLEvent(actions_error(id, err), {
                                origin: id
                            }));
                        }, function () {
                            _this.removeChild(id);

                            _this.send(toSCXMLEvent(actions_doneInvoke(id), {
                                origin: id
                            }));
                        });
                        var actor = (_a = {
                            id: id,
                            send: function () {
                                return void 0;
                            },
                            subscribe: function (next, handleError, complete) {
                                return source.subscribe(next, handleError, complete);
                            },
                            stop: function () {
                                return subscription.unsubscribe();
                            },
                            getSnapshot: function () {
                                return emitted;
                            },
                            toJSON: function () {
                                return {
                                    id: id
                                };
                            }
                        }, _a[symbolObservable] = function () {
                            return this;
                        }, _a);
                        this.children.set(id, actor);
                        return actor;
                    };

                    Interpreter.prototype.spawnActor = function (actor, name) {
                        this.children.set(name, actor);
                        return actor;
                    };

                    Interpreter.prototype.spawnActivity = function (activity) {
                        var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;

                        if (!implementation) {
                            if (!IS_PRODUCTION) {
                                warn(false, "No implementation found for activity '".concat(activity.type, "'"));
                            } // tslint:disable-next-line:no-console


                            return;
                        } // Start implementation


                        var dispose = implementation(this.state.context, activity);
                        this.spawnEffect(activity.id, dispose);
                    };

                    Interpreter.prototype.spawnEffect = function (id, dispose) {
                        var _a;

                        this.children.set(id, (_a = {
                            id: id,
                            send: function () {
                                return void 0;
                            },
                            subscribe: function () {
                                return {
                                    unsubscribe: function () {
                                        return void 0;
                                    }
                                };
                            },
                            stop: dispose || undefined,
                            getSnapshot: function () {
                                return undefined;
                            },
                            toJSON: function () {
                                return {
                                    id: id
                                };
                            }
                        }, _a[symbolObservable] = function () {
                            return this;
                        }, _a));
                    };

                    Interpreter.prototype.attachDev = function () {
                        var global = getGlobal();

                        if (this.options.devTools && global) {
                            if (global.__REDUX_DEVTOOLS_EXTENSION__) {
                                var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;
                                this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect(_tslib_assign(_tslib_assign({
                                    name: this.id,
                                    autoPause: true,
                                    stateSanitizer: function (state) {
                                        return {
                                            value: state.value,
                                            context: state.context,
                                            actions: state.actions
                                        };
                                    }
                                }, devToolsOptions), {
                                    features: _tslib_assign({
                                        jump: false,
                                        skip: false
                                    }, devToolsOptions ? devToolsOptions.features : undefined)
                                }), this.machine);
                                this.devTools.init(this.state);
                            } // add XState-specific dev tooling hook


                            registerService(this);
                        }
                    };

                    Interpreter.prototype.toJSON = function () {
                        return {
                            id: this.id
                        };
                    };

                    Interpreter.prototype[symbolObservable] = function () {
                        return this;
                    };

                    Interpreter.prototype.getSnapshot = function () {
                        if (this.status === InterpreterStatus.NotStarted) {
                            return this.initialState;
                        }

                        return this._state;
                    };
                    /**
                     * The default interpreter options:
                     *
                     * - `clock` uses the global `setTimeout` and `clearTimeout` functions
                     * - `logger` uses the global `console.log()` method
                     */


                    Interpreter.defaultOptions = {
                        execute: true,
                        deferEvents: true,
                        clock: {
                            setTimeout: function (fn, ms) {
                                return setTimeout(fn, ms);
                            },
                            clearTimeout: function (id) {
                                return clearTimeout(id);
                            }
                        },
                        logger: /*#__PURE__*/console.log.bind(console),
                        devTools: false
                    };
                    Interpreter.interpret = interpret;
                    return Interpreter;
                }();

            var resolveSpawnOptions = function (nameOrOptions) {
                if (isString(nameOrOptions)) {
                    return _tslib_assign(_tslib_assign({}, DEFAULT_SPAWN_OPTIONS), {
                        name: nameOrOptions
                    });
                }

                return _tslib_assign(_tslib_assign(_tslib_assign({}, DEFAULT_SPAWN_OPTIONS), {
                    name: uniqueId()
                }), nameOrOptions);
            };

            function spawn(entity, nameOrOptions) {
                var resolvedOptions = resolveSpawnOptions(nameOrOptions);
                return consume(function (service) {
                    if (!IS_PRODUCTION) {
                        var isLazyEntity = isMachine(entity) || utils_isFunction(entity);
                        warn(!!service || isLazyEntity, "Attempted to spawn an Actor (ID: \"".concat(isMachine(entity) ? entity.id : 'undefined', "\") outside of a service. This will have no effect."));
                    }

                    if (service) {
                        return service.spawn(entity, resolvedOptions.name, resolvedOptions);
                    } else {
                        return createDeferredActor(entity, resolvedOptions.name);
                    }
                });
            }
            /**
             * Creates a new Interpreter instance for the given machine with the provided options, if any.
             *
             * @param machine The machine to interpret
             * @param options Interpreter options
             */

            function interpret(machine, options) {
                var interpreter = new Interpreter(machine, options);
                return interpreter;
            }



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/node_modules/@xstate/react/es/useConstant.js

            function useConstant_useConstant(fn) {
                var ref = react.useRef();
                if (!ref.current) {
                    ref.current = { v: fn() };
                }
                return ref.current.v;
            }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/node_modules/@xstate/react/es/useInterpret.js
            var useInterpret_assign = (undefined && undefined.__assign) || function () {
                useInterpret_assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                    }
                    return t;
                };
                return useInterpret_assign.apply(this, arguments);
            };
            var useInterpret_rest = (undefined && undefined.__rest) || function (s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            };
            var useInterpret_read = (undefined && undefined.__read) || function (o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            };




            function useIdleInterpreter(getMachine, options) {
                var machine = useConstant_useConstant(function () {
                    return typeof getMachine === 'function' ? getMachine() : getMachine;
                });
                if (false) { var _a, initialMachine; }
                var context = options.context, guards = options.guards, actions = options.actions, activities = options.activities, services = options.services, delays = options.delays, rehydratedState = options.state, interpreterOptions = useInterpret_rest(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
                var service = useConstant_useConstant(function () {
                    var machineConfig = {
                        context: context,
                        guards: guards,
                        actions: actions,
                        activities: activities,
                        services: services,
                        delays: delays
                    };
                    var machineWithConfig = machine.withConfig(machineConfig, function () { return (useInterpret_assign(useInterpret_assign({}, machine.context), context)); });
                    return interpret(machineWithConfig, interpreterOptions);
                });
                // Make sure options are kept updated when they change.
                // This mutation assignment is safe because the service instance is only used
                // in one place -- this hook's caller.
                use_isomorphic_layout_effect_browser_esm(function () {
                    Object.assign(service.machine.options.actions, actions);
                    Object.assign(service.machine.options.guards, guards);
                    Object.assign(service.machine.options.activities, activities);
                    Object.assign(service.machine.options.services, services);
                    Object.assign(service.machine.options.delays, delays);
                }, [actions, guards, activities, services, delays]);
                return service;
            }
            function useInterpret(getMachine) {
                var _a = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    _a[_i - 1] = arguments[_i];
                }
                var _b = useInterpret_read(_a, 2), _c = _b[0], options = _c === void 0 ? {} : _c, observerOrListener = _b[1];
                var service = useIdleInterpreter(getMachine, options);
                (0, react.useEffect)(function () {
                    if (!observerOrListener) {
                        return;
                    }
                    var sub = service.subscribe(toObserver(observerOrListener));
                    return function () {
                        sub.unsubscribe();
                    };
                }, [observerOrListener]);
                (0, react.useEffect)(function () {
                    var rehydratedState = options.state;
                    service.start(rehydratedState ? State.create(rehydratedState) : undefined);
                    return function () {
                        service.stop();
                        service.status = InterpreterStatus.NotStarted;
                    };
                }, []);
                return service;
            }

            ;// CONCATENATED MODULE: ./node_modules/xstate/es/invokeUtils.js






            function invokeUtils_toInvokeSource(src) {
                if (typeof src === 'string') {
                    var simpleSrc = {
                        type: src
                    };

                    simpleSrc.toString = function () {
                        return src;
                    }; // v4 compat - TODO: remove in v5


                    return simpleSrc;
                }

                return src;
            }
            function toInvokeDefinition(invokeConfig) {
                return _tslib_assign(_tslib_assign({
                    type: invoke
                }, invokeConfig), {
                    toJSON: function () {
                        invokeConfig.onDone;
                        invokeConfig.onError;
                        var invokeDef = _tslib_rest(invokeConfig, ["onDone", "onError"]);

                        return _tslib_assign(_tslib_assign({}, invokeDef), {
                            type: invoke,
                            src: invokeUtils_toInvokeSource(invokeConfig.src)
                        });
                    }
                });
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/StateNode.js











            var NULL_EVENT = '';
            var STATE_IDENTIFIER = '#';
            var WILDCARD = '*';
            var EMPTY_OBJECT = {};

            var isStateId = function (str) {
                return str[0] === STATE_IDENTIFIER;
            };

            var createDefaultOptions = function () {
                return {
                    actions: {},
                    guards: {},
                    services: {},
                    activities: {},
                    delays: {}
                };
            };

            var validateArrayifiedTransitions = function (stateNode, event, transitions) {
                var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
                    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));
                });
                var eventText = event === NULL_EVENT ? 'the transient event' : "event '".concat(event, "'");
                warn(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
            };

            var StateNode_StateNode =
                /*#__PURE__*/

                /** @class */
                function () {
                    function StateNode(
                        /**
                         * The raw config used to create the machine.
                         */
                        config, options,
                        /**
                         * The initial extended state
                         */
                        _context, // TODO: this is unsafe, but we're removing it in v5 anyway
                        _stateInfo) {
                        if (_context === void 0) {
                            _context = 'context' in config ? config.context : undefined;
                        }

                        var _this = this;

                        var _a;

                        this.config = config;
                        this._context = _context;
                        /**
                         * The order this state node appears. Corresponds to the implicit SCXML document order.
                         */

                        this.order = -1;
                        this.__xstatenode = true;
                        this.__cache = {
                            events: undefined,
                            relativeValue: new Map(),
                            initialStateValue: undefined,
                            initialState: undefined,
                            on: undefined,
                            transitions: undefined,
                            candidates: {},
                            delayedTransitions: undefined
                        };
                        this.idMap = {};
                        this.tags = [];
                        this.options = Object.assign(createDefaultOptions(), options);
                        this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
                        this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';
                        this.machine = this.parent ? this.parent.machine : this;
                        this.path = this.parent ? this.parent.path.concat(this.key) : [];
                        this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);
                        this.id = this.config.id || _tslib_spreadArray([this.machine.key], _tslib_read(this.path), false).join(this.delimiter);
                        this.version = this.parent ? this.parent.version : this.config.version;
                        this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
                        this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
                        this.description = this.config.description;

                        if (!IS_PRODUCTION) {
                            warn(!('parallel' in this.config), "The \"parallel\" property is deprecated and will be removed in version 4.1. ".concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
                        }

                        this.initial = this.config.initial;
                        this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {
                            var _a;

                            var stateNode = new StateNode(stateConfig, {}, undefined, {
                                parent: _this,
                                key: key
                            });
                            Object.assign(_this.idMap, _tslib_assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));
                            return stateNode;
                        }) : EMPTY_OBJECT; // Document order

                        var order = 0;

                        function dfs(stateNode) {
                            var e_1, _a;

                            stateNode.order = order++;

                            try {
                                for (var _b = _tslib_values(getAllChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var child = _c.value;
                                    dfs(child);
                                }
                            } catch (e_1_1) {
                                e_1 = {
                                    error: e_1_1
                                };
                            } finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                } finally {
                                    if (e_1) throw e_1.error;
                                }
                            }
                        }

                        dfs(this); // History config

                        this.history = this.config.history === true ? 'shallow' : this.config.history || false;
                        this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {
                            var event = _a.event;
                            return event === NULL_EVENT;
                        }) : NULL_EVENT in this.config.on);
                        this.strict = !!this.config.strict; // TODO: deprecate (entry)

                        this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {
                            return toActionObject(action);
                        }); // TODO: deprecate (exit)

                        this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {
                            return toActionObject(action);
                        });
                        this.meta = this.config.meta;
                        this.doneData = this.type === 'final' ? this.config.data : undefined;
                        this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {
                            var _a, _b;

                            if (isMachine(invokeConfig)) {
                                var invokeId = createInvokeId(_this.id, i);
                                _this.machine.options.services = _tslib_assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);
                                return toInvokeDefinition({
                                    src: invokeId,
                                    id: invokeId
                                });
                            } else if (isString(invokeConfig.src)) {
                                var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
                                return toInvokeDefinition(_tslib_assign(_tslib_assign({}, invokeConfig), {
                                    id: invokeId,
                                    src: invokeConfig.src
                                }));
                            } else if (isMachine(invokeConfig.src) || utils_isFunction(invokeConfig.src)) {
                                var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
                                _this.machine.options.services = _tslib_assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
                                return toInvokeDefinition(_tslib_assign(_tslib_assign({
                                    id: invokeId
                                }, invokeConfig), {
                                    src: invokeId
                                }));
                            } else {
                                var invokeSource = invokeConfig.src;
                                return toInvokeDefinition(_tslib_assign(_tslib_assign({
                                    id: createInvokeId(_this.id, i)
                                }, invokeConfig), {
                                    src: invokeSource
                                }));
                            }
                        });
                        this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {
                            return toActivityDefinition(activity);
                        });
                        this.transition = this.transition.bind(this);
                        this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once
                        // state node getters are deprecated
                        // if (!this.parent) {
                        //   this._init();
                        // }
                    }

                    StateNode.prototype._init = function () {
                        if (this.__cache.transitions) {
                            return;
                        }

                        getAllStateNodes(this).forEach(function (stateNode) {
                            return stateNode.on;
                        });
                    };
                    /**
                     * Clones this state machine with custom options and context.
                     *
                     * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.
                     * @param context Custom context (will override predefined context)
                     */


                    StateNode.prototype.withConfig = function (options, context) {
                        var _a = this.options,
                            actions = _a.actions,
                            activities = _a.activities,
                            guards = _a.guards,
                            services = _a.services,
                            delays = _a.delays;
                        return new StateNode(this.config, {
                            actions: _tslib_assign(_tslib_assign({}, actions), options.actions),
                            activities: _tslib_assign(_tslib_assign({}, activities), options.activities),
                            guards: _tslib_assign(_tslib_assign({}, guards), options.guards),
                            services: _tslib_assign(_tslib_assign({}, services), options.services),
                            delays: _tslib_assign(_tslib_assign({}, delays), options.delays)
                        }, context !== null && context !== void 0 ? context : this.context);
                    };
                    /**
                     * Clones this state machine with custom context.
                     *
                     * @param context Custom context (will override predefined context, not recursive)
                     */


                    StateNode.prototype.withContext = function (context) {
                        return new StateNode(this.config, this.options, context);
                    };

                    Object.defineProperty(StateNode.prototype, "context", {
                        get: function () {
                            return utils_isFunction(this._context) ? this._context() : this._context;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(StateNode.prototype, "definition", {
                        /**
                         * The well-structured state node definition.
                         */
                        get: function () {
                            return {
                                id: this.id,
                                key: this.key,
                                version: this.version,
                                context: this.context,
                                type: this.type,
                                initial: this.initial,
                                history: this.history,
                                states: mapValues(this.states, function (state) {
                                    return state.definition;
                                }),
                                on: this.on,
                                transitions: this.transitions,
                                entry: this.onEntry,
                                exit: this.onExit,
                                activities: this.activities || [],
                                meta: this.meta,
                                order: this.order || -1,
                                data: this.doneData,
                                invoke: this.invoke,
                                description: this.description,
                                tags: this.tags
                            };
                        },
                        enumerable: false,
                        configurable: true
                    });

                    StateNode.prototype.toJSON = function () {
                        return this.definition;
                    };

                    Object.defineProperty(StateNode.prototype, "on", {
                        /**
                         * The mapping of events to transitions.
                         */
                        get: function () {
                            if (this.__cache.on) {
                                return this.__cache.on;
                            }

                            var transitions = this.transitions;
                            return this.__cache.on = transitions.reduce(function (map, transition) {
                                map[transition.eventType] = map[transition.eventType] || [];
                                map[transition.eventType].push(transition);
                                return map;
                            }, {});
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(StateNode.prototype, "after", {
                        get: function () {
                            return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(StateNode.prototype, "transitions", {
                        /**
                         * All the transitions that can be taken from this state node.
                         */
                        get: function () {
                            return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
                        },
                        enumerable: false,
                        configurable: true
                    });

                    StateNode.prototype.getCandidates = function (eventName) {
                        if (this.__cache.candidates[eventName]) {
                            return this.__cache.candidates[eventName];
                        }

                        var transient = eventName === NULL_EVENT;
                        var candidates = this.transitions.filter(function (transition) {
                            var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions

                            return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
                        });
                        this.__cache.candidates[eventName] = candidates;
                        return candidates;
                    };
                    /**
                     * All delayed transitions from the config.
                     */


                    StateNode.prototype.getDelayedTransitions = function () {
                        var _this = this;

                        var afterConfig = this.config.after;

                        if (!afterConfig) {
                            return [];
                        }

                        var mutateEntryExit = function (delay, i) {
                            var delayRef = utils_isFunction(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
                            var eventType = actions_after(delayRef, _this.id);

                            _this.onEntry.push(actions_send(eventType, {
                                delay: delay
                            }));

                            _this.onExit.push(actions_cancel(eventType));

                            return eventType;
                        };

                        var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {
                            var eventType = mutateEntryExit(transition.delay, i);
                            return _tslib_assign(_tslib_assign({}, transition), {
                                event: eventType
                            });
                        }) : flatten(Object.keys(afterConfig).map(function (delay, i) {
                            var configTransition = afterConfig[delay];
                            var resolvedTransition = isString(configTransition) ? {
                                target: configTransition
                            } : configTransition;
                            var resolvedDelay = !isNaN(+delay) ? +delay : delay;
                            var eventType = mutateEntryExit(resolvedDelay, i);
                            return toArray(resolvedTransition).map(function (transition) {
                                return _tslib_assign(_tslib_assign({}, transition), {
                                    event: eventType,
                                    delay: resolvedDelay
                                });
                            });
                        }));
                        return delayedTransitions.map(function (delayedTransition) {
                            var delay = delayedTransition.delay;
                            return _tslib_assign(_tslib_assign({}, _this.formatTransition(delayedTransition)), {
                                delay: delay
                            });
                        });
                    };
                    /**
                     * Returns the state nodes represented by the current state value.
                     *
                     * @param state The state value or State instance
                     */


                    StateNode.prototype.getStateNodes = function (state) {
                        var _a;

                        var _this = this;

                        if (!state) {
                            return [];
                        }

                        var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);

                        if (isString(stateValue)) {
                            var initialStateValue = this.getStateNode(stateValue).initial;
                            return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
                        }

                        var subStateKeys = Object.keys(stateValue);
                        var subStateNodes = [this];
                        subStateNodes.push.apply(subStateNodes, _tslib_spreadArray([], _tslib_read(flatten(subStateKeys.map(function (subStateKey) {
                            return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
                        }))), false));
                        return subStateNodes;
                    };
                    /**
                     * Returns `true` if this state node explicitly handles the given event.
                     *
                     * @param event The event in question
                     */


                    StateNode.prototype.handles = function (event) {
                        var eventType = getEventType(event);
                        return this.events.includes(eventType);
                    };
                    /**
                     * Resolves the given `state` to a new `State` instance relative to this machine.
                     *
                     * This ensures that `.events` and `.nextEvents` represent the correct values.
                     *
                     * @param state The state to resolve
                     */


                    StateNode.prototype.resolveState = function (state) {
                        var stateFromConfig = state instanceof State ? state : State.create(state);
                        var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));
                        return new State(_tslib_assign(_tslib_assign({}, stateFromConfig), {
                            value: this.resolve(stateFromConfig.value),
                            configuration: configuration,
                            done: isInFinalState(configuration, this),
                            tags: getTagsFromConfiguration(configuration),
                            machine: this.machine
                        }));
                    };

                    StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {
                        var stateNode = this.getStateNode(stateValue);
                        var next = stateNode.next(state, _event);

                        if (!next || !next.transitions.length) {
                            return this.next(state, _event);
                        }

                        return next;
                    };

                    StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {
                        var subStateKeys = Object.keys(stateValue);
                        var stateNode = this.getStateNode(subStateKeys[0]);

                        var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);

                        if (!next || !next.transitions.length) {
                            return this.next(state, _event);
                        }

                        return next;
                    };

                    StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {
                        var e_2, _a;

                        var transitionMap = {};

                        try {
                            for (var _b = _tslib_values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var subStateKey = _c.value;
                                var subStateValue = stateValue[subStateKey];

                                if (!subStateValue) {
                                    continue;
                                }

                                var subStateNode = this.getStateNode(subStateKey);

                                var next = subStateNode._transition(subStateValue, state, _event);

                                if (next) {
                                    transitionMap[subStateKey] = next;
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }

                        var stateTransitions = Object.keys(transitionMap).map(function (key) {
                            return transitionMap[key];
                        });
                        var enabledTransitions = flatten(stateTransitions.map(function (st) {
                            return st.transitions;
                        }));
                        var willTransition = stateTransitions.some(function (st) {
                            return st.transitions.length > 0;
                        });

                        if (!willTransition) {
                            return this.next(state, _event);
                        }

                        var configuration = flatten(Object.keys(transitionMap).map(function (key) {
                            return transitionMap[key].configuration;
                        }));
                        return {
                            transitions: enabledTransitions,
                            exitSet: flatten(stateTransitions.map(function (t) {
                                return t.exitSet;
                            })),
                            configuration: configuration,
                            source: state,
                            actions: flatten(Object.keys(transitionMap).map(function (key) {
                                return transitionMap[key].actions;
                            }))
                        };
                    };

                    StateNode.prototype._transition = function (stateValue, state, _event) {
                        // leaf node
                        if (isString(stateValue)) {
                            return this.transitionLeafNode(stateValue, state, _event);
                        } // hierarchical node


                        if (Object.keys(stateValue).length === 1) {
                            return this.transitionCompoundNode(stateValue, state, _event);
                        } // orthogonal node


                        return this.transitionParallelNode(stateValue, state, _event);
                    };

                    StateNode.prototype.getTransitionData = function (state, event) {
                        return this._transition(state.value, state, toSCXMLEvent(event));
                    };

                    StateNode.prototype.next = function (state, _event) {
                        var e_3, _a;

                        var _this = this;

                        var eventName = _event.name;
                        var actions = [];
                        var nextStateNodes = [];
                        var selectedTransition;

                        try {
                            for (var _b = _tslib_values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var candidate = _c.value;
                                var cond = candidate.cond,
                                    stateIn = candidate.in;
                                var resolvedContext = state.context;
                                var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID
                                    state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent
                                    matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;
                                var guardPassed = false;

                                try {
                                    guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);
                                } catch (err) {
                                    throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
                                }

                                if (guardPassed && isInState) {
                                    if (candidate.target !== undefined) {
                                        nextStateNodes = candidate.target;
                                    }

                                    actions.push.apply(actions, _tslib_spreadArray([], _tslib_read(candidate.actions), false));
                                    selectedTransition = candidate;
                                    break;
                                }
                            }
                        } catch (e_3_1) {
                            e_3 = {
                                error: e_3_1
                            };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            } finally {
                                if (e_3) throw e_3.error;
                            }
                        }

                        if (!selectedTransition) {
                            return undefined;
                        }

                        if (!nextStateNodes.length) {
                            return {
                                transitions: [selectedTransition],
                                exitSet: [],
                                configuration: state.value ? [this] : [],
                                source: state,
                                actions: actions
                            };
                        }

                        var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {
                            return _this.getRelativeStateNodes(stateNode, state.historyValue);
                        }));
                        var isInternal = !!selectedTransition.internal;
                        return {
                            transitions: [selectedTransition],
                            exitSet: isInternal ? [] : flatten(nextStateNodes.map(function (targetNode) {
                                return _this.getPotentiallyReenteringNodes(targetNode);
                            })),
                            configuration: allNextStateNodes,
                            source: state,
                            actions: actions
                        };
                    }; // even though the name of this function mentions reentry nodes
                    // we are pushing its result into `exitSet`
                    // that's because what we exit might be reentered (it's an invariant of reentrancy)


                    StateNode.prototype.getPotentiallyReenteringNodes = function (targetNode) {
                        if (this.order < targetNode.order) {
                            return [this];
                        }

                        var nodes = [];
                        var marker = this;
                        var possibleAncestor = targetNode;

                        while (marker && marker !== possibleAncestor) {
                            nodes.push(marker);
                            marker = marker.parent;
                        }

                        if (marker !== possibleAncestor) {
                            // we never got to `possibleAncestor`, therefore the initial `marker` "escapes" it
                            // it's in a different part of the tree so no states will be reentered for such an external transition
                            return [];
                        }

                        nodes.push(possibleAncestor);
                        return nodes;
                    };

                    StateNode.prototype.getActions = function (resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {
                        var e_4, _a, e_5, _b;

                        var _this = this;

                        var prevConfig = prevState ? getConfiguration([], this.getStateNodes(prevState.value)) : [];
                        var entrySet = new Set();

                        try {
                            for (var _c = _tslib_values(Array.from(resolvedConfig).sort(function (a, b) {
                                return a.order - b.order;
                            })), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var sn = _d.value;

                                if (!has(prevConfig, sn) || has(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {
                                    entrySet.add(sn);
                                }
                            }
                        } catch (e_4_1) {
                            e_4 = {
                                error: e_4_1
                            };
                        } finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                            } finally {
                                if (e_4) throw e_4.error;
                            }
                        }

                        try {
                            for (var prevConfig_1 = _tslib_values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
                                var sn = prevConfig_1_1.value;

                                if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {
                                    transition.exitSet.push(sn);
                                }
                            }
                        } catch (e_5_1) {
                            e_5 = {
                                error: e_5_1
                            };
                        } finally {
                            try {
                                if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);
                            } finally {
                                if (e_5) throw e_5.error;
                            }
                        }

                        transition.exitSet.sort(function (a, b) {
                            return b.order - a.order;
                        });
                        var entryStates = Array.from(entrySet).sort(function (a, b) {
                            return a.order - b.order;
                        });
                        var exitStates = new Set(transition.exitSet);
                        var doneEvents = flatten(entryStates.map(function (sn) {
                            var events = [];

                            if (sn.type !== 'final') {
                                return events;
                            }

                            var parent = sn.parent;

                            if (!parent.parent) {
                                return events;
                            }

                            events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.
                                done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));
                            var grandparent = parent.parent;

                            if (grandparent.type === 'parallel') {
                                if (getChildren(grandparent).every(function (parentNode) {
                                    return isInFinalState(transition.configuration, parentNode);
                                })) {
                                    events.push(done(grandparent.id));
                                }
                            }

                            return events;
                        }));
                        var entryActions = entryStates.map(function (stateNode) {
                            var entryActions = stateNode.onEntry;
                            var invokeActions = stateNode.activities.map(function (activity) {
                                return actions_start(activity);
                            });
                            return {
                                type: 'entry',
                                actions: toActionObjects(predictableExec ? _tslib_spreadArray(_tslib_spreadArray([], _tslib_read(entryActions), false), _tslib_read(invokeActions), false) : _tslib_spreadArray(_tslib_spreadArray([], _tslib_read(invokeActions), false), _tslib_read(entryActions), false), _this.machine.options.actions)
                            };
                        }).concat({
                            type: 'state_done',
                            actions: doneEvents.map(function (event) {
                                return actions_raise(event);
                            })
                        });
                        var exitActions = Array.from(exitStates).map(function (stateNode) {
                            return {
                                type: 'exit',
                                actions: toActionObjects(_tslib_spreadArray(_tslib_spreadArray([], _tslib_read(stateNode.onExit), false), _tslib_read(stateNode.activities.map(function (activity) {
                                    return actions_stop(activity);
                                })), false), _this.machine.options.actions)
                            };
                        });
                        var actions = exitActions.concat({
                            type: 'transition',
                            actions: toActionObjects(transition.actions, this.machine.options.actions)
                        }).concat(entryActions);

                        if (isDone) {
                            var stopActions = toActionObjects(flatten(_tslib_spreadArray([], _tslib_read(resolvedConfig), false).sort(function (a, b) {
                                return b.order - a.order;
                            }).map(function (stateNode) {
                                return stateNode.onExit;
                            })), this.machine.options.actions).filter(function (action) {
                                return !isRaisableAction(action);
                            });
                            return actions.concat({
                                type: 'stop',
                                actions: stopActions
                            });
                        }

                        return actions;
                    };
                    /**
                     * Determines the next state given the current `state` and sent `event`.
                     *
                     * @param state The current State instance or state value
                     * @param event The event that was sent at the current state
                     * @param context The current context (extended state) of the current state
                     */


                    StateNode.prototype.transition = function (state, event, context, exec) {
                        if (state === void 0) {
                            state = this.initialState;
                        }

                        var _event = toSCXMLEvent(event);

                        var currentState;

                        if (state instanceof State) {
                            currentState = context === undefined ? state : this.resolveState(State.from(state, context));
                        } else {
                            var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);
                            var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
                            currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));
                        }

                        if (!IS_PRODUCTION && _event.name === WILDCARD) {
                            throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
                        }

                        if (this.strict) {
                            if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {
                                throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
                            }
                        }

                        var stateTransition = this._transition(currentState.value, currentState, _event) || {
                            transitions: [],
                            configuration: [],
                            exitSet: [],
                            source: currentState,
                            actions: []
                        };
                        var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));
                        var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;
                        stateTransition.configuration = _tslib_spreadArray([], _tslib_read(resolvedConfig), false);
                        return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
                    };

                    StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent, predictableExec) {
                        var _a;

                        var currentActions = state.actions;
                        state = this.transition(state, _event, undefined, predictableExec); // Save original event to state
                        // TODO: this should be the raised event! Delete in V5 (breaking)

                        state._event = originalEvent;
                        state.event = originalEvent.data;

                        (_a = state.actions).unshift.apply(_a, _tslib_spreadArray([], _tslib_read(currentActions), false));

                        return state;
                    };

                    StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, predictableExec, _event) {
                        var e_6, _a, e_7, _b;

                        var _this = this;

                        if (_event === void 0) {
                            _event = initEvent;
                        }

                        var configuration = stateTransition.configuration; // Transition will "apply" if:
                        // - this is the initial state (there is no current state)
                        // - OR there are transitions

                        var willTransition = !currentState || stateTransition.transitions.length > 0;
                        var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
                        var isDone = isInFinalState(resolvedConfiguration, this);
                        var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;
                        var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;
                        var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);
                        var activities = currentState ? _tslib_assign({}, currentState.activities) : {};

                        try {
                            for (var actionBlocks_1 = _tslib_values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
                                var block = actionBlocks_1_1.value;

                                try {
                                    for (var _c = (e_7 = void 0, _tslib_values(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                        var action = _d.value;

                                        if (action.type === start) {
                                            activities[action.activity.id || action.activity.type] = action;
                                        } else if (action.type === stop) {
                                            activities[action.activity.id || action.activity.type] = false;
                                        }
                                    }
                                } catch (e_7_1) {
                                    e_7 = {
                                        error: e_7_1
                                    };
                                } finally {
                                    try {
                                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                                    } finally {
                                        if (e_7) throw e_7.error;
                                    }
                                }
                            }
                        } catch (e_6_1) {
                            e_6 = {
                                error: e_6_1
                            };
                        } finally {
                            try {
                                if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);
                            } finally {
                                if (e_6) throw e_6.error;
                            }
                        }

                        var _e = _tslib_read(resolveActions(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2),
                            resolvedActions = _e[0],
                            updatedContext = _e[1];

                        var _f = _tslib_read(utils_partition(resolvedActions, isRaisableAction), 2),
                            raisedEvents = _f[0],
                            nonRaisedActions = _f[1];

                        var invokeActions = resolvedActions.filter(function (action) {
                            var _a;

                            return action.type === start && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;
                        });
                        var children = invokeActions.reduce(function (acc, action) {
                            acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);
                            return acc;
                        }, currentState ? _tslib_assign({}, currentState.children) : {});
                        var nextState = new State({
                            value: resolvedStateValue || currentState.value,
                            context: updatedContext,
                            _event: _event,
                            // Persist _sessionid between states
                            _sessionid: currentState ? currentState._sessionid : null,
                            historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,
                            history: !resolvedStateValue || stateTransition.source ? currentState : undefined,
                            actions: resolvedStateValue ? nonRaisedActions : [],
                            activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
                            events: [],
                            configuration: resolvedConfiguration,
                            transitions: stateTransition.transitions,
                            children: children,
                            done: isDone,
                            tags: getTagsFromConfiguration(resolvedConfiguration),
                            machine: this
                        });
                        var didUpdateContext = context !== updatedContext;
                        nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks

                        var history = nextState.history;

                        if (history) {
                            delete history.history;
                        } // There are transient transitions if the machine is not in a final state
                        // and if some of the state nodes have transient ("always") transitions.


                        var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function (stateNode) {
                            return stateNode._transient;
                        })); // If there are no enabled transitions, check if there are transient transitions.
                        // If there are transient transitions, continue checking for more transitions
                        // because an transient transition should be triggered even if there are no
                        // enabled transitions.
                        //
                        // If we're already working on an transient transition then stop to prevent an infinite loop.
                        //
                        // Otherwise, if there are no enabled nor transient transitions, we are done.

                        if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
                            return nextState;
                        }

                        var maybeNextState = nextState;

                        if (!isDone) {
                            if (hasAlwaysTransitions) {
                                maybeNextState = this.resolveRaisedTransition(maybeNextState, {
                                    type: nullEvent
                                }, _event, predictableExec);
                            }

                            while (raisedEvents.length) {
                                var raisedEvent = raisedEvents.shift();
                                maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
                            }
                        } // Detect if state changed


                        var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);
                        maybeNextState.changed = changed; // Preserve original history after raised events

                        maybeNextState.history = history;
                        return maybeNextState;
                    };
                    /**
                     * Returns the child state node from its relative `stateKey`, or throws.
                     */


                    StateNode.prototype.getStateNode = function (stateKey) {
                        if (isStateId(stateKey)) {
                            return this.machine.getStateNodeById(stateKey);
                        }

                        if (!this.states) {
                            throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
                        }

                        var result = this.states[stateKey];

                        if (!result) {
                            throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
                        }

                        return result;
                    };
                    /**
                     * Returns the state node with the given `stateId`, or throws.
                     *
                     * @param stateId The state ID. The prefix "#" is removed.
                     */


                    StateNode.prototype.getStateNodeById = function (stateId) {
                        var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;

                        if (resolvedStateId === this.id) {
                            return this;
                        }

                        var stateNode = this.machine.idMap[resolvedStateId];

                        if (!stateNode) {
                            throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
                        }

                        return stateNode;
                    };
                    /**
                     * Returns the relative state node from the given `statePath`, or throws.
                     *
                     * @param statePath The string or string array relative path to the state node.
                     */


                    StateNode.prototype.getStateNodeByPath = function (statePath) {
                        if (typeof statePath === 'string' && isStateId(statePath)) {
                            try {
                                return this.getStateNodeById(statePath.slice(1));
                            } catch (e) {// try individual paths
                                // throw e;
                            }
                        }

                        var arrayStatePath = toStatePath(statePath, this.delimiter).slice();
                        var currentStateNode = this;

                        while (arrayStatePath.length) {
                            var key = arrayStatePath.shift();

                            if (!key.length) {
                                break;
                            }

                            currentStateNode = currentStateNode.getStateNode(key);
                        }

                        return currentStateNode;
                    };
                    /**
                     * Resolves a partial state value with its full representation in this machine.
                     *
                     * @param stateValue The partial state value to resolve.
                     */


                    StateNode.prototype.resolve = function (stateValue) {
                        var _a;

                        var _this = this;

                        if (!stateValue) {
                            return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties
                        }

                        switch (this.type) {
                            case 'parallel':
                                return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {
                                    return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
                                });

                            case 'compound':
                                if (isString(stateValue)) {
                                    var subStateNode = this.getStateNode(stateValue);

                                    if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {
                                        return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
                                    }

                                    return stateValue;
                                }

                                if (!Object.keys(stateValue).length) {
                                    return this.initialStateValue || {};
                                }

                                return mapValues(stateValue, function (subStateValue, subStateKey) {
                                    return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
                                });

                            default:
                                return stateValue || EMPTY_OBJECT;
                        }
                    };

                    StateNode.prototype.getResolvedPath = function (stateIdentifier) {
                        if (isStateId(stateIdentifier)) {
                            var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];

                            if (!stateNode) {
                                throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
                            }

                            return stateNode.path;
                        }

                        return toStatePath(stateIdentifier, this.delimiter);
                    };

                    Object.defineProperty(StateNode.prototype, "initialStateValue", {
                        get: function () {
                            var _a;

                            if (this.__cache.initialStateValue) {
                                return this.__cache.initialStateValue;
                            }

                            var initialStateValue;

                            if (this.type === 'parallel') {
                                initialStateValue = mapFilterValues(this.states, function (state) {
                                    return state.initialStateValue || EMPTY_OBJECT;
                                }, function (stateNode) {
                                    return !(stateNode.type === 'history');
                                });
                            } else if (this.initial !== undefined) {
                                if (!this.states[this.initial]) {
                                    throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
                                }

                                initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
                            } else {
                                // The finite state value of a machine without child states is just an empty object
                                initialStateValue = {};
                            }

                            this.__cache.initialStateValue = initialStateValue;
                            return this.__cache.initialStateValue;
                        },
                        enumerable: false,
                        configurable: true
                    });

                    StateNode.prototype.getInitialState = function (stateValue, context) {
                        this._init(); // TODO: this should be in the constructor (see note in constructor)


                        var configuration = this.getStateNodes(stateValue);
                        return this.resolveTransition({
                            configuration: configuration,
                            exitSet: [],
                            transitions: [],
                            source: undefined,
                            actions: []
                        }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);
                    };

                    Object.defineProperty(StateNode.prototype, "initialState", {
                        /**
                         * The initial State instance, which includes all actions to be executed from
                         * entering the initial state.
                         */
                        get: function () {
                            var initialStateValue = this.initialStateValue;

                            if (!initialStateValue) {
                                throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
                            }

                            return this.getInitialState(initialStateValue);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(StateNode.prototype, "target", {
                        /**
                         * The target state value of the history state node, if it exists. This represents the
                         * default state value to transition to if no history value exists yet.
                         */
                        get: function () {
                            var target;

                            if (this.type === 'history') {
                                var historyConfig = this.config;

                                if (isString(historyConfig.target)) {
                                    target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
                                } else {
                                    target = historyConfig.target;
                                }
                            }

                            return target;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    /**
                     * Returns the leaf nodes from a state path relative to this state node.
                     *
                     * @param relativeStateId The relative state path to retrieve the state nodes
                     * @param history The previous state to retrieve history
                     * @param resolve Whether state nodes should resolve to initial child state nodes
                     */

                    StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
                        if (resolve === void 0) {
                            resolve = true;
                        }

                        return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
                    };

                    Object.defineProperty(StateNode.prototype, "initialStateNodes", {
                        get: function () {
                            var _this = this;

                            if (isLeafNode(this)) {
                                return [this];
                            } // Case when state node is compound but no initial state is defined


                            if (this.type === 'compound' && !this.initial) {
                                if (!IS_PRODUCTION) {
                                    warn(false, "Compound state node '".concat(this.id, "' has no initial state."));
                                }

                                return [this];
                            }

                            var initialStateNodePaths = toStatePaths(this.initialStateValue);
                            return flatten(initialStateNodePaths.map(function (initialPath) {
                                return _this.getFromRelativePath(initialPath);
                            }));
                        },
                        enumerable: false,
                        configurable: true
                    });
                    /**
                     * Retrieves state nodes from a relative path to this state node.
                     *
                     * @param relativePath The relative path from this state node
                     * @param historyValue
                     */

                    StateNode.prototype.getFromRelativePath = function (relativePath) {
                        if (!relativePath.length) {
                            return [this];
                        }

                        var _a = _tslib_read(relativePath),
                            stateKey = _a[0],
                            childStatePath = _a.slice(1);

                        if (!this.states) {
                            throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
                        }

                        var childStateNode = this.getStateNode(stateKey);

                        if (childStateNode.type === 'history') {
                            return childStateNode.resolveHistory();
                        }

                        if (!this.states[stateKey]) {
                            throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
                        }

                        return this.states[stateKey].getFromRelativePath(childStatePath);
                    };

                    StateNode.prototype.historyValue = function (relativeStateValue) {
                        if (!Object.keys(this.states).length) {
                            return undefined;
                        }

                        return {
                            current: relativeStateValue || this.initialStateValue,
                            states: mapFilterValues(this.states, function (stateNode, key) {
                                if (!relativeStateValue) {
                                    return stateNode.historyValue();
                                }

                                var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];
                                return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
                            }, function (stateNode) {
                                return !stateNode.history;
                            })
                        };
                    };
                    /**
                     * Resolves to the historical value(s) of the parent state node,
                     * represented by state nodes.
                     *
                     * @param historyValue
                     */


                    StateNode.prototype.resolveHistory = function (historyValue) {
                        var _this = this;

                        if (this.type !== 'history') {
                            return [this];
                        }

                        var parent = this.parent;

                        if (!historyValue) {
                            var historyTarget = this.target;
                            return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {
                                return parent.getFromRelativePath(relativeChildPath);
                            })) : parent.initialStateNodes;
                        }

                        var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;

                        if (isString(subHistoryValue)) {
                            return [parent.getStateNode(subHistoryValue)];
                        }

                        return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {
                            return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
                        }));
                    };

                    Object.defineProperty(StateNode.prototype, "stateIds", {
                        /**
                         * All the state node IDs of this state node and its descendant state nodes.
                         */
                        get: function () {
                            var _this = this;

                            var childStateIds = flatten(Object.keys(this.states).map(function (stateKey) {
                                return _this.states[stateKey].stateIds;
                            }));
                            return [this.id].concat(childStateIds);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(StateNode.prototype, "events", {
                        /**
                         * All the event types accepted by this state node and its descendants.
                         */
                        get: function () {
                            var e_8, _a, e_9, _b;

                            if (this.__cache.events) {
                                return this.__cache.events;
                            }

                            var states = this.states;
                            var events = new Set(this.ownEvents);

                            if (states) {
                                try {
                                    for (var _c = _tslib_values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                        var stateId = _d.value;
                                        var state = states[stateId];

                                        if (state.states) {
                                            try {
                                                for (var _e = (e_9 = void 0, _tslib_values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                                    var event_1 = _f.value;
                                                    events.add("".concat(event_1));
                                                }
                                            } catch (e_9_1) {
                                                e_9 = {
                                                    error: e_9_1
                                                };
                                            } finally {
                                                try {
                                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                                } finally {
                                                    if (e_9) throw e_9.error;
                                                }
                                            }
                                        }
                                    }
                                } catch (e_8_1) {
                                    e_8 = {
                                        error: e_8_1
                                    };
                                } finally {
                                    try {
                                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                                    } finally {
                                        if (e_8) throw e_8.error;
                                    }
                                }
                            }

                            return this.__cache.events = Array.from(events);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(StateNode.prototype, "ownEvents", {
                        /**
                         * All the events that have transitions directly from this state node.
                         *
                         * Excludes any inert events.
                         */
                        get: function () {
                            var events = new Set(this.transitions.filter(function (transition) {
                                return !(!transition.target && !transition.actions.length && transition.internal);
                            }).map(function (transition) {
                                return transition.eventType;
                            }));
                            return Array.from(events);
                        },
                        enumerable: false,
                        configurable: true
                    });

                    StateNode.prototype.resolveTarget = function (_target) {
                        var _this = this;

                        if (_target === undefined) {
                            // an undefined target signals that the state node should not transition from that state when receiving that event
                            return undefined;
                        }

                        return _target.map(function (target) {
                            if (!isString(target)) {
                                return target;
                            }

                            var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,
                            // do not include machine key on target

                            if (isInternalTarget && !_this.parent) {
                                return _this.getStateNodeByPath(target.slice(1));
                            }

                            var resolvedTarget = isInternalTarget ? _this.key + target : target;

                            if (_this.parent) {
                                try {
                                    var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);

                                    return targetStateNode;
                                } catch (err) {
                                    throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
                                }
                            } else {
                                return _this.getStateNodeByPath(resolvedTarget);
                            }
                        });
                    };

                    StateNode.prototype.formatTransition = function (transitionConfig) {
                        var _this = this;

                        var normalizedTarget = normalizeTarget(transitionConfig.target);
                        var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {
                            return isString(_target) && _target[0] === _this.delimiter;
                        }) : true;
                        var guards = this.machine.options.guards;
                        var target = this.resolveTarget(normalizedTarget);

                        var transition = _tslib_assign(_tslib_assign({}, transitionConfig), {
                            actions: toActionObjects(toArray(transitionConfig.actions)),
                            cond: toGuard(transitionConfig.cond, guards),
                            target: target,
                            source: this,
                            internal: internal,
                            eventType: transitionConfig.event,
                            toJSON: function () {
                                return _tslib_assign(_tslib_assign({}, transition), {
                                    target: transition.target ? transition.target.map(function (t) {
                                        return "#".concat(t.id);
                                    }) : undefined,
                                    source: "#".concat(_this.id)
                                });
                            }
                        });

                        return transition;
                    };

                    StateNode.prototype.formatTransitions = function () {
                        var e_10, _a;

                        var _this = this;

                        var onConfig;

                        if (!this.config.on) {
                            onConfig = [];
                        } else if (Array.isArray(this.config.on)) {
                            onConfig = this.config.on;
                        } else {
                            var _b = this.config.on,
                                _c = WILDCARD,
                                _d = _b[_c],
                                wildcardConfigs = _d === void 0 ? [] : _d,
                                strictTransitionConfigs_1 = _tslib_rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);

                            onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function (key) {
                                if (!IS_PRODUCTION && key === NULL_EVENT) {
                                    warn(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + "Please check the `on` configuration for \"#".concat(_this.id, "\"."));
                                }

                                var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);

                                if (!IS_PRODUCTION) {
                                    validateArrayifiedTransitions(_this, key, transitionConfigArray);
                                }

                                return transitionConfigArray;
                            }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));
                        }

                        var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];
                        var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];

                        if (!IS_PRODUCTION) {
                            warn(!(this.config.onDone && !this.parent), "Root nodes cannot have an \".onDone\" transition. Please check the config of \"".concat(this.id, "\"."));
                        }

                        var invokeConfig = flatten(this.invoke.map(function (invokeDef) {
                            var settleTransitions = [];

                            if (invokeDef.onDone) {
                                settleTransitions.push.apply(settleTransitions, _tslib_spreadArray([], _tslib_read(toTransitionConfigArray(String(actions_doneInvoke(invokeDef.id)), invokeDef.onDone)), false));
                            }

                            if (invokeDef.onError) {
                                settleTransitions.push.apply(settleTransitions, _tslib_spreadArray([], _tslib_read(toTransitionConfigArray(String(actions_error(invokeDef.id)), invokeDef.onError)), false));
                            }

                            return settleTransitions;
                        }));
                        var delayedTransitions = this.after;
                        var formattedTransitions = flatten(_tslib_spreadArray(_tslib_spreadArray(_tslib_spreadArray(_tslib_spreadArray([], _tslib_read(doneConfig), false), _tslib_read(invokeConfig), false), _tslib_read(onConfig), false), _tslib_read(eventlessConfig), false).map(function (transitionConfig) {
                            return toArray(transitionConfig).map(function (transition) {
                                return _this.formatTransition(transition);
                            });
                        }));

                        try {
                            for (var delayedTransitions_1 = _tslib_values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
                                var delayedTransition = delayedTransitions_1_1.value;
                                formattedTransitions.push(delayedTransition);
                            }
                        } catch (e_10_1) {
                            e_10 = {
                                error: e_10_1
                            };
                        } finally {
                            try {
                                if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);
                            } finally {
                                if (e_10) throw e_10.error;
                            }
                        }

                        return formattedTransitions;
                    };

                    return StateNode;
                }();



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/Machine.js



            var warned = false;
            function Machine(config, options, initialContext) {
                if (initialContext === void 0) {
                    initialContext = config.context;
                }

                return new StateNode(config, options, initialContext);
            }
            function createMachine(config, options) {
                if (!IS_PRODUCTION && !('predictableActionArguments' in config) && !warned) {
                    warned = true;
                    console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');
                }

                return new StateNode_StateNode(config, options);
            }



            ;// CONCATENATED MODULE: ./node_modules/xstate/es/index.js















            var es_assign = actions_assign,
                es_cancel = (/* unused pure expression or super */ null && (cancel$1)),
                es_send = (/* unused pure expression or super */ null && (send$1)),
                es_sendTo = (/* unused pure expression or super */ null && (sendTo$1)),
                es_sendParent = (/* unused pure expression or super */ null && (sendParent$1)),
                es_sendUpdate = sendUpdate,
                es_forwardTo = forwardTo,
                es_doneInvoke = (/* unused pure expression or super */ null && (doneInvoke$1)),
                es_raise = (/* unused pure expression or super */ null && (raise$1)),
                es_log = (/* unused pure expression or super */ null && (log$1)),
                es_pure = (/* unused pure expression or super */ null && (pure$1)),
                es_choose = (/* unused pure expression or super */ null && (choose$1)),
                es_stop = (/* unused pure expression or super */ null && (stop$1));



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actions.mjs
            const { assign: actions_o, stop: actions_s } = actions_namespaceObject, actions_n = e => actions_s(e), actions_i = actions_o({ attributeToVerify: e => { } }), actions_u = actions_o({ challengeName: e => { } }), actions_m = actions_o({ requiredAttributes: e => { } }), actions_l = actions_o({ remoteError: e => "" }), actions_d = actions_o({ formValues: e => ({}) }), actions_c = actions_o({ touched: e => ({}) }), actions_p = actions_o({ unverifiedContactMethods: e => { } }), actions_f = actions_o({ username: e => { } }), actions_v = actions_o({ validationError: e => ({}) }), actions_h = actions_o({ totpSecretCode: (e, r) => r.data }), actions_g = actions_o({ challengeName: (e, r) => { var t; return null === (t = r.data) || void 0 === t ? void 0 : t.challengeName } }), actions_b = actions_o({ requiredAttributes: (e, r) => { var t, a; return null === (a = null === (t = r.data) || void 0 === t ? void 0 : t.challengeParam) || void 0 === a ? void 0 : a.requiredAttributes } }), V = actions_o({ redirectIntent: e => "confirmPasswordReset" }), actions_j = actions_o({ redirectIntent: e => "confirmSignUp" }), actions_y = actions_o({ authAttributes: (e, r) => { var t, a; const [o] = e.loginMechanisms; return { username: null !== (t = e.formValues[o]) && void 0 !== t ? t : e.formValues.username, password: null === (a = e.formValues) || void 0 === a ? void 0 : a.password } } }), O = actions_o({ validationError: (e, r) => r.data }), _ = actions_o({ remoteError: (e, r) => { var t; return "NoUserPoolError" === r.data.name ? "Configuration error (see console) â€“ please contact the administrator" : (null === (t = r.data) || void 0 === t ? void 0 : t.message) || r.data } }), actions_w = actions_o({ unverifiedContactMethods: (e, r) => r.data.unverified }), actions_A = actions_o({ user: (e, r) => r.data.user || r.data }), actions_C = actions_o({ username: (e, r) => { let { formValues: { username: t, country_code: a } } = e; return a && (t = `${a}${t}`), t } }), actions_E = actions_o({ codeDeliveryDetails: (e, r) => r.data.codeDeliveryDetails }), N = actions_o({ authAttributes: (e, r) => ({ username: e.formValues.username }) }), $ = actions_o({ formValues: (e, r) => { const { name: t, value: a } = r.data; return Object.assign(Object.assign({}, e.formValues), { [t]: a }) } }), D = actions_o({ formValues: (e, r) => { const t = Object.assign(Object.assign({}, e.formValues), r.data); return g(t, "password") } }), M = actions_o({ touched: (e, r) => { const { name: t } = r.data; return Object.assign(Object.assign({}, e.touched), { [`${t}`]: !0 }) } }), P = t => __awaiter(void 0, void 0, void 0, (function* () { const { username: e } = t; return yield Auth/* Auth */.g.forgotPassword(e) })), actions_q = actions_o({ formValues: (e, r) => { var t; const [a = "username"] = e.loginMechanisms; if (!e.formValues.phone_number && "phone_number" !== a) return e.formValues; const { formValues: o, country_code: s } = e, n = o.phone_number ? "phone_number" : "username", i = `${null !== (t = o.country_code) && void 0 !== t ? t : s}${o[n]}`.replace(/[^A-Z0-9+]/gi, ""), u = Object.assign(Object.assign({}, o), { [n]: i }); return delete u.country_code, u } });

            // EXTERNAL MODULE: ./node_modules/lodash/get.js
            var get = __webpack_require__(7361);
            // EXTERNAL MODULE: ./node_modules/lodash/merge.js
            var merge = __webpack_require__(2492);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/validators/index.mjs
            const validators_e = (e, m, s, t) => __awaiter(void 0, void 0, void 0, (function* () { const o = yield Promise.all(t.map((o => o(e, m, s)))), l = merge({}, ...o); return i(l) ? Promise.resolve() : Promise.reject(l) }));

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/defaultServices.mjs
            const defaultServices_o = { getAmplifyConfig() { return __awaiter(this, void 0, void 0, (function* () { return Amplify/* Amplify */.d.configure() })) }, getCurrentUser() { return __awaiter(this, void 0, void 0, (function* () { return Auth/* Auth */.g.currentAuthenticatedUser() })) }, handleSignUp(t) { return __awaiter(this, void 0, void 0, (function* () { return Auth/* Auth */.g.signUp(Object.assign(Object.assign({}, t), { autoSignIn: { enabled: !0 } })) })) }, handleSignIn({ username: t, password: n }) { return __awaiter(this, void 0, void 0, (function* () { return Auth/* Auth */.g.signIn(t, n) })) }, handleConfirmSignIn({ user: t, code: n, mfaType: o }) { return __awaiter(this, void 0, void 0, (function* () { return Auth/* Auth */.g.confirmSignIn(t, n, o) })) }, handleConfirmSignUp({ username: t, code: n }) { return __awaiter(this, void 0, void 0, (function* () { return yield Auth/* Auth */.g.confirmSignUp(t, n) })) }, handleForgotPasswordSubmit({ username: t, code: n, password: o }) { return __awaiter(this, void 0, void 0, (function* () { return Auth/* Auth */.g.forgotPasswordSubmit(t, n, o) })) }, handleForgotPassword(t) { return __awaiter(this, void 0, void 0, (function* () { return Auth/* Auth */.g.forgotPassword(t) })) }, validateCustomSignUp(t, s) { return __awaiter(this, void 0, void 0, (function* () { })) }, validateFormPassword(t, s, o) { return __awaiter(this, void 0, void 0, (function* () { const { password: r } = t, { password: e } = s; if (!e || !o) return null; const i = [], a = +(null == o ? void 0 : o.passwordPolicyMinLength); r.length < a && i.push(`Password must have at least ${a} characters`); const u = null == o ? void 0 : o.passwordPolicyCharacters; return null == u || u.forEach((t => { switch (t) { case "REQUIRES_LOWERCASE": /[a-z]/.test(r) || i.push("Password must have lower case letters"); break; case "REQUIRES_UPPERCASE": /[A-Z]/.test(r) || i.push("Password must have upper case letters"); break; case "REQUIRES_NUMBERS": /[0-9]/.test(r) || i.push("Password must have numbers"); break; case "REQUIRES_SYMBOLS": utils_p(r) || i.push("Password must have special characters") } })), 0 !== i.length ? { password: i } : null })) }, validateConfirmPassword(t, s) { return __awaiter(this, void 0, void 0, (function* () { const { password: r, confirm_password: n } = t, { confirm_password: o, password: e } = s; return r || n ? (r || n) && r !== n && (o && e || (null == r ? void 0 : r.length) >= 6 && (null == n ? void 0 : n.length) >= 6) ? { confirm_password: "Your passwords must match" } : void 0 : null })) }, validatePreferredUsername(t, s) { return __awaiter(this, void 0, void 0, (function* () { })) } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signIn.mjs
            const signIn_ = ["SMS_MFA", "SOFTWARE_TOKEN_MFA"], signIn_F = e => get(e, "data.challengeName"), signIn_O = (e, t) => e === t, signIn_j = e => signIn_.includes(e); function signIn_k({ services: n }) { return createMachine({ initial: "init", id: "signInActor", predictableActionArguments: !0, states: { init: { always: [{ target: "autoSignIn.submit", cond: "shouldAutoSubmit" }, { target: "autoSignIn", cond: "shouldAutoSignIn" }, { target: "signIn" }] }, signIn: { initial: "edit", exit: ["clearFormValues", "clearTouched"], states: { edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, CHANGE: { actions: "handleInput" }, FEDERATED_SIGN_IN: "federatedSignIn" } }, federatedSignIn: { tags: ["pending"], entry: ["sendUpdate", "clearError"], invoke: { src: "federatedSignIn", onError: { actions: "setRemoteError" } } }, submit: { tags: ["pending"], entry: ["parsePhoneNumber", "clearError", "sendUpdate"], invoke: { src: "signIn", onDone: [{ cond: "shouldSetupTOTP", actions: ["setUser", "setChallengeName"], target: "#signInActor.setupTOTP" }, { cond: "shouldConfirmSignIn", actions: ["setUser", "setChallengeName"], target: "#signInActor.confirmSignIn" }, { cond: "shouldForceChangePassword", actions: ["setUser", "setChallengeName", "setRequiredAttributes"], target: "#signInActor.forceNewPassword" }, { actions: "setUser", target: "verifying" }], onError: [{ cond: "shouldRedirectToConfirmSignUp", actions: ["setCredentials", "setConfirmSignUpIntent"], target: "rejected" }, { cond: "shouldRedirectToConfirmResetPassword", actions: ["setUsernameAuthAttributes", "setConfirmResetPasswordIntent"], target: "rejected" }, { actions: "setRemoteError", target: "edit" }] } }, verifying: { tags: ["pending"], entry: ["clearError", "sendUpdate"], invoke: { src: "checkVerifiedContact", onDone: [{ cond: "shouldRequestVerification", target: "#signInActor.verifyUser", actions: "setUnverifiedContactMethods" }, { target: "resolved" }], onError: { actions: "setRemoteError", target: "edit" } } }, resolved: { always: "#signInActor.resolved" }, rejected: { always: "#signInActor.rejected" } } }, autoSignIn: { initial: "pending", states: { pending: { tags: ["pending"], entry: ["clearError", "sendUpdate"], on: { AUTO_SIGN_IN: [{ cond: "shouldSetupTOTP", actions: ["setUser", "setChallengeName"], target: "#signInActor.setupTOTP" }, { cond: "shouldConfirmSignIn", actions: ["setUser", "setChallengeName"], target: "#signInActor.confirmSignIn" }, { cond: "shouldForceChangePassword", actions: ["setUser", "setChallengeName", "setRequiredAttributes"], target: "#signInActor.forceNewPassword" }, { actions: "setUser", target: "#signInActor.resolved" }], AUTO_SIGN_IN_FAILURE: { actions: "setRemoteError", target: "pending" } } }, submit: { tags: ["pending"], entry: ["clearError", "sendUpdate"], invoke: { src: "signIn", onDone: [{ cond: "shouldSetupTOTP", actions: ["setUser", "setChallengeName"], target: "#signInActor.setupTOTP" }, { cond: "shouldConfirmSignIn", actions: ["setUser", "setChallengeName"], target: "#signInActor.confirmSignIn" }, { cond: "shouldForceChangePassword", actions: ["setUser", "setChallengeName", "setRequiredAttributes"], target: "#signInActor.forceNewPassword" }, { actions: "setUser", target: "#signInActor.resolved" }], onError: { actions: "setRemoteError", target: "#signInActor.signIn" } } }, resolved: { always: "#signInActor.resolved" }, rejected: { always: "#signInActor.rejected" } } }, confirmSignIn: { initial: "edit", exit: ["clearFormValues", "clearError", "clearTouched"], states: { edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, SIGN_IN: "#signInActor.signIn", CHANGE: { actions: "handleInput" } } }, submit: { tags: ["pending"], entry: ["clearError", "sendUpdate"], invoke: { src: "confirmSignIn", onDone: { target: "#signInActor.resolved", actions: ["setUser", "clearChallengeName", "clearRequiredAttributes"] }, onError: { target: "edit", actions: "setRemoteError" } } } } }, forceNewPassword: { type: "parallel", exit: ["clearFormValues", "clearError", "clearTouched"], states: { validation: { initial: "pending", states: { pending: { invoke: { src: "validateFields", onDone: { target: "valid", actions: "clearValidationError" }, onError: { target: "invalid", actions: "setFieldErrors" } } }, valid: { entry: "sendUpdate" }, invalid: { entry: "sendUpdate" } }, on: { SIGN_IN: "#signInActor.signIn", CHANGE: { actions: "handleInput", target: ".pending" }, BLUR: { actions: "handleBlur", target: ".pending" } } }, submit: { initial: "idle", entry: "clearError", states: { idle: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "validate" } } }, validate: { entry: "sendUpdate", invoke: { src: "validateFields", onDone: { target: "pending", actions: "clearValidationError" }, onError: { target: "idle", actions: "setFieldErrors" } } }, pending: { tags: ["pending"], entry: ["sendUpdate", "clearError"], invoke: { src: "forceNewPassword", onDone: [{ cond: "shouldConfirmSignIn", actions: ["setUser", "setChallengeName"], target: "#signInActor.confirmSignIn" }, { cond: "shouldSetupTOTP", actions: ["setUser", "setChallengeName"], target: "#signInActor.setupTOTP" }, { target: "resolved", actions: ["setUser", "setCredentials"] }], onError: { target: "idle", actions: "setRemoteError" } } }, resolved: { type: "final", always: "#signInActor.resolved" } } } } }, setupTOTP: { initial: "getTotpSecretCode", exit: ["clearFormValues", "clearError", "clearTouched"], states: { getTotpSecretCode: { invoke: { src: "getTotpSecretCode", onDone: { target: "edit", actions: "setTotpSecretCode" }, onError: { target: "edit", actions: "setRemoteError" } } }, edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, SIGN_IN: "#signInActor.signIn", CHANGE: { actions: "handleInput" } } }, submit: { tags: ["pending"], entry: ["sendUpdate", "clearError"], invoke: { src: "verifyTotpToken", onDone: { actions: ["clearChallengeName", "clearRequiredAttributes"], target: "#signInActor.resolved" }, onError: { actions: "setRemoteError", target: "edit" } } } } }, verifyUser: { initial: "edit", exit: ["clearFormValues", "clearError", "clearTouched"], states: { edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, SKIP: "#signInActor.resolved", CHANGE: { actions: "handleInput" } } }, submit: { tags: ["pending"], entry: "clearError", invoke: { src: "verifyUser", onDone: { target: "#signInActor.confirmVerifyUser" }, onError: { actions: "setRemoteError", target: "edit" } } } } }, confirmVerifyUser: { initial: "edit", exit: ["clearFormValues", "clearError", "clearUnverifiedContactMethods", "clearAttributeToVerify", "clearTouched"], states: { edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, SKIP: "#signInActor.resolved", CHANGE: { actions: "handleInput" } } }, submit: { tags: ["pending"], entry: "clearError", invoke: { src: "confirmVerifyUser", onDone: { target: "#signInActor.resolved" }, onError: { actions: "setRemoteError", target: "edit" } } } } }, resolved: { type: "final", data: e => ({ user: e.user }) }, rejected: { type: "final", data: (e, t) => ({ intent: e.redirectIntent, authAttributes: e.authAttributes }) } } }, { actions: { clearAttributeToVerify: actions_i, clearChallengeName: actions_u, clearRequiredAttributes: actions_m, clearError: actions_l, clearFormValues: actions_d, clearTouched: actions_c, clearUnverifiedContactMethods: actions_p, clearValidationError: actions_v, handleInput: $, handleSubmit: D, handleBlur: M, parsePhoneNumber: actions_q, setChallengeName: actions_g, setConfirmResetPasswordIntent: V, setConfirmSignUpIntent: actions_j, setRequiredAttributes: actions_b, setCredentials: actions_y, setFieldErrors: O, setRemoteError: _, setTotpSecretCode: actions_h, setUnverifiedContactMethods: actions_w, setUser: actions_A, setUsernameAuthAttributes: N, sendUpdate: es_sendUpdate() }, guards: { shouldAutoSignIn: e => "autoSignIn" === (null == e ? void 0 : e.intent), shouldAutoSubmit: e => "autoSignInSubmit" === (null == e ? void 0 : e.intent), shouldConfirmSignIn: (e, t) => signIn_j(signIn_F(t)), shouldForceChangePassword: (e, t) => signIn_O(signIn_F(t), "NEW_PASSWORD_REQUIRED"), shouldRedirectToConfirmResetPassword: (e, t) => "PasswordResetRequiredException" === t.data.code, shouldRedirectToConfirmSignUp: (e, t) => "UserNotConfirmedException" === t.data.code, shouldRequestVerification: (e, t) => { const { unverified: r, verified: n } = t.data; return i(n) && !i(r) }, shouldSetupTOTP: (e, t) => signIn_O(signIn_F(t), "MFA_SETUP") }, services: { signIn(t) { return __awaiter(this, void 0, void 0, (function* () { const { authAttributes: e = {}, formValues: r = {} } = t, o = Object.assign(Object.assign({}, e), r), { username: i, password: s } = o; return yield n.handleSignIn({ username: i, password: s }) })) }, confirmSignIn(t) { return __awaiter(this, void 0, void 0, (function* () { const { challengeName: e, user: o } = t, { confirmation_code: i } = t.formValues, s = signIn_j(e) ? e : void 0; return yield n.handleConfirmSignIn({ user: o, code: i, mfaType: s }), yield Auth/* Auth */.g.currentAuthenticatedUser() })) }, forceNewPassword(n) { return __awaiter(this, void 0, void 0, (function* () { const { user: e, formValues: o } = n; let i, { password: s, confirm_password: a, phone_number: d, country_code: c } = o, l = __rest(o, ["password", "confirm_password", "phone_number", "country_code"]); d && (i = `${c}${d}`.replace(/[^A-Z0-9+]/gi, ""), l = Object.assign(Object.assign({}, l), { phone_number: i })); try { const t = yield Auth/* Auth */.g.completeNewPassword(e, s, l); return t.challengeName ? t : Auth/* Auth */.g.currentAuthenticatedUser() } catch (e) { return Promise.reject(e) } })) }, getTotpSecretCode(t) { return __awaiter(this, void 0, void 0, (function* () { const { user: e } = t; return Auth/* Auth */.g.setupTOTP(e) })) }, verifyTotpToken(t) { return __awaiter(this, void 0, void 0, (function* () { const { formValues: e, user: n } = t, { confirmation_code: o } = e; return Auth/* Auth */.g.verifyTotpToken(n, o) })) }, federatedSignIn(t, n) { return __awaiter(this, void 0, void 0, (function* () { const { provider: e } = n.data; return yield Auth/* Auth */.g.federatedSignIn({ provider: e }) })) }, checkVerifiedContact(t) { return __awaiter(this, void 0, void 0, (function* () { const { user: e } = t; return yield Auth/* Auth */.g.verifiedContact(e) })) }, verifyUser(t) { return __awaiter(this, void 0, void 0, (function* () { const { unverifiedAttr: e } = t.formValues, n = yield Auth/* Auth */.g.verifyCurrentUserAttribute(e); return t.attributeToVerify = e, n })) }, confirmVerifyUser(t) { return __awaiter(this, void 0, void 0, (function* () { const { attributeToVerify: e } = t, { confirmation_code: n } = t.formValues; return yield Auth/* Auth */.g.verifyCurrentUserAttributeSubmit(e, n) })) }, validateFields(t) { return __awaiter(this, void 0, void 0, (function* () { return validators_e(t.formValues, t.touched, t.passwordSettings, [defaultServices_o.validateFormPassword, defaultServices_o.validateConfirmPassword]) })) } } }) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signOut.mjs
            const signOut_i = createMachine({ initial: "pending", id: "signOutActor", predictableActionArguments: !0, states: { pending: { tags: ["pending"], invoke: { src: "signOut", onDone: "resolved", onError: "rejected" } }, resolved: { type: "final" }, rejected: { type: "final" } } }, { services: { signOut: () => Auth/* Auth */.g.signOut() } });

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/resetPassword.mjs
            function resetPassword_f({ services: f }) { return createMachine({ id: "resetPasswordActor", initial: "init", predictableActionArguments: !0, states: { init: { always: [{ target: "confirmResetPassword", cond: "shouldAutoConfirmReset", actions: "resendCode" }, { target: "resetPassword" }] }, resetPassword: { initial: "edit", exit: ["clearFormValues", "clearError", "clearTouched"], states: { edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, CHANGE: { actions: "handleInput" }, BLUR: { actions: "handleBlur" } } }, submit: { tags: ["pending"], entry: ["sendUpdate", "setUsername", "clearError"], invoke: { src: "resetPassword", onDone: { target: "#resetPasswordActor.confirmResetPassword" }, onError: { actions: ["setRemoteError"], target: "edit" } } } } }, confirmResetPassword: { type: "parallel", exit: ["clearFormValues", "clearError", "clearUsername", "clearTouched"], states: { validation: { initial: "pending", states: { pending: { invoke: { src: "validateFields", onDone: { target: "valid", actions: "clearValidationError" }, onError: { target: "invalid", actions: "setFieldErrors" } } }, valid: { entry: "sendUpdate" }, invalid: { entry: "sendUpdate" } }, on: { CHANGE: { actions: "handleInput", target: ".pending" }, BLUR: { actions: "handleBlur", target: ".pending" } } }, submission: { initial: "idle", states: { idle: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "validate" }, RESEND: "resendCode", CHANGE: { actions: "handleInput" }, BLUR: { actions: "handleBlur" } } }, validate: { entry: "sendUpdate", invoke: { src: "validateFields", onDone: { target: "pending", actions: "clearValidationError" }, onError: { target: "idle", actions: "setFieldErrors" } } }, resendCode: { tags: ["pending"], entry: ["clearError", "sendUpdate"], invoke: { src: "resetPassword", onDone: { target: "idle" }, onError: { actions: "setRemoteError", target: "idle" } } }, pending: { tags: ["pending"], entry: ["clearError", "sendUpdate"], invoke: { src: "confirmResetPassword", onDone: { actions: "clearUsername", target: "#resetPasswordActor.resolved" }, onError: { actions: "setRemoteError", target: "idle" } } } } } } }, resolved: { type: "final" } } }, { actions: { clearError: actions_l, clearFormValues: actions_d, clearTouched: actions_c, clearUsername: actions_f, clearValidationError: actions_v, handleInput: $, handleSubmit: D, handleBlur: M, resendCode: P, setFieldErrors: O, setRemoteError: _, setUsername: actions_C, sendUpdate: es_sendUpdate() }, guards: { shouldAutoConfirmReset: (e, r) => !(!e.intent || "confirmPasswordReset" !== e.intent) }, services: { resetPassword(r) { return __awaiter(this, void 0, void 0, (function* () { const { username: e } = r; return f.handleForgotPassword(e) })) }, confirmResetPassword(r) { return __awaiter(this, void 0, void 0, (function* () { const { username: e } = r, { confirmation_code: t, password: s } = r.formValues; return f.handleForgotPasswordSubmit({ username: e, code: t, password: s }) })) }, validateFields(r, t) { return __awaiter(this, void 0, void 0, (function* () { return validators_e(r.formValues, r.touched, r.passwordSettings, [defaultServices_o.validateFormPassword, defaultServices_o.validateConfirmPassword]) })) } } }) }

            // EXTERNAL MODULE: ./node_modules/lodash/pickBy.js
            var pickBy = __webpack_require__(5937);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/signUp.mjs
            function signUp_y({ services: y }) { return createMachine({ id: "signUpActor", initial: "init", predictableActionArguments: !0, states: { init: { always: [{ target: "confirmSignUp", cond: "shouldInitConfirmSignUp" }, { target: "signUp" }] }, signUp: { type: "parallel", exit: ["clearError", "clearFormValues", "clearTouched"], states: { validation: { initial: "pending", states: { pending: { invoke: { src: "validateSignUp", onDone: { target: "valid", actions: "clearValidationError" }, onError: { target: "invalid", actions: "setFieldErrors" } } }, valid: { entry: "sendUpdate" }, invalid: { entry: "sendUpdate" } }, on: { CHANGE: { actions: "handleInput", target: ".pending" }, BLUR: { actions: "handleBlur", target: ".pending" } } }, submission: { initial: "idle", states: { idle: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "validate" }, FEDERATED_SIGN_IN: "federatedSignIn" } }, federatedSignIn: { tags: ["pending"], entry: ["sendUpdate", "clearError"], invoke: { src: "federatedSignIn", onDone: "#signUpActor.resolved", onError: { actions: "setRemoteError" } } }, validate: { entry: "sendUpdate", invoke: { src: "validateSignUp", onDone: { target: "pending", actions: "clearValidationError" }, onError: { target: "idle", actions: "setFieldErrors" } } }, pending: { tags: ["pending"], entry: ["parsePhoneNumber", "sendUpdate", "clearError"], invoke: { src: "signUp", onDone: [{ cond: "shouldSkipConfirm", target: "skipConfirm", actions: ["setUser", "setCredentials"] }, { target: "resolved", actions: ["setUser", "setCredentials", "setCodeDeliveryDetails"] }], onError: { target: "idle", actions: "setRemoteError" } } }, skipConfirm: { always: { target: "#signUpActor.resolved", actions: "setAutoSignInIntent" } }, resolved: { type: "final", always: "#signUpActor.confirmSignUp" } } } } }, confirmSignUp: { initial: "edit", states: { edit: { entry: "sendUpdate", on: { SUBMIT: { actions: "handleSubmit", target: "submit" }, CHANGE: { actions: "handleInput" }, BLUR: { actions: "handleBlur" }, RESEND: "resend" } }, resend: { tags: ["pending"], entry: "sendUpdate", invoke: { src: "resendConfirmationCode", onDone: { target: "edit" }, onError: [{ target: "#signUpActor.resolved", actions: "setAutoSignInIntent", cond: "isUserAlreadyConfirmed" }, { target: "edit", actions: "setRemoteError" }] } }, submit: { tags: ["pending"], entry: ["sendUpdate", "clearError"], invoke: { src: "confirmSignUp", onDone: { target: "#signUpActor.resolved", actions: "setAutoSignInIntent" }, onError: { target: "edit", actions: "setRemoteError" } } } } }, resolved: { type: "final", data: (e, t) => { const { username: r, password: i } = e.authAttributes; return { user: get(t, "data.user") || e.user, authAttributes: { username: r, password: i }, intent: e.intent } } } } }, { guards: { isUserAlreadyConfirmed: (e, t) => "User is already confirmed." === t.data.message, shouldInitConfirmSignUp: e => e.intent && "confirmSignUp" === e.intent, shouldSkipConfirm: (e, t) => t.data.userConfirmed }, actions: { clearError: actions_l, clearFormValues: actions_d, clearTouched: actions_c, clearValidationError: actions_v, handleInput: $, handleSubmit: D, handleBlur: M, parsePhoneNumber: actions_q, setCredentials: actions_y, setFieldErrors: O, setRemoteError: _, setCodeDeliveryDetails: actions_E, setUser: actions_A, sendUpdate: es_sendUpdate(), setAutoSignInIntent: es_assign({ intent: e => "confirmSignUp" === (null == e ? void 0 : e.intent) ? "autoSignInSubmit" : "autoSignIn" }) }, services: { confirmSignUp(t, r) { return __awaiter(this, void 0, void 0, (function* () { const { user: e, authAttributes: r, formValues: i } = t, { confirmation_code: a } = i, s = get(e, "username") || get(r, "username"); return yield y.handleConfirmSignUp({ username: s, code: a }) })) }, resendConfirmationCode(r, i) { return __awaiter(this, void 0, void 0, (function* () { const { user: e, authAttributes: i } = r, a = get(e, "username") || get(i, "username"); return Auth/* Auth */.g.resendSignUp(a) })) }, federatedSignIn(n, r) { return __awaiter(this, void 0, void 0, (function* () { const { provider: e } = r.data; return yield Auth/* Auth */.g.federatedSignIn({ provider: e }) })) }, signUp(t, n) { return __awaiter(this, void 0, void 0, (function* () { const { formValues: e, loginMechanisms: n } = t, [i = "username"] = n, { [i]: a, password: s } = e, o = pickBy(e, ((e, t) => { switch (t) { case "address": case "birthdate": case "email": case "family_name": case "gender": case "given_name": case "locale": case "middle_name": case "name": case "nickname": case "phone_number": case "picture": case "preferred_username": case "profile": case "updated_at": case "website": case "zoneinfo": return !0; default: return t.startsWith("custom:") } })); return yield y.handleSignUp({ username: a, password: s, attributes: o }) })) }, validateSignUp(t, n) { return __awaiter(this, void 0, void 0, (function* () { return validators_e(t.formValues, t.touched, t.passwordSettings, [y.validateFormPassword, y.validateConfirmPassword, y.validatePreferredUsername, y.validateCustomSignUp]) })) } } }) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/index.mjs
            const { choose: authenticator_g } = actions_namespaceObject; function authenticator_v() { return createMachine({ id: "authenticator", initial: "idle", context: { user: void 0, config: {}, services: defaultServices_o, actorRef: void 0, hasSetup: !1 }, predictableActionArguments: !0, states: { idle: { invoke: { src: "getCurrentUser", onDone: { actions: "setUser", target: "authenticated" }, onError: { target: "setup" } } }, setup: { initial: "waitConfig", states: { waitConfig: { on: { INIT: { actions: ["configure", "setHasSetup"], target: "applyConfig" } } }, applyConfig: { invoke: { src: "getAmplifyConfig", onDone: { actions: "applyAmplifyConfig", target: "goToInitialState" } } }, goToInitialState: { always: [{ target: "#authenticator.signUp", cond: "isInitialStateSignUp" }, { target: "#authenticator.resetPassword", cond: "isInitialStateResetPassword" }, { target: "#authenticator.signIn" }] } } }, signIn: { initial: "spawnActor", states: { spawnActor: { always: { actions: "spawnSignInActor", target: "runActor" } }, runActor: { entry: "clearActorDoneData", exit: "stopSignInActor" } }, on: { SIGN_UP: "signUp", RESET_PASSWORD: "resetPassword", "done.invoke.signInActor": [{ target: "signUp", actions: "setActorDoneData", cond: "shouldRedirectToSignUp" }, { target: "resetPassword", actions: "setActorDoneData", cond: "shouldRedirectToResetPassword" }, { target: "authenticated", actions: "setActorDoneData" }] } }, signUp: { initial: "spawnActor", states: { spawnActor: { always: { actions: "spawnSignUpActor", target: "runActor" } }, runActor: { entry: "clearActorDoneData", exit: "stopSignUpActor" }, autoSignIn: { invoke: { src: "getCurrentUser", onDone: "#authenticator.authenticated", onError: "#authenticator.setup.goToInitialState" } } }, on: { SIGN_IN: "signIn", "done.invoke.signUpActor": { target: "#authenticator.signIn", actions: "setActorDoneData", cond: "shouldAutoSignIn" } } }, resetPassword: { initial: "spawnActor", states: { spawnActor: { always: { actions: "spawnResetPasswordActor", target: "runActor" } }, runActor: { entry: "clearActorDoneData", exit: "stopResetPasswordActor" } }, on: { SIGN_IN: "signIn", "done.invoke.resetPasswordActor": { target: "signIn", actions: "setActorDoneData" } } }, signOut: { initial: "spawnActor", states: { spawnActor: { always: { actions: "spawnSignOutActor", target: "runActor" } }, runActor: { entry: "clearActorDoneData", exit: ["stopSignOutActor", "clearUser"] } }, on: { "done.invoke.signOutActor": [{ target: "setup", cond: "shouldSetup" }, { target: "setup.goToInitialState" }] } }, authenticated: { initial: "idle", states: { idle: { on: { TOKEN_REFRESH: "refreshUser" } }, refreshUser: { invoke: { src: "getCurrentUser", onDone: { actions: "setUser", target: "idle" }, onError: { target: "#authenticator.signOut" } } } }, on: { SIGN_OUT: "signOut" } } }, on: { CHANGE: { actions: "forwardToActor" }, BLUR: { actions: "forwardToActor" }, SUBMIT: { actions: "forwardToActor" }, FEDERATED_SIGN_IN: { actions: "forwardToActor" }, AUTO_SIGN_IN: { actions: "forwardToActor" }, RESEND: { actions: "forwardToActor" }, SIGN_IN: { actions: "forwardToActor" }, SKIP: { actions: "forwardToActor" } } }, { actions: { forwardToActor: authenticator_g([{ cond: "hasActor", actions: es_forwardTo((t => t.actorRef)) }]), setUser: es_assign({ user: (t, o) => o.data }), setActorDoneData: es_assign({ actorDoneData: (t, o) => { var i, n; return { authAttributes: Object.assign({}, null === (i = o.data) || void 0 === i ? void 0 : i.authAttributes), intent: null === (n = o.data) || void 0 === n ? void 0 : n.intent } }, user: (t, o) => { var i; return null === (i = o.data) || void 0 === i ? void 0 : i.user } }), clearUser: es_assign({ user: void 0 }), clearActorDoneData: es_assign({ actorDoneData: void 0 }), applyAmplifyConfig: es_assign({ config(t, o) { var i, n, e, r, s, a, c, d, u; const l = null !== (n = null === (i = o.data.aws_cognito_username_attributes) || void 0 === i ? void 0 : i.map((t => t.toLowerCase()))) && void 0 !== n ? n : [], g = null !== (r = null === (e = o.data.aws_cognito_verification_mechanisms) || void 0 === e ? void 0 : e.map((t => t.toLowerCase()))) && void 0 !== r ? r : [], v = null !== (a = null === (s = o.data.aws_cognito_signup_attributes) || void 0 === s ? void 0 : s.map((t => t.toLowerCase()))) && void 0 !== a ? a : [], A = null !== (d = null === (c = o.data.aws_cognito_social_providers) || void 0 === c ? void 0 : c.map((t => t.toLowerCase()))) && void 0 !== d ? d : [], f = o.data.aws_cognito_password_protection_settings || {}; 0 === l.length && l.push("username"); const { loginMechanisms: w, signUpAttributes: S, socialProviders: m, initialState: h, formFields: D } = t.config; return { loginMechanisms: null != w ? w : l, formFields: null !== (u = authenticator_p(D)) && void 0 !== u ? u : {}, passwordSettings: f, signUpAttributes: null != S ? S : Array.from(new Set([...g, ...v])), socialProviders: null != m ? m : A.sort(), initialState: h } } }), spawnSignInActor: es_assign({ actorRef: (t, o) => { var i, n, r, s, c, d, u; const { services: l } = t, g = signIn_k({ services: l }).withContext({ authAttributes: null !== (n = null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.authAttributes) && void 0 !== n ? n : {}, user: t.user, intent: null === (r = t.actorDoneData) || void 0 === r ? void 0 : r.intent, country_code: "+1", formValues: {}, touched: {}, validationError: {}, passwordSettings: null === (s = t.config) || void 0 === s ? void 0 : s.passwordSettings, loginMechanisms: null === (c = t.config) || void 0 === c ? void 0 : c.loginMechanisms, socialProviders: null === (d = t.config) || void 0 === d ? void 0 : d.socialProviders, formFields: null === (u = t.config) || void 0 === u ? void 0 : u.formFields }); return spawn(g, { name: "signInActor" }) } }), spawnSignUpActor: es_assign({ actorRef: (t, o) => { var i, n, r, s, a, c, d; const { services: u } = t, g = signUp_y({ services: u }).withContext({ authAttributes: null !== (n = null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.authAttributes) && void 0 !== n ? n : {}, country_code: "+1", intent: null === (r = t.actorDoneData) || void 0 === r ? void 0 : r.intent, formValues: {}, touched: {}, validationError: {}, loginMechanisms: null === (s = t.config) || void 0 === s ? void 0 : s.loginMechanisms, socialProviders: null === (a = t.config) || void 0 === a ? void 0 : a.socialProviders, formFields: null === (c = t.config) || void 0 === c ? void 0 : c.formFields, passwordSettings: null === (d = t.config) || void 0 === d ? void 0 : d.passwordSettings }); return spawn(g, { name: "signUpActor" }) } }), spawnResetPasswordActor: es_assign({ actorRef: (t, o) => { var i, n, r, s, a; const { services: c } = t, u = resetPassword_f({ services: c }).withContext({ formValues: {}, touched: {}, intent: null === (i = t.actorDoneData) || void 0 === i ? void 0 : i.intent, username: null === (r = null === (n = t.actorDoneData) || void 0 === n ? void 0 : n.authAttributes) || void 0 === r ? void 0 : r.username, formFields: null === (s = t.config) || void 0 === s ? void 0 : s.formFields, validationError: {}, passwordSettings: null === (a = t.config) || void 0 === a ? void 0 : a.passwordSettings }); return spawn(u, { name: "resetPasswordActor" }) } }), spawnSignOutActor: es_assign({ actorRef: t => { const o = signOut_i.withContext({ user: t.user }); return spawn(o, { name: "signOutActor" }) } }), stopSignInActor: actions_n("signInActor"), stopSignUpActor: actions_n("signUpActor"), stopResetPasswordActor: actions_n("resetPasswordActor"), stopSignOutActor: actions_n("signOutActor"), configure: es_assign(((o, i) => { const n = i.data, { services: e } = n, r = __rest(n, ["services"]); return { services: Object.assign(Object.assign({}, defaultServices_o), e), config: r } })), setHasSetup: es_assign({ hasSetup: !0 }) }, guards: { isInitialStateSignUp: t => "signUp" === t.config.initialState, isInitialStateResetPassword: t => "resetPassword" === t.config.initialState, shouldRedirectToSignUp: (t, o) => { var i; return "confirmSignUp" === (null === (i = o.data) || void 0 === i ? void 0 : i.intent) }, shouldRedirectToResetPassword: (t, o) => { var i; return "confirmPasswordReset" === (null === (i = o.data) || void 0 === i ? void 0 : i.intent) }, shouldAutoSignIn: (t, o) => { var i, n; return "autoSignIn" === (null === (i = o.data) || void 0 === i ? void 0 : i.intent) || "autoSignInSubmit" === (null === (n = o.data) || void 0 === n ? void 0 : n.intent) }, shouldSetup: t => !1 === t.hasSetup, hasActor: t => !!t.actorRef }, services: { getCurrentUser: (t, o) => t.services.getCurrentUser(), getAmplifyConfig: (t, o) => t.services.getAmplifyConfig() } }) } function authenticator_p(t) { return t && Object.keys(t).forEach((o => { Object.keys(t[o]).forEach((i => { let n = t[o][i]; n.required = n.isRequired })) })), t }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs







            const createHubHandler = (options) => (data, service) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
                yield utils_d(data, service, options);
            });
            function AuthenticatorProvider({ children, }) {
                // `authStatus` is exposed by `useAuthenticator` but should not be derived directly from the
                // state machine as the machine only updates on `Authenticator` initiated events, which
                // leads to scenarios where the state machine `authStatus` gets "stuck". For exmample,
                // if a user was to sign in using `Auth.signIn` directly rather than using `Authenticator`
                const [authStatus, setAuthStatus] = react.useState('configuring');
                // only run on first render
                react.useEffect(() => {
                    Auth/* Auth */.g.currentAuthenticatedUser()
                        .then(() => {
                            setAuthStatus('authenticated');
                        })
                        .catch(() => {
                            setAuthStatus('unauthenticated');
                        });
                }, []);
                /**
                 * Based on use cases, developer might already have added another Provider
                 * outside Authenticator. In that case, we sync the two providers by just
                 * passing the parent value.
                 *
                 * TODO(BREAKING): enforce only one provider in App tree
                 */
                const parentProviderVal = (0, react.useContext)(AuthenticatorContext);
                const service = useInterpret(authenticator_v);
                const value = (0, react.useMemo)(() => (!parentProviderVal ? { authStatus, service } : parentProviderVal), [authStatus, parentProviderVal, service]);
                const { service: activeService } = value;
                (0, react.useEffect)(() => {
                    const onSignIn = () => {
                        setAuthStatus('authenticated');
                    };
                    const onSignOut = () => {
                        setAuthStatus('unauthenticated');
                    };
                    const unsubscribe = h(activeService, createHubHandler({ onSignIn, onSignOut }));
                    return unsubscribe;
                }, [activeService]);
                return (react.createElement(AuthenticatorContext.Provider, { value: value }, children));
            }



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/version.mjs
            const version_o = "5.3.2";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useDeprecationWarning.mjs


            /**
             * Logs a deprecation warning message.
             *
             * @important Please use the React/React Native specific platform implementations.
             * This version of the hook is a base implementation that the others extend from due
             * to env differences between running in RN or the browser
             */
            const useDeprecationWarning = ({ shouldWarn, message, }) => {
                react.useEffect(() => {
                    if (shouldWarn) {
                        // eslint-disable-next-line no-console
                        console.warn(message);
                    }
                }, [shouldWarn, message]);
            };



            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/hooks/useDeprecationWarning.mjs
            const useDeprecationWarning_s = ({ message: s, shouldWarn: o }) => { const r = o && ("undefined" == typeof process || process && "production" !== "production"); useDeprecationWarning({ message: s, shouldWarn: r }) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useCustomComponents/useCustomComponents.mjs
            const useCustomComponents_t = react.createContext(null), useCustomComponents_e = () => { const e = react.useContext(useCustomComponents_t); if (!e) throw new Error("`useCustomComponents` cannot be used outside of a `CustomComponentsContext.Provider`"); return e };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/textUtil.mjs
            const textUtil_T = { amazon: "Amazon", apple: "Apple", facebook: "Facebook", google: "Google" }, textUtil_n = { getBackToSignInText: () => translations_v(translations_x.BACK_SIGN_IN), getChangePasswordText: () => translations_v(translations_x.CHANGE_PASSWORD), getChangingText: () => translations_v(translations_x.CHANGING_PASSWORD), getConfirmText: () => translations_v(translations_x.CONFIRM), getConfirmingText: () => translations_v(translations_x.CONFIRMING), getCopyText: () => translations_v(translations_x.UPPERCASE_COPY), getHidePasswordText: () => translations_v(translations_x.HIDE_PASSWORD), getLoadingText: () => translations_v(translations_x.LOADING), getOrText: () => translations_v(translations_x.OR), getResendCodeText: () => translations_v(translations_x.RESEND_CODE), getSendCodeText: () => translations_v(translations_x.SEND_CODE), getSendingText: () => translations_v(translations_x.SENDING), getShowPasswordText: () => translations_v(translations_x.SHOW_PASSWORD), getSubmitText: () => translations_v(translations_x.SUBMIT), getSubmittingText: () => translations_v(translations_x.SUBMITTING), getSignInTabText: () => translations_v(translations_x.SIGN_IN_TAB), getSignUpTabText: () => translations_v(translations_x.CREATE_ACCOUNT), getForgotPasswordText: T => translations_v(T ? translations_x.FORGOT_PASSWORD : translations_x.FORGOT_YOUR_PASSWORD), getSigningInText: () => translations_v(translations_x.SIGNING_IN_BUTTON), getSignInText: () => translations_v(translations_x.SIGN_IN_BUTTON), getCreatingAccountText: () => translations_v(translations_x.CREATING_ACCOUNT), getCreateAccountText: () => translations_v(translations_x.CREATE_ACCOUNT), getDeliveryMessageText: T => { const { DeliveryMedium: n, Destination: g } = null != T ? T : {}, i = "EMAIL" === n, S = "SMS" === n, o = translations_v(translations_x.CODE_ARRIVAL); if (!i && !S) return `${translations_v(translations_x.CODE_SENT)}. ${o}.`; return `${translations_v(i ? translations_x.CODE_EMAILED : translations_x.CODE_TEXTED)} ${g}. ${o}.` }, getDeliveryMethodText: T => { const { DeliveryMedium: n } = null != T ? T : {}, g = "EMAIL" === n; return translations_v(g || "SMS" !== n ? g ? translations_x.WE_EMAILED : translations_x.WE_TEXTED : translations_x.WE_SENT_CODE) }, getChallengeText: T => { switch (T) { case "SMS_MFA": return translations_v(translations_x.CONFIRM_SMS); case "SOFTWARE_TOKEN_MFA": return translations_v(translations_x.CONFIRM_TOTP); default: throw new Error(`${translations_v("Unexpected challengeName encountered in ConfirmSignIn:")} ${T}`) } }, getResetYourPasswordText: () => translations_v(translations_x.RESET_PASSWORD), getSetupTOTPText: () => translations_v(translations_x.SETUP_TOTP), getSetupTOTPInstructionsText: () => translations_v("Copy and paste the secret key below into an authenticator app and then enter the code in the text field below."), getCopiedText: () => translations_v("COPIED"), getSignInWithFederationText: (t, n) => translations_v(`Sign ${"signIn" === t ? "In" : "Up"} with ${textUtil_T[n]}`), getSkipText: () => translations_v(translations_x.SKIP), getVerifyText: () => translations_v(translations_x.VERIFY), getVerifyContactText: () => translations_v(translations_x.VERIFY_CONTACT), getAccountRecoveryInfoText: () => translations_v(translations_x.VERIFY_HEADING), getInvalidEmailText: () => translations_v("Please enter a valid email"), getRequiredFieldText: () => translations_v("This field is required") };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/node_modules/tslib/tslib.es6.js
            /******************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise */

            var tslib_es6_extendStatics = function (d, b) {
                tslib_es6_extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                return tslib_es6_extendStatics(d, b);
            };

            function tslib_es6_extends(d, b) {
                if (typeof b !== "function" && b !== null)
                    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                tslib_es6_extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var tslib_tslib_es6_assign = function () {
                tslib_tslib_es6_assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                }
                return tslib_tslib_es6_assign.apply(this, arguments);
            }

            function tslib_tslib_es6_rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function tslib_es6_decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }

            function tslib_es6_param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); }
            }

            function tslib_es6_metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
            }

            function tslib_tslib_es6_awaiter(thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }

            function tslib_es6_generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            }

            var tslib_es6_createBinding = Object.create ? (function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                var desc = Object.getOwnPropertyDescriptor(m, k);
                if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                    desc = { enumerable: true, get: function () { return m[k]; } };
                }
                Object.defineProperty(o, k2, desc);
            }) : (function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            });

            function tslib_es6_exportStar(m, o) {
                for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) tslib_es6_createBinding(o, m, p);
            }

            function tslib_tslib_es6_values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function tslib_es6_read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            /** @deprecated */
            function tslib_es6_spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(tslib_es6_read(arguments[i]));
                return ar;
            }

            /** @deprecated */
            function tslib_es6_spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            }

            function tslib_es6_spreadArray(to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
            }

            function tslib_es6_await(v) {
                return this instanceof tslib_es6_await ? (this.v = v, this) : new tslib_es6_await(v);
            }

            function tslib_es6_asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
                function step(r) { r.value instanceof tslib_es6_await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
            }

            function tslib_es6_asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: tslib_es6_await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
            }

            function tslib_es6_asyncValues(o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof tslib_tslib_es6_values === "function" ? tslib_tslib_es6_values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }

            function tslib_es6_makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
                return cooked;
            };

            var tslib_es6_setModuleDefault = Object.create ? (function (o, v) {
                Object.defineProperty(o, "default", { enumerable: true, value: v });
            }) : function (o, v) {
                o["default"] = v;
            };

            function tslib_es6_importStar(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) tslib_es6_createBinding(result, mod, k);
                tslib_es6_setModuleDefault(result, mod);
                return result;
            }

            function tslib_es6_importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }

            function tslib_es6_classPrivateFieldGet(receiver, state, kind, f) {
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
            }

            function tslib_es6_classPrivateFieldSet(receiver, state, value, kind, f) {
                if (kind === "m") throw new TypeError("Private method is not writable");
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
            }

            function tslib_es6_classPrivateFieldIn(state, receiver) {
                if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
                return typeof state === "function" ? receiver === state : state.has(receiver);
            }

            // EXTERNAL MODULE: ./node_modules/classnames/index.js
            var classnames = __webpack_require__(4184);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/types/primitives/componentClassName.mjs
            var componentClassName_e; !function (e) { e.Alert = "amplify-alert", e.AlertIcon = "amplify-alert__icon", e.AlertHeading = "amplify-alert__heading", e.AlertBody = "amplify-alert__body", e.AlertDismiss = "amplify-alert__dismiss", e.Autocomplete = "amplify-autocomplete", e.AutocompleteMenu = "amplify-autocomplete__menu", e.AutocompleteMenuEmpty = "amplify-autocomplete__menu--empty", e.AutocompleteMenuFooter = "amplify-autocomplete__menu__footer", e.AutocompleteMenuHeader = "amplify-autocomplete__menu__header", e.AutocompleteMenuLoading = "amplify-autocomplete__menu--loading", e.AutocompleteMenuOption = "amplify-autocomplete__menu__option", e.AutocompleteMenuOptions = "amplify-autocomplete__menu__options", e.Badge = "amplify-badge", e.Breadcrumbs = "amplify-breadcrumbs", e.BreadcrumbsList = "amplify-breadcrumbs__list", e.BreadcrumbsItem = "amplify-breadcrumbs__item", e.BreadcrumbsSeparator = "amplify-breadcrumbs__separator", e.BreadcrumbsLink = "amplify-breadcrumbs__link", e.Button = "amplify-button", e.ButtonGroup = "amplify-buttongroup", e.ButtonLoaderWrapper = "amplify-button__loader-wrapper", e.Card = "amplify-card", e.Checkbox = "amplify-checkbox", e.CheckboxButton = "amplify-checkbox__button", e.CheckboxIcon = "amplify-checkbox__icon", e.CheckboxInput = "amplify-checkbox__input", e.CheckboxLabel = "amplify-checkbox__label", e.CheckboxField = "amplify-checkboxfield", e.Collection = "amplify-collection", e.CollectionItems = "amplify-collection-items", e.CollectionSearch = "amplify-collection-search", e.CollectionPagination = "amplify-collection-pagination", e.CountryCodeSelect = "amplify-countrycodeselect", e.DialCodeSelect = "amplify-dialcodeselect", e.Divider = "amplify-divider", e.DividerLabel = "amplify-divider--label", e.DropZone = "amplify-dropzone", e.Expander = "amplify-expander", e.ExpanderContent = "amplify-expander__content", e.ExpanderContentText = "amplify-expander__content__text", e.ExpanderHeader = "amplify-expander__header", e.ExpanderIcon = "amplify-expander__icon", e.ExpanderItem = "amplify-expander__item", e.ExpanderTrigger = "amplify-expander__trigger", e.Field = "amplify-field", e.FieldDescription = "amplify-field__description", e.FieldErrorMessage = "amplify-field__error-message", e.FieldGroup = "amplify-field-group", e.FieldGroupControl = "amplify-field-group__control", e.FieldGroupOuterEnd = "amplify-field-group__outer-end", e.FieldGroupOuterStart = "amplify-field-group__outer-start", e.FieldGroupInnerEnd = "amplify-field-group__inner-end", e.FieldGroupInnerStart = "amplify-field-group__inner-start", e.FieldGroupIcon = "amplify-field-group__icon", e.FieldGroupIconButton = "amplify-field-group__icon-button", e.FieldGroupHasInnerEnd = "amplify-field-group--has-inner-end", e.FieldGroupHasInnerStart = "amplify-field-group--has-inner-start", e.FieldShowPassword = "amplify-field__show-password", e.FieldGroupFieldWrapper = "amplify-field-group__field-wrapper", e.Fieldset = "amplify-fieldset", e.FieldsetLegend = "amplify-fieldset__legend", e.FileUploaderDropZone = "amplify-fileuploader__dropzone", e.FileUploaderDropZoneIcon = "amplify-fileuploader__dropzone__icon", e.FileUploaderDropZoneText = "amplify-fileuploader__dropzone__text", e.FileUploaderDropZoneButton = "amplify-fileuploader__dropzone__button", e.FileUploaderFile = "amplify-fileuploader__file", e.FileUploaderFileWrapper = "amplify-fileuploader__file__wrapper", e.FileUploaderFileName = "amplify-fileuploader__file__name", e.FileUploaderFileSize = "amplify-fileuploader__file__size", e.FileUploaderFileInfo = "amplify-fileuploader__file__info", e.FileUploaderFileImage = "amplify-fileuploader__file__image", e.FileUploaderFileMain = "amplify-fileuploader__file__main", e.FileUploaderFileStatus = "amplify-fileuploader__file__status", e.FileUploaderLoader = "amplify-fileuploader__loader", e.FileUploaderPreviewer = "amplify-fileuploader__previewer", e.FileUploaderPreviewerText = "amplify-fileuploader__previewer__text", e.FileUploaderPreviewerBody = "amplify-fileuploader__previewer__body", e.FileUploaderPreviewerFooter = "amplify-fileuploader__previewer__footer", e.FileUploaderPreviewerFooterActions = "amplify-fileuploader__previewer__footer__actions", e.Flex = "amplify-flex", e.Grid = "amplify-grid", e.Heading = "amplify-heading", e.HighlightMatch = "amplify-highlightmatch", e.HighlightMatchHighlighted = "amplify-highlightmatch__highlighted", e.Icon = "amplify-icon", e.Image = "amplify-image", e.Input = "amplify-input", e.Label = "amplify-label", e.Link = "amplify-link", e.Loader = "amplify-loader", e.LoaderDeterminate = "amplify-loader--determinate", e.LoaderPercentageText = "amplify-loader__percentage-text", e.MenuContent = "amplify-menu-content", e.MenuContentWrapper = "amplify-menu-content-wrapper", e.MenuItem = "amplify-menu-content__item", e.MenuTrigger = "amplify-menu-trigger", e.Message = "amplify-message", e.MessageIcon = "amplify-message__icon", e.MessageHeading = "amplify-message__heading", e.MessageBody = "amplify-message__body", e.MessageContent = "amplify-message__content", e.MessageDismiss = "amplify-message__dismiss", e.Pagination = "amplify-pagination", e.PaginationItemButton = "amplify-pagination__item-button", e.PaginationItemCurrent = "amplify-pagination__item-current", e.PaginationItemEllipsis = "amplify-pagination__item-ellipsis", e.PasswordField = "amplify-passwordfield", e.PhoneNumberField = "amplify-phonenumberfield", e.Placeholder = "amplify-placeholder", e.Radio = "amplify-radio", e.RadioButton = "amplify-radio__button", e.RadioInput = "amplify-radio__input", e.RadioLabel = "amplify-radio__label", e.RadioGroupField = "amplify-radiogroupfield", e.RadioGroup = "amplify-radiogroup", e.Rating = "amplify-rating", e.ScrollView = "amplify-scrollview", e.SearchField = "amplify-searchfield", e.SearchFieldClear = "amplify-searchfield__clear", e.SearchFieldSearch = "amplify-searchfield__search", e.Select = "amplify-select", e.SelectField = "amplify-selectfield", e.SelectWrapper = "amplify-select__wrapper", e.SelectIconWrapper = "amplify-select__icon-wrapper", e.SliderField = "amplify-sliderfield", e.SliderFieldGroup = "amplify-sliderfield__group", e.SliderFieldLabel = "amplify-sliderfield__label", e.SliderFieldRange = "amplify-sliderfield__range", e.SliderFieldRoot = "amplify-sliderfield__root", e.SliderFieldThumb = "amplify-sliderfield__thumb", e.SliderFieldTrack = "amplify-sliderfield__track", e.StepperField = "amplify-stepperfield", e.StepperFieldButtonDecrease = "amplify-stepperfield__button--decrease", e.StepperFieldButtonIncrease = "amplify-stepperfield__button--increase", e.StepperFieldInput = "amplify-stepperfield__input", e.StorageImage = "amplify-storageimage", e.StorageManager = "amplify-storagemanager", e.StorageManagerDropZone = "amplify-storagemanager__dropzone", e.StorageManagerDropZoneIcon = "amplify-storagemanager__dropzone__icon", e.StorageManagerDropZoneText = "amplify-storagemanager__dropzone__text", e.StorageManagerFilePicker = "amplify-storagemanager__file__picker", e.StorageManagerFile = "amplify-storagemanager__file", e.StorageManagerFileWrapper = "amplify-storagemanager__file__wrapper", e.StorageManagerFileList = "amplify-storagemanager__file__list", e.StorageManagerFileName = "amplify-storagemanager__file__name", e.StorageManagerFileSize = "amplify-storagemanager__file__size", e.StorageManagerFileInfo = "amplify-storagemanager__file__info", e.StorageManagerFileImage = "amplify-storagemanager__file__image", e.StorageManagerFileMain = "amplify-storagemanager__file__main", e.StorageManagerFileStatus = "amplify-storagemanager__file__status", e.StorageManagerLoader = "amplify-storagemanager__loader", e.StorageManagerPreviewer = "amplify-storagemanager__previewer", e.StorageManagerPreviewerText = "amplify-storagemanager__previewer__text", e.StorageManagerPreviewerActions = "amplify-storagemanager__previewer__actions", e.StorageManagerPreviewerFooter = "amplify-storagemanager__previewer__footer", e.SwitchField = "amplify-switchfield", e.SwitchLabel = "amplify-switch-label", e.SwitchThumb = "amplify-switch-thumb", e.SwitchTrack = "amplify-switch-track", e.SwitchWrapper = "amplify-switch__wrapper", e.Table = "amplify-table", e.TableCaption = "amplify-table__caption", e.TableBody = "amplify-table__body", e.TableTd = "amplify-table__td", e.TableTh = "amplify-table__th", e.TableFoot = "amplify-table__foot", e.TableHead = "amplify-table__head", e.TableRow = "amplify-table__row", e.Tabs = "amplify-tabs", e.TabItems = "amplify-tabs-item", e.Text = "amplify-text", e.Textarea = "amplify-textarea", e.TextAreaField = "amplify-textareafield", e.TextField = "amplify-textfield", e.ToggleButton = "amplify-togglebutton", e.ToggleButtonGroup = "amplify-togglebuttongroup", e.VisuallyHidden = "amplify-visually-hidden" }(componentClassName_e || (componentClassName_e = {}));

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/constants.mjs
            const shared_constants_a = { Alert: { className: componentClassName_e.Alert, components: ["Alert"], description: "Top level element that wraps the Alert primitive" }, AlertIcon: { className: componentClassName_e.AlertIcon, components: ["Alert"], description: "Class applied to Icon component within the Alert primitive" }, AlertHeading: { className: componentClassName_e.AlertHeading, components: ["Alert"], description: "Class applied to the heading View" }, AlertBody: { className: componentClassName_e.AlertBody, components: ["Alert"], description: "Class applied to the body View" }, AlertDismiss: { className: componentClassName_e.AlertDismiss, components: ["Alert"], description: "Class applied to the close Button" }, Autocomplete: { className: componentClassName_e.Autocomplete, components: ["Autocomplete"], description: "Top level element that wraps the Autocomplete primitive" }, AutocompleteMenu: { className: componentClassName_e.AutocompleteMenu, components: ["Autocomplete"], description: "Top level element that wraps the dropdown menu" }, AutocompleteMenuEmpty: { className: componentClassName_e.AutocompleteMenuEmpty, components: ["Autocomplete"], description: "Class applied to the no options slot of menu" }, AutocompleteMenuFooter: { className: componentClassName_e.AutocompleteMenuFooter, components: ["Autocomplete"], description: "Class applied to menu footer" }, AutocompleteMenuHeader: { className: componentClassName_e.AutocompleteMenuHeader, components: ["Autocomplete"], description: "Class applied to menu header" }, AutocompleteMenuLoading: { className: componentClassName_e.AutocompleteMenuLoading, components: ["Autocomplete"], description: "Class applied to the loading slot of menu" }, AutocompleteMenuOption: { className: componentClassName_e.AutocompleteMenuOption, components: ["Autocomplete"], description: "Class applied to each li option" }, AutocompleteMenuOptions: { className: componentClassName_e.AutocompleteMenuOptions, components: ["Autocomplete"], description: "Class applied to ul container element" }, Badge: { className: componentClassName_e.Badge, components: ["Badge"], description: "Top level element that wraps the Badge component" }, Breadcrumbs: { className: componentClassName_e.Breadcrumbs, components: ["Breadcrumbs"], description: "Top level element that wraps the Breadcrumbs component" }, BreadcrumbsItem: { className: componentClassName_e.BreadcrumbsItem, components: ["Breadcrumbs"], description: "Each breadcrumb" }, BreadcrumbsLink: { className: componentClassName_e.BreadcrumbsLink, components: ["Breadcrumbs"], description: "Links used within breadcrumbs" }, BreadcrumbsList: { className: componentClassName_e.BreadcrumbsList, components: ["Breadcrumbs"], description: "List element within nav" }, BreadcrumbsSeparator: { className: componentClassName_e.BreadcrumbsSeparator, components: ["Breadcrumbs"], description: "Separator between each breadcrumb" }, Button: { className: componentClassName_e.Button, components: ["Button"], description: "Top level element that wraps the Button primitive" }, ButtonGroup: { className: componentClassName_e.ButtonGroup }, ButtonLoaderWrapper: { className: componentClassName_e.ButtonLoaderWrapper, components: ["Button"], description: "Class applied to the Loader component within the Button Loading state" }, Card: { className: componentClassName_e.Card, components: ["Card"], description: "Top level element that wraps the Card primitive" }, Checkbox: { className: componentClassName_e.Checkbox, components: ["Checkbox"], description: "Top level element that wraps the Checkbox primitive" }, CheckboxButton: { className: componentClassName_e.CheckboxButton, components: ["Checkbox"], description: "Wrapper for the checked icon within the Checkbox primitive" }, CheckboxIcon: { className: componentClassName_e.CheckboxIcon, components: ["Checkbox"], description: "Class applied to the checked icon within the Checkbox primitive" }, CheckboxInput: { className: componentClassName_e.CheckboxInput, components: ["Checkbox"], description: "Class applied to the visually hidden checkbox input within the Checkbox primitive" }, CheckboxLabel: { className: componentClassName_e.CheckboxLabel, components: ["Checkbox"], description: "Class applied to the label within the Checkbox primitive" }, CheckboxField: { className: componentClassName_e.CheckboxField, components: ["CheckboxField"], description: "Top level element that wraps the CheckboxField primitive" }, Collection: { className: componentClassName_e.Collection, components: ["Collection"], description: "Top level element that wraps the Collection primitive" }, CollectionItems: { className: componentClassName_e.CollectionItems, components: ["Collection"], description: "Class applied to the element that wraps all the items in a collection" }, CollectionSearch: { className: componentClassName_e.CollectionSearch, components: ["Collection"], description: "Class applied to the element that wraps the collection search box" }, CollectionPagination: { className: componentClassName_e.CollectionPagination, components: ["Collection"], description: "Class applied to the element that wraps the pagination component in a collection" }, CountryCodeSelect: { className: componentClassName_e.CountryCodeSelect, components: ["PhoneNumberField"], description: "Class applied to the Dial Code Select within the PhoneNumberField primitive" }, DialCodeSelect: { className: componentClassName_e.DialCodeSelect, components: ["PhoneNumberField"], description: "Class applied to the Dial Code Select within the PhoneNumberField primitive" }, Divider: { className: componentClassName_e.Divider, components: ["Divider"], description: "Top level element that wraps the Divider primitive" }, DividerLabel: { className: componentClassName_e.DividerLabel, components: ["Divider"], description: "Class applied to the label of the Divider component" }, DropZone: { className: componentClassName_e.DropZone, components: ["DropZone"], description: "Class applied to the DropZone component" }, Expander: { className: componentClassName_e.Expander, components: ["Expander"], description: "Top level element that wraps the Expander primitive" }, ExpanderContent: { className: componentClassName_e.ExpanderContent, components: ["Expander"], description: "Expander content container" }, ExpanderContentText: { className: componentClassName_e.ExpanderContentText, components: ["Expander"], description: "Expander content text" }, ExpanderHeader: { className: componentClassName_e.ExpanderHeader, components: ["Expander"], description: "Expander item header" }, ExpanderIcon: { className: componentClassName_e.ExpanderIcon, components: ["Expander"], description: "Icon to indicate whether an item is expanded or collapsed" }, ExpanderItem: { className: componentClassName_e.ExpanderItem, components: ["Expander"], description: "Expander item(containier for header, trigger, and content)" }, ExpanderTrigger: { className: componentClassName_e.ExpanderTrigger, components: ["Expander"], description: "Expander item trigger(button)" }, Field: { className: componentClassName_e.Field }, FieldDescription: { className: componentClassName_e.FieldDescription }, FieldErrorMessage: { className: componentClassName_e.FieldErrorMessage }, FieldGroup: { className: componentClassName_e.FieldGroup }, FieldGroupControl: { className: componentClassName_e.FieldGroupControl }, FieldGroupFieldWrapper: { className: componentClassName_e.FieldGroupFieldWrapper }, FieldGroupOuterEnd: { className: componentClassName_e.FieldGroupOuterEnd }, FieldGroupOuterStart: { className: componentClassName_e.FieldGroupOuterStart }, FieldGroupInnerEnd: { className: componentClassName_e.FieldGroupInnerEnd }, FieldGroupInnerStart: { className: componentClassName_e.FieldGroupInnerStart }, FieldGroupIcon: { className: componentClassName_e.FieldGroupIcon }, FieldGroupIconButton: { className: componentClassName_e.FieldGroupIconButton }, FieldGroupHasInnerEnd: { className: componentClassName_e.FieldGroupHasInnerEnd }, FieldGroupHasInnerStart: { className: componentClassName_e.FieldGroupHasInnerStart }, FieldShowPassword: { className: componentClassName_e.FieldShowPassword }, Fieldset: { className: componentClassName_e.Fieldset, components: ["Fieldset"], description: "Top level element that wraps the Fieldset primitive" }, FieldsetLegend: { className: componentClassName_e.FieldsetLegend, components: ["Fieldset"], description: "Visual label for the Fieldset primitive" }, FileUploaderDropZone: { className: componentClassName_e.FileUploaderDropZone, components: ["FileUploader"] }, FileUploaderDropZoneIcon: { className: componentClassName_e.FileUploaderDropZoneIcon, components: ["FileUploader"] }, FileUploaderDropZoneText: { className: componentClassName_e.FileUploaderDropZoneText, components: ["FileUploader"] }, FileUploaderDropZoneButton: { className: componentClassName_e.FileUploaderDropZoneButton, components: ["FileUploader"] }, FileUploaderFile: { className: componentClassName_e.FileUploaderFile, components: ["FileUploader"] }, FileUploaderFileWrapper: { className: componentClassName_e.FileUploaderFileWrapper, components: ["FileUploader"] }, FileUploaderFileName: { className: componentClassName_e.FileUploaderFileName, components: ["FileUploader"] }, FileUploaderLoader: { className: componentClassName_e.FileUploaderLoader, components: ["FileUploader"] }, FileUploaderFileSize: { className: componentClassName_e.FileUploaderFileSize, components: ["FileUploader"] }, FileUploaderFileInfo: { className: componentClassName_e.FileUploaderFileInfo, components: ["FileUploader"] }, FileUploaderFileImage: { className: componentClassName_e.FileUploaderFileImage, components: ["FileUploader"] }, FileUploaderFileMain: { className: componentClassName_e.FileUploaderFileMain, components: ["FileUploader"] }, FileUploaderFileStatus: { className: componentClassName_e.FileUploaderFileStatus, components: ["FileUploader"] }, FileUploaderPreviewer: { className: componentClassName_e.FileUploaderPreviewer, components: ["FileUploader"] }, FileUploaderPreviewerText: { className: componentClassName_e.FileUploaderPreviewerText, components: ["FileUploader"] }, FileUploaderPreviewerBody: { className: componentClassName_e.FileUploaderPreviewerBody, components: ["FileUploader"] }, FileUploaderPreviewerFooter: { className: componentClassName_e.FileUploaderPreviewerFooter, components: ["FileUploader"] }, FileUploaderPreviewerFooterActions: { className: componentClassName_e.FileUploaderPreviewerFooterActions, components: ["FileUploader"] }, Flex: { className: componentClassName_e.Flex, components: ["Flex"], description: "Top level element that wraps the Flex primitive" }, Grid: { className: componentClassName_e.Grid, components: ["Grid"], description: "Top level element that wraps the Grid primitive" }, Heading: { className: componentClassName_e.Heading, components: ["Heading"], description: "Top level element that wraps the Heading primitive" }, HighlightMatch: { className: componentClassName_e.HighlightMatch, components: ["HighlightMatch"], description: "Top level element that wraps the HighlightMatch primitive" }, HighlightMatchHighlighted: { className: componentClassName_e.HighlightMatchHighlighted, components: ["HighlightMatch"], description: "Class applied to the highlighted text of the HighlightMatch primitive" }, Icon: { className: componentClassName_e.Icon, components: ["Icon"], description: "Top level element that wraps the Icon primitive" }, Image: { className: componentClassName_e.Image, components: ["Image"], description: "Top level element that wraps the Image primitive" }, Input: { className: componentClassName_e.Input, components: ["Input"], description: "Class applied to the input element" }, Label: { className: componentClassName_e.Label, components: ["Label"], description: "Class applied to the label element" }, Link: { className: componentClassName_e.Link, components: ["Link"], description: "Top level element that wraps the Link primitive" }, Loader: { className: componentClassName_e.Loader, components: ["Loader"], description: "Top level element that wraps the Loader primitive" }, LoaderDeterminate: { className: componentClassName_e.LoaderDeterminate, components: ["Loader"], description: "Class applied to a determinate loader" }, LoaderPercentageText: { className: componentClassName_e.LoaderPercentageText, components: ["Loader"], description: "Class applied to the percentage text of loader" }, MenuContent: { className: componentClassName_e.MenuContent, components: ["Menu"], description: "Menu content container (Flex)" }, MenuContentWrapper: { className: componentClassName_e.MenuContentWrapper, components: ["Menu"], description: "Menu content wrapper" }, MenuItem: { className: componentClassName_e.MenuItem, components: ["Menu"], description: "Menu item button (MenuButton, wrapped in amplify-menu-content class)" }, MenuTrigger: { className: componentClassName_e.MenuTrigger, components: ["Menu"], description: "Menu trigger button (MenuButton, not wrapped in amplify-menu-content class)" }, Message: { className: componentClassName_e.Message, components: ["Message"], description: "Class applied to the root element of the Message" }, MessageIcon: { className: componentClassName_e.MessageIcon, components: ["Message"], description: "Class applied to Icon component within the Message primitive" }, MessageHeading: { className: componentClassName_e.MessageHeading, components: ["Message"], description: "Class applied to the heading View" }, MessageBody: { className: componentClassName_e.MessageBody, components: ["Message"], description: "Class applied to the body View" }, MessageContent: { className: componentClassName_e.MessageContent, components: ["Message"], description: "Class applied to the wrappar around heading and children of the Message" }, MessageDismiss: { className: componentClassName_e.MessageDismiss, components: ["Message"], description: "Class applied to the close Button" }, Pagination: { className: componentClassName_e.Pagination, components: ["Pagination"], description: "Top level element that wraps the Pagination primitive" }, PaginationItemButton: { className: componentClassName_e.PaginationItemButton, components: ["Pagination"], description: "Class applied to the pagination buttons" }, PaginationItemCurrent: { className: componentClassName_e.PaginationItemCurrent, components: ["Pagination"], description: "Class applied to the currently selected pagination button" }, PaginationItemEllipsis: { className: componentClassName_e.PaginationItemEllipsis, components: ["Pagination"], description: "Class applied to the ellipsis within the Pagination primitive" }, PasswordField: { className: componentClassName_e.PasswordField, components: ["PasswordField"], description: "Top level element that wraps the PasswordField primitive" }, PhoneNumberField: { className: componentClassName_e.PhoneNumberField, components: ["PhoneNumberField"], description: "Top level element that wraps the PhoneNumberField primitive" }, Placeholder: { className: componentClassName_e.Placeholder, components: ["Placeholder"], description: "Top level element that wraps the Placeholder primitive" }, Radio: { className: componentClassName_e.Radio, components: ["RadioGroupField", "Radio"], description: "Top level element that wraps the Radio primitive" }, RadioButton: { className: componentClassName_e.RadioButton, components: ["RadioGroupField", "Radio"], description: "Class applied to the displayed radio button" }, RadioInput: { className: componentClassName_e.RadioInput, components: ["RadioGroupField", "Radio"], description: "Class applied to the visually hidden radio input" }, RadioLabel: { className: componentClassName_e.RadioLabel, components: ["RadioGroupField", "Radio"], description: "Class applied to the radio label" }, RadioGroupField: { className: componentClassName_e.RadioGroupField, components: ["RadioGroupField"], description: "Top level element that wraps the RadioGroupField primitive" }, RadioGroup: { className: componentClassName_e.RadioGroup, components: ["RadioGroupField"], description: "Class applied to the radio group wrapper" }, Rating: { className: componentClassName_e.Rating, components: ["Rating"], description: "Top level element that wraps the Rating primitive" }, ScrollView: { className: componentClassName_e.ScrollView, components: ["ScrollView"], description: "Top level element that wraps the ScrollView primitive" }, SearchField: { className: componentClassName_e.SearchField, components: ["SearchField"], description: "Top level element that wraps the SearchField primitive" }, SearchFieldClear: { className: componentClassName_e.SearchFieldClear, components: ["SearchField"], description: "Class applied to the search field clear button" }, SearchFieldSearch: { className: componentClassName_e.SearchFieldSearch, components: ["SearchField"], description: "Class applied to the search button" }, Select: { className: componentClassName_e.Select, components: ["Select", "SelectField"], description: "Class applied to the select element" }, SelectField: { className: componentClassName_e.SelectField, components: ["SelectField"], description: "Top level element that wraps the SelectField primitive" }, SelectWrapper: { className: componentClassName_e.SelectWrapper, components: ["Select", "SelectField"], description: "Class applied to the select wrapper" }, SelectIconWrapper: { className: componentClassName_e.SelectIconWrapper, components: ["Select", "SelectField"], description: "Class applied to the select icon wrapper" }, SliderField: { className: componentClassName_e.SliderField, components: ["SliderField"], description: "Top level element that wraps the SliderField primitive" }, SliderFieldGroup: { className: componentClassName_e.SliderFieldGroup, components: ["SliderField"], description: "Class applied to the element that wraps the slider root" }, SliderFieldLabel: { className: componentClassName_e.SliderFieldLabel, components: ["SliderField"], description: "Class applied to the slider label" }, SliderFieldRange: { className: componentClassName_e.SliderFieldRange, components: ["SliderField"], description: "Class applied to the filled in portion of the slider track" }, SliderFieldRoot: { className: componentClassName_e.SliderFieldRoot, components: ["SliderField"], description: "Class applied to the slider root which wraps the track and thumb" }, SliderFieldThumb: { className: componentClassName_e.SliderFieldThumb, components: ["SliderField"], description: "Class applied to the slider thumb" }, SliderFieldTrack: { className: componentClassName_e.SliderFieldTrack, components: ["SliderField"], description: "Class applied to the slider track" }, StepperField: { className: componentClassName_e.StepperField, components: ["StepperField"], description: "Top level element that wraps the StepperField primitive" }, StepperFieldButtonDecrease: { className: componentClassName_e.StepperFieldButtonDecrease, components: ["StepperField"], description: "Class applied to the decrease button" }, StepperFieldButtonIncrease: { className: componentClassName_e.StepperFieldButtonIncrease, components: ["StepperField"], description: "Class applied to the increase button" }, StepperFieldInput: { className: componentClassName_e.StepperFieldInput, components: ["StepperField"], description: "Class applied to the StepperField input" }, StorageImage: { className: componentClassName_e.StorageImage, components: ["StorageImage"], description: "Class applied to the img tag" }, StorageManager: { className: componentClassName_e.StorageManager, components: ["StorageManager"] }, StorageManagerDropZone: { className: componentClassName_e.StorageManagerDropZone, components: ["StorageManager"] }, StorageManagerDropZoneIcon: { className: componentClassName_e.StorageManagerDropZoneIcon, components: ["StorageManager"] }, StorageManagerDropZoneText: { className: componentClassName_e.StorageManagerDropZoneText, components: ["StorageManager"] }, StorageManagerFilePicker: { className: componentClassName_e.StorageManagerFilePicker, components: ["StorageManager"] }, StorageManagerFile: { className: componentClassName_e.StorageManagerFile, components: ["StorageManager"] }, StorageManagerFileWrapper: { className: componentClassName_e.StorageManagerFileWrapper, components: ["StorageManager"] }, StorageManagerFileList: { className: componentClassName_e.StorageManagerFileList, components: ["StorageManager"] }, StorageManagerFileName: { className: componentClassName_e.StorageManagerFileName, components: ["StorageManager"] }, StorageManagerLoader: { className: componentClassName_e.StorageManagerLoader, components: ["StorageManager"] }, StorageManagerFileSize: { className: componentClassName_e.StorageManagerFileSize, components: ["StorageManager"] }, StorageManagerFileInfo: { className: componentClassName_e.StorageManagerFileInfo, components: ["StorageManager"] }, StorageManagerFileImage: { className: componentClassName_e.StorageManagerFileImage, components: ["StorageManager"] }, StorageManagerFileMain: { className: componentClassName_e.StorageManagerFileMain, components: ["StorageManager"] }, StorageManagerFileStatus: { className: componentClassName_e.StorageManagerFileStatus, components: ["StorageManager"] }, StorageManagerPreviewer: { className: componentClassName_e.StorageManagerPreviewer, components: ["StorageManager"] }, StorageManagerPreviewerText: { className: componentClassName_e.StorageManagerPreviewerText, components: ["StorageManager"] }, StorageManagerPreviewerActions: { className: componentClassName_e.StorageManagerPreviewerActions, components: ["StorageManager"] }, StorageManagerPreviewerFooter: { className: componentClassName_e.StorageManagerPreviewerFooter, components: ["StorageManager"] }, SwitchField: { className: componentClassName_e.SwitchField, components: ["SwitchField"], description: "Top level element that wraps the SwitchField primitive" }, SwitchLabel: { className: componentClassName_e.SwitchLabel, components: ["SwitchField"], description: "Class applied to the SwitchField label text" }, SwitchThumb: { className: componentClassName_e.SwitchThumb, components: ["SwitchField"], description: "Class applied to the SwitchField thumb" }, SwitchTrack: { className: componentClassName_e.SwitchTrack, components: ["SwitchField"], description: "Class applied to the SwitchField track" }, SwitchWrapper: { className: componentClassName_e.SwitchWrapper, components: ["SwitchField"], description: "Class applied to the label element that wraps the SwitchField label and track" }, Table: { className: componentClassName_e.Table, components: ["Table"], description: "Top level element that wraps the Table primitive" }, TableCaption: { className: componentClassName_e.TableCaption, components: ["Table"], description: "Class applied to the content provided as the caption prop" }, TableBody: { className: componentClassName_e.TableBody, components: ["Table"], description: "Class applied to TableBody component" }, TableTd: { className: componentClassName_e.TableTd, components: ["Table"], description: 'Class applied to TableCell component rendered as a <td> element (<TableCell as="td" />)' }, TableTh: { className: componentClassName_e.TableTh, components: ["Table"], description: 'Class applied to TableCell comopnent rendered as a <th> element (<TableCell as="th" />)' }, TableFoot: { className: componentClassName_e.TableFoot, components: ["Table"], description: "Class applied to TableFoot component" }, TableHead: { className: componentClassName_e.TableHead, components: ["Table"], description: "Class applied to TableHead component" }, TableRow: { className: componentClassName_e.TableRow, components: ["Table"], description: "Class applied to TableRow component" }, Tabs: { className: componentClassName_e.Tabs, components: ["Tabs"], description: "Top level element that wraps the Tabs primitive" }, TabItems: { className: componentClassName_e.TabItems, components: ["Tabs"], description: "Top level element that wraps the TabItem primitive" }, Text: { className: componentClassName_e.Text, components: ["Text"], description: "Top level element that wraps the Text primitive" }, Textarea: { className: componentClassName_e.Textarea, components: ["TextAreaField"], description: "Class applied to the text area" }, TextAreaField: { className: componentClassName_e.TextAreaField, components: ["TextAreaField"], description: "Top level element that wraps the TextAreaField primitive" }, TextField: { className: componentClassName_e.TextField, components: ["TextField"], description: "Top level element that wraps the TextField primitive" }, ToggleButton: { className: componentClassName_e.ToggleButton, components: ["ToggleButton"], description: "Top level element that wraps the ToggleButton primitive" }, ToggleButtonGroup: { className: componentClassName_e.ToggleButtonGroup, components: ["ToggleButton", "ToggleButtonGroup"], description: "Top level element that wraps the ToggleButtonGroup primitive" }, VisuallyHidden: { className: componentClassName_e.VisuallyHidden, components: ["VisuallyHidden"], description: "Top level element that wraps the VisuallyHidden primitive" } }, constants_t = { Alert: shared_constants_a.Alert.className, AlertIcon: shared_constants_a.AlertIcon.className, AlertHeading: shared_constants_a.AlertHeading.className, AlertBody: shared_constants_a.AlertBody.className, AlertDismiss: shared_constants_a.AlertDismiss.className, Autocomplete: shared_constants_a.Autocomplete.className, AutocompleteMenu: shared_constants_a.AutocompleteMenu.className, AutocompleteMenuEmpty: shared_constants_a.AutocompleteMenuEmpty.className, AutocompleteMenuFooter: shared_constants_a.AutocompleteMenuFooter.className, AutocompleteMenuHeader: shared_constants_a.AutocompleteMenuHeader.className, AutocompleteMenuLoading: shared_constants_a.AutocompleteMenuLoading.className, AutocompleteMenuOption: shared_constants_a.AutocompleteMenuOption.className, AutocompleteMenuOptions: shared_constants_a.AutocompleteMenuOptions.className, Badge: shared_constants_a.Badge.className, Breadcrumbs: shared_constants_a.Breadcrumbs.className, BreadcrumbsItem: shared_constants_a.BreadcrumbsItem.className, BreadcrumbsLink: shared_constants_a.BreadcrumbsLink.className, BreadcrumbsList: shared_constants_a.BreadcrumbsList.className, BreadcrumbsSeparator: shared_constants_a.BreadcrumbsSeparator.className, Button: shared_constants_a.Button.className, ButtonGroup: shared_constants_a.ButtonGroup.className, ButtonLoaderWrapper: shared_constants_a.ButtonLoaderWrapper.className, Card: shared_constants_a.Card.className, Checkbox: shared_constants_a.Checkbox.className, CheckboxButton: shared_constants_a.CheckboxButton.className, CheckboxIcon: shared_constants_a.CheckboxIcon.className, CheckboxInput: shared_constants_a.CheckboxInput.className, CheckboxLabel: shared_constants_a.CheckboxLabel.className, CheckboxField: shared_constants_a.CheckboxField.className, Collection: shared_constants_a.Collection.className, CollectionItems: shared_constants_a.CollectionItems.className, CollectionSearch: shared_constants_a.CollectionSearch.className, CollectionPagination: shared_constants_a.CollectionPagination.className, CountryCodeSelect: shared_constants_a.CountryCodeSelect.className, DialCodeSelect: shared_constants_a.DialCodeSelect.className, Divider: shared_constants_a.Divider.className, DividerLabel: shared_constants_a.DividerLabel.className, DropZone: shared_constants_a.DropZone.className, Expander: shared_constants_a.Expander.className, ExpanderContent: shared_constants_a.ExpanderContent.className, ExpanderContentText: shared_constants_a.ExpanderContentText.className, ExpanderHeader: shared_constants_a.ExpanderHeader.className, ExpanderIcon: shared_constants_a.ExpanderIcon.className, ExpanderItem: shared_constants_a.ExpanderItem.className, ExpanderTrigger: shared_constants_a.ExpanderTrigger.className, Field: shared_constants_a.Field.className, FieldDescription: shared_constants_a.FieldDescription.className, FieldErrorMessage: shared_constants_a.FieldErrorMessage.className, FieldGroup: shared_constants_a.FieldGroup.className, FieldGroupControl: shared_constants_a.FieldGroupControl.className, FieldGroupOuterEnd: shared_constants_a.FieldGroupOuterEnd.className, FieldGroupOuterStart: shared_constants_a.FieldGroupOuterStart.className, FieldGroupInnerEnd: shared_constants_a.FieldGroupInnerEnd.className, FieldGroupInnerStart: shared_constants_a.FieldGroupInnerStart.className, FieldGroupIcon: shared_constants_a.FieldGroupIcon.className, FieldGroupIconButton: shared_constants_a.FieldGroupIconButton.className, FieldGroupHasInnerEnd: shared_constants_a.FieldGroupHasInnerEnd.className, FieldGroupHasInnerStart: shared_constants_a.FieldGroupHasInnerStart.className, FieldShowPassword: shared_constants_a.FieldShowPassword.className, FieldGroupFieldWrapper: shared_constants_a.FieldGroupFieldWrapper.className, Fieldset: shared_constants_a.Fieldset.className, FieldsetLegend: shared_constants_a.FieldsetLegend.className, FileUploaderDropZone: shared_constants_a.FileUploaderDropZone.className, FileUploaderDropZoneIcon: shared_constants_a.FileUploaderDropZoneIcon.className, FileUploaderDropZoneText: shared_constants_a.FileUploaderDropZoneText.className, FileUploaderDropZoneButton: shared_constants_a.FileUploaderDropZoneButton.className, FileUploaderFile: shared_constants_a.FileUploaderFile.className, FileUploaderFileWrapper: shared_constants_a.FileUploaderFileWrapper.className, FileUploaderFileName: shared_constants_a.FileUploaderFileName.className, FileUploaderLoader: shared_constants_a.FileUploaderLoader.className, FileUploaderFileSize: shared_constants_a.FileUploaderFileSize.className, FileUploaderFileInfo: shared_constants_a.FileUploaderFileInfo.className, FileUploaderFileImage: shared_constants_a.FileUploaderFileImage.className, FileUploaderFileMain: shared_constants_a.FileUploaderFileMain.className, FileUploaderFileStatus: shared_constants_a.FileUploaderFileStatus.className, FileUploaderPreviewer: shared_constants_a.FileUploaderPreviewer.className, FileUploaderPreviewerText: shared_constants_a.FileUploaderPreviewerText.className, FileUploaderPreviewerBody: shared_constants_a.FileUploaderPreviewerBody.className, FileUploaderPreviewerFooter: shared_constants_a.FileUploaderPreviewerFooter.className, FileUploaderPreviewerFooterActions: shared_constants_a.FileUploaderPreviewerFooterActions.className, Flex: shared_constants_a.Flex.className, Grid: shared_constants_a.Grid.className, Heading: shared_constants_a.Heading.className, HighlightMatch: shared_constants_a.HighlightMatch.className, HighlightMatchHighlighted: shared_constants_a.HighlightMatchHighlighted.className, Icon: shared_constants_a.Icon.className, Image: shared_constants_a.Image.className, Input: shared_constants_a.Input.className, Label: shared_constants_a.Label.className, Link: shared_constants_a.Link.className, Loader: shared_constants_a.Loader.className, LoaderDeterminate: shared_constants_a.LoaderDeterminate.className, LoaderPercentageText: shared_constants_a.LoaderPercentageText.className, MenuContent: shared_constants_a.MenuContent.className, MenuContentWrapper: shared_constants_a.MenuContentWrapper.className, MenuItem: shared_constants_a.MenuItem.className, MenuTrigger: shared_constants_a.MenuTrigger.className, Message: shared_constants_a.Message.className, MessageIcon: shared_constants_a.MessageIcon.className, MessageHeading: shared_constants_a.MessageHeading.className, MessageBody: shared_constants_a.MessageBody.className, MessageContent: shared_constants_a.MessageContent.className, MessageDismiss: shared_constants_a.MessageDismiss.className, Pagination: shared_constants_a.Pagination.className, PaginationItemButton: shared_constants_a.PaginationItemButton.className, PaginationItemCurrent: shared_constants_a.PaginationItemCurrent.className, PaginationItemEllipsis: shared_constants_a.PaginationItemEllipsis.className, PasswordField: shared_constants_a.PasswordField.className, PhoneNumberField: shared_constants_a.PhoneNumberField.className, Placeholder: shared_constants_a.Placeholder.className, Radio: shared_constants_a.Radio.className, RadioButton: shared_constants_a.RadioButton.className, RadioInput: shared_constants_a.RadioInput.className, RadioLabel: shared_constants_a.RadioLabel.className, RadioGroupField: shared_constants_a.RadioGroupField.className, RadioGroup: shared_constants_a.RadioGroup.className, Rating: shared_constants_a.Rating.className, ScrollView: shared_constants_a.ScrollView.className, SearchField: shared_constants_a.SearchField.className, SearchFieldClear: shared_constants_a.SearchFieldClear.className, SearchFieldSearch: shared_constants_a.SearchFieldSearch.className, Select: shared_constants_a.Select.className, SelectField: shared_constants_a.SelectField.className, SelectWrapper: shared_constants_a.SelectWrapper.className, SelectIconWrapper: shared_constants_a.SelectIconWrapper.className, SliderField: shared_constants_a.SliderField.className, SliderFieldGroup: shared_constants_a.SliderFieldGroup.className, SliderFieldLabel: shared_constants_a.SliderFieldLabel.className, SliderFieldRange: shared_constants_a.SliderFieldRange.className, SliderFieldRoot: shared_constants_a.SliderFieldRoot.className, SliderFieldThumb: shared_constants_a.SliderFieldThumb.className, SliderFieldTrack: shared_constants_a.SliderFieldTrack.className, StepperField: shared_constants_a.StepperField.className, StepperFieldButtonDecrease: shared_constants_a.StepperFieldButtonDecrease.className, StepperFieldButtonIncrease: shared_constants_a.StepperFieldButtonIncrease.className, StepperFieldInput: shared_constants_a.StepperFieldInput.className, StorageImage: shared_constants_a.StorageImage.className, StorageManager: shared_constants_a.StorageManager.className, StorageManagerDropZone: shared_constants_a.StorageManagerDropZone.className, StorageManagerDropZoneIcon: shared_constants_a.StorageManagerDropZoneIcon.className, StorageManagerDropZoneText: shared_constants_a.StorageManagerDropZoneText.className, StorageManagerFilePicker: shared_constants_a.StorageManagerFilePicker.className, StorageManagerFile: shared_constants_a.StorageManagerFile.className, StorageManagerFileWrapper: shared_constants_a.StorageManagerFileWrapper.className, StorageManagerFileList: shared_constants_a.StorageManagerFileList.className, StorageManagerFileName: shared_constants_a.StorageManagerFileName.className, StorageManagerLoader: shared_constants_a.StorageManagerLoader.className, StorageManagerFileSize: shared_constants_a.StorageManagerFileSize.className, StorageManagerFileInfo: shared_constants_a.StorageManagerFileInfo.className, StorageManagerFileImage: shared_constants_a.StorageManagerFileImage.className, StorageManagerFileMain: shared_constants_a.StorageManagerFileMain.className, StorageManagerFileStatus: shared_constants_a.StorageManagerFileStatus.className, StorageManagerPreviewer: shared_constants_a.StorageManagerPreviewer.className, StorageManagerPreviewerText: shared_constants_a.StorageManagerPreviewerText.className, StorageManagerPreviewerActions: shared_constants_a.StorageManagerPreviewerActions.className, StorageManagerPreviewerFooter: shared_constants_a.StorageManagerPreviewerFooter.className, SwitchField: shared_constants_a.SwitchField.className, SwitchLabel: shared_constants_a.SwitchLabel.className, SwitchThumb: shared_constants_a.SwitchThumb.className, SwitchTrack: shared_constants_a.SwitchTrack.className, SwitchWrapper: shared_constants_a.SwitchWrapper.className, Table: shared_constants_a.Table.className, TableCaption: shared_constants_a.TableCaption.className, TableBody: shared_constants_a.TableBody.className, TableTd: shared_constants_a.TableTd.className, TableTh: shared_constants_a.TableTh.className, TableFoot: shared_constants_a.TableFoot.className, TableHead: shared_constants_a.TableHead.className, TableRow: shared_constants_a.TableRow.className, Tabs: shared_constants_a.Tabs.className, TabItems: shared_constants_a.TabItems.className, Text: shared_constants_a.Text.className, Textarea: shared_constants_a.Textarea.className, TextAreaField: shared_constants_a.TextAreaField.className, TextField: shared_constants_a.TextField.className, ToggleButton: shared_constants_a.ToggleButton.className, ToggleButtonGroup: shared_constants_a.ToggleButtonGroup.className, VisuallyHidden: shared_constants_a.VisuallyHidden.className }, constants_o = { Alert: { dismissButtonLabel: "Dismiss alert" }, Autocomplete: { emptyText: "No options found", loadingText: "Loading options..." }, Collection: { searchButtonLabel: "Search", searchNoResultsFound: "No results found" }, Fields: { clearButtonLabel: "Clear input" }, Message: { dismissLabel: "Dismiss message" }, PaginationItem: { currentPageLabel: "Page", nextLabel: "Go to next page", pageLabel: "Go to page", previousLabel: "Go to previous page" }, PhoneNumberField: { countryCodeLabel: "Country code" }, SearchField: { searchButtonLabel: "Search" }, PasswordField: { passwordIsHidden: "Password is hidden", passwordIsShown: "Password is shown", showPassword: "Show password" }, StepperField: { increaseButtonLabel: "Increase to", decreaseButtonLabel: "Decrease to" } }, shared_constants_l = { backgroundColor: "colors", borderColor: "colors", borderWidth: "borderWidths", color: "colors", borderRadius: "radii", fontSize: "fontSizes", fontWeight: "fontWeights", fontFamily: "fonts", lineHeight: "lineHeights", opacity: "opacities", boxShadow: "shadows", transform: "transforms", left: "space", right: "space", top: "space", bottom: "space", height: "space", width: "space", letterSpacing: "space", margin: "space", marginBlock: "space", marginBlockEnd: "space", marginBlockStart: "space", marginInline: "space", marginInlineEnd: "space", marginInlineStart: "space", marginLeft: "space", marginRight: "space", marginTop: "space", marginBottom: "space", maxHeight: "space", maxWidth: "space", minHeight: "space", minWidth: "space", padding: "space", paddingBlock: "space", paddingBlockEnd: "space", paddingBlockStart: "space", paddingInline: "space", paddingInlineEnd: "space", paddingInlineStart: "space", paddingLeft: "space", paddingRight: "space", paddingTop: "space", paddingBottom: "space", gap: "space", columnGap: "space", rowGap: "space" }, constants_s = "Escape", constants_i = "Enter", shared_constants_r = "ArrowUp", constants_n = "ArrowDown";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Fieldset/useFieldset.mjs
            const useFieldset_t = react.createContext({ isFieldsetDisabled: !1 }), useFieldset_o = () => react.useContext(useFieldset_t);

            // EXTERNAL MODULE: ./node_modules/lodash/kebabCase.js
            var kebabCase = __webpack_require__(1804);
            // EXTERNAL MODULE: ./node_modules/style-dictionary/lib/utils/references/usesReference.js
            var usesReference = __webpack_require__(6239);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/utils.mjs
            const theme_utils_u = "amplify", theme_utils_s = ["offsetX", "offsetY", "blurRadius", "spreadRadius", "color"]; function utils_i(e) { if (!e) return ""; if (usesReference(e)) { return `var(--${theme_utils_f({ path: e.replace(/\{|\}/g, "").replace(".value", "").split(".") })})` } return e } function utils_a(e) { const { value: t } = e; return r(t) ? utils_i(t) : theme_utils_p(t) ? theme_utils_s.map((n => utils_i(theme_utils_p(e) ? e[n] : t[n]))).join(" ") : t } function theme_utils_f({ path: t = [] }) { return `${kebabCase([theme_utils_u, ...t].join(" "))}` } function theme_utils_c(e) { return n(e) && utils_s(e, "value") } function theme_utils_p(e) { return n(e) && utils_s(e, "offsetX") } function theme_utils_l({ tokens: e, path: t = [], setupToken: o }) { if (utils_s(e, "value")) return o({ token: e, path: t }); const u = {}; for (const s in e) if (utils_s(e, s)) { const r = e[s], i = n(r) ? r : { value: r }; u[s] = theme_utils_l({ tokens: i, path: t.concat(s), setupToken: o }) } return u }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/types/style.mjs
            const style_n = { alignContent: "alignContent", alignItems: "alignItems", alignSelf: "alignSelf", area: "gridArea", aspectRatio: "aspectRatio", autoColumns: "gridAutoColumns", autoFlow: "gridAutoFlow", autoRows: "gridAutoRows", backgroundColor: "backgroundColor", backgroundImage: "backgroundImage", basis: "flexBasis", border: "border", borderRadius: "borderRadius", borderColor: "borderColor", borderWidth: "borderWidth", borderStyle: "borderStyle", bottom: "bottom", boxShadow: "boxShadow", color: "color", column: "gridColumn", columnEnd: "gridColumnEnd", columnGap: "columnGap", columnSpan: "gridColumn", columnStart: "gridColumnStart", direction: "flexDirection", display: "display", flex: "flex", fontFamily: "fontFamily", fontSize: "fontSize", fontStyle: "fontStyle", fontWeight: "fontWeight", gap: "gap", grow: "flexGrow", height: "height", justifyContent: "justifyContent", left: "left", letterSpacing: "letterSpacing", lineHeight: "lineHeight", margin: "margin", marginBlock: "marginBlock", marginBlockEnd: "marginBlockEnd", marginBlockStart: "marginBlockStart", marginBottom: "marginBlockEnd", marginInline: "marginInline", marginInlineEnd: "marginInlineEnd", marginInlineStart: "marginInlineStart", marginLeft: "marginInlineStart", marginRight: "marginInlineEnd", marginTop: "marginBlockStart", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", objectFit: "objectFit", objectPosition: "objectPosition", opacity: "opacity", order: "order", overflow: "overflow", padding: "padding", paddingBlock: "paddingBlock", paddingBlockEnd: "paddingBlockEnd", paddingBlockStart: "paddingBlockStart", paddingBottom: "paddingBlockEnd", paddingInline: "paddingInline", paddingInlineEnd: "paddingInlineEnd", paddingInlineStart: "paddingInlineStart", paddingLeft: "paddingInlineStart", paddingRight: "paddingInlineEnd", paddingTop: "paddingBlockStart", position: "position", resize: "resize", right: "right", row: "gridRow", rowEnd: "gridRowEnd", rowGap: "rowGap", rowSpan: "gridRow", rowStart: "gridRowStart", shrink: "flexShrink", templateAreas: "gridTemplateAreas", templateColumns: "gridTemplateColumns", templateRows: "gridTemplateRows", textAlign: "textAlign", textDecoration: "textDecoration", textTransform: "textTransform", top: "top", transform: "transform", transformOrigin: "transformOrigin", width: "width", whiteSpace: "whiteSpace", wrap: "flexWrap" }, style_i = Object.keys(style_n);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/borderWidths.mjs
            const borderWidths_e = { small: { value: "1px" }, medium: { value: "2px" }, large: { value: "3px" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/colors.mjs
            const colors_l = { red: { 10: { value: "hsl(0, 75%, 95%)" }, 20: { value: "hsl(0, 75%, 85%)" }, 40: { value: "hsl(0, 75%, 75%)" }, 60: { value: "hsl(0, 50%, 50%)" }, 80: { value: "hsl(0, 95%, 30%)" }, 90: { value: "hsl(0, 100%, 20%)" }, 100: { value: "hsl(0, 100%, 15%)" } }, orange: { 10: { value: "hsl(30, 75%, 95%)" }, 20: { value: "hsl(30, 75%, 85%)" }, 40: { value: "hsl(30, 75%, 75%)" }, 60: { value: "hsl(30, 50%, 50%)" }, 80: { value: "hsl(30, 95%, 30%)" }, 90: { value: "hsl(30, 100%, 20%)" }, 100: { value: "hsl(30, 100%, 15%)" } }, yellow: { 10: { value: "hsl(60, 75%, 95%)" }, 20: { value: "hsl(60, 75%, 85%)" }, 40: { value: "hsl(60, 75%, 75%)" }, 60: { value: "hsl(60, 50%, 50%)" }, 80: { value: "hsl(60, 95%, 30%)" }, 90: { value: "hsl(60, 100%, 20%)" }, 100: { value: "hsl(60, 100%, 15%)" } }, green: { 10: { value: "hsl(130, 60%, 95%)" }, 20: { value: "hsl(130, 60%, 90%)" }, 40: { value: "hsl(130, 44%, 63%)" }, 60: { value: "hsl(130, 43%, 46%)" }, 80: { value: "hsl(130, 33%, 37%)" }, 90: { value: "hsl(130, 27%, 29%)" }, 100: { value: "hsl(130, 22%, 23%)" } }, teal: { 10: { value: "hsl(190, 75%, 95%)" }, 20: { value: "hsl(190, 75%, 85%)" }, 40: { value: "hsl(190, 70%, 70%)" }, 60: { value: "hsl(190, 50%, 50%)" }, 80: { value: "hsl(190, 95%, 30%)" }, 90: { value: "hsl(190, 100%, 20%)" }, 100: { value: "hsl(190, 100%, 15%)" } }, blue: { 10: { value: "hsl(220, 95%, 95%)" }, 20: { value: "hsl(220, 85%, 85%)" }, 40: { value: "hsl(220, 70%, 70%)" }, 60: { value: "hsl(220, 50%, 50%)" }, 80: { value: "hsl(220, 95%, 30%)" }, 90: { value: "hsl(220, 100%, 20%)" }, 100: { value: "hsl(220, 100%, 15%)" } }, purple: { 10: { value: "hsl(300, 95%, 95%)" }, 20: { value: "hsl(300, 85%, 85%)" }, 40: { value: "hsl(300, 70%, 70%)" }, 60: { value: "hsl(300, 50%, 50%)" }, 80: { value: "hsl(300, 95%, 30%)" }, 90: { value: "hsl(300, 100%, 20%)" }, 100: { value: "hsl(300, 100%, 15%)" } }, pink: { 10: { value: "hsl(340, 95%, 95%)" }, 20: { value: "hsl(340, 90%, 85%)" }, 40: { value: "hsl(340, 70%, 70%)" }, 60: { value: "hsl(340, 50%, 50%)" }, 80: { value: "hsl(340, 95%, 30%)" }, 90: { value: "hsl(340, 100%, 20%)" }, 100: { value: "hsl(340, 100%, 15%)" } }, neutral: { 10: { value: "hsl(210, 5%, 98%)" }, 20: { value: "hsl(210, 5%, 94%)" }, 40: { value: "hsl(210, 5%, 87%)" }, 60: { value: "hsl(210, 10%, 58%)" }, 80: { value: "hsl(210, 10%, 40%)" }, 90: { value: "hsl(210, 25%, 25%)" }, 100: { value: "hsl(210, 50%, 10%)" } }, brand: { primary: { 10: { value: "{colors.teal.10.value}" }, 20: { value: "{colors.teal.20.value}" }, 40: { value: "{colors.teal.40.value}" }, 60: { value: "{colors.teal.60.value}" }, 80: { value: "{colors.teal.80.value}" }, 90: { value: "{colors.teal.90.value}" }, 100: { value: "{colors.teal.100.value}" } }, secondary: { 10: { value: "{colors.purple.10.value}" }, 20: { value: "{colors.purple.20.value}" }, 40: { value: "{colors.purple.40.value}" }, 60: { value: "{colors.purple.60.value}" }, 80: { value: "{colors.purple.80.value}" }, 90: { value: "{colors.purple.90.value}" }, 100: { value: "{colors.purple.100.value}" } } }, font: { primary: { value: "{colors.neutral.100.value}" }, secondary: { value: "{colors.neutral.90.value}" }, tertiary: { value: "{colors.neutral.80.value}" }, disabled: { value: "{colors.neutral.60.value}" }, inverse: { value: "{colors.white.value}" }, interactive: { value: "{colors.brand.primary.80.value}" }, hover: { value: "{colors.brand.primary.90.value}" }, focus: { value: "{colors.brand.primary.100.value}" }, active: { value: "{colors.brand.primary.100.value}" }, info: { value: "{colors.blue.90.value}" }, warning: { value: "{colors.orange.90.value}" }, error: { value: "{colors.red.90.value}" }, success: { value: "{colors.green.90.value}" } }, background: { primary: { value: "{colors.white.value}" }, secondary: { value: "{colors.neutral.10.value}" }, tertiary: { value: "{colors.neutral.20.value}" }, quaternary: { value: "{colors.neutral.60.value}" }, disabled: { value: "{colors.background.tertiary.value}" }, info: { value: "{colors.blue.10.value}" }, warning: { value: "{colors.orange.10.value}" }, error: { value: "{colors.red.10.value}" }, success: { value: "{colors.green.10.value}" } }, border: { primary: { value: "{colors.neutral.60.value}" }, secondary: { value: "{colors.neutral.40.value}" }, tertiary: { value: "{colors.neutral.20.value}" }, disabled: { value: "{colors.border.tertiary.value}" }, pressed: { value: "{colors.brand.primary.100.value}" }, focus: { value: "{colors.brand.primary.100.value}" }, error: { value: "{colors.red.80.value}" }, info: { value: "{colors.blue.80.value}" }, success: { value: "{colors.green.80.value}" }, warning: { value: "{colors.orange.80.value}" } }, shadow: { primary: { value: "hsla(210, 50%, 10%, 0.25)" }, secondary: { value: "hsla(210, 50%, 10%, 0.15)" }, tertiary: { value: "hsla(210, 50%, 10%, 0.05)" } }, overlay: { 5: { value: "hsla(0, 0%, 0%, 0.05)" }, 10: { value: "hsla(0, 0%, 0%, 0.1)" }, 20: { value: "hsla(0, 0%, 0%, 0.2)" }, 30: { value: "hsla(0, 0%, 0%, 0.3)" }, 40: { value: "hsla(0, 0%, 0%, 0.4)" }, 50: { value: "hsla(0, 0%, 0%, 0.5)" }, 60: { value: "hsla(0, 0%, 0%, 0.6)" }, 70: { value: "hsla(0, 0%, 0%, 0.7)" }, 80: { value: "hsla(0, 0%, 0%, 0.8)" }, 90: { value: "hsla(0, 0%, 0%, 0.9)" } }, black: { value: "hsl(0, 0%, 0%)" }, white: { value: "hsl(0, 0%, 100%)" }, transparent: { value: "transparent" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/alert.mjs
            const alert_o = { alignItems: { value: "center" }, justifyContent: { value: "space-between" }, color: { value: "{colors.font.primary.value}" }, backgroundColor: { value: "{colors.background.tertiary.value}" }, paddingBlock: { value: "{space.small.value}" }, paddingInline: { value: "{space.medium.value}" }, icon: { size: { value: "{fontSizes.xl.value}" } }, heading: { fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.bold.value}" } }, info: { color: { value: "{colors.font.info.value}" }, backgroundColor: { value: "{colors.background.info.value}" } }, error: { color: { value: "{colors.font.error.value}" }, backgroundColor: { value: "{colors.background.error.value}" } }, warning: { color: { value: "{colors.font.warning.value}" }, backgroundColor: { value: "{colors.background.warning.value}" } }, success: { color: { value: "{colors.font.success.value}" }, backgroundColor: { value: "{colors.background.success.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/autocomplete.mjs
            const autocomplete_a = { menu: { width: { value: "100%" }, marginBlockStart: { value: "{space.xxxs}" }, backgroundColor: { value: "{colors.background.primary}" }, borderColor: { value: "{colors.border.primary}" }, borderWidth: { value: "{borderWidths.small}" }, borderStyle: { value: "solid" }, borderRadius: { value: "{radii.small}" }, options: { display: { value: "flex" }, flexDirection: { value: "column" }, maxHeight: { value: "300px" } }, option: { backgroundColor: { value: "{colors.background.primary}" }, color: { value: "currentcolor" }, cursor: { value: "pointer" }, transitionDuration: { value: "{time.short}" }, transitionProperty: { value: "background-color, color" }, transitionTimingFunction: { value: "ease" }, _active: { backgroundColor: { value: "{colors.brand.primary.80}" }, color: { value: "{colors.white}" } } }, _empty: { display: { value: "flex" } }, _loading: { alignItems: { value: "center" }, display: { value: "flex" }, gap: { value: "{space.xxxs}" } }, spaceShared: { paddingBlock: { value: "{space.xs}" }, paddingInline: { value: "{space.small}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/authenticator.mjs
            const authenticator_e = { maxWidth: { value: "60rem" }, modal: { width: { value: "{space.relative.full}" }, height: { value: "{space.relative.full}" }, backgroundColor: { value: "{colors.overlay.50.value}" }, top: { value: "{space.zero}" }, left: { value: "{space.zero}" } }, container: { widthMax: { value: "30rem" } }, router: { borderWidth: { value: "{borderWidths.small.value}" }, borderStyle: { value: "solid" }, borderColor: { value: "{colors.border.primary.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, boxShadow: { value: "{shadows.medium.value}" } }, footer: { paddingBottom: { value: "{space.medium.value}" } }, form: { padding: { value: "{space.xl.value}" } }, state: { inactive: { backgroundColor: { value: "{colors.background.secondary.value}" } } }, orContainer: { color: { value: "{colors.neutral.80.value}" }, orLine: { backgroundColor: { value: "{colors.background.primary.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/badge.mjs
            const badge_a = { color: { value: "{colors.font.primary.value}" }, lineHeight: { value: 1 }, fontWeight: { value: "{fontWeights.semibold.value}" }, fontSize: { value: "{fontSizes.small.value}" }, textAlign: { value: "center" }, paddingVertical: { value: "{space.xs.value}" }, paddingHorizontal: { value: "{space.small.value}" }, backgroundColor: { value: "{colors.background.tertiary.value}" }, borderRadius: { value: "{radii.xl.value}" }, info: { color: { value: "{colors.font.info.value}" }, backgroundColor: { value: "{colors.background.info.value}" } }, warning: { color: { value: "{colors.font.warning.value}" }, backgroundColor: { value: "{colors.background.warning.value}" } }, success: { color: { value: "{colors.font.success.value}" }, backgroundColor: { value: "{colors.background.success.value}" } }, error: { color: { value: "{colors.font.error.value}" }, backgroundColor: { value: "{colors.background.error.value}" } }, small: { fontSize: { value: "{fontSizes.xs.value}" }, paddingVertical: { value: "{space.xxs.value}" }, paddingHorizontal: { value: "{space.xs.value}" } }, large: { fontSize: { value: "{fontSizes.medium.value}" }, paddingVertical: { value: "{space.small.value}" }, paddingHorizontal: { value: "{space.medium.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/breadcrumbs.mjs
            const breadcrumbs_e = { flexDirection: { value: "row" }, flexWrap: { value: "wrap" }, gap: { value: "0" }, color: { value: "{colors.font.tertiary}" }, item: { flexDirection: { value: "row" }, color: { value: "inherit" }, fontSize: { value: "inherit" }, alignItems: { value: "center" }, lineHeight: { value: "1" } }, separator: { color: { value: "inherit" }, fontSize: { value: "inherit" }, paddingInline: { value: "{space.xxs}" } }, link: { color: { value: "{components.link.color}" }, fontSize: { value: "inherit" }, fontWeight: { value: "normal" }, textDecoration: { value: "none" }, paddingInline: { value: "{space.xs}" }, paddingBlock: { value: "{space.xxs}" }, current: { color: { value: "inherit" }, fontSize: { value: "inherit" }, fontWeight: { value: "normal" }, textDecoration: { value: "none" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/button.mjs
            const button_o = { fontWeight: { value: "{fontWeights.bold.value}" }, transitionDuration: { value: "{components.fieldcontrol.transitionDuration.value}" }, fontSize: { value: "{components.fieldcontrol.fontSize.value}" }, lineHeight: { value: "{components.fieldcontrol.lineHeight.value}" }, paddingBlockStart: { value: "{components.fieldcontrol.paddingBlockStart.value}" }, paddingBlockEnd: { value: "{components.fieldcontrol.paddingBlockEnd.value}" }, paddingInlineStart: { value: "{components.fieldcontrol.paddingInlineStart.value}" }, paddingInlineEnd: { value: "{components.fieldcontrol.paddingInlineEnd.value}" }, backgroundColor: { value: "transparent" }, borderColor: { value: "{components.fieldcontrol.borderColor.value}" }, borderWidth: { value: "{components.fieldcontrol.borderWidth.value}" }, borderStyle: { value: "{components.fieldcontrol.borderStyle.value}" }, borderRadius: { value: "{components.fieldcontrol.borderRadius.value}" }, color: { value: "{colors.font.primary.value}" }, _hover: { color: { value: "{colors.font.focus.value}" }, backgroundColor: { value: "{colors.brand.primary.10.value}" }, borderColor: { value: "{colors.brand.primary.60.value}" } }, _focus: { color: { value: "{colors.font.focus.value}" }, backgroundColor: { value: "{colors.brand.primary.10.value}" }, borderColor: { value: "{colors.border.focus.value}" }, boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" } }, _active: { color: { value: "{colors.font.active.value}" }, backgroundColor: { value: "{colors.brand.primary.20.value}" }, borderColor: { value: "{colors.brand.primary.100.value}" } }, _loading: { color: { value: "{colors.font.disabled.value}" }, backgroundColor: { value: "transparent" }, borderColor: { value: "{colors.border.tertiary.value}" } }, _disabled: { color: { value: "{colors.font.disabled.value}" }, backgroundColor: { value: "transparent" }, borderColor: { value: "{colors.border.tertiary.value}" } }, outlined: { info: { borderColor: { value: "{colors.blue.60.value}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.blue.100}" }, _hover: { borderColor: { value: "{colors.blue.60.value}" }, backgroundColor: { value: "{colors.blue.10.value}" }, color: { value: "{colors.blue.100.value}" } }, _focus: { borderColor: { value: "{colors.blue.100.value}" }, backgroundColor: { value: "{colors.blue.10.value}" }, color: { value: "{colors.blue.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.blue.100.value}" } } }, _active: { borderColor: { value: "{colors.blue.100.value}" }, backgroundColor: { value: "{colors.blue.20.value}" }, color: { value: "{colors.blue.100.value}" } } }, warning: { borderColor: { value: "{colors.orange.60.value}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.orange.100}" }, _hover: { borderColor: { value: "{colors.orange.60.value}" }, backgroundColor: { value: "{colors.orange.10.value}" }, color: { value: "{colors.orange.100.value}" } }, _focus: { borderColor: { value: "{colors.orange.100.value}" }, backgroundColor: { value: "{colors.orange.10.value}" }, color: { value: "{colors.orange.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.orange.100.value}" } } }, _active: { borderColor: { value: "{colors.orange.100.value}" }, backgroundColor: { value: "{colors.orange.20.value}" }, color: { value: "{colors.orange.100.value}" } } }, success: { borderColor: { value: "{colors.green.60.value}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.green.100}" }, _hover: { borderColor: { value: "{colors.green.60.value}" }, backgroundColor: { value: "{colors.green.10.value}" }, color: { value: "{colors.green.100.value}" } }, _focus: { borderColor: { value: "{colors.green.100.value}" }, backgroundColor: { value: "{colors.green.10.value}" }, color: { value: "{colors.green.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.green.100.value}" } } }, _active: { borderColor: { value: "{colors.green.100.value}" }, backgroundColor: { value: "{colors.green.20.value}" }, color: { value: "{colors.green.100.value}" } } }, error: { borderColor: { value: "{colors.red.60.value}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.red.100}" }, _hover: { borderColor: { value: "{colors.red.60.value}" }, backgroundColor: { value: "{colors.red.10.value}" }, color: { value: "{colors.red.100.value}" } }, _focus: { borderColor: { value: "{colors.red.100.value}" }, backgroundColor: { value: "{colors.red.10.value}" }, color: { value: "{colors.red.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.red.100.value}" } } }, _active: { borderColor: { value: "{colors.red.100.value}" }, backgroundColor: { value: "{colors.red.20.value}" }, color: { value: "{colors.red.100.value}" } } }, overlay: { borderColor: { value: "{colors.overlay.60.value}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.font.primary.value}" }, _hover: { borderColor: { value: "{colors.overlay.60.value}" }, backgroundColor: { value: "{colors.overlay.5.value}" }, color: { value: "{colors.neutral.90.value}" } }, _focus: { borderColor: { value: "{colors.overlay.90.value}" }, backgroundColor: { value: "{colors.overlay.5.value}" }, color: { value: "{colors.neutral.90.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.overlay.90.value}" } } }, _active: { borderColor: { value: "{colors.overlay.90.value}" }, backgroundColor: { value: "{colors.overlay.10.value}" }, color: { value: "{colors.neutral.100.value}" } } } }, primary: { borderColor: { value: "transparent" }, borderWidth: { value: "{borderWidths.small.value}" }, borderStyle: { value: "solid" }, backgroundColor: { value: "{colors.brand.primary.80.value}" }, color: { value: "{colors.font.inverse.value}" }, _disabled: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.background.disabled.value}" }, color: { value: "{colors.font.disabled.value}" } }, _loading: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.background.disabled.value}" }, color: { value: "{colors.font.disabled.value}" } }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.brand.primary.90.value}" }, color: { value: "{colors.font.inverse.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.brand.primary.90.value}" }, color: { value: "{colors.font.inverse.value}" }, boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.brand.primary.100.value}" }, color: { value: "{colors.font.inverse.value}" } }, info: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.80}" }, color: { value: "{colors.font.inverse.value}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.90.value}" }, color: { value: "{colors.font.inverse.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.90.value}" }, color: { value: "{colors.font.inverse.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.blue.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.100.value}" }, color: { value: "{colors.font.inverse.value}" } } }, warning: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.80}" }, color: { value: "{colors.font.inverse.value}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.90.value}" }, color: { value: "{colors.font.inverse.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.90.value}" }, color: { value: "{colors.font.inverse.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.orange.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.100.value}" }, color: { value: "{colors.font.inverse.value}" } } }, error: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.80}" }, color: { value: "{colors.font.inverse.value}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.90.value}" }, color: { value: "{colors.font.inverse.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.90.value}" }, color: { value: "{colors.font.inverse.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.red.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.100.value}" }, color: { value: "{colors.font.inverse.value}" } } }, success: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.80}" }, color: { value: "{colors.font.inverse.value}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.90.value}" }, color: { value: "{colors.font.inverse.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.90.value}" }, color: { value: "{colors.font.inverse.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.green.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.100.value}" }, color: { value: "{colors.font.inverse.value}" } } }, overlay: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.70}" }, color: { value: "{colors.font.inverse.value}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.90.value}" }, color: { value: "{colors.font.inverse.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.90.value}" }, color: { value: "{colors.font.inverse.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.overlay.90.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.90.value}" }, color: { value: "{colors.font.inverse.value}" } } } }, menu: { borderWidth: { value: "{space.zero.value}" }, backgroundColor: { value: "transparent" }, justifyContent: { value: "start" }, _hover: { color: { value: "{colors.font.inverse.value}" }, backgroundColor: { value: "{colors.brand.primary.80.value}" } }, _focus: { color: { value: "{colors.font.inverse.value}" }, backgroundColor: { value: "{colors.brand.primary.80.value}" } }, _active: { color: { value: "{colors.font.inverse.value}" }, backgroundColor: { value: "{colors.brand.primary.90.value}" } }, _disabled: { color: { value: "{colors.font.disabled.value}" } } }, link: { backgroundColor: { value: "transparent" }, borderColor: { value: "transparent" }, borderWidth: { value: "{borderWidths.small.value}" }, color: { value: "{colors.font.interactive.value}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.brand.primary.10.value}" }, color: { value: "{colors.font.hover.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.brand.primary.10.value}" }, color: { value: "{colors.font.focus.value}" }, boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.brand.primary.20.value}" }, color: { value: "{colors.font.active.value}" } }, _disabled: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.font.disabled.value}" } }, _loading: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.font.disabled.value}" } }, info: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.blue.100}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.10.value}" }, color: { value: "{colors.blue.90.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.10.value}" }, color: { value: "{colors.blue.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.blue.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.blue.20.value}" }, color: { value: "{colors.blue.100.value}" } } }, warning: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.orange.100}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.10.value}" }, color: { value: "{colors.orange.90.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.10.value}" }, color: { value: "{colors.orange.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.orange.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.orange.20.value}" }, color: { value: "{colors.orange.100.value}" } } }, success: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.green.100}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.10.value}" }, color: { value: "{colors.green.90.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.10.value}" }, color: { value: "{colors.green.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.green.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.green.20.value}" }, color: { value: "{colors.green.100.value}" } } }, error: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.red.100}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.10.value}" }, color: { value: "{colors.red.90.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.10.value}" }, color: { value: "{colors.red.100.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.red.100.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.20.value}" }, color: { value: "{colors.red.100.value}" } } }, overlay: { borderColor: { value: "transparent" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.neutral.100}" }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.5.value}" }, color: { value: "{colors.overlay.80.value}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.5.value}" }, color: { value: "{colors.overlay.90.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.overlay.90.value}" } } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.overlay.10.value}" }, color: { value: "{colors.overlay.90.value}" } } } }, warning: { backgroundColor: { value: "transparent" }, borderColor: { value: "{colors.red.60}" }, borderWidth: { value: "{borderWidths.small}" }, color: { value: "{colors.red.60}" }, _hover: { borderColor: { value: "{colors.red.80}" }, backgroundColor: { value: "{colors.red.10}" }, color: { value: "{colors.font.error}" } }, _focus: { borderColor: { value: "{colors.red.80}" }, backgroundColor: { value: "{colors.red.10}" }, color: { value: "{colors.red.80}" }, boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow}" } }, _active: { borderColor: { value: "{colors.red.100}" }, backgroundColor: { value: "{colors.red.20}" }, color: { value: "{colors.red.100}" } }, _disabled: { borderColor: { value: "{colors.border.tertiary}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.font.disabled}" } }, _loading: { borderColor: { value: "{colors.border.tertiary}" }, backgroundColor: { value: "transparent" }, color: { value: "{colors.font.disabled}" } } }, destructive: { borderColor: { value: "transparent" }, borderWidth: { value: "{borderWidths.small}" }, borderStyle: { value: "solid" }, backgroundColor: { value: "{colors.red.60}" }, color: { value: "{colors.font.inverse}" }, _disabled: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.background.disabled}" }, color: { value: "{colors.font.disabled}" } }, _loading: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.background.disabled}" }, color: { value: "{colors.font.disabled}" } }, _hover: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.80}" }, color: { value: "{colors.font.inverse}" } }, _focus: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.80}" }, color: { value: "{colors.font.inverse}" }, boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow}" } }, _active: { borderColor: { value: "transparent" }, backgroundColor: { value: "{colors.red.100}" }, color: { value: "{colors.font.inverse}" } } }, small: { fontSize: { value: "{components.fieldcontrol.small.fontSize.value}" }, paddingBlockStart: { value: "{components.fieldcontrol.small.paddingBlockStart.value}" }, paddingBlockEnd: { value: "{components.fieldcontrol.small.paddingBlockEnd.value}" }, paddingInlineStart: { value: "{components.fieldcontrol.small.paddingInlineStart.value}" }, paddingInlineEnd: { value: "{components.fieldcontrol.small.paddingInlineEnd.value}" } }, large: { fontSize: { value: "{components.fieldcontrol.large.fontSize.value}" }, paddingBlockStart: { value: "{components.fieldcontrol.large.paddingBlockStart.value}" }, paddingBlockEnd: { value: "{components.fieldcontrol.large.paddingBlockEnd.value}" }, paddingInlineStart: { value: "{components.fieldcontrol.large.paddingInlineStart.value}" }, paddingInlineEnd: { value: "{components.fieldcontrol.large.paddingInlineEnd.value}" } }, loaderWrapper: { alignItems: { value: "center" }, gap: { value: "{space.xs.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/card.mjs
            const card_o = { backgroundColor: { value: "{colors.background.primary.value}" }, borderRadius: { value: "{radii.xs.value}" }, borderWidth: { value: "0" }, borderStyle: { value: "solid" }, borderColor: { value: "transparent" }, boxShadow: { value: "none" }, padding: { value: "{space.medium.value}" }, outlined: { backgroundColor: { value: "{components.card.backgroundColor.value}" }, borderRadius: { value: "{radii.xs.value}" }, borderWidth: { value: "{borderWidths.small.value}" }, borderStyle: { value: "solid" }, borderColor: { value: "{colors.border.primary.value}" }, boxShadow: { value: "{components.card.boxShadow.value}" } }, elevated: { backgroundColor: { value: "{components.card.backgroundColor.value}" }, borderRadius: { value: "{radii.xs.value}" }, borderWidth: { value: "0" }, borderStyle: { value: "solid" }, borderColor: { value: "transparent" }, boxShadow: { value: "{shadows.medium.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/checkbox.mjs
            const checkbox_e = { cursor: { value: "pointer" }, alignItems: { value: "center" }, _disabled: { cursor: { value: "not-allowed" } }, button: { position: { value: "relative" }, alignItems: { value: "center" }, justifyContent: { value: "center" }, color: { value: "{colors.font.inverse.value}" }, before: { width: { value: "100%" }, height: { value: "100%" }, borderWidth: { value: "{borderWidths.medium.value}" }, borderRadius: { value: "20%" }, borderStyle: { value: "solid" }, borderColor: { value: "{colors.border.primary.value}" } }, _focus: { outlineColor: { value: "{colors.transparent.value}" }, outlineStyle: { value: "solid" }, outlineWidth: { value: "{outlineWidths.medium.value}" }, outlineOffset: { value: "{outlineOffsets.medium.value}" }, borderColor: { value: "{colors.transparent.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "2px", color: "{colors.border.focus.value}" } } }, _disabled: { borderColor: { value: "{colors.border.disabled.value}" } }, _error: { borderColor: { value: "{colors.border.error.value}" }, _focus: { borderColor: { value: "{colors.transparent.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "2px", color: "{colors.border.error.value}" } } } } }, icon: { backgroundColor: { value: "{colors.brand.primary.80.value}" }, borderRadius: { value: "20%" }, opacity: { value: "{opacities.0.value}" }, transform: { value: "scale(0)" }, transitionProperty: { value: "all" }, transitionDuration: { value: "{time.short.value}" }, transitionTimingFunction: { value: "ease-in-out" }, _checked: { opacity: { value: "{opacities.100.value}" }, transform: { value: "scale(1)" }, _disabled: { backgroundColor: { value: "{colors.background.disabled.value}" } } }, _indeterminate: { opacity: { value: "{opacities.100.value}" }, transform: { value: "scale(1)" }, _disabled: { backgroundColor: { value: "{colors.background.disabled.value}" } } } }, label: { _disabled: { color: { value: "{colors.font.disabled.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/checkboxField.mjs
            const checkboxField_e = { alignItems: { value: "flex-start" }, alignContent: { value: "center" }, flexDirection: { value: "column" }, justifyContent: { value: "center" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/collection.mjs
            const collection_o = { pagination: { current: { color: { value: "{components.pagination.current.color}" }, backgroundColor: { value: "{components.pagination.current.backgroundColor}" } }, button: { color: { value: "{components.pagination.button.color}" }, _hover: { backgroundColor: { value: "{components.pagination.button.hover.backgroundColor}" }, color: { value: "{components.pagination.button.hover.color}" } }, _disabled: { color: { value: "{components.pagination.button.disabled.color}" } } } }, search: { input: { color: { value: "{components.searchfield.color}" } }, button: { color: { value: "{components.searchfield.button.color}" }, _active: { backgroundColor: { value: "{components.searchfield.button._active.backgroundColor}" }, borderColor: { value: "{components.searchfield.button._active.borderColor}" }, color: { value: "{components.searchfield.button._active.color}" } }, _disabled: { backgroundColor: { value: "{components.searchfield.button._disabled.backgroundColor}" }, borderColor: { value: "{components.searchfield.button._disabled.borderColor}" }, color: { value: "{components.searchfield.button._disabled.color}" } }, _focus: { backgroundColor: { value: "{components.searchfield.button._focus.backgroundColor}" }, borderColor: { value: "{components.searchfield.button._focus.borderColor}" }, color: { value: "{components.searchfield.button._focus.color}" } }, _hover: { backgroundColor: { value: "{components.searchfield.button._hover.backgroundColor}" }, borderColor: { value: "{components.searchfield.button._hover.borderColor}" }, color: { value: "{components.searchfield.button._hover.color}" } } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/copy.mjs
            const copy_e = { fontSize: { value: "{fontSizes.xs}" }, gap: { value: "{space.relative.medium}" }, svg: { path: { fill: { value: "{colors.font.primary}" } } }, toolTip: { bottom: { value: "{space.large}" }, color: { value: "{colors.teal.100}" }, fontSize: { value: "{fontSizes.xxs}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/dialCodeSelect.mjs
            const dialCodeSelect_e = { height: { value: "{space.relative.full.value}" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/divider.mjs
            const divider_e = { borderStyle: { value: "solid" }, borderColor: { value: "{colors.border.primary.value}" }, borderWidth: { value: "{borderWidths.medium.value}" }, label: { color: { value: "{colors.font.tertiary.value}" }, paddingInline: { value: "{space.medium.value}" }, fontSize: { value: "{fontSizes.small.value}" }, backgroundColor: { value: "{colors.background.primary.value}" } }, small: { borderWidth: { value: "{borderWidths.small.value}" } }, large: { borderWidth: { value: "{borderWidths.large.value}" } }, opacity: { value: "{opacities.60.value}" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/dropZone.mjs
            const dropZone_o = { backgroundColor: { value: "{colors.background.primary}" }, borderRadius: { value: "{radii.small}" }, borderColor: { value: "{colors.border.primary}" }, borderStyle: { value: "dashed" }, borderWidth: { value: "{borderWidths.small}" }, color: { value: "{colors.font.primary}" }, gap: { value: "{space.small}" }, paddingBlock: { value: "{space.xl}" }, paddingInline: { value: "{space.large}" }, textAlign: { value: "center" }, _active: { backgroundColor: { value: "{colors.brand.primary.10}" }, borderRadius: { value: "{components.dropzone.borderRadius}" }, borderColor: { value: "{colors.border.pressed}" }, borderStyle: { value: "{components.dropzone.borderStyle}" }, borderWidth: { value: "{components.dropzone.borderWidth}" }, color: { value: "{colors.font.primary}" } }, _disabled: { backgroundColor: { value: "{colors.background.disabled}" }, borderRadius: { value: "{components.dropzone.borderRadius}" }, borderColor: { value: "{colors.border.disabled}" }, borderStyle: { value: "{components.dropzone.borderStyle}" }, borderWidth: { value: "{components.dropzone.borderWidth}" }, color: { value: "{colors.font.disabled}" } }, accepted: { backgroundColor: { value: "{colors.background.success}" }, borderRadius: { value: "{components.dropzone.borderRadius}" }, borderColor: { value: "{colors.border.success}" }, borderStyle: { value: "{components.dropzone.borderStyle}" }, borderWidth: { value: "{components.dropzone.borderWidth}" }, color: { value: "{colors.font.success}" } }, rejected: { backgroundColor: { value: "{colors.background.error}" }, borderRadius: { value: "{components.dropzone.borderRadius}" }, borderColor: { value: "{colors.border.pressed}" }, borderStyle: { value: "{components.dropzone.borderStyle}" }, borderWidth: { value: "{components.dropzone.borderWidth}" }, color: { value: "{colors.font.error}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/expander.mjs
            const expander_a = { display: { value: "block" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderRadius: { value: "{radii.medium.value}" }, boxShadow: { value: "{shadows.large.value}" }, width: { value: "100%" }, item: { marginTop: { value: "1px" }, boxShadow: { value: "{shadows.small.value}" }, borderBottomLeftRadius: { value: "{radii.medium.value}" }, borderBottomRightRadius: { value: "{radii.medium.value}" }, borderTopLeftRadius: { value: "{radii.medium.value}" }, borderTopRightRadius: { value: "{radii.medium.value}" }, borderStartStartRadius: { value: "{radii.medium.value}" }, borderStartEndRadius: { value: "{radii.medium.value}" }, borderEndStartRadius: { value: "{radii.medium.value}" }, borderEndEndRadius: { value: "{radii.medium.value}" }, _focus: { boxShadow: { value: { offsetX: "0", offsetY: "0", blurRadius: "0", spreadRadius: "2px", color: "{colors.border.focus.value}" } } } }, header: { boxShadow: { value: { offsetX: "0", offsetY: "1px", blurRadius: "0", color: "{colors.overlay.20.value}" } } }, trigger: { minHeight: { value: "3rem" }, paddingInlineStart: { value: "{space.large.value}" }, paddingInlineEnd: { value: "{space.large.value}" }, alignItems: { value: "center" }, justifyContent: { value: "space-between" }, _hover: { backgroundColor: { value: "{colors.overlay.10.value}" } } }, content: { paddingInlineStart: { value: "{space.large.value}" }, paddingInlineEnd: { value: "{space.large.value}" }, text: { color: { value: "{colors.font.secondary.value}" }, paddingBlockStart: { value: "{space.medium.value}" }, paddingBlockEnd: { value: "{space.medium.value}" } }, _open: { animationDuration: { value: "{time.medium.value}" }, animationTimingFunction: { value: "cubic-bezier(0.87, 0, 0.13, 1)" } }, _closed: { animationDuration: { value: "{time.medium.value}" }, animationTimingFunction: { value: "cubic-bezier(0.87, 0, 0.13, 1)" } } }, icon: { transitionDuration: { value: "{time.medium.value}" }, transitionTimingFunction: { value: "cubic-bezier(0.87, 0, 0.13, 1)" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/field.mjs
            const field_e = { gap: { value: "{space.xs.value}" }, fontSize: { value: "{fontSizes.medium.value}" }, flexDirection: { value: "column" }, small: { gap: { value: "{space.xxxs.value}" }, fontSize: { value: "{fontSizes.small.value}" } }, large: { gap: { value: "{space.small.value}" }, fontSize: { value: "{fontSizes.large.value}" } }, label: { color: { value: "{colors.font.secondary.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldControl.mjs
            const fieldControl_e = { borderStyle: { value: "solid" }, borderColor: { value: "{colors.border.primary.value}" }, borderWidth: { value: "{borderWidths.small.value}" }, borderRadius: { value: "{radii.small.value}" }, color: { value: "{colors.font.primary.value}" }, paddingBlockStart: { value: "{space.xs.value}" }, paddingBlockEnd: { value: "{space.xs.value}" }, paddingInlineStart: { value: "{space.medium.value}" }, paddingInlineEnd: { value: "{space.medium.value}" }, fontSize: { value: "{components.field.fontSize.value}" }, lineHeight: { value: "{lineHeights.medium.value}" }, transitionDuration: { value: "{time.medium.value}" }, outlineColor: { value: "{colors.transparent.value}" }, outlineStyle: { value: "solid" }, outlineWidth: { value: "{outlineWidths.medium.value}" }, outlineOffset: { value: "{outlineOffsets.medium.value}" }, small: { fontSize: { value: "{components.field.small.fontSize.value}" }, paddingBlockStart: { value: "{space.xxs.value}" }, paddingBlockEnd: { value: "{space.xxs.value}" }, paddingInlineStart: { value: "{space.small.value}" }, paddingInlineEnd: { value: "{space.small.value}" } }, large: { fontSize: { value: "{components.field.large.fontSize.value}" }, paddingBlockStart: { value: "{space.xs.value}" }, paddingBlockEnd: { value: "{space.xs.value}" }, paddingInlineStart: { value: "{space.medium.value}" }, paddingInlineEnd: { value: "{space.medium.value}" } }, quiet: { borderStyle: { value: "none" }, borderInlineStart: { value: "none" }, borderInlineEnd: { value: "none" }, borderBlockStart: { value: "none" }, borderRadius: { value: "0" }, _focus: { borderBlockEndColor: { value: "{colors.border.focus.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "1px", color: "{colors.border.focus.value}", blurRadius: "0px" } } }, _error: { borderBlockEndColor: { value: "{colors.border.error.value}" }, _focus: { boxShadow: { value: { offsetX: "0px", offsetY: "1px", color: "{colors.border.error.value}", blurRadius: "0px" } } } } }, _focus: { borderColor: { value: "{colors.border.focus.value}" }, boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.border.focus.value}" } } }, _disabled: { color: { value: "{colors.font.disabled.value}" }, cursor: { value: "not-allowed" }, borderColor: { value: "{colors.transparent.value}" }, backgroundColor: { value: "{colors.background.disabled.value}" } }, _error: { borderColor: { value: "{colors.border.error.value}" }, color: { value: "{colors.font.error.value}" }, _focus: { boxShadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "1px", color: "{colors.border.error.value}" } } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldGroup.mjs
            const fieldGroup_e = { gap: { value: "{space.zero.value}" }, vertical: { alignItems: { value: "center" } }, outer: { alignItems: { value: "center" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldset.mjs
            const fieldset_e = { backgroundColor: { value: "transparent" }, borderRadius: { value: "{radii.xs.value}" }, flexDirection: { value: "column" }, gap: { value: "{components.field.gap.value}" }, legend: { color: { value: "{colors.font.primary.value}" }, fontSize: { value: "{components.field.fontSize.value}" }, fontWeight: { value: "{fontWeights.bold.value}" }, lineHeight: { value: "{lineHeights.medium.value}" }, small: { fontSize: "{components.field.small.fontSize.value}" }, large: { fontSize: "{components.field.large.fontSize.value}" } }, outlined: { padding: "{space.medium.value}", borderColor: "{colors.neutral.40.value}", borderWidth: "{borderWidths.small.value}", borderStyle: "solid", small: { padding: "{space.small.value}" }, large: { padding: "{space.large.value}" } }, small: { gap: "{components.field.small.gap.value}" }, large: { gap: "{components.field.large.gap.value}" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldMessages.mjs
            const fieldMessages_o = { error: { color: { value: "{colors.font.error.value}" }, fontSize: { value: "{fontSizes.small.value}" } }, description: { color: { value: "{colors.font.secondary.value}" }, fontStyle: { value: "italic" }, fontSize: { value: "{fontSizes.small.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fileUploader.mjs
            const fileUploader_e = { dropzone: { backgroundColor: { value: "{colors.background.primary}" }, borderRadius: { value: "{radii.small}" }, borderColor: { value: "{colors.border.primary}" }, borderStyle: { value: "dashed" }, borderWidth: { value: "{borderWidths.small}" }, gap: { value: "{space.small}" }, paddingBlock: { value: "{space.xl}" }, paddingInline: { value: "{space.large}" }, textAlign: { value: "center" }, _active: { backgroundColor: { value: "{colors.brand.primary.10}" }, borderRadius: { value: "{components.fileuploader.dropzone.borderRadius}" }, borderColor: { value: "{colors.border.pressed}" }, borderStyle: { value: "{components.fileuploader.dropzone.borderStyle}" }, borderWidth: { value: "{borderWidths.medium}" } }, icon: { color: { value: "{colors.border.primary}" }, fontSize: { value: "{fontSizes.xxl}" } }, text: { color: { value: "{colors.font.tertiary}" }, fontSize: { value: "{fontSizes.medium}" }, fontWeight: { value: "{fontWeights.bold}" } } }, file: { backgroundColor: { value: "{colors.background.primary}" }, borderRadius: { value: "{radii.small}" }, borderColor: { value: "{colors.border.primary}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.small}" }, paddingBlock: { value: "{space.xs}" }, paddingInline: { value: "{space.small}" }, gap: { value: "{space.small}" }, alignItems: { value: "baseline" }, name: { fontSize: { value: "{fontSizes.medium}" }, fontWeight: { value: "{fontWeights.bold}" }, color: { value: "{colors.font.primary}" } }, size: { fontSize: { value: "{fontSizes.small}" }, fontWeight: { value: "{fontWeights.normal}" }, color: { value: "{colors.font.tertiary}" } }, image: { width: { value: "{space.xxl}" }, height: { value: "{space.xxl}" }, backgroundColor: { value: "{colors.background.secondary}" }, color: { value: "{colors.font.tertiary}" }, borderRadius: { value: "{radii.small}" } } }, loader: { strokeLinecap: { value: "round" }, strokeEmpty: { value: "{colors.border.secondary}" }, strokeFilled: { value: "{components.loader.strokeFilled}" }, strokeWidth: { value: "{borderWidths.large}" } }, previewer: { backgroundColor: { value: "{colors.background.primary}" }, borderColor: { value: "{colors.border.primary}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.small}" }, borderRadius: { value: "{radii.small}" }, paddingBlock: { value: "{space.zero}" }, paddingInline: { value: "{space.zero}" }, maxHeight: { value: "40rem" }, maxWidth: { value: "auto" }, text: { fontSize: { value: "{fontSizes.medium}" }, fontWeight: { value: "{fontWeights.bold}" }, color: { value: "{colors.font.primary}" } }, body: { paddingBlock: { value: "{space.medium}" }, paddingInline: { value: "{space.medium}" }, gap: { value: "{space.small}" } }, footer: { borderColor: { value: "{colors.border.secondary}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.small}" }, paddingBlock: { value: "{space.medium}" }, paddingInline: { value: "{space.medium}" }, justifyContent: { value: "space-between" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/flex.mjs
            const flex_a = { gap: { value: "{space.medium.value}" }, justifyContent: { value: "normal" }, alignItems: { value: "stretch" }, alignContent: { value: "normal" }, flexWrap: { value: "nowrap" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/heading.mjs
            const heading_e = { color: { value: "{colors.font.primary.value}" }, lineHeight: { value: "{lineHeights.small.value}" }, 1: { fontSize: { value: "{fontSizes.xxxxl.value}" }, fontWeight: { value: "{fontWeights.light.value}" } }, 2: { fontSize: { value: "{fontSizes.xxxl.value}" }, fontWeight: { value: "{fontWeights.normal.value}" } }, 3: { fontSize: { value: "{fontSizes.xxl.value}" }, fontWeight: { value: "{fontWeights.medium.value}" } }, 4: { fontSize: { value: "{fontSizes.xl.value}" }, fontWeight: { value: "{fontWeights.semibold.value}" } }, 5: { fontSize: { value: "{fontSizes.large.value}" }, fontWeight: { value: "{fontWeights.bold.value}" } }, 6: { fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.extrabold.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/highlightMatch.mjs
            const highlightMatch_t = { highlighted: { fontWeight: { value: "{fontWeights.bold}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/icon.mjs
            const icon_e = { lineHeight: { value: 1 }, height: { value: "1em" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/input.mjs
            const input_o = { color: { value: "{components.fieldcontrol.color.value}" }, borderColor: { value: "{components.fieldcontrol.borderColor.value}" }, fontSize: { value: "{components.fieldcontrol.fontSize.value}" }, _focus: { borderColor: { value: "{components.fieldcontrol._focus.borderColor.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/image.mjs
            const image_i = { maxWidth: { value: "100%" }, height: { value: "auto" }, objectFit: { value: "initial" }, objectPosition: { value: "initial" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/inAppMessaging.mjs
            const inAppMessaging_e = { banner: { height: { value: "150px " }, width: { value: "400px " } }, button: { backgroundColor: { value: "#e8e8e8" }, borderRadius: { value: "5px" }, color: { value: "black" } }, dialog: { height: { value: "50vh" }, minHeight: { value: "400px" }, minWidth: { value: "400px" }, width: { value: "30vw" } }, header: { fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.extrabold.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/link.mjs
            const link_o = { active: { color: { value: "{colors.font.active.value}" } }, color: { value: "{colors.font.interactive.value}" }, focus: { color: { value: "{colors.font.focus.value}" } }, hover: { color: { value: "{colors.font.hover.value}" } }, visited: { color: { value: "{colors.font.interactive.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/liveness.mjs
            const liveness_o = { cameraModule: { backgroundColor: { value: "{colors.black}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/loader.mjs
            const loader_e = { width: { value: "{fontSizes.medium.value}" }, height: { value: "{fontSizes.medium.value}" }, fontSize: { value: "{fontSizes.xs.value}" }, strokeEmpty: { value: "{colors.neutral.20.value}" }, strokeFilled: { value: "{colors.brand.primary.80.value}" }, strokeLinecap: { value: "round" }, animationDuration: { value: "1s" }, small: { width: { value: "{fontSizes.small.value}" }, height: { value: "{fontSizes.small.value}" }, fontSize: { value: "{fontSizes.xxs.value}" } }, large: { width: { value: "{fontSizes.large.value}" }, height: { value: "{fontSizes.large.value}" }, fontSize: { value: "{fontSizes.small.value}" } }, linear: { width: { value: "100%" }, minWidth: { value: "5rem" }, fontSize: { value: "{fontSizes.xxs.value}" }, strokeWidth: { value: "{fontSizes.xxs.value}" }, strokeFilled: { value: "{colors.brand.primary.80.value}" }, strokeEmpty: { value: "{colors.neutral.20.value}" }, strokeLinecap: { value: "round" }, animationDuration: { value: "1s" }, small: { strokeWidth: { value: "{fontSizes.xxxs.value}" }, fontSize: { value: "{fontSizes.xxxs.value}" } }, large: { strokeWidth: { value: "{fontSizes.xs.value}" }, fontSize: { value: "{fontSizes.xs.value}" } } }, text: { fill: { value: "{colors.font.primary.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/menu.mjs
            const menu_e = { backgroundColor: { value: "{colors.background.primary.value}" }, borderRadius: { value: "{radii.medium.value}" }, borderWidth: { value: "{borderWidths.small.value}" }, borderStyle: { value: "solid" }, borderColor: { value: "{colors.border.primary.value}" }, boxShadow: { value: "{shadows.large.value}" }, flexDirection: { value: "column" }, gap: { value: "{space.zero.value}" }, maxWidth: { value: "30rem" }, minWidth: { value: "14rem" }, small: { width: { value: "{fontSizes.medium.value}" }, height: { value: "{fontSizes.medium.value}" } }, large: { width: { value: "{fontSizes.xxxl.value}" }, height: { value: "{fontSizes.xxxl.value}" } }, item: { minHeight: { value: "2.5rem" }, paddingInlineStart: { value: "{space.medium.value}" }, paddingInlineEnd: { value: "{space.medium.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/message.mjs
            const message_o = { alignItems: { value: "center" }, backgroundColor: { value: "{colors.background.tertiary.value}" }, borderColor: { value: "transparent" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.small.value}" }, borderRadius: { value: "{radii.xs.value}" }, color: { value: "{colors.font.primary.value}" }, justifyContent: { value: "flex-start" }, paddingBlock: { value: "{space.small.value}" }, paddingInline: { value: "{space.medium.value}" }, lineHeight: { value: "{lineHeights.small.value}" }, icon: { size: { value: "{fontSizes.xl.value}" } }, heading: { fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.bold.value}" } }, dismiss: { gap: { value: "{space.xxs.value}" } }, plain: { color: { value: "{colors.font.primary.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "transparent" }, info: { color: { value: "{colors.font.info.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "transparent" } }, error: { color: { value: "{colors.font.error.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "transparent" } }, success: { color: { value: "{colors.font.success.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "transparent" } }, warning: { color: { value: "{colors.font.warning.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "transparent" } } }, outlined: { color: { value: "{colors.font.primary.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "{colors.border.primary.value}" }, info: { color: { value: "{colors.font.info.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "{colors.border.info.value}" } }, error: { color: { value: "{colors.font.error.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "{colors.border.error.value}" } }, success: { color: { value: "{colors.font.success.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "{colors.border.success.value}" } }, warning: { color: { value: "{colors.font.warning.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "{colors.border.warning.value}" } } }, filled: { color: { value: "{colors.font.primary.value}" }, backgroundColor: { value: "{colors.background.secondary.value}" }, borderColor: { value: "transparent" }, info: { color: { value: "{colors.font.info.value}" }, backgroundColor: { value: "{colors.background.info.value}" }, borderColor: { value: "transparent" } }, error: { color: { value: "{colors.font.error.value}" }, backgroundColor: { value: "{colors.background.error.value}" }, borderColor: { value: "transparent" } }, success: { color: { value: "{colors.font.success.value}" }, backgroundColor: { value: "{colors.background.success.value}" }, borderColor: { value: "transparent" } }, warning: { color: { value: "{colors.font.warning.value}" }, backgroundColor: { value: "{colors.background.warning.value}" }, borderColor: { value: "transparent" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/pagination.mjs
            const pagination_e = { current: { alignItems: { value: "center" }, justifyContent: { value: "center" }, color: { value: "{colors.font.inverse.value}" }, fontSize: { value: "{fontSizes.small.value}" }, backgroundColor: { value: "{colors.overlay.40.value}" } }, button: { color: { value: "{colors.font.primary.value}" }, paddingInlineStart: { value: "{space.xxs.value}" }, paddingInlineEnd: { value: "{space.xxs.value}" }, transitionProperty: { value: "background-color" }, transitionDuration: { value: "{time.medium.value}" }, hover: { backgroundColor: { value: "{colors.overlay.10.value}" }, color: { value: "{colors.font.primary.value}" } }, disabled: { color: { value: "{colors.font.disabled.value}" } } }, ellipsis: { alignItems: { value: "baseline" }, justifyContent: { value: "center" }, paddingInlineStart: { value: "{space.xs.value}" }, paddingInlineEnd: { value: "{space.xs.value}" } }, itemContainer: { marginLeft: { value: "{space.xxxs.value}" }, marginRight: { value: "{space.xxxs.value}" } }, itemShared: { height: { value: "{fontSizes.xxl.value}" }, minWidth: { value: "{fontSizes.xxl.value}" }, borderRadius: { value: "{fontSizes.medium.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/passwordField.mjs
            const passwordField_o = { color: { value: "{components.fieldcontrol.color.value}" }, button: { color: { value: "{components.button.color.value}" }, _active: { backgroundColor: { value: "{components.button._active.backgroundColor.value}" }, borderColor: { value: "{components.button._active.borderColor.value}" }, color: { value: "{components.button._active.color.value}" } }, _disabled: { backgroundColor: { value: "{components.button._disabled.backgroundColor.value}" }, borderColor: { value: "{components.button._disabled.borderColor.value}" }, color: { value: "{components.button._disabled.color.value}" } }, _focus: { backgroundColor: { value: "{components.button._focus.backgroundColor.value}" }, borderColor: { value: "{components.button._focus.borderColor.value}" }, color: { value: "{components.button._focus.color.value}" } }, _hover: { backgroundColor: { value: "{components.button._hover.backgroundColor.value}" }, borderColor: { value: "{components.button._hover.borderColor.value}" }, color: { value: "{components.button._hover.color.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/phoneNumberField.mjs
            const phoneNumberField_o = { color: { value: "{components.fieldcontrol.color}" }, borderColor: { value: "{components.fieldcontrol.borderColor}" }, fontSize: { value: "{components.fieldcontrol.fontSize}" }, _focus: { borderColor: { value: "{components.fieldcontrol._focus.borderColor}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/placeholder.mjs
            const placeholder_a = { borderRadius: { value: "{radii.small.value}" }, transitionDuration: { value: "{time.long.value}" }, startColor: { value: "{colors.background.secondary.value}" }, endColor: { value: "{colors.background.tertiary.value}" }, small: { height: { value: "{space.small.value}" } }, default: { height: { value: "{space.medium.value}" } }, large: { height: { value: "{space.large.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/radio.mjs
            const radio_e = { alignItems: { value: "center" }, justifyContent: { value: "flex-start" }, gap: { value: "inherit" }, _disabled: { cursor: { value: "not-allowed" } }, button: { alignItems: { value: "center" }, justifyContent: { value: "center" }, width: { value: "{fontSizes.medium.value}" }, height: { value: "{fontSizes.medium.value}" }, boxSizing: { value: "border-box" }, borderWidth: { value: "{borderWidths.medium.value}" }, borderStyle: { value: "solid" }, borderRadius: { value: "50%" }, borderColor: { value: "{colors.border.primary.value}" }, color: { value: "{colors.background.primary.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, transitionProperty: { value: "all" }, transitionDuration: { value: "{time.medium.value}" }, outlineColor: { value: "{colors.transparent.value}" }, outlineStyle: { value: "solid" }, outlineWidth: { value: "{outlineWidths.medium.value}" }, outlineOffset: { value: "{outlineOffsets.medium.value}" }, padding: { value: "{borderWidths.medium.value}" }, small: { width: { value: "{fontSizes.small.value}" }, height: { value: "{fontSizes.small.value}" } }, large: { width: { value: "{fontSizes.large.value}" }, height: { value: "{fontSizes.large.value}" } }, _checked: { color: { value: "{colors.brand.primary.80.value}" }, _disabled: { color: { value: "{colors.background.disabled.value}" } } }, _focus: { borderColor: { value: "{colors.border.focus.value}" }, boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" } }, _error: { borderColor: { value: "{colors.border.error.value}" }, _focus: { boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow.value}" } } }, _disabled: { borderColor: { value: "{colors.border.disabled.value}" }, backgroundColor: { value: "{colors.background.primary.value}" } } }, label: { color: { value: "{components.text.color.value}" }, _disabled: { color: { value: "{colors.font.disabled.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/radioGroup.mjs
            const radioGroup_o = { radio: { borderWidth: { value: "{components.radio.button.borderWidth}" }, borderColor: { value: "{components.radio.button.borderColor}" }, backgroundColor: { value: "{components.radio.button.backgroundColor}" }, _checked: { color: { value: "{components.radio.button._checked.color}" } }, label: { color: { value: "{components.radio.label.color}" } } }, label: { color: { value: "{components.field.label.color}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/rating.mjs
            const rating_l = { large: { size: { value: "{fontSizes.xxxl.value}" } }, default: { size: { value: "{fontSizes.xl.value}" } }, small: { size: { value: "{fontSizes.small.value}" } }, filled: { color: { value: "{colors.brand.secondary.80.value}" } }, empty: { color: { value: "{colors.background.tertiary.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/searchField.mjs
            const searchField_o = { color: { value: "{components.fieldcontrol.color.value}" }, button: { color: { value: "{components.button.color.value}" }, backgroundColor: { value: "{colors.background.primary.value}" }, _active: { backgroundColor: { value: "{components.button._active.backgroundColor.value}" }, borderColor: { value: "{components.button._active.borderColor.value}" }, color: { value: "{components.button._active.color.value}" } }, _disabled: { backgroundColor: { value: "{components.button._disabled.backgroundColor.value}" }, borderColor: { value: "{components.button._disabled.borderColor.value}" }, color: { value: "{components.button._disabled.color.value}" } }, _focus: { backgroundColor: { value: "{components.button._focus.backgroundColor.value}" }, borderColor: { value: "{components.button._focus.borderColor.value}" }, color: { value: "{components.button._focus.color.value}" } }, _hover: { backgroundColor: { value: "{components.button._hover.backgroundColor.value}" }, borderColor: { value: "{components.button._hover.borderColor.value}" }, color: { value: "{components.button._hover.color.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/select.mjs
            const select_a = { color: { value: "{components.fieldcontrol.color}" }, backgroundColor: { value: "{colors.background.primary.value}" }, paddingInlineEnd: { value: "{space.xxl.value}" }, _disabled: { color: { value: "{colors.font.disabled.value}" }, backgroundColor: { value: "{colors.background.disabled.value}" } }, wrapper: { flex: { value: "1" }, display: { value: "block" }, position: { value: "relative" }, cursor: { value: "pointer" } }, iconWrapper: { alignItems: { value: "center" }, position: { value: "absolute" }, top: { value: "50%" }, right: { value: "{space.medium.value}" }, transform: { value: "translateY(-50%)" }, pointerEvents: { value: "none" }, small: { right: { value: "{space.xs.value}" } }, large: { right: { value: "{space.medium.value}" } } }, option: { backgroundColor: { value: "transparent" }, color: { value: "{colors.font.primary.value}" }, _disabled: { color: { value: "{colors.font.disabled.value}" }, backgroundColor: { value: "transparent" } } }, whiteSpace: { value: "nowrap" }, minWidth: { value: "6.5rem" }, small: { minWidth: { value: "5.5rem" }, paddingInlineEnd: { value: "{space.xl.value}" } }, large: { minWidth: { value: "7.5rem" }, paddingInlineEnd: { value: "{space.xxl.value}" } }, expanded: { paddingBlock: { value: "{space.xs.value}" }, paddingInline: { value: "{space.small.value}" }, option: { paddingBlock: { value: "{space.xs.value}" }, paddingInline: { value: "{space.small.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/selectField.mjs
            const selectField_o = { borderColor: { value: "{components.fieldcontrol.borderColor}" }, color: { value: "{components.fieldcontrol.color}" }, flexDirection: { value: "column" }, fontSize: { value: "{components.fieldcontrol.fontSize}" }, _focus: { borderColor: { value: "{components.fieldcontrol._focus.borderColor}" } }, label: { color: { value: "{components.field.label.color}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/sliderField.mjs
            const sliderField_r = { paddingBlock: { value: "{space.xs.value}" }, track: { backgroundColor: { value: "{colors.background.quaternary.value}" }, borderRadius: { value: "9999px" }, height: { value: "0.375rem" }, minWidth: { value: "10rem" } }, range: { backgroundColor: { value: "{colors.brand.primary.80.value}" }, borderRadius: { value: "9999px" }, _disabled: { backgroundColor: { value: "{colors.background.disabled.value}" } } }, thumb: { width: { value: "1.25rem" }, height: { value: "1.25rem" }, backgroundColor: { value: "{colors.background.primary.value}" }, boxShadow: { value: "{shadows.small.value}" }, borderRadius: { value: "50%" }, borderWidth: { value: "{borderWidths.medium.value}" }, borderColor: { value: "{colors.border.primary.value}" }, borderStyle: { value: "solid" }, _disabled: { backgroundColor: { value: "{colors.background.disabled.value}" }, borderColor: { value: "transparent" }, boxShadow: { value: "none" } }, _hover: { backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "{colors.border.focus.value}" } }, _focus: { borderColor: { value: "{colors.border.focus.value}" }, boxShadow: { value: { offsetX: "0", offsetY: "0", blurRadius: "0", spreadRadius: "2px", color: "{colors.border.focus.value}" } } } }, small: { track: { height: { value: "0.25rem" } }, thumb: { width: { value: "1rem" }, height: { value: "1rem" } } }, large: { track: { height: { value: "0.625rem" } }, thumb: { width: { value: "1.5rem" }, height: { value: "1.5rem" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/stepperField.mjs
            const stepperField_o = { borderColor: { value: "{components.fieldcontrol.borderColor}" }, flexDirection: { value: "column" }, input: { color: { value: "{components.fieldcontrol.color}" }, fontSize: { value: "{components.fieldcontrol.fontSize}" }, textAlign: { value: "center" } }, button: { color: { value: "{components.button.color}" }, backgroundColor: { value: "{colors.transparent}" }, _active: { color: { value: "{components.button._active.color}" }, backgroundColor: { value: "{components.button._active.backgroundColor}" } }, _focus: { color: { value: "{components.button._focus.color}" }, backgroundColor: { value: "{components.button._focus.backgroundColor}" } }, _disabled: { color: { value: "{components.button._disabled.color}" }, backgroundColor: { value: "{components.fieldcontrol._disabled.backgroundColor}" } }, _hover: { color: { value: "{components.button._hover.color}" }, backgroundColor: { value: "{components.button._hover.backgroundColor}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/storagemanager.mjs
            const storagemanager_s = Object.assign(Object.assign({}, fileUploader_e), { filelist: { flexDirection: { value: "column" }, gap: { value: "{space.small}" } }, previewer: Object.assign(Object.assign({}, fileUploader_e.previewer), { footer: { justifyContent: { value: "flex-end" } } }) });

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/switchField.mjs
            const switchField_e = { _disabled: { opacity: { value: "{opacities.60.value}" } }, _focused: { shadow: { value: { offsetX: "0px", offsetY: "0px", blurRadius: "0px", spreadRadius: "2px", color: "{colors.border.focus.value}" } } }, fontSize: { value: "{fontSizes.medium.value}" }, large: { fontSize: { value: "{fontSizes.large.value}" } }, small: { fontSize: { value: "{fontSizes.small.value}" } }, label: { padding: { value: "{space.xs.value}" } }, thumb: { backgroundColor: { value: "{colors.background.primary.value}" }, borderColor: { value: "transparent" }, borderWidth: { value: "{borderWidths.small.value}" }, borderStyle: { value: "solid" }, borderRadius: { value: "{radii.xxxl.value}" }, checked: { transform: { value: "{transforms.slideX.medium.value}" } }, transition: { duration: { value: "{time.medium.value}" } }, width: { value: "{space.relative.medium.value}" } }, track: { backgroundColor: { value: "{colors.background.quaternary.value}" }, borderRadius: { value: "{radii.xxxl.value}" }, checked: { backgroundColor: { value: "{colors.brand.primary.80.value}" } }, height: { value: "{space.relative.medium.value}" }, padding: { value: "{outlineWidths.medium.value}" }, transition: { duration: { value: "{time.short.value}" } }, width: { value: "{space.relative.xl.value}" }, _error: { backgroundColor: { value: "{colors.background.error.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/table.mjs
            const table_e = { borderCollapse: { value: "collapse" }, display: { value: "table" }, width: { value: "100%" }, head: { display: { value: "table-header-group" }, verticalAlign: { value: "middle" } }, body: { display: { value: "table-row-group" }, verticalAlign: { value: "middle" } }, foot: { display: { value: "table-footer-group" }, verticalAlign: { value: "middle" } }, row: { display: { value: "table-row" }, verticalAlign: { value: "middle" }, hover: { backgroundColor: { value: "{colors.background.tertiary.value}" } }, striped: { backgroundColor: { value: "{colors.background.secondary.value}" } } }, header: { borderColor: { value: "{colors.border.tertiary.value}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.small.value}" }, color: { value: "{colors.font.primary.value}" }, display: { value: "table-cell" }, fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.bold.value}" }, padding: { value: "{space.medium.value}" }, verticalAlign: { value: "middle" }, large: { fontSize: { value: "{fontSizes.large.value}" }, padding: { value: "{space.large.value}" } }, small: { fontSize: { value: "{fontSizes.small.value}" }, padding: { value: "{space.xs.value}" } } }, data: { borderColor: { value: "{colors.border.tertiary.value}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.small.value}" }, color: { value: "{colors.font.primary.value}" }, display: { value: "table-cell" }, fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.normal.value}" }, padding: { value: "{space.medium.value}" }, verticalAlign: { value: "middle" }, large: { fontSize: { value: "{fontSizes.large.value}" }, padding: { value: "{space.large.value}" } }, small: { fontSize: { value: "{fontSizes.small.value}" }, padding: { value: "{space.xs.value}" } } }, caption: { captionSide: { value: "bottom" }, color: { value: "{colors.font.primary.value}" }, display: { value: "table-caption" }, fontSize: { value: "{fontSizes.medium.value}" }, textAlign: { value: "center" }, wordBreak: { value: "break-all" }, large: { fontSize: { value: "{fontSizes.large.value}" } }, small: { fontSize: { value: "{fontSizes.small.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/tabs.mjs
            const tabs_e = { backgroundColor: { value: "transparent" }, borderColor: { value: "{colors.border.secondary.value}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.medium.value}" }, gap: { value: "0" }, item: { backgroundColor: { value: "transparent" }, borderColor: { value: "{colors.border.secondary.value}" }, borderStyle: { value: "solid" }, borderWidth: { value: "{borderWidths.medium.value}" }, color: { value: "{colors.font.secondary.value}" }, fontSize: { value: "{fontSizes.medium.value}" }, fontWeight: { value: "{fontWeights.bold.value}" }, paddingVertical: { value: "{space.small.value}" }, paddingHorizontal: { value: "{space.medium.value}" }, textAlign: { value: "center" }, transitionDuration: { value: "{time.medium.value}" }, _hover: { color: { value: "{colors.font.hover.value}" } }, _focus: { color: { value: "{colors.font.focus.value}" } }, _active: { color: { value: "{colors.font.interactive.value}" }, borderColor: { value: "{colors.font.interactive.value}" }, backgroundColor: { value: "transparent" } }, _disabled: { color: { value: "{colors.font.disabled.value}" }, backgroundColor: { value: "transparent" }, borderColor: { value: "{colors.border.tertiary.value}" } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/text.mjs
            const text_o = { color: { value: "{colors.font.primary.value}" }, primary: { color: { value: "{colors.font.primary.value}" } }, secondary: { color: { value: "{colors.font.secondary.value}" } }, tertiary: { color: { value: "{colors.font.tertiary.value}" } }, error: { color: { value: "{colors.font.error.value}" } }, warning: { color: { value: "{colors.font.warning.value}" } }, success: { color: { value: "{colors.font.success.value}" } }, info: { color: { value: "{colors.font.info.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/textAreaField.mjs
            const textAreaField_o = { color: { value: "{components.fieldcontrol.color.value}" }, borderColor: { value: "{components.fieldcontrol.borderColor.value}" }, _focus: { borderColor: { value: "{components.fieldcontrol._focus.borderColor.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/textField.mjs
            const textField_o = { color: { value: "{components.fieldcontrol.color.value}" }, borderColor: { value: "{components.fieldcontrol.borderColor.value}" }, fontSize: { value: "{components.fieldcontrol.fontSize.value}" }, _focus: { borderColor: { value: "{components.fieldcontrol._focus.borderColor.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/toggleButton.mjs
            const toggleButton_o = { borderColor: { value: "{colors.border.primary.value}" }, color: { value: "{colors.font.primary.value}" }, _hover: { backgroundColor: { value: "{colors.overlay.10.value}" } }, _focus: { borderColor: { value: "{colors.border.focus.value}" }, color: { value: "{colors.font.primary.value}" } }, _active: { backgroundColor: { value: "{colors.transparent.value}" } }, _disabled: { backgroundColor: { value: "{colors.transparent.value}" }, borderColor: { value: "{colors.border.disabled.value}" }, color: { value: "{colors.font.disabled.value}" } }, _pressed: { borderColor: { value: "{colors.border.pressed.value}" }, color: { value: "{colors.font.primary.value}" }, backgroundColor: { value: "{colors.overlay.20.value}" }, _hover: { backgroundColor: { value: "{colors.overlay.30.value}" } } }, primary: { backgroundColor: { value: "{colors.transparent.value}" }, borderWidth: { value: "{borderWidths.small.value}" }, _focus: { borderColor: { value: "{colors.border.focus.value}" }, backgroundColor: { value: "{colors.transparent.value}" }, boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }, color: { value: "{colors.font.primary.value}" } }, _hover: { backgroundColor: { value: "{colors.overlay.10.value}" }, color: { value: "{colors.font.primary.value}" } }, _disabled: { borderColor: { value: "{colors.border.disabled.value}" }, backgroundColor: { value: "{colors.background.disabled.value}" }, color: { value: "{colors.font.disabled.value}" } }, _pressed: { backgroundColor: { value: "{colors.brand.primary.80.value}" }, borderColor: { value: "{colors.brand.primary.80.value}" }, color: { value: "{colors.background.primary.value}" }, _focus: { backgroundColor: { value: "{colors.border.focus.value}" }, borderColor: { value: "{colors.border.focus.value}" }, color: { value: "{colors.background.primary.value}" } }, _hover: { borderColor: { value: "{colors.brand.primary.60.value}" }, backgroundColor: { value: "{colors.brand.primary.60.value}" }, boxShadow: { value: "{colors.brand.primary.60.value}" }, color: { value: "{colors.background.primary.value}" } } } }, link: { backgroundColor: { value: "{colors.transparent.value}" }, color: { value: "{colors.overlay.50.value}" }, _hover: { backgroundColor: { value: "{colors.transparent.value}" }, color: { value: "{colors.overlay.50.value}" } }, _focus: { backgroundColor: { value: "{colors.transparent.value}" }, color: { value: "{colors.overlay.50.value}" } }, _disabled: { backgroundColor: { value: "{colors.transparent.value}" }, color: { value: "{colors.font.disabled.value}" } }, _pressed: { backgroundColor: { value: "{colors.transparent.value}" }, color: { value: "{colors.overlay.90.value}" }, _focus: { backgroundColor: { value: "{colors.transparent.value}" }, color: { value: "{colors.overlay.90.value}" } }, _hover: { color: { value: "{colors.overlay.90.value}" }, backgroundColor: { value: "{colors.transparent.value}" } } } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/toggleButtonGroup.mjs
            const toggleButtonGroup_e = { alignItems: { value: "center" }, alignContent: { value: "center" }, justifyContent: { value: "flex-start" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/index.mjs
            const mm = { alert: alert_o, authenticator: authenticator_e, autocomplete: autocomplete_a, badge: badge_a, breadcrumbs: breadcrumbs_e, button: button_o, card: card_o, checkbox: checkbox_e, checkboxfield: checkboxField_e, collection: collection_o, copy: copy_e, countrycodeselect: dialCodeSelect_e, divider: divider_e, dropzone: dropZone_o, expander: expander_a, field: field_e, fieldcontrol: fieldControl_e, fieldgroup: fieldGroup_e, fieldmessages: fieldMessages_o, fieldset: fieldset_e, fileuploader: fileUploader_e, flex: flex_a, heading: heading_e, icon: icon_e, highlightmatch: highlightMatch_t, image: image_i, inappmessaging: inAppMessaging_e, input: input_o, link: link_o, liveness: liveness_o, loader: loader_e, menu: menu_e, message: message_o, pagination: pagination_e, passwordfield: passwordField_o, phonenumberfield: phoneNumberField_o, placeholder: placeholder_a, radio: radio_e, radiogroup: radioGroup_o, rating: rating_l, searchfield: searchField_o, select: select_a, selectfield: selectField_o, sliderfield: sliderField_r, stepperfield: stepperField_o, storagemanager: storagemanager_s, switchfield: switchField_e, table: table_e, tabs: tabs_e, text: text_o, textareafield: textAreaField_o, textfield: textField_o, togglebutton: toggleButton_o, togglebuttongroup: toggleButtonGroup_e };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fonts.mjs
            const fonts_e = { default: { variable: { value: "'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont,\n        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',\n        sans-serif" }, static: { value: "'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',\n        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fontSizes.mjs
            const fontSizes_e = { xxxs: { value: "0.375rem" }, xxs: { value: "0.5rem" }, xs: { value: "0.75rem" }, small: { value: "0.875rem" }, medium: { value: "1rem" }, large: { value: "1.25rem" }, xl: { value: "1.5rem" }, xxl: { value: "2rem" }, xxxl: { value: "2.5rem" }, xxxxl: { value: "3rem" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fontWeights.mjs
            const fontWeights_l = { hairline: { value: 100 }, thin: { value: 200 }, light: { value: 300 }, normal: { value: 400 }, medium: { value: 500 }, semibold: { value: 600 }, bold: { value: 700 }, extrabold: { value: 800 }, black: { value: 900 } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/lineHeights.mjs
            const lineHeights_e = { small: { value: "1.25" }, medium: { value: "1.5" }, large: { value: "2" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/opacities.mjs
            const opacities_e = { 0: { value: "0" }, 10: { value: "0.1" }, 20: { value: "0.2" }, 30: { value: "0.3" }, 40: { value: "0.4" }, 50: { value: "0.5" }, 60: { value: "0.6" }, 70: { value: "0.7" }, 80: { value: "0.8" }, 90: { value: "0.9" }, 100: { value: "1" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/outlineOffsets.mjs
            const outlineOffsets_e = { small: { value: "1px" }, medium: { value: "2px" }, large: { value: "3px" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/outlineWidths.mjs
            const outlineWidths_e = { small: { value: "1px" }, medium: { value: "2px" }, large: { value: "3px" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/radii.mjs
            const radii_e = { xs: { value: "0.125rem" }, small: { value: "0.25rem" }, medium: { value: "0.5rem" }, large: { value: "1rem" }, xl: { value: "2rem" }, xxl: { value: "4rem" }, xxxl: { value: "8rem" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/shadows.mjs
            const shadows_o = { small: { value: { offsetX: "0px", offsetY: "2px", blurRadius: "4px", color: "{colors.shadow.tertiary.value}" } }, medium: { value: { offsetX: "0px", offsetY: "2px", blurRadius: "6px", color: "{colors.shadow.secondary.value}" } }, large: { value: { offsetX: "0px", offsetY: "4px", blurRadius: "12px", color: "{colors.shadow.primary.value}" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/space.mjs
            const space_e = { zero: { value: "0" }, xxxs: { value: "0.25rem" }, xxs: { value: "0.375rem" }, xs: { value: "0.5rem" }, small: { value: "0.75rem" }, medium: { value: "1rem" }, large: { value: "1.5rem" }, xl: { value: "2.0rem" }, xxl: { value: "3.0rem" }, xxxl: { value: "4.5rem" }, relative: { xxxs: { value: "0.25em" }, xxs: { value: "0.375em" }, xs: { value: "0.5em" }, small: { value: "0.75em" }, medium: { value: "1em" }, large: { value: "1.5em" }, xl: { value: "2.0em" }, xxl: { value: "3.0em" }, xxxl: { value: "4.5em" }, full: { value: "100%" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/time.mjs
            const time_e = { short: { value: "100ms" }, medium: { value: "250ms" }, long: { value: "500ms" } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/transforms.mjs
            const transforms_e = { slideX: { small: { value: "translateX(0.5em)" }, medium: { value: "translateX(1em)" }, large: { value: "translateX(2em)" } } };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/tokens/index.mjs
            const tokens_c = { components: mm, borderWidths: borderWidths_e, colors: colors_l, fonts: fonts_e, fontSizes: fontSizes_e, fontWeights: fontWeights_l, lineHeights: lineHeights_e, opacities: opacities_e, outlineOffsets: outlineOffsets_e, outlineWidths: outlineWidths_e, radii: radii_e, shadows: shadows_o, space: space_e, time: time_e, transforms: transforms_e }, tokens_h = { colors: colors_l, borderWidths: borderWidths_e, fontSizes: { xxs: fontSizes_e.xxs, xs: fontSizes_e.xs, small: fontSizes_e.small, medium: fontSizes_e.medium, large: fontSizes_e.large, xl: fontSizes_e.xl, xxl: fontSizes_e.xxl, xxxl: fontSizes_e.xxxl }, fontWeights: fontWeights_l, opacities: opacities_e, space: { xxs: space_e.xxxs, xs: space_e.xs, small: space_e.small, medium: space_e.medium, large: space_e.large, xl: space_e.xl, xxl: space_e.xxl, xxxl: space_e.xxxl }, radii: radii_e, time: time_e };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/breakpoints.mjs
            const breakpoints_e = { values: { base: 0, small: 480, medium: 768, large: 992, xl: 1280, xxl: 1536 }, defaultBreakpoint: "base" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/defaultTheme.mjs
            const defaultTheme_t = { tokens: tokens_c, breakpoints: breakpoints_e, name: "default-theme" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/types/theme.mjs
            const theme_s = s => s in shared_constants_l;

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/utils.mjs
            const shared_utils_o = t => "string" == typeof t && t.length > 0, shared_utils_s = t => "string" == typeof t && 0 === t.length, utils_n = t => null == t || shared_utils_s(t), shared_utils_f = (t, r) => { const e = r - t + 1; return Array.from({ length: e }, ((r, e) => e + t)) }, shared_utils_l = t => Object.keys(t), utils_m = (o, s, n) => { if ("string" != typeof s) return s; if (s.includes(" ")) return s.split(" ").map((t => utils_m(o, t, n))).join(" "); if (theme_s(o)) { const e = s.split("."), f = shared_constants_l[o]; let l = n[f]; for (let t = 0; t < e.length && l; t++)l = l[e[t]]; return theme_utils_c(l) ? `var(--${theme_utils_f({ path: [shared_constants_l[o], ...e] })})` : s } return s };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/utils.mjs
            const responsive_utils_o = ({ breakpoint: o, breakpoints: e, values: s }) => { let i = {}; const n = shared_utils_l(e).sort(((r, t) => e[r] - e[t])); var a; return Array.isArray(s) ? s.forEach(((r, t) => { i[n[t]] = r })) : "object" == typeof s && (i = shared_utils_l(a = s).reduce(((t, o) => o in defaultTheme_t.breakpoints.values ? Object.assign(Object.assign({}, t), { [o]: a[o] }) : t), {})), (({ breakpoint: r, breakpoints: o, values: e }) => { const s = e[r]; if (void 0 !== s) return s; const i = shared_utils_l(o).sort(((r, t) => o[t] - o[r])), n = i.slice(i.indexOf(r)); for (const r of n) { const t = e[r]; if (void 0 !== t) return t } return null })({ breakpoint: o, breakpoints: e, values: i }) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/getMediaQueries.mjs
            const getMediaQueries_n = ({ breakpoints: n }) => { const r = shared_utils_l(n).sort(((t, r) => n[r] - n[t])); return r.map(((t, i) => { let o = ""; const m = n[t], e = r[i - 1], p = e ? n[e] - 1 : null; return m >= 0 && (o = `(min-width: ${m}px)`), null !== p && (o && (o += " and "), o += `(max-width: ${p}px)`), { breakpoint: t, query: o, maxWidth: p, minWidth: m } })) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/useBreakpoint.mjs
            const useBreakpoint_n = "undefined" == typeof window ? react.useEffect : react.useLayoutEffect, useBreakpoint_o = ({ breakpoints: o, defaultBreakpoint: a }) => { const r = "undefined" != typeof window && void 0 !== window.matchMedia ? window.matchMedia : null, i = react.useMemo((() => getMediaQueries_n({ breakpoints: o })), [o]), [s, u] = react.useState(a), c = react.useCallback(((e, t) => { e && u(t) }), [u]); return useBreakpoint_n((() => { if (!r) return; const e = i.map((({ query: e, breakpoint: t }) => { const n = r(e); c(n.matches, t); const o = e => { e.matches && u(t) }; return n.addEventListener("change", o), () => n.removeEventListener("change", o) })); return () => { e.forEach((e => e())) } }), [o, u, r, i]), react.useDebugValue(s, (e => e)), s };

            // EXTERNAL MODULE: ./node_modules/style-dictionary/lib/utils/deepExtend.js
            var deepExtend = __webpack_require__(5547);
            // EXTERNAL MODULE: ./node_modules/style-dictionary/lib/utils/flattenProperties.js
            var flattenProperties = __webpack_require__(7460);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/theme/createTheme.mjs
            const createTheme_r = ({ token: e, path: n }) => { const o = `--${theme_utils_f({ path: n })}`, { value: t } = e, r = utils_a(e); return { name: o, original: t, path: n, value: r, toString: () => `var(${o})` } }; function createTheme_s(a, i = defaultTheme_t) { const s = deepExtend([{}, i, a]), m = theme_utils_l({ tokens: s.tokens, setupToken: createTheme_r }), { breakpoints: l, name: p } = s; let d = `[data-amplify-theme="${p}"] {\n` + flattenProperties(m).map((e => `${e.name}: ${e.value};`)).join("\n") + "\n}\n", c = []; return s.overrides && (c = s.overrides.map((e => { const o = theme_utils_l({ tokens: e.tokens, setupToken: createTheme_r }), a = flattenProperties(o).map((e => `${e.name}: ${e.value};`)).join("\n"); if ("selector" in e && (d += `\n${e.selector} {\n${a}\n}\n`), "mediaQuery" in e && (d += `\n@media (${e.mediaQuery}) {\n  [data-amplify-theme="${p}"] {\n    ${a}\n  }\n}\n`), "breakpoint" in e) { const n = s.breakpoints.values[e.breakpoint]; d += `\n@media (min-width: ${n}px) {\n  [data-amplify-theme="${p}"] {\n    ${a}\n  }\n}\n` } return "colorMode" in e && (d += `\n@media (prefers-color-scheme: ${e.colorMode}) {\n          [data-amplify-theme="${p}"][data-amplify-color-mode="system"] {\n            ${a}\n            color-scheme: ${e.colorMode};\n          }\n        }\n`, d += `\n[data-amplify-theme="${p}"][data-amplify-color-mode="${e.colorMode}"] {\n          ${a}\n          color-scheme: ${e.colorMode};\n        }\n`), Object.assign(Object.assign({}, e), { tokens: o }) }))), { tokens: m, breakpoints: l, name: p, cssText: d, overrides: c } }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/AmplifyContext.mjs
            const AmplifyContext_o = react.createContext({ theme: createTheme_s() });

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/hooks/useTheme.mjs
            const useTheme_m = o => void 0 === o || void 0 === o.theme ? createTheme_s() : o.theme, useTheme_r = () => { const t = react.useContext(AmplifyContext_o); return useTheme_m(t) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/getStyleValue.mjs
            const getStyleValue_i = ({ value: i, propKey: m, tokens: p }) => theme_utils_c(i) ? i.toString() : r(i) ? r(m) ? utils_m(m, i, p) : i : null;

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/styleUtils.mjs
            const styleUtils_u = o => "auto" === o || "number" == typeof o && !isNaN(o) || "string" == typeof o && !isNaN(parseFloat(o)), styleUtils_c = o => "auto" === o ? "auto" : `span ${o}`, styleUtils_f = o => styleUtils_u(o) ? styleUtils_c(o) : Array.isArray(o) ? o.map((o => styleUtils_c(o))) : "object" == typeof o && null != o ? Object.entries(o).reduce(((o, [e, t]) => Object.assign(Object.assign({}, o), { [e]: styleUtils_c(t) })), {}) : null, styleUtils_b = t => { const { rowSpan: r, columnSpan: s, row: n, column: p } = t, a = tslib_tslib_es6_rest(t, ["rowSpan", "columnSpan", "row", "column"]), { rowFromSpanValue: m, columnFromSpanValue: l } = react.useMemo((() => ({ rowFromSpanValue: styleUtils_f(r), columnFromSpanValue: styleUtils_f(s) })), [r, s]); return Object.assign({ row: utils_n(n) ? m : n, column: utils_n(p) ? l : p }, a) }, styleUtils_y = ({ props: o = {}, style: e = {}, breakpoint: n, breakpoints: p, tokens: i }) => { const u = {}; return Object.keys(o).filter((e => null !== o[e])).forEach((c => { if (c in style_n) { const u = o[c]; if (!u || shared_utils_s(u)) return; const f = style_n[c]; let b = ""; theme_utils_c(u) ? b = u.toString() : "string" == typeof u ? b = utils_m(c, u, i) : "number" == typeof u ? b = u : "object" == typeof u && (b = getStyleValue_i({ propKey: c, tokens: i, value: responsive_utils_o({ values: u, breakpoint: n, breakpoints: p }) })), e = Object.assign(Object.assign({}, e), { [f]: b }) } else void 0 !== o[c] && (u[c] = o[c]) })), { propStyles: e, nonStyleProps: u } }, styleUtils_k = (o, t) => { const { breakpoints: { values: r, defaultBreakpoint: s }, tokens: a } = useTheme_r(), i = useBreakpoint_o({ breakpoints: r, defaultBreakpoint: s }), m = styleUtils_b(o); return react.useMemo((() => styleUtils_y({ props: m, style: t, breakpoint: i, breakpoints: r, tokens: a })), [m, t, r, i, a]) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/View/View.mjs
            const View_s = react.forwardRef(((s, a) => { var { as: i = "div", children: l, testId: d, ariaLabel: n, isDisabled: o, style: m, inert: b } = s, p = tslib_tslib_es6_rest(s, ["as", "children", "testId", "ariaLabel", "isDisabled", "style", "inert"]); const { propStyles: c, nonStyleProps: y } = styleUtils_k(p, m); return react.createElement(i, Object.assign({ "aria-label": n, "data-testid": d, disabled: o, ref: a, inert: b ? "" : null, style: c }, y), l) })); View_s.displayName = "View";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Flex/Flex.mjs
            const Flex_t = react.forwardRef(((t, o) => { var { className: i, children: c } = t, l = tslib_tslib_es6_rest(t, ["className", "children"]); return react.createElement(View_s, Object.assign({ className: classnames(constants_t.Flex, i), ref: o }, l), c) })); Flex_t.displayName = "Flex";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Loader/Loader.mjs
            const Loader_s = "linear-empty", Loader_n = "linear-filled", Loader_o = "circular-empty", Loader_m = "circular-filled", Loader_c = 8, Loader_d = 42, Loader_y = 84 * Math.PI, Loader_p = react.forwardRef(((c, d) => { var { className: p, filledColor: f, emptyColor: x, size: g, variation: u, isDeterminate: v = !1, isPercentageTextHidden: E = !1, percentage: h = 0 } = c, k = tslib_tslib_es6_rest(c, ["className", "filledColor", "emptyColor", "size", "variation", "isDeterminate", "isPercentageTextHidden", "percentage"]); h = Math.min(h, 100); const L = `${h = Math.max(h, 0)}%`, N = classnames(constants_t.Loader, utils_j(constants_t.Loader, g), utils_j(constants_t.Loader, u), v ? constants_t.LoaderDeterminate : null, p), D = react.createElement("g", null, react.createElement("line", { x1: "0", x2: "100%", y1: "50%", y2: "50%", style: { stroke: String(x) }, "data-testid": Loader_s }), react.createElement("line", { x1: "0", x2: v ? L : "100%", y1: "50%", y2: "50%", style: { stroke: v && 0 === h ? "none" : f ? String(f) : void 0 }, "data-testid": Loader_n }), v ? react.createElement("text", { "aria-live": "polite", className: classnames(constants_t.LoaderPercentageText, E ? constants_t.VisuallyHidden : null), x: `${-1 + h}%`, y: "200%" }, L) : null), P = react.createElement("g", null, react.createElement("circle", { cx: "50%", cy: "50%", r: "42%", strokeWidth: "8%", style: { stroke: String(x) }, "data-testid": Loader_o }), react.createElement("circle", { cx: "50%", cy: "50%", r: "42%", strokeWidth: "8%", style: { stroke: String(f), strokeDasharray: v ? `${Loader_y}% ${Loader_y}%` : void 0, strokeDashoffset: v ? Loader_y - Loader_y * h / 100 + "%" : void 0 }, "data-testid": Loader_m }), v ? react.createElement("text", { "aria-live": "polite", className: classnames(constants_t.LoaderPercentageText, E ? constants_t.VisuallyHidden : null), x: "130%", y: "80%" }, L) : null); return react.createElement(View_s, Object.assign({ as: "svg", className: N, "data-size": g, "data-variation": u, ref: d, role: "img" }, k), "linear" === u ? D : P) })); Loader_p.displayName = "Loader";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Button/Button.mjs
            const Button_m = ["link", "primary", void 0], Button_u = react.forwardRef(((u, p) => { var c, { className: f, children: b, colorTheme: h, isFullWidth: B = !1, isDisabled: F, isLoading: g, loadingText: v = "", size: j, type: w = "button", variation: y } = u, x = tslib_tslib_es6_rest(u, ["className", "children", "colorTheme", "isFullWidth", "isDisabled", "isLoading", "loadingText", "size", "type", "variation"]); const L = Button_m.includes(y) && h ? `${null != y ? y : "outlined"}--${h}` : void 0, { isFieldsetDisabled: N } = useFieldset_o(), z = N || (null !== (c = null != F ? F : g) && void 0 !== c ? c : x.disabled), D = classnames(constants_t.Button, constants_t.FieldGroupControl, utils_j(constants_t.Button, y), utils_j(constants_t.Button, L), utils_j(constants_t.Button, j), utils_g(constants_t.Button, "disabled", z), utils_g(constants_t.Button, "loading", g), utils_g(constants_t.Button, "fullwidth", B), f); return react.createElement(View_s, Object.assign({ ref: p, as: "button", className: D, "data-fullwidth": B, "data-loading": g, "data-size": j, "data-variation": y, isDisabled: z, type: w }, x), g ? react.createElement(Flex_t, { as: "span", className: constants_t.ButtonLoaderWrapper }, react.createElement(Loader_p, { size: j }), v || null) : b) })); Button_u.displayName = "Button";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Heading/Heading.mjs
            const Heading_n = { 1: "h1", 2: "h2", 3: "h3", 4: "h4", 5: "h5", 6: "h6" }, Heading_o = react.forwardRef(((o, c) => { var { className: l, children: d, isTruncated: f, level: h = 6 } = o, p = tslib_tslib_es6_rest(o, ["className", "children", "isTruncated", "level"]); return react.createElement(View_s, Object.assign({ as: Heading_n[h], className: classnames(constants_t.Heading, utils_j(constants_t.Heading, h), utils_g(constants_t.Heading, "truncated", f), l), ref: c }, p), d) })); Heading_o.displayName = "Heading";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Text/Text.mjs
            const Text_o = react.forwardRef(((o, n) => { var { as: c = "p", className: d, children: f, isTruncated: l, variation: p } = o, u = tslib_tslib_es6_rest(o, ["as", "className", "children", "isTruncated", "variation"]); const T = classnames(constants_t.Text, utils_j(constants_t.Text, p), utils_g(constants_t.Text, "truncated", l), d); return react.createElement(View_s, Object.assign({ as: c, className: T, "data-truncate": l, "data-variation": p, ref: n }, u), f) })); Text_o.displayName = "Text";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/helpers/utils.mjs
            const utils_r = r => "object" == typeof r && null !== r && "message" in r && "string" == typeof r.message, utils_e = e => { if (utils_r(e)) return e; try { return new Error(JSON.stringify(e)) } catch (r) { return new Error(String(e)) } }, helpers_utils_t = r => utils_e(r).message, helpers_utils_n = r => { const e = new FormData(r.target); return Object.fromEntries(e) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useFormHandlers/useFormHandlers.mjs
            function useFormHandlers_a() { const { submitForm: a, updateBlur: m, updateForm: u } = useAuthenticator((e => [e.submitForm, e.updateBlur, e.updateForm])); return { handleBlur: (0, react.useCallback)((({ target: { name: e } }) => { m({ name: e }) }), [m]), handleChange: (0, react.useCallback)((({ target: { checked: e, name: t, type: r, value: a } }) => { u({ name: t, value: "checkbox" === r && !e ? void 0 : a }) }), [u]), handleSubmit: (0, react.useCallback)((e => { e.preventDefault(), a(helpers_utils_n(e)) }), [a]) } }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/context/IconsContext.mjs
            const IconsContext_e = react.createContext({});

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/context/useIcons.mjs
            function useIcons_r(r) { const n = react.useContext(IconsContext_e); if (r && n) return n[r] }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconCheckCircle.mjs
            const IconCheckCircle_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20ZM16.59 7.58L10 14.17L7.41 11.59L6 13L10 17L18 9L16.59 7.58Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconError.mjs
            const IconError_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconInfo.mjs
            const IconInfo_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M11 7H13V9H11V7ZM11 11H13V17H11V11ZM12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconWarning.mjs
            const IconWarning_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M1 21H23L12 2L1 21ZM13 18H11V16H13V18ZM13 14H11V10H13V14Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Alert/AlertIcon.mjs
            const AlertIcon_s = ({ variation: s, ariaHidden: a }) => { var m, l, d, I; const p = useIcons_r("alert"); let u; switch (s) { case "info": u = null !== (m = null == p ? void 0 : p.info) && void 0 !== m ? m : react.createElement(IconInfo_o, { "aria-hidden": a }); break; case "error": u = null !== (l = null == p ? void 0 : p.error) && void 0 !== l ? l : react.createElement(IconError_o, { "aria-hidden": a }); break; case "warning": u = null !== (d = null == p ? void 0 : p.warning) && void 0 !== d ? d : react.createElement(IconWarning_o, { "aria-hidden": a }); break; case "success": u = null !== (I = null == p ? void 0 : p.success) && void 0 !== I ? I : react.createElement(IconCheckCircle_o, { "aria-hidden": a }) }return u ? react.createElement("span", { className: constants_t.AlertIcon }, u) : null }; AlertIcon_s.displayName = "AlertIcon";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconClose.mjs
            const IconClose_i = i => { const { className: o, size: a } = i, l = tslib_tslib_es6_rest(i, ["className", "size"]); return react.createElement(View_s, Object.assign({ as: "span", width: null != a ? a : "1em", height: null != a ? a : "1em", className: classnames(constants_t.Icon, o) }, l), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: a ? { width: a, height: a } : void 0 }, react.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Alert/Alert.mjs
            const Alert_p = react.forwardRef(((p, u) => { var b, { buttonRef: I, children: j, className: h, dismissButtonLabel: v = constants_o.Alert.dismissButtonLabel, hasIcon: A = !0, heading: x, isDismissible: E = !1, onDismiss: N, variation: B } = p, D = tslib_tslib_es6_rest(p, ["buttonRef", "children", "className", "dismissButtonLabel", "hasIcon", "heading", "isDismissible", "onDismiss", "variation"]); const [g, w] = react.useState(!1), C = useIcons_r("alert"), L = react.useCallback((() => { w(!g), utils_b(N) && N() }), [w, N, g]); return g ? null : react.createElement(Flex_t, Object.assign({ className: classnames(constants_t.Alert, h, utils_j(constants_t.Alert, B)), "data-variation": B, ref: u, role: "alert" }, D), A && react.createElement(AlertIcon_s, { variation: B, ariaHidden: !0 }), react.createElement(View_s, { flex: "1" }, x && react.createElement(View_s, { className: constants_t.AlertHeading }, x), react.createElement(View_s, { className: constants_t.AlertBody }, j)), E && react.createElement(Button_u, { ariaLabel: v, variation: "link", className: constants_t.AlertDismiss, onClick: L, ref: I }, null !== (b = null == C ? void 0 : C.close) && void 0 !== b ? b : react.createElement(IconClose_i, { "aria-hidden": "true" }))) })); Alert_p.displayName = "Alert";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/RemoteErrorMessage.mjs
            const RemoteErrorMessage_m = () => { const { error: m } = useAuthenticator((r => [r.error])); return react.createElement(react.Fragment, null, m ? react.createElement(Alert_p, { variation: "error", isDismissible: !0 }, translations_v(m)) : null) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/VisuallyHidden/VisuallyHidden.mjs
            const VisuallyHidden_i = react.forwardRef(((i, t) => { var { as: o = "span", children: l, className: n } = i, c = tslib_tslib_es6_rest(i, ["as", "children", "className"]); return react.createElement(View_s, Object.assign({ as: o, className: classnames(constants_t.VisuallyHidden, n), ref: t }, c), l) })); VisuallyHidden_i.displayName = "VisuallyHidden";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconVisibilityOff.mjs
            const IconVisibilityOff_r = r => { const { className: o } = r, a = tslib_tslib_es6_rest(r, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, o) }, a), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M12 6.0002C15.79 6.0002 19.17 8.1302 20.82 11.5002C20.23 12.7202 19.4 13.7702 18.41 14.6202L19.82 16.0302C21.21 14.8002 22.31 13.2602 23 11.5002C21.27 7.1102 17 4.0002 12 4.0002C10.73 4.0002 9.51 4.2002 8.36 4.5702L10.01 6.2202C10.66 6.0902 11.32 6.0002 12 6.0002ZM10.93 7.14019L13 9.2102C13.57 9.4602 14.03 9.9202 14.28 10.4902L16.35 12.5602C16.43 12.2202 16.49 11.8602 16.49 11.4902C16.5 9.0102 14.48 7.0002 12 7.0002C11.63 7.0002 11.28 7.05019 10.93 7.14019ZM2.01 3.8702L4.69 6.5502C3.06 7.8302 1.77 9.5302 1 11.5002C2.73 15.8902 7 19.0002 12 19.0002C13.52 19.0002 14.98 18.7102 16.32 18.1802L19.74 21.6002L21.15 20.1902L3.42 2.4502L2.01 3.8702ZM9.51 11.3702L12.12 13.9802C12.08 13.9902 12.04 14.0002 12 14.0002C10.62 14.0002 9.5 12.8802 9.5 11.5002C9.5 11.4502 9.51 11.4202 9.51 11.3702V11.3702ZM6.11 7.97019L7.86 9.7202C7.63 10.2702 7.5 10.8702 7.5 11.5002C7.5 13.9802 9.52 16.0002 12 16.0002C12.63 16.0002 13.23 15.8702 13.77 15.6402L14.75 16.6202C13.87 16.8602 12.95 17.0002 12 17.0002C8.21 17.0002 4.83 14.8702 3.18 11.5002C3.88 10.0702 4.9 8.89019 6.11 7.97019Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconVisibility.mjs
            const IconVisibility_o = o => { const { className: a } = o, C = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, C), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M12 6C15.79 6 19.17 8.13 20.82 11.5C19.17 14.87 15.79 17 12 17C8.21 17 4.83 14.87 3.18 11.5C4.83 8.13 8.21 6 12 6ZM12 4C7 4 2.73 7.11 1 11.5C2.73 15.89 7 19 12 19C17 19 21.27 15.89 23 11.5C21.27 7.11 17 4 12 4ZM12 9C13.38 9 14.5 10.12 14.5 11.5C14.5 12.88 13.38 14 12 14C10.62 14 9.5 12.88 9.5 11.5C9.5 10.12 10.62 9 12 9ZM12 7C9.52 7 7.5 9.02 7.5 11.5C7.5 13.98 9.52 16 12 16C14.48 16 16.5 13.98 16.5 11.5C16.5 9.02 14.48 7 12 7Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/PasswordField/ShowPasswordButton.mjs
            const { passwordIsHidden: ShowPasswordButton_w, passwordIsShown: ShowPasswordButton_p, showPassword: ShowPasswordButton_c } = constants_o.PasswordField, ShowPasswordButton_f = react.forwardRef(((t, f) => { var h, u, { fieldType: I, passwordIsHiddenLabel: b = ShowPasswordButton_w, passwordIsShownLabel: j = ShowPasswordButton_p, showPasswordButtonLabel: y = ShowPasswordButton_c, size: v, hasError: L } = t, P = tslib_tslib_es6_rest(t, ["fieldType", "passwordIsHiddenLabel", "passwordIsShownLabel", "showPasswordButtonLabel", "size", "hasError"]); const E = useIcons_r("passwordField"), S = classnames(constants_t.FieldShowPassword, utils_g(constants_t.FieldShowPassword, "error", L)), V = "password" === I ? null !== (h = null == E ? void 0 : E.visibility) && void 0 !== h ? h : react.createElement(IconVisibility_o, { "aria-hidden": "true" }) : null !== (u = null == E ? void 0 : E.visibilityOff) && void 0 !== u ? u : react.createElement(IconVisibilityOff_r, { "aria-hidden": "true" }); return react.createElement(Button_u, Object.assign({ "aria-checked": "password" !== I, ariaLabel: y, className: S, ref: f, role: "switch", size: v }, P), react.createElement(VisuallyHidden_i, { "aria-live": "polite" }, "password" === I ? b : j), V) })); ShowPasswordButton_f.displayName = "ShowPasswordButton";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldDescription.mjs
            const FieldDescription_a = "qa-field-description", FieldDescription_d = d => { var { descriptiveText: l, labelHidden: m } = d, o = tslib_tslib_es6_rest(d, ["descriptiveText", "labelHidden"]); return l ? react.createElement(Text_o, Object.assign({ "data-testid": FieldDescription_a, className: classnames(constants_t.FieldDescription, { [constants_t.VisuallyHidden]: m }) }, o), l) : null }; FieldDescription_d.displayName = "FieldDescription";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldErrorMessage.mjs
            const FieldErrorMessage_o = o => { var { errorMessage: t, hasError: m } = o, i = tslib_tslib_es6_rest(o, ["errorMessage", "hasError"]); return m && t ? react.createElement(Text_o, Object.assign({ className: constants_t.FieldErrorMessage }, i), t) : null }; FieldErrorMessage_o.displayName = "FieldErrorMessage";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/FieldGroup/FieldGroup.mjs
            const FieldGroup_l = react.forwardRef(((l, m) => { var { children: p, className: s, innerEndComponent: d, innerStartComponent: u, orientation: c = "horizontal", outerEndComponent: F, outerStartComponent: E, variation: G } = l, f = tslib_tslib_es6_rest(l, ["children", "className", "innerEndComponent", "innerStartComponent", "orientation", "outerEndComponent", "outerStartComponent", "variation"]); const N = null != d, C = null != u ? constants_t.FieldGroupHasInnerStart : null, S = N ? constants_t.FieldGroupHasInnerEnd : null, O = classnames(constants_t.FieldGroup, C, S, utils_j(constants_t.FieldGroup, c), s); return react.createElement(Flex_t, Object.assign({ className: O, "data-orientation": c, ref: m }, f), E && react.createElement(View_s, { className: classnames(constants_t.FieldGroupOuterStart, utils_j(constants_t.FieldGroupOuterStart, G)) }, E), react.createElement(View_s, { className: classnames(constants_t.FieldGroupFieldWrapper, utils_j(constants_t.FieldGroupFieldWrapper, c)), "data-orientation": c }, u && react.createElement(View_s, { className: constants_t.FieldGroupInnerStart }, u), p, d && react.createElement(View_s, { className: constants_t.FieldGroupInnerEnd }, d)), F && react.createElement(View_s, { className: classnames(constants_t.FieldGroupOuterEnd, utils_j(constants_t.FieldGroupOuterEnd, G)) }, F)) })); FieldGroup_l.displayName = "FieldGroup";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Input/Input.mjs
            const Input_o = react.forwardRef(((o, u) => { var { autoComplete: m, checked: p, className: n, defaultChecked: c, defaultValue: f, id: h, isDisabled: v, isReadOnly: y, isRequired: C, size: b, type: k = "text", hasError: I = !1, value: R, variation: V } = o, j = tslib_tslib_es6_rest(o, ["autoComplete", "checked", "className", "defaultChecked", "defaultValue", "id", "isDisabled", "isReadOnly", "isRequired", "size", "type", "hasError", "value", "variation"]); const w = classnames(constants_t.Input, constants_t.FieldGroupControl, utils_j(constants_t.Input, V), utils_g(constants_t.Input, "error", I), utils_j(constants_t.Input, b), n), { isFieldsetDisabled: D } = useFieldset_o(); return react.createElement(View_s, Object.assign({ "aria-invalid": I, as: "input", autoComplete: m, checked: p, className: w, "data-size": b, "data-variation": V, defaultChecked: c, defaultValue: f, isDisabled: D || v, id: h, readOnly: y, ref: u, required: C, type: k, value: R }, j)) })); Input_o.displayName = "Input";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Label/Label.mjs
            const Label_i = react.forwardRef(((i, m) => { var { children: t, className: o, visuallyHidden: n } = i, c = tslib_tslib_es6_rest(i, ["children", "className", "visuallyHidden"]); return react.createElement(View_s, Object.assign({ as: "label", className: classnames(constants_t.Label, o, { [constants_t.VisuallyHidden]: n }), ref: m }, c), t) })); Label_i.displayName = "Label";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/splitPrimitiveProps.mjs
            const splitPrimitiveProps_t = t => { const e = { styleProps: {}, rest: {} }; return Object.keys(t).forEach((r => { (t => t in style_n)(r) ? e.styleProps = Object.assign(Object.assign({}, e.styleProps), { [r]: t[r] }) : e.rest = Object.assign(Object.assign({}, e.rest), { [r]: t[r] }) })), e };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/useLayoutEffect.mjs
            const useLayoutEffect_l = (null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) ? react.useLayoutEffect : () => { };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/useStableId.mjs
            const useStableId_r = "amplify-id", useStableId_e = react_namespaceObject["useId".toString()] || (() => { }); let useStableId_n = 0; const useStableId_s = s => { const [u, i] = react.useState(useStableId_e()); return useLayoutEffect_l((() => { s || i((t => null != t ? t : String(useStableId_n++))) }), [s]), null != s ? s : u ? `${useStableId_r}-${u}` : "" };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextField/TextField.mjs
            const TextField_u = react.forwardRef(((u, f) => { const { className: E, descriptiveText: F, errorMessage: b, hasError: j = !1, id: C, innerEndComponent: v, innerStartComponent: S, label: x, labelHidden: y = !1, outerEndComponent: g, outerStartComponent: h, size: I, testId: T, variation: z, inputStyles: H } = u, M = tslib_tslib_es6_rest(u, ["className", "descriptiveText", "errorMessage", "hasError", "id", "innerEndComponent", "innerStartComponent", "label", "labelHidden", "outerEndComponent", "outerStartComponent", "size", "testId", "variation", "inputStyles"]), N = useStableId_s(C), P = useStableId_s(), w = F ? P : void 0, { styleProps: G, rest: L } = splitPrimitiveProps_t(M); return react.createElement(Flex_t, Object.assign({ className: classnames(constants_t.Field, utils_j(constants_t.Field, I), constants_t.TextField, E), "data-size": I, testId: T }, G), react.createElement(Label_i, { htmlFor: N, visuallyHidden: y }, x), react.createElement(FieldDescription_d, { id: P, labelHidden: y, descriptiveText: F }), react.createElement(FieldGroup_l, { outerStartComponent: h, outerEndComponent: g, innerStartComponent: S, innerEndComponent: v, variation: z }, react.createElement(Input_o, Object.assign({ "aria-describedby": w, hasError: j, id: N, ref: f, size: I, variation: z }, H, L))), react.createElement(FieldErrorMessage_o, { hasError: j, errorMessage: b })) })); TextField_u.displayName = "TextField";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/PasswordField/PasswordField.mjs
            const PasswordField_d = react.forwardRef(((d, l) => { var { autoComplete: w = "current-password", label: n, className: m, hideShowPassword: i = !1, passwordIsHiddenLabel: p, passwordIsShownLabel: h, showPasswordButtonLabel: b, showPasswordButtonRef: u, size: c, hasError: f } = d, P = tslib_tslib_es6_rest(d, ["autoComplete", "label", "className", "hideShowPassword", "passwordIsHiddenLabel", "passwordIsShownLabel", "showPasswordButtonLabel", "showPasswordButtonRef", "size", "hasError"]); const [L, E] = react.useState("password"), S = react.useCallback((() => { E("password" === L ? "text" : "password") }), [E, L]); return react.createElement(TextField_u, Object.assign({ autoComplete: w, outerEndComponent: i ? null : react.createElement(ShowPasswordButton_f, { fieldType: L, onClick: S, passwordIsHiddenLabel: p, passwordIsShownLabel: h, ref: u, size: c, showPasswordButtonLabel: b, hasError: f }), size: c, type: L, label: n, className: classnames(constants_t.PasswordField, m), ref: l, hasError: f }, P)) })); PasswordField_d.displayName = "PasswordField";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconExpandMore.mjs
            const IconExpandMore_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M16.59 8.58984L12 13.1698L7.41 8.58984L6 9.99984L12 15.9998L18 9.99984L16.59 8.58984Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Select/Select.mjs
            const Select_p = react.forwardRef(((p, d) => { var u, { autoComplete: f, className: v, size: S, variation: I, value: j, defaultValue: x, hasError: E, icon: h, iconColor: C, children: b, placeholder: z, isDisabled: F, isRequired: N, isMultiple: V = !1, selectSize: w = 1 } = p, D = tslib_tslib_es6_rest(p, ["autoComplete", "className", "size", "variation", "value", "defaultValue", "hasError", "icon", "iconColor", "children", "placeholder", "isDisabled", "isRequired", "isMultiple", "selectSize"]); const q = void 0 === j && void 0 === x && z, M = V || w > 1, R = classnames(constants_t.Select, constants_t.FieldGroupControl, utils_j(constants_t.Select, S), utils_j(constants_t.Select, I), utils_g(constants_t.Select, "error", E), utils_g(constants_t.Select, "expanded", M), v), W = useIcons_r("select"), { isFieldsetDisabled: y } = useFieldset_o(); return react.createElement(View_s, { className: constants_t.SelectWrapper }, react.createElement(View_s, Object.assign({ "aria-invalid": E, as: "select", autoComplete: f, value: j, defaultValue: q ? "" : x, isDisabled: y || F, multiple: V, size: w, required: N, "data-size": S, "data-variation": I, className: R, ref: d }, D), z && react.createElement("option", { value: "" }, z), b), M ? null : react.createElement(Flex_t, { className: classnames(constants_t.SelectIconWrapper, utils_j(constants_t.SelectIconWrapper, S)), color: C }, null !== (u = null != h ? h : null == W ? void 0 : W.expand) && void 0 !== u ? u : react.createElement(IconExpandMore_o, null))) })); Select_p.displayName = "Select";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/SelectField/SelectField.mjs
            const SelectField_c = react.forwardRef(((c, f) => { const { children: F, className: h, descriptiveText: b, errorMessage: u, hasError: j = !1, id: E, label: v, labelHidden: g = !1, options: y, size: S, testId: x, inputStyles: I } = c, z = tslib_tslib_es6_rest(c, ["children", "className", "descriptiveText", "errorMessage", "hasError", "id", "label", "labelHidden", "options", "size", "testId", "inputStyles"]), H = useStableId_s(E), M = useStableId_s(), N = b ? M : void 0, { styleProps: w, rest: P } = splitPrimitiveProps_t(z); return react.createElement(Flex_t, Object.assign({ className: classnames(constants_t.Field, utils_j(constants_t.Field, S), constants_t.SelectField, h), "data-size": S, testId: x }, w), react.createElement(Label_i, { htmlFor: H, visuallyHidden: g }, v), react.createElement(FieldDescription_d, { id: M, labelHidden: g, descriptiveText: b }), react.createElement(Select_p, Object.assign({ "aria-describedby": N, hasError: j, id: H, ref: f, size: S }, P, I), (({ children: e, options: i }) => e ? ((null == i ? void 0 : i.length) && console.warn("Amplify UI: <SelectField> component  defaults to rendering children over `options`. When using the `options` prop, omit children."), e) : null == i ? void 0 : i.map(((e, i) => react.createElement("option", { label: e, value: e, key: `${e}-${i}` }, e))))({ children: F, options: y })), react.createElement(FieldErrorMessage_o, { hasError: j, errorMessage: u })) })); SelectField_c.displayName = "SelectField";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/PhoneNumberField/CountryCodeSelect.mjs
            const CountryCodeSelect_r = react.forwardRef(((r, i) => { var { className: m, dialCodeList: d, isReadOnly: c } = r, n = tslib_tslib_es6_rest(r, ["className", "dialCodeList", "isReadOnly"]); const p = null != d ? d : country_dial_codes_o, f = react.useMemo((() => p.map((e => react.createElement("option", { key: e, value: e, disabled: c }, e)))), [p, c]); return react.createElement(SelectField_c, Object.assign({ "aria-disabled": c, autoComplete: "tel-country-code", className: classnames(constants_t.CountryCodeSelect, constants_t.DialCodeSelect, m), labelHidden: !0, ref: i }, n), f) })); CountryCodeSelect_r.displayName = "CountryCodeSelect";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/PhoneNumberField/PhoneNumberField.mjs
            const PhoneNumberField_d = react.forwardRef(((d, i) => { var { autoComplete: s = "tel-national", className: C, countryCodeName: m, countryCodeLabel: u = constants_o.PhoneNumberField.countryCodeLabel, countryCodeRef: c, defaultCountryCode: f, defaultDialCode: y, dialCodeLabel: b = constants_o.PhoneNumberField.countryCodeLabel, dialCodeList: p, dialCodeName: h, dialCodeRef: N, hasError: L, isDisabled: R, isReadOnly: D, onCountryCodeChange: g, onDialCodeChange: E, onInput: F, size: v, variation: O } = d, j = tslib_tslib_es6_rest(d, ["autoComplete", "className", "countryCodeName", "countryCodeLabel", "countryCodeRef", "defaultCountryCode", "defaultDialCode", "dialCodeLabel", "dialCodeList", "dialCodeName", "dialCodeRef", "hasError", "isDisabled", "isReadOnly", "onCountryCodeChange", "onDialCodeChange", "onInput", "size", "variation"]); const z = null != h ? h : m, P = null != b ? b : u, x = null != y ? y : f, I = null != E ? E : g, S = null != N ? N : c; return react.createElement(TextField_u, Object.assign({ outerStartComponent: react.createElement(CountryCodeSelect_r, { defaultValue: x, dialCodeList: p, className: C, hasError: L, isDisabled: R, isReadOnly: D, label: P, name: z, onChange: I, ref: S, size: v, variation: O }), autoComplete: s, className: classnames(constants_t.PhoneNumberField, C), hasError: L, isDisabled: R, isReadOnly: D, onInput: F, ref: i, size: v, type: "tel", variation: O }, j)) })); PhoneNumberField_d.displayName = "PhoneNumberField";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/shared/ValidationErrors.mjs
            const ValidationErrors_m = ({ errors: m, id: o, dataAttr: a }) => { if (!((null == m ? void 0 : m.length) > 0)) return null; const n = a ? { [a]: !0 } : {}; return react.createElement(View_s, Object.assign({}, n, { id: o }), m.map((t => react.createElement(Text_o, { key: t, role: "alert", variation: "error" }, translations_v(t))))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/FormField.mjs
            function FormField_d(d) { var { autocomplete: n, dialCode: p, name: c, type: u } = d, f = tslib_tslib_es6_rest(d, ["autocomplete", "dialCode", "name", "type"]); const { validationErrors: E } = useAuthenticator((({ validationErrors: e }) => [e])), b = react.useMemo((() => form_s(E[c])), [c, E]), y = (null == b ? void 0 : b.length) > 0, g = useStableId_s(), v = y ? g : void 0; return "tel" === u ? react.createElement(react.Fragment, null, react.createElement(PhoneNumberField_d, Object.assign({}, f, { name: c, defaultDialCode: p, dialCodeName: "country_code", autoComplete: n, hasError: y, "aria-describedby": v })), react.createElement(ValidationErrors_m, { dataAttr: "data-amplify-sign-up-errors", errors: b, id: g })) : "password" === u ? react.createElement(react.Fragment, null, react.createElement(PasswordField_d, Object.assign({}, f, { name: c, autoComplete: n, hasError: y, "aria-describedby": v })), react.createElement(ValidationErrors_m, { dataAttr: "data-amplify-sign-up-errors", errors: b, id: g })) : react.createElement(react.Fragment, null, react.createElement(TextField_u, Object.assign({}, f, { name: c, autoComplete: n, hasError: y, type: u, "aria-describedby": v })), react.createElement(ValidationErrors_m, { dataAttr: "data-amplify-sign-up-errors", errors: b, id: g })) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/FormFields.mjs
            function FormFields_m() { const { fields: m } = useAuthenticator((({ route: e }) => [e])), o = react.useRef(m.map(((t, m) => react.createElement(FormField_d, Object.assign({ key: m }, t))))).current; return react.createElement(react.Fragment, null, o) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/RouteContainer/RouteContainer.mjs
            const RouteContainer_r = e => "signIn" === e || "signUp"; function RouteContainer_n({ children: n, className: m, variation: i = "default" }) { const { route: s } = useAuthenticator((({ route: e }) => [e])), { components: { Header: c, Footer: l } } = useCustomComponents_e(); return react.createElement(View_s, { className: m, "data-amplify-authenticator": "", "data-variation": i }, react.createElement(View_s, { "data-amplify-container": "" }, react.createElement(c, null), react.createElement(View_s, { "data-amplify-router": "", "data-amplify-router-content": RouteContainer_r(s) ? void 0 : "" }, n), react.createElement(l, null))) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ConfirmSignUp/ConfirmSignUp.mjs
            const { getDeliveryMessageText: ConfirmSignUp_u, getDeliveryMethodText: ConfirmSignUp_p, getConfirmingText: ConfirmSignUp_f, getConfirmText: ConfirmSignUp_g, getResendCodeText: ConfirmSignUp_C } = textUtil_n; function ConfirmSignUp_h({ className: t, variation: i }) { const { isPending: p, resendCode: v, codeDeliveryDetails: y } = useAuthenticator((e => [e.isPending, e.resendCode, e.codeDeliveryDetails])), { handleChange: E, handleSubmit: D } = useFormHandlers_a(), { components: { ConfirmSignUp: { Header: x = ConfirmSignUp_h.Header, Footer: j = ConfirmSignUp_h.Footer } } } = useCustomComponents_e(); return react.createElement(RouteContainer_n, { className: t, variation: i }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-confirmsignup": "", method: "post", onChange: E, onSubmit: D }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: p }, react.createElement(x, null), react.createElement(Flex_t, { direction: "column" }, react.createElement(Text_o, { className: "amplify-authenticator__subtitle" }, ConfirmSignUp_u(y)), react.createElement(FormFields_m, null), react.createElement(RemoteErrorMessage_m, null), react.createElement(Button_u, { variation: "primary", isDisabled: p, type: "submit", loadingText: ConfirmSignUp_f(), isLoading: p, fontWeight: "normal" }, ConfirmSignUp_g()), react.createElement(Button_u, { onClick: v, type: "button", fontWeight: "normal" }, ConfirmSignUp_C())), react.createElement(j, null)))) } ConfirmSignUp_h.Header = () => { const { codeDeliveryDetails: t } = useAuthenticator((e => [e.codeDeliveryDetails])); return react.createElement(Heading_o, { level: 4 }, ConfirmSignUp_p(t)) }, ConfirmSignUp_h.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ForceNewPassword/ForceNewPassword.mjs
            const { getChangePasswordText: ForceNewPassword_d, getChangingText: ForceNewPassword_c, getBackToSignInText: ForceNewPassword_p } = textUtil_n, ForceNewPassword_f = ({ className: t, variation: n }) => { const { isPending: l, toSignIn: g } = useAuthenticator((e => [e.isPending, e.toSignIn])), { handleBlur: F, handleChange: h, handleSubmit: E } = useFormHandlers_a(), { components: { ForceNewPassword: { FormFields: C = ForceNewPassword_f.FormFields, Header: j = ForceNewPassword_f.Header, Footer: v = ForceNewPassword_f.Footer } } } = useCustomComponents_e(); return react.createElement(RouteContainer_n, { className: t, variation: n }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-forcenewpassword": "", method: "post", onChange: h, onSubmit: E, onBlur: F }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: l }, react.createElement(j, null), react.createElement(C, null), react.createElement(RemoteErrorMessage_m, null), react.createElement(Button_u, { isDisabled: l, type: "submit", variation: "primary", isLoading: l, loadingText: ForceNewPassword_c(), fontWeight: "normal" }, ForceNewPassword_d()), react.createElement(Button_u, { onClick: g, type: "button", fontWeight: "normal", variation: "link", size: "small" }, ForceNewPassword_p()), react.createElement(v, null)))) }; ForceNewPassword_f.FormFields = function () { return react.createElement(FormFields_m, null) }, ForceNewPassword_f.Header = function () { return react.createElement(Heading_o, { level: 4 }, ForceNewPassword_d()) }, ForceNewPassword_f.Footer = function () { return null };

            // EXTERNAL MODULE: ./node_modules/qrcode/lib/browser.js
            var browser = __webpack_require__(2592);
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/ConfirmSignInFooter.mjs
            const { getConfirmText: ConfirmSignInFooter_r, getConfirmingText: ConfirmSignInFooter_m, getBackToSignInText: ConfirmSignInFooter_a } = textUtil_n, ConfirmSignInFooter_l = () => { const { isPending: i, toSignIn: l } = useAuthenticator((t => [t.isPending, t.toSignIn])); return react.createElement(Flex_t, { direction: "column" }, react.createElement(Button_u, { isDisabled: i, type: "submit", variation: "primary", fontWeight: "normal", isLoading: i, loadingText: ConfirmSignInFooter_m() }, ConfirmSignInFooter_r()), react.createElement(Button_u, { onClick: l, type: "button", variation: "link", fontWeight: "normal", size: "small" }, ConfirmSignInFooter_a())) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SetupTOTP/SetupTOTP.mjs
            const SetupTOTP_g = new ConsoleLogger/* ConsoleLogger */.k("SetupTOTP-logger"), { getSetupTOTPText: SetupTOTP_h, getCopiedText: SetupTOTP_C, getLoadingText: SetupTOTP_E } = textUtil_n, SetupTOTP_v = ({ className: r, variation: a }) => { var n; const { totpSecretCode: h, isPending: y, user: H, QRFields: w } = useAuthenticator((e => [e.isPending, e.totpSecretCode])), { handleChange: S, handleSubmit: F } = useFormHandlers_a(), { components: { SetupTOTP: { Header: T = SetupTOTP_v.Header, Footer: x = SetupTOTP_v.Footer } } } = useCustomComponents_e(), [j, V] = react.useState(!0), [b, P] = react.useState(), [R, k] = react.useState("COPY"), { totpIssuer: L = "AWSCognito", totpUsername: M = (null == H ? void 0 : H.username) } = null !== (n = w) && void 0 !== n ? n : {}, O = react.useCallback((() => tslib_tslib_es6_awaiter(void 0, void 0, void 0, (function* () { try { const e = utils_f(L, M, h), o = yield browser.toDataURL(e); P(o) } catch (e) { SetupTOTP_g.error(e) } finally { V(!1) } }))), [L, M, h]); react.useEffect((() => { b || O() }), [O, b]); return react.createElement(RouteContainer_n, { className: r, variation: a }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-setup-totp": "", method: "post", onChange: S, onSubmit: F }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: y }, react.createElement(T, null), react.createElement(Flex_t, { direction: "column" }, j ? react.createElement("p", null, SetupTOTP_E(), "â€¦") : react.createElement("img", { "data-amplify-qrcode": !0, src: b, alt: "qr code", width: "228", height: "228" }), react.createElement(Flex_t, { "data-amplify-copy": !0 }, react.createElement("div", null, h), react.createElement(Flex_t, { "data-amplify-copy-svg": !0, onClick: () => { navigator.clipboard.writeText(h), k(SetupTOTP_C()) } }, react.createElement("div", { "data-amplify-copy-tooltip": !0 }, R), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5H8C6.9 5 6.01 5.9 6.01 7L6 21C6 22.1 6.89 23 7.99 23H19C20.1 23 21 22.1 21 21V11L15 5ZM8 21V7H14V12H19V21H8Z" })))), react.createElement(FormFields_m, null), react.createElement(RemoteErrorMessage_m, null)), react.createElement(ConfirmSignInFooter_l, null), react.createElement(x, null)))) }; SetupTOTP_v.Header = function () { return react.createElement(Heading_o, { level: 3 }, SetupTOTP_h()) }, SetupTOTP_v.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js
            function _extends() {
                _extends = Object.assign ? Object.assign.bind() : function (target) {
                    for (var i = 1; i < arguments.length; i++) {
                        var source = arguments[i];
                        for (var key in source) {
                            if (Object.prototype.hasOwnProperty.call(source, key)) {
                                target[key] = source[key];
                            }
                        }
                    }
                    return target;
                };
                return _extends.apply(this, arguments);
            }
            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/primitive/dist/index.module.js
            function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented: checkForDefaultPrevented = true } = {}) {
                return function handleEvent(event) {
                    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
                    if (checkForDefaultPrevented === false || !event.defaultPrevented) return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
                };
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-context/dist/index.module.js



            function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
                const Context = /*#__PURE__*/ $3bkAK$createContext(defaultContext);
                function Provider(props) {
                    const { children: children, ...context } = props; // Only re-memoize when prop values change
                    // eslint-disable-next-line react-hooks/exhaustive-deps
                    const value = $3bkAK$useMemo(() => context
                        , Object.values(context));
                    return /*#__PURE__*/ $3bkAK$createElement(Context.Provider, {
                        value: value
                    }, children);
                }
                function useContext(consumerName) {
                    const context = $3bkAK$useContext(Context);
                    if (context) return context;
                    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.
                    throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
                }
                Provider.displayName = rootComponentName + 'Provider';
                return [
                    Provider,
                    useContext
                ];
            }
    /* -------------------------------------------------------------------------------------------------
     * createContextScope
     * -----------------------------------------------------------------------------------------------*/ function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
                let defaultContexts = [];
        /* -----------------------------------------------------------------------------------------------
       * createContext
       * ---------------------------------------------------------------------------------------------*/ function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
                    const BaseContext = /*#__PURE__*/ (0, react.createContext)(defaultContext);
                    const index = defaultContexts.length;
                    defaultContexts = [
                        ...defaultContexts,
                        defaultContext
                    ];
                    function Provider(props) {
                        const { scope: scope, children: children, ...context } = props;
                        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change
                        // eslint-disable-next-line react-hooks/exhaustive-deps
                        const value = (0, react.useMemo)(() => context
                            , Object.values(context));
                        return /*#__PURE__*/ (0, react.createElement)(Context.Provider, {
                            value: value
                        }, children);
                    }
                    function useContext(consumerName, scope) {
                        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;
                        const context = (0, react.useContext)(Context);
                        if (context) return context;
                        if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.
                        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
                    }
                    Provider.displayName = rootComponentName + 'Provider';
                    return [
                        Provider,
                        useContext
                    ];
                }
        /* -----------------------------------------------------------------------------------------------
       * createScope
       * ---------------------------------------------------------------------------------------------*/ const createScope = () => {
                    const scopeContexts = defaultContexts.map((defaultContext) => {
                        return /*#__PURE__*/ (0, react.createContext)(defaultContext);
                    });
                    return function useScope(scope) {
                        const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
                        return (0, react.useMemo)(() => ({
                            [`__scope${scopeName}`]: {
                                ...scope,
                                [scopeName]: contexts
                            }
                        })
                            , [
                                scope,
                                contexts
                            ]);
                    };
                };
                createScope.scopeName = scopeName;
                return [
                    $c512c27ab02ef895$export$fd42f52fd3ae1109,
                    $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
                ];
            }
    /* -------------------------------------------------------------------------------------------------
     * composeContextScopes
     * -----------------------------------------------------------------------------------------------*/ function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
                const baseScope = scopes[0];
                if (scopes.length === 1) return baseScope;
                const createScope1 = () => {
                    const scopeHooks = scopes.map((createScope) => ({
                        useScope: createScope(),
                        scopeName: createScope.scopeName
                    })
                    );
                    return function useComposedScopes(overrideScopes) {
                        const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope: useScope, scopeName: scopeName }) => {
                            // We are calling a hook inside a callback which React warns against to avoid inconsistent
                            // renders, however, scoping doesn't have render side effects so we ignore the rule.
                            // eslint-disable-next-line react-hooks/rules-of-hooks
                            const scopeProps = useScope(overrideScopes);
                            const currentScope = scopeProps[`__scope${scopeName}`];
                            return {
                                ...nextScopes,
                                ...currentScope
                            };
                        }, {});
                        return (0, react.useMemo)(() => ({
                            [`__scope${baseScope.scopeName}`]: nextScopes1
                        })
                            , [
                                nextScopes1
                            ]);
                    };
                };
                createScope1.scopeName = baseScope.scopeName;
                return createScope1;
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-compose-refs/dist/index.module.js



    /**
     * Set a given ref to a given value
     * This utility takes care of different types of refs: callback refs and RefObject(s)
     */ function $6ed0406888f73fc4$var$setRef(ref, value) {
                if (typeof ref === 'function') ref(value);
                else if (ref !== null && ref !== undefined) ref.current = value;
            }
    /**
     * A utility to compose multiple refs together
     * Accepts callback refs and RefObject(s)
     */ function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
                return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef(ref, node)
                )
                    ;
            }
    /**
     * A custom hook that composes multiple refs
     * Accepts callback refs and RefObject(s)
     */ function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
                // eslint-disable-next-line react-hooks/exhaustive-deps
                return (0, react.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-slot/dist/index.module.js







    /* -------------------------------------------------------------------------------------------------
     * Slot
     * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { children: children, ...slotProps } = props;
                const childrenArray = react.Children.toArray(children);
                const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
                if (slottable) {
                    // the new element to render is the one passed as a child of `Slottable`
                    const newElement = slottable.props.children;
                    const newChildren = childrenArray.map((child) => {
                        if (child === slottable) {
                            // because the new element will be the one rendered, we are only interested
                            // in grabbing its children (`newElement.props.children`)
                            if (react.Children.count(newElement) > 1) return react.Children.only(null);
                            return /*#__PURE__*/ (0, react.isValidElement)(newElement) ? newElement.props.children : null;
                        } else return child;
                    });
                    return /*#__PURE__*/ (0, react.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
                        ref: forwardedRef
                    }), /*#__PURE__*/(0, react.isValidElement)(newElement) ? /*#__PURE__*/ (0, react.cloneElement)(newElement, undefined, newChildren) : null);
                }
                return /*#__PURE__*/ (0, react.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
                    ref: forwardedRef
                }), children);
            });
            $5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';
    /* -------------------------------------------------------------------------------------------------
     * SlotClone
     * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { children: children, ...slotProps } = props;
                if (/*#__PURE__*/ (0, react.isValidElement)(children)) return /*#__PURE__*/ (0, react.cloneElement)(children, {
                    ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
                    ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref)
                });
                return react.Children.count(children) > 1 ? react.Children.only(null) : null;
            });
            $5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';
    /* -------------------------------------------------------------------------------------------------
     * Slottable
     * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children }) => {
                return /*#__PURE__*/ (0, react.createElement)(react.Fragment, null, children);
            };
    /* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {
                return /*#__PURE__*/ (0, react.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
            }
            function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
                // all child props should override
                const overrideProps = {
                    ...childProps
                };
                for (const propName in childProps) {
                    const slotPropValue = slotProps[propName];
                    const childPropValue = childProps[propName];
                    const isHandler = /^on[A-Z]/.test(propName); // if it's a handler, modify the override by composing the base handler
                    if (isHandler) overrideProps[propName] = (...args) => {
                        childPropValue === null || childPropValue === void 0 || childPropValue(...args);
                        slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);
                    };
                    else if (propName === 'style') overrideProps[propName] = {
                        ...slotPropValue,
                        ...childPropValue
                    };
                    else if (propName === 'className') overrideProps[propName] = [
                        slotPropValue,
                        childPropValue
                    ].filter(Boolean).join(' ');
                }
                return {
                    ...slotProps,
                    ...overrideProps
                };
            }
            const $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($5e63c961fc1ce211$export$8c6ed5c666ac1360));





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-collection/dist/index.module.js









            // We have resorted to returning slots directly rather than exposing primitives that can then
            // be slotted like `<CollectionItem as={Slot}>â€¦</CollectionItem>`.
            // This is because we encountered issues with generic types that cannot be statically analysed
            // due to creating them dynamically via createCollection.
            function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
        /* -----------------------------------------------------------------------------------------------
       * CollectionProvider
       * ---------------------------------------------------------------------------------------------*/ const PROVIDER_NAME = name + 'CollectionProvider';
                const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
                const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
                    collectionRef: {
                        current: null
                    },
                    itemMap: new Map()
                });
                const CollectionProvider = (props) => {
                    const { scope: scope, children: children } = props;
                    const ref = react.useRef(null);
                    const itemMap = react.useRef(new Map()).current;
                    return /*#__PURE__*/ react.createElement(CollectionProviderImpl, {
                        scope: scope,
                        itemMap: itemMap,
                        collectionRef: ref
                    }, children);
                };
        /*#__PURE__*/ Object.assign(CollectionProvider, {
                    displayName: PROVIDER_NAME
                });
        /* -----------------------------------------------------------------------------------------------
       * CollectionSlot
       * ---------------------------------------------------------------------------------------------*/ const COLLECTION_SLOT_NAME = name + 'CollectionSlot';
                const CollectionSlot = /*#__PURE__*/ react.forwardRef((props, forwardedRef) => {
                    const { scope: scope, children: children } = props;
                    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
                    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
                    return /*#__PURE__*/ react.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
                        ref: composedRefs
                    }, children);
                });
        /*#__PURE__*/ Object.assign(CollectionSlot, {
                    displayName: COLLECTION_SLOT_NAME
                });
        /* -----------------------------------------------------------------------------------------------
       * CollectionItem
       * ---------------------------------------------------------------------------------------------*/ const ITEM_SLOT_NAME = name + 'CollectionItemSlot';
                const ITEM_DATA_ATTR = 'data-radix-collection-item';
                const CollectionItemSlot = /*#__PURE__*/ react.forwardRef((props, forwardedRef) => {
                    const { scope: scope, children: children, ...itemData } = props;
                    const ref = react.useRef(null);
                    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
                    const context = useCollectionContext(ITEM_SLOT_NAME, scope);
                    react.useEffect(() => {
                        context.itemMap.set(ref, {
                            ref: ref,
                            ...itemData
                        });
                        return () => void context.itemMap.delete(ref)
                            ;
                    });
                    return /*#__PURE__*/ react.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
                        [ITEM_DATA_ATTR]: '',
                        ref: composedRefs
                    }, children);
                });
        /*#__PURE__*/ Object.assign(CollectionItemSlot, {
                    displayName: ITEM_SLOT_NAME
                });
        /* -----------------------------------------------------------------------------------------------
       * useCollection
       * ---------------------------------------------------------------------------------------------*/ function useCollection(scope) {
                    const context = useCollectionContext(name + 'CollectionConsumer', scope);
                    const getItems = react.useCallback(() => {
                        const collectionNode = context.collectionRef.current;
                        if (!collectionNode) return [];
                        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
                        const items = Array.from(context.itemMap.values());
                        const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
                        );
                        return orderedItems;
                    }, [
                        context.collectionRef,
                        context.itemMap
                    ]);
                    return getItems;
                }
                return [
                    {
                        Provider: CollectionProvider,
                        Slot: CollectionSlot,
                        ItemSlot: CollectionItemSlot
                    },
                    useCollection,
                    createCollectionScope
                ];
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js



    /**
     * On the server, React emits a warning when calling `useLayoutEffect`.
     * This is because neither `useLayoutEffect` nor `useEffect` run on the server.
     * We use this safe version which suppresses the warning by replacing it with a noop on the server.
     *
     * See: https://reactjs.org/docs/hooks-reference.html#uselayouteffect
     */ const $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? react.useLayoutEffect : () => { };





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-id/dist/index.module.js





            const $1746a345f3d73bb7$var$useReactId = react_namespaceObject['useId'.toString()] || (() => undefined
            );
            let $1746a345f3d73bb7$var$count = 0;
            function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
                const [id, setId] = react.useState($1746a345f3d73bb7$var$useReactId()); // React versions older than 18 will have client-side ids only.
                $9f79659886946c16$export$e5c5a5f917a5871c(() => {
                    if (!deterministicId) setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++)
                    );
                }, [
                    deterministicId
                ]);
                return deterministicId || (id ? `radix-${id}` : '');
            }





            //# sourceMappingURL=index.module.js.map

            // EXTERNAL MODULE: ./node_modules/react-dom/index.js
            var react_dom = __webpack_require__(3935);
            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-primitive/dist/index.module.js









            const $8927f6f2acc4f386$var$NODES = [
                'a',
                'button',
                'div',
                'h2',
                'h3',
                'img',
                'li',
                'nav',
                'ol',
                'p',
                'span',
                'svg',
                'ul'
            ]; // Temporary while we await merge of this fix:
    // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396
    // prettier-ignore
    /* -------------------------------------------------------------------------------------------------
     * Primitive
     * -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
                const Node = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                    const { asChild: asChild, ...primitiveProps } = props;
                    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
                    (0, react.useEffect)(() => {
                        window[Symbol.for('radix-ui')] = true;
                    }, []);
                    return /*#__PURE__*/ (0, react.createElement)(Comp, _extends({}, primitiveProps, {
                        ref: forwardedRef
                    }));
                });
                Node.displayName = `Primitive.${node}`;
                return {
                    ...primitive,
                    [node]: Node
                };
            }, {});
    /* -------------------------------------------------------------------------------------------------
     * Utils
     * -----------------------------------------------------------------------------------------------*/ /**
     * Flush custom event dispatch
     * https://github.com/radix-ui/primitives/pull/1378
     *
     * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.
     *
     * Internally, React prioritises events in the following order:
     *  - discrete
     *  - continuous
     *  - default
     *
     * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350
     *
     * `discrete` is an  important distinction as updates within these events are applied immediately.
     * React however, is not able to infer the priority of custom event types due to how they are detected internally.
     * Because of this, it's possible for updates from custom events to be unexpectedly batched when
     * dispatched by another `discrete` event.
     *
     * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.
     * This utility should be used when dispatching a custom event from within another `discrete` event, this utility
     * is not nessesary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.
     * For example:
     *
     * dispatching a known click ðŸ‘Ž
     * target.dispatchEvent(new Event(â€˜clickâ€™))
     *
     * dispatching a custom type within a non-discrete event ðŸ‘Ž
     * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(â€˜customTypeâ€™))}
     *
     * dispatching a custom type within a `discrete` event ðŸ‘
     * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(â€˜customTypeâ€™))}
     *
     * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use
     * this utility with them. This is because it's possible for those handlers to be called implicitly during render
     * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.
     */ function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
                if (target) $4q5Fq$flushSync(() => target.dispatchEvent(event)
                );
            }
    /* -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($8927f6f2acc4f386$export$250ffa63cdc0d034));





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js



    /**
     * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a
     * prop or avoid re-executing effects when passed as a dependency
     */ function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
                const callbackRef = (0, react.useRef)(callback);
                (0, react.useEffect)(() => {
                    callbackRef.current = callback;
                }); // https://github.com/facebook/react/issues/19240
                return (0, react.useMemo)(() => (...args) => {
                    var _callbackRef$current;
                    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
                }
                    , []);
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js





            function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop: prop, defaultProp: defaultProp, onChange: onChange = () => { } }) {
                const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
                    defaultProp: defaultProp,
                    onChange: onChange
                });
                const isControlled = prop !== undefined;
                const value1 = isControlled ? prop : uncontrolledProp;
                const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
                const setValue = (0, react.useCallback)((nextValue) => {
                    if (isControlled) {
                        const setter = nextValue;
                        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;
                        if (value !== prop) handleChange(value);
                    } else setUncontrolledProp(nextValue);
                }, [
                    isControlled,
                    prop,
                    setUncontrolledProp,
                    handleChange
                ]);
                return [
                    value1,
                    setValue
                ];
            }
            function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp: defaultProp, onChange: onChange }) {
                const uncontrolledState = (0, react.useState)(defaultProp);
                const [value] = uncontrolledState;
                const prevValueRef = (0, react.useRef)(value);
                const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
                (0, react.useEffect)(() => {
                    if (prevValueRef.current !== value) {
                        handleChange(value);
                        prevValueRef.current = value;
                    }
                }, [
                    value,
                    prevValueRef,
                    handleChange
                ]);
                return uncontrolledState;
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-direction/dist/index.module.js



            const $f631663db3294ace$var$DirectionContext = /*#__PURE__*/ (0, react.createContext)(undefined);
    /* -------------------------------------------------------------------------------------------------
     * Direction
     * -----------------------------------------------------------------------------------------------*/ const $f631663db3294ace$export$c760c09fdd558351 = (props) => {
                const { dir: dir, children: children } = props;
                return /*#__PURE__*/ $7Gjcd$createElement($f631663db3294ace$var$DirectionContext.Provider, {
                    value: dir
                }, children);
            };
    /* -----------------------------------------------------------------------------------------------*/ function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
                const globalDir = (0, react.useContext)($f631663db3294ace$var$DirectionContext);
                return localDir || globalDir || 'ltr';
            }
            const $f631663db3294ace$export$2881499e37b75b9a = (/* unused pure expression or super */ null && ($f631663db3294ace$export$c760c09fdd558351));





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-roving-focus/dist/index.module.js























            const $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = 'rovingFocusGroup.onEntryFocus';
            const $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
                bubbles: false,
                cancelable: true
            };
    /* -------------------------------------------------------------------------------------------------
     * RovingFocusGroup
     * -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$GROUP_NAME = 'RovingFocusGroup';
            const [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME);
            const [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
                $d7bdfb9eb0fdf311$var$createCollectionScope
            ]);
            const [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
            const $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                return /*#__PURE__*/ (0, react.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
                    scope: props.__scopeRovingFocusGroup
                }, /*#__PURE__*/(0, react.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
                    scope: props.__scopeRovingFocusGroup
                }, /*#__PURE__*/(0, react.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
                    ref: forwardedRef
                }))));
            });
    /*#__PURE__*/ Object.assign($d7bdfb9eb0fdf311$export$8699f7c8af148338, {
                displayName: $d7bdfb9eb0fdf311$var$GROUP_NAME
            });
    /* -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { __scopeRovingFocusGroup: __scopeRovingFocusGroup, orientation: orientation, loop: loop = false, dir: dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId: defaultCurrentTabStopId, onCurrentTabStopIdChange: onCurrentTabStopIdChange, onEntryFocus: onEntryFocus, ...groupProps } = props;
                const ref = (0, react.useRef)(null);
                const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
                const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
                const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
                    prop: currentTabStopIdProp,
                    defaultProp: defaultCurrentTabStopId,
                    onChange: onCurrentTabStopIdChange
                });
                const [isTabbingBackOut, setIsTabbingBackOut] = (0, react.useState)(false);
                const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
                const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
                const isClickFocusRef = (0, react.useRef)(false);
                (0, react.useEffect)(() => {
                    const node = ref.current;
                    if (node) {
                        node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
                        return () => node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus)
                            ;
                    }
                }, [
                    handleEntryFocus
                ]);
                return /*#__PURE__*/ (0, react.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
                    scope: __scopeRovingFocusGroup,
                    orientation: orientation,
                    dir: direction,
                    loop: loop,
                    currentTabStopId: currentTabStopId,
                    onItemFocus: (0, react.useCallback)((tabStopId) => setCurrentTabStopId(tabStopId)
                        , [
                            setCurrentTabStopId
                        ]),
                    onItemShiftTab: (0, react.useCallback)(() => setIsTabbingBackOut(true)
                        , [])
                }, /*#__PURE__*/(0, react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
                    tabIndex: isTabbingBackOut ? -1 : 0,
                    "data-orientation": orientation
                }, groupProps, {
                    ref: composedRefs,
                    style: {
                        outline: 'none',
                        ...props.style
                    },
                    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, () => {
                        isClickFocusRef.current = true;
                    }),
                    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, (event) => {
                        // We normally wouldn't need this check, because we already check
                        // that the focus is on the current target and not bubbling to it.
                        // We do this because Safari doesn't focus buttons when clicked, and
                        // instead, the wrapper will get focused and not through a bubbling event.
                        const isKeyboardFocus = !isClickFocusRef.current;
                        if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                            const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
                            event.currentTarget.dispatchEvent(entryFocusEvent);
                            if (!entryFocusEvent.defaultPrevented) {
                                const items = getItems().filter((item) => item.focusable
                                );
                                const activeItem = items.find((item) => item.active
                                );
                                const currentItem = items.find((item) => item.id === currentTabStopId
                                );
                                const candidateItems = [
                                    activeItem,
                                    currentItem,
                                    ...items
                                ].filter(Boolean);
                                const candidateNodes = candidateItems.map((item) => item.ref.current
                                );
                                $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
                            }
                        }
                        isClickFocusRef.current = false;
                    }),
                    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, () => setIsTabbingBackOut(false)
                    )
                })));
            });
    /* -------------------------------------------------------------------------------------------------
     * RovingFocusGroupItem
     * -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$ITEM_NAME = 'RovingFocusGroupItem';
            const $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { __scopeRovingFocusGroup: __scopeRovingFocusGroup, focusable: focusable = true, active: active = false, ...itemProps } = props;
                const id = $1746a345f3d73bb7$export$f680877a34711e37();
                const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
                const isCurrentTabStop = context.currentTabStopId === id;
                const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
                return /*#__PURE__*/ (0, react.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
                    scope: __scopeRovingFocusGroup,
                    id: id,
                    focusable: focusable,
                    active: active
                }, /*#__PURE__*/(0, react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
                    tabIndex: isCurrentTabStop ? 0 : -1,
                    "data-orientation": context.orientation
                }, itemProps, {
                    ref: forwardedRef,
                    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
                        // We prevent focusing non-focusable items on `mousedown`.
                        // Even though the item has tabIndex={-1}, that only means take it out of the tab order.
                        if (!focusable) event.preventDefault(); // Safari doesn't focus a button when clicked so we run our logic on mousedown also
                        else context.onItemFocus(id);
                    }),
                    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => context.onItemFocus(id)
                    ),
                    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
                        if (event.key === 'Tab' && event.shiftKey) {
                            context.onItemShiftTab();
                            return;
                        }
                        if (event.target !== event.currentTarget) return;
                        const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
                        if (focusIntent !== undefined) {
                            event.preventDefault();
                            const items = getItems().filter((item) => item.focusable
                            );
                            let candidateNodes = items.map((item) => item.ref.current
                            );
                            if (focusIntent === 'last') candidateNodes.reverse();
                            else if (focusIntent === 'prev' || focusIntent === 'next') {
                                if (focusIntent === 'prev') candidateNodes.reverse();
                                const currentIndex = candidateNodes.indexOf(event.currentTarget);
                                candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                            }
                    /**
             * Imperative focus during keydown is risky so we prevent React's batching updates
             * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332
             */ setTimeout(() => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes)
                            );
                        }
                    })
                })));
            });
    /*#__PURE__*/ Object.assign($d7bdfb9eb0fdf311$export$ab9df7c53fe8454, {
                displayName: $d7bdfb9eb0fdf311$var$ITEM_NAME
            });
            /* -----------------------------------------------------------------------------------------------*/ // prettier-ignore
            const $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
                ArrowLeft: 'prev',
                ArrowUp: 'prev',
                ArrowRight: 'next',
                ArrowDown: 'next',
                PageUp: 'first',
                Home: 'first',
                PageDown: 'last',
                End: 'last'
            };
            function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
                if (dir !== 'rtl') return key;
                return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;
            }
            function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
                const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
                if (orientation === 'vertical' && [
                    'ArrowLeft',
                    'ArrowRight'
                ].includes(key)) return undefined;
                if (orientation === 'horizontal' && [
                    'ArrowUp',
                    'ArrowDown'
                ].includes(key)) return undefined;
                return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
            }
            function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
                const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
                for (const candidate of candidates) {
                    // if focus is already where we want to go, we don't want to keep going through the candidates
                    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
                    candidate.focus();
                    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
                }
            }
    /**
     * Wraps an array around itself at a given start index
     * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`
     */ function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {
                return array.map((_, index) => array[(startIndex + index) % array.length]
                );
            }
            const $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
            const $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-presence/dist/index.module.js










            function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
                return (0, react.useReducer)((state, event) => {
                    const nextState = machine[state][event];
                    return nextState !== null && nextState !== void 0 ? nextState : state;
                }, initialState);
            }


            const $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
                const { present: present, children: children } = props;
                const presence = $921a889cee6df7e8$var$usePresence(present);
                const child = typeof children === 'function' ? children({
                    present: presence.isPresent
                }) : react.Children.only(children);
                const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
                const forceMount = typeof children === 'function';
                return forceMount || presence.isPresent ? /*#__PURE__*/ (0, react.cloneElement)(child, {
                    ref: ref
                }) : null;
            };
            $921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = 'Presence';
    /* -------------------------------------------------------------------------------------------------
     * usePresence
     * -----------------------------------------------------------------------------------------------*/ function $921a889cee6df7e8$var$usePresence(present) {
                const [node1, setNode] = (0, react.useState)();
                const stylesRef = (0, react.useRef)({});
                const prevPresentRef = (0, react.useRef)(present);
                const prevAnimationNameRef = (0, react.useRef)('none');
                const initialState = present ? 'mounted' : 'unmounted';
                const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
                    mounted: {
                        UNMOUNT: 'unmounted',
                        ANIMATION_OUT: 'unmountSuspended'
                    },
                    unmountSuspended: {
                        MOUNT: 'mounted',
                        ANIMATION_END: 'unmounted'
                    },
                    unmounted: {
                        MOUNT: 'mounted'
                    }
                });
                (0, react.useEffect)(() => {
                    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
                    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';
                }, [
                    state
                ]);
                $9f79659886946c16$export$e5c5a5f917a5871c(() => {
                    const styles = stylesRef.current;
                    const wasPresent = prevPresentRef.current;
                    const hasPresentChanged = wasPresent !== present;
                    if (hasPresentChanged) {
                        const prevAnimationName = prevAnimationNameRef.current;
                        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
                        if (present) send('MOUNT');
                        else if (currentAnimationName === 'none' || (styles === null || styles === void 0 ? void 0 : styles.display) === 'none') // If there is no exit animation or the element is hidden, animations won't run
                            // so we unmount instantly
                            send('UNMOUNT');
                        else {
                    /**
             * When `present` changes to `false`, we check changes to animation-name to
             * determine whether an animation has started. We chose this approach (reading
             * computed styles) because there is no `animationrun` event and `animationstart`
             * fires after `animation-delay` has expired which would be too late.
             */ const isAnimating = prevAnimationName !== currentAnimationName;
                            if (wasPresent && isAnimating) send('ANIMATION_OUT');
                            else send('UNMOUNT');
                        }
                        prevPresentRef.current = present;
                    }
                }, [
                    present,
                    send
                ]);
                $9f79659886946c16$export$e5c5a5f917a5871c(() => {
                    if (node1) {
                /**
           * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`
           * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we
           * make sure we only trigger ANIMATION_END for the currently active animation.
           */ const handleAnimationEnd = (event) => {
                            const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
                            const isCurrentAnimation = currentAnimationName.includes(event.animationName);
                            if (event.target === node1 && isCurrentAnimation) // With React 18 concurrency this update is applied
                                // a frame after the animation ends, creating a flash of visible content.
                                // By manually flushing we ensure they sync within a frame, removing the flash.
                                (0, react_dom.flushSync)(() => send('ANIMATION_END')
                                );
                        };
                        const handleAnimationStart = (event) => {
                            if (event.target === node1) // if animation occurred, store its name as the previous animation.
                                prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
                        };
                        node1.addEventListener('animationstart', handleAnimationStart);
                        node1.addEventListener('animationcancel', handleAnimationEnd);
                        node1.addEventListener('animationend', handleAnimationEnd);
                        return () => {
                            node1.removeEventListener('animationstart', handleAnimationStart);
                            node1.removeEventListener('animationcancel', handleAnimationEnd);
                            node1.removeEventListener('animationend', handleAnimationEnd);
                        };
                    } else // Transition to the unmounted state if the node is removed prematurely.
                        // We avoid doing so during cleanup as the node may change but still exist.
                        send('ANIMATION_END');
                }, [
                    node1,
                    send
                ]);
                return {
                    isPresent: [
                        'mounted',
                        'unmountSuspended'
                    ].includes(state),
                    ref: (0, react.useCallback)((node) => {
                        if (node) stylesRef.current = getComputedStyle(node);
                        setNode(node);
                    }, [])
                };
            }
    /* -----------------------------------------------------------------------------------------------*/ function $921a889cee6df7e8$var$getAnimationName(styles) {
                return (styles === null || styles === void 0 ? void 0 : styles.animationName) || 'none';
            }





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@radix-ui/react-tabs/dist/index.module.js






















    /* -------------------------------------------------------------------------------------------------
     * Tabs
     * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$TABS_NAME = 'Tabs';
            const [$69cb30bb0017df05$var$createTabsContext, $69cb30bb0017df05$export$355f5bd209d7b13a] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($69cb30bb0017df05$var$TABS_NAME, [
                $d7bdfb9eb0fdf311$export$c7109489551a4f4
            ]);
            const $69cb30bb0017df05$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
            const [$69cb30bb0017df05$var$TabsProvider, $69cb30bb0017df05$var$useTabsContext] = $69cb30bb0017df05$var$createTabsContext($69cb30bb0017df05$var$TABS_NAME);
            const $69cb30bb0017df05$export$b2539bed5023c21c = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { __scopeTabs: __scopeTabs, value: valueProp, onValueChange: onValueChange, defaultValue: defaultValue, orientation: orientation = 'horizontal', dir: dir, activationMode: activationMode = 'automatic', ...tabsProps } = props;
                const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
                const [value, setValue] = $71cd76cc60e0454e$export$6f32135080cb4c3({
                    prop: valueProp,
                    onChange: onValueChange,
                    defaultProp: defaultValue
                });
                return /*#__PURE__*/ (0, react.createElement)($69cb30bb0017df05$var$TabsProvider, {
                    scope: __scopeTabs,
                    baseId: $1746a345f3d73bb7$export$f680877a34711e37(),
                    value: value,
                    onValueChange: setValue,
                    orientation: orientation,
                    dir: direction,
                    activationMode: activationMode
                }, /*#__PURE__*/(0, react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
                    dir: direction,
                    "data-orientation": orientation
                }, tabsProps, {
                    ref: forwardedRef
                })));
            });
    /*#__PURE__*/ Object.assign($69cb30bb0017df05$export$b2539bed5023c21c, {
                displayName: $69cb30bb0017df05$var$TABS_NAME
            });
    /* -------------------------------------------------------------------------------------------------
     * TabsList
     * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$TAB_LIST_NAME = 'TabsList';
            const $69cb30bb0017df05$export$9712d22edc0d78c1 = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { __scopeTabs: __scopeTabs, loop: loop = true, ...listProps } = props;
                const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TAB_LIST_NAME, __scopeTabs);
                const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);
                return /*#__PURE__*/ (0, react.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
                    asChild: true
                }, rovingFocusGroupScope, {
                    orientation: context.orientation,
                    dir: context.dir,
                    loop: loop
                }), /*#__PURE__*/(0, react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
                    role: "tablist",
                    "aria-orientation": context.orientation
                }, listProps, {
                    ref: forwardedRef
                })));
            });
    /*#__PURE__*/ Object.assign($69cb30bb0017df05$export$9712d22edc0d78c1, {
                displayName: $69cb30bb0017df05$var$TAB_LIST_NAME
            });
    /* -------------------------------------------------------------------------------------------------
     * TabsTrigger
     * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$TRIGGER_NAME = 'TabsTrigger';
            const $69cb30bb0017df05$export$8114b9fdfdf9f3ba = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { __scopeTabs: __scopeTabs, value: value, disabled: disabled = false, ...triggerProps } = props;
                const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TRIGGER_NAME, __scopeTabs);
                const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);
                const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);
                const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);
                const isSelected = value === context.value;
                return /*#__PURE__*/ (0, react.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
                    asChild: true
                }, rovingFocusGroupScope, {
                    focusable: !disabled,
                    active: isSelected
                }), /*#__PURE__*/(0, react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
                    type: "button",
                    role: "tab",
                    "aria-selected": isSelected,
                    "aria-controls": contentId,
                    "data-state": isSelected ? 'active' : 'inactive',
                    "data-disabled": disabled ? '' : undefined,
                    disabled: disabled,
                    id: triggerId
                }, triggerProps, {
                    ref: forwardedRef,
                    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
                        // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)
                        // but not when the control key is pressed (avoiding MacOS right click)
                        if (!disabled && event.button === 0 && event.ctrlKey === false) context.onValueChange(value);
                        else // prevent focus to avoid accidental activation
                            event.preventDefault();
                    }),
                    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
                        if ([
                            ' ',
                            'Enter'
                        ].includes(event.key)) context.onValueChange(value);
                    }),
                    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => {
                        // handle "automatic" activation if necessary
                        // ie. activate tab following focus
                        const isAutomaticActivation = context.activationMode !== 'manual';
                        if (!isSelected && !disabled && isAutomaticActivation) context.onValueChange(value);
                    })
                })));
            });
    /*#__PURE__*/ Object.assign($69cb30bb0017df05$export$8114b9fdfdf9f3ba, {
                displayName: $69cb30bb0017df05$var$TRIGGER_NAME
            });
    /* -------------------------------------------------------------------------------------------------
     * TabsContent
     * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$CONTENT_NAME = 'TabsContent';
            const $69cb30bb0017df05$export$bd905d70e8fd2ebb = /*#__PURE__*/ (0, react.forwardRef)((props, forwardedRef) => {
                const { __scopeTabs: __scopeTabs, value: value, forceMount: forceMount, children: children, ...contentProps } = props;
                const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$CONTENT_NAME, __scopeTabs);
                const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);
                const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);
                const isSelected = value === context.value;
                const isMountAnimationPreventedRef = (0, react.useRef)(isSelected);
                (0, react.useEffect)(() => {
                    const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false
                    );
                    return () => cancelAnimationFrame(rAF)
                        ;
                }, []);
                return /*#__PURE__*/ (0, react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
                    present: forceMount || isSelected
                }, ({ present: present }) =>/*#__PURE__*/(0, react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
                    "data-state": isSelected ? 'active' : 'inactive',
                    "data-orientation": context.orientation,
                    role: "tabpanel",
                    "aria-labelledby": triggerId,
                    hidden: !present,
                    id: contentId,
                    tabIndex: 0
                }, contentProps, {
                    ref: forwardedRef,
                    style: {
                        ...props.style,
                        animationDuration: isMountAnimationPreventedRef.current ? '0s' : undefined
                    }
                }), present && children)
                );
            });
    /*#__PURE__*/ Object.assign($69cb30bb0017df05$export$bd905d70e8fd2ebb, {
                displayName: $69cb30bb0017df05$var$CONTENT_NAME
            });
    /* ---------------------------------------------------------------------------------------------- */ function $69cb30bb0017df05$var$makeTriggerId(baseId, value) {
                return `${baseId}-trigger-${value}`;
            }
            function $69cb30bb0017df05$var$makeContentId(baseId, value) {
                return `${baseId}-content-${value}`;
            }
            const $69cb30bb0017df05$export$be92b6f5f03c0fe9 = $69cb30bb0017df05$export$b2539bed5023c21c;
            const $69cb30bb0017df05$export$54c2e3dc7acea9f5 = $69cb30bb0017df05$export$9712d22edc0d78c1;
            const $69cb30bb0017df05$export$41fb9f06171c75f4 = $69cb30bb0017df05$export$8114b9fdfdf9f3ba;
            const $69cb30bb0017df05$export$7c6e2c02157bb7d2 = $69cb30bb0017df05$export$bd905d70e8fd2ebb;





            //# sourceMappingURL=index.module.js.map

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/Tabs.mjs
            const { Root: Tabs_o, List: Tabs_m, Trigger: Tabs_c, Content: Tabs_d } = utils_t(react_tabs_dist_index_module_namespaceObject), Tabs_f = e => react.isValidElement(e), Tabs_p = react.forwardRef(((r, i) => { var { ariaLabel: l, children: c, className: p, defaultIndex: u = 0, currentIndex: g, onChange: b, indicatorPosition: h, spacing: x } = r, N = tslib_tslib_es6_rest(r, ["ariaLabel", "children", "className", "defaultIndex", "currentIndex", "onChange", "indicatorPosition", "spacing"]); const C = { defaultValue: u.toString(), value: null != g ? g.toString() : void 0, onValueChange: b }, E = react.Children.toArray(c).filter((e => !!e)); return react.createElement(Tabs_o, Object.assign({}, C), react.createElement(Tabs_m, { "aria-label": l }, react.createElement(Flex_t, Object.assign({ className: classnames(constants_t.Tabs, p), "data-indicator-position": h, ref: i }, N), react.Children.map(E, ((e, a) => { if (Tabs_f(e)) return react.cloneElement(e, { "data-spacing": x, key: a, value: `${a}` }) })))), react.Children.map(E, ((e, a) => { if (Tabs_f(e)) return react.createElement(Tabs_d, { key: a, value: `${a}` }, e.props.children) }))) })), Tabs_u = react.forwardRef(((r, i) => { var { className: s, title: o } = r, m = tslib_tslib_es6_rest(r, ["className", "title"]); return react.createElement(View_s, Object.assign({ as: Tabs_c, className: classnames(constants_t.TabItems, s), ref: i }, m), o) })); Tabs_p.displayName = "Tabs", Tabs_u.displayName = "TabItem";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui/dist/esm/types/authenticator/user.mjs
            var user_o, user_e; !function (o) { o.Apple = "SignInWithApple", o.Amazon = "LoginWithAmazon", o.Facebook = "Facebook", o.Google = "Google" }(user_o || (user_o = {})), function (o) { o.Email = "email", o.PhoneNumber = "phone_number" }(user_e || (user_e = {}));

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Divider/Divider.mjs
            const Divider_o = react.forwardRef(((o, m) => { var { className: l, orientation: n = "horizontal", size: c, label: d } = o, f = tslib_tslib_es6_rest(o, ["className", "orientation", "size", "label"]); const p = classnames(constants_t.Divider, utils_j(constants_t.Divider, n), utils_j(constants_t.Divider, c), d ? constants_t.DividerLabel : null, l); return react.createElement(View_s, Object.assign({ "aria-orientation": n, as: "hr", className: p, "data-size": c, "data-label": d, ref: m }, f)) })); Divider_o.displayName = "Divider";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/Icon.mjs
            const Icon_s = { minX: 0, minY: 0, width: 24, height: 24 }, Icon_r = react.forwardRef(((r, n) => { var { className: o, as: h = "svg", fill: l = "currentColor", pathData: c, viewBox: p = Icon_s, children: f, paths: d } = r, w = tslib_tslib_es6_rest(r, ["className", "as", "fill", "pathData", "viewBox", "children", "paths"]); const g = p.minX ? p.minX : Icon_s.minX, v = p.minY ? p.minY : Icon_s.minY, j = p.width ? p.width : Icon_s.width, x = p.height ? p.height : Icon_s.height; let N; return f && (N = f), d && (N = d.map(((e, a) => react.createElement("path", Object.assign({}, e, { key: a }))))), c && (N = react.createElement("path", { d: c, fill: l })), react.createElement(View_s, Object.assign({ as: h, className: classnames(constants_t.Icon, o), ref: n, viewBox: `${g} ${v} ${j} ${x}` }, w), N) })); Icon_r.displayName = "Icon";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/FederatedSignIn/FederatedSignInButtons/FederatedSignInButton.mjs
            const FederatedSignInButton_n = () => react.createElement("svg", { "aria-label": "Apple icon", className: "amplify-icon federated-sign-in-icon", fill: "#000", preserveAspectRatio: "xMidYMid", stroke: "#000", strokeWidth: "0", viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-105.1-305c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z" })), FederatedSignInButton_r = () => react.createElement("svg", { "aria-label": "Google icon", className: "amplify-icon federated-sign-in-icon", viewBox: "0 0 256 262", xmlns: "http://www.w3.org/2000/svg", preserveAspectRatio: "xMidYMid" }, react.createElement("path", { d: "M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027", fill: "#4285F4" }), react.createElement("path", { d: "M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1", fill: "#34A853" }), react.createElement("path", { d: "M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782", fill: "#FBBC05" }), react.createElement("path", { d: "M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251", fill: "#EB4335" })), FederatedSignInButton_o = () => react.createElement(Icon_r, { className: "federated-sign-in-icon", ariaLabel: "Facebook icon", viewBox: { minX: 0, minY: 0, width: 279, height: 538 }, pathData: "M82.3409742,538 L82.3409742,292.936652 L0,292.936652 L0,196.990154 L82.2410458,196.990154 L82.2410458,126.4295 C82.2410458,44.575144 132.205229,0 205.252865,0 C240.227794,0 270.306232,2.59855099 279,3.79788222 L279,89.2502322 L228.536175,89.2502322 C188.964542,89.2502322 181.270057,108.139699 181.270057,135.824262 L181.270057,196.89021 L276.202006,196.89021 L263.810888,292.836708 L181.16913,292.836708 L181.16913,538 L82.3409742,538 Z", fill: "#1877F2" }), FederatedSignInButton_c = () => react.createElement("svg", { "aria-label": "Amazon icon", className: "amplify-icon federated-sign-in-icon", viewBox: "0 0 243 264", xmlns: "http://www.w3.org/2000/svg", preserveAspectRatio: "xMidYMid" }, react.createElement("path", { d: "M230.826 208.039C227.468 203.683 208.551 205.982 200.056 206.998C197.471 207.321 197.076 205.042 199.407 203.405C214.475 192.665 239.201 195.766 242.082 199.364C244.966 202.982 241.337 228.071 227.173 240.049C225.001 241.888 222.93 240.904 223.898 238.468C227.077 230.431 234.205 212.419 230.826 208.039ZM123.769 264C71.0234 264 39.0764 241.955 14.7853 217.542C9.97339 212.706 3.71799 206.296 0.311513 200.691C-1.09773 198.372 2.59096 195.022 5.04421 196.844C35.239 219.268 79.1012 239.538 122.53 239.538C151.82 239.538 188.046 227.47 217.669 214.868C222.147 212.966 222.147 219.18 221.512 221.061C221.183 222.032 206.515 236.221 186.247 247.047C167.304 257.166 143.397 264 123.769 264Z", fill: "#F2541B" }), react.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M142.943 111.185C142.943 124.756 143.268 136.054 136.406 148.123C130.856 157.913 122.027 163.95 112.222 163.95C98.8288 163.95 90.9806 153.772 90.9806 138.693C90.9806 109.036 117.677 103.647 142.943 103.647V111.185ZM178.166 196.081C175.858 198.15 171.635 198.22 169.914 196.894C157.974 187.684 149.89 173.688 149.89 173.688C130.706 193.156 117.127 199 92.2879 199C62.8772 199 40 180.905 40 144.729C40 116.461 55.3552 97.2408 77.2563 87.823C96.2094 79.5256 122.684 78.0173 142.943 75.7517C142.943 75.7517 144.633 53.933 138.699 45.9806C134.098 39.8163 126.272 36.9329 119.089 36.9329C106.127 36.8829 93.61 43.9051 91.1262 57.4188C90.4136 61.2829 87.5533 64.5261 84.54 64.206L51.0823 60.5922C48.5156 60.2951 45.0381 57.6639 45.8636 53.3081C53.644 12.3684 90.7373 0 123.989 0C140.983 0 163.21 4.51651 176.608 17.3349C193.597 33.1648 191.969 54.2755 191.969 77.2722V131.51C191.969 147.835 198.768 154.987 205.151 163.775C207.376 166.953 207.886 170.714 205.04 173.032C197.902 178.999 178.166 196.081 178.166 196.081Z", fill: "#F2541B" })), FederatedSignInButton_m = l => { const { icon: m, provider: s, text: p } = l, { toFederatedSignIn: C } = useAuthenticator(); let d; return "facebook" === m ? d = react.createElement(FederatedSignInButton_o, null) : "google" === m ? d = react.createElement(FederatedSignInButton_r, null) : "amazon" === m ? d = react.createElement(FederatedSignInButton_c, null) : "apple" === m && (d = react.createElement(FederatedSignInButton_n, null)), react.createElement(Button_u, { onClick: e => { e.preventDefault(), C({ provider: s }) }, className: "federated-sign-in-button", fontWeight: "normal", gap: "1rem" }, d, react.createElement(Text_o, { as: "span" }, p)) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/FederatedSignIn/FederatedSignIn.mjs
            const { getSignInWithFederationText: FederatedSignIn_m, getOrText: FederatedSignIn_s } = textUtil_n; function FederatedSignIn_c() { const { route: o, socialProviders: c } = useAuthenticator((({ route: e, socialProviders: t }) => [e, t])); return 0 === c.length ? null : react.createElement(Flex_t, { direction: "column", padding: "0 0 1rem 0", className: "federated-sign-in-container" }, c.map((r => { switch (r) { case "amazon": return react.createElement(FederatedSignInButton_m, { icon: "amazon", key: r, provider: user_o.Amazon, text: FederatedSignIn_m(o, r) }); case "apple": return react.createElement(FederatedSignInButton_m, { icon: "apple", key: r, provider: user_o.Apple, text: FederatedSignIn_m(o, r) }); case "facebook": return react.createElement(FederatedSignInButton_m, { icon: "facebook", key: r, provider: user_o.Facebook, text: FederatedSignIn_m(o, r) }); case "google": return react.createElement(FederatedSignInButton_m, { icon: "google", key: r, provider: user_o.Google, text: FederatedSignIn_m(o, r) }); default: console.error(`Authenticator does not support ${r}. Please open an issue: https://github.com/aws-amplify/amplify-ui/issues/choose`) } })), react.createElement(Divider_o, { size: "small", label: FederatedSignIn_s() })) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SignIn/SignIn.mjs
            const { getSignInText: SignIn_c, getSigningInText: SignIn_p, getForgotPasswordText: SignIn_f } = textUtil_n; function SignIn_g() { const { isPending: t } = useAuthenticator((e => [e.isPending])), { handleChange: f, handleSubmit: E } = useFormHandlers_a(), { components: { SignIn: { Header: F = SignIn_g.Header, Footer: h = SignIn_g.Footer } } } = useCustomComponents_e(); return react.createElement(View_s, null, react.createElement(F, null), react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-signin": "", method: "post", onSubmit: E, onChange: f }, react.createElement(FederatedSignIn_c, null), react.createElement(Flex_t, { direction: "column" }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: t }, react.createElement(VisuallyHidden_i, null, react.createElement("legend", null, SignIn_c())), react.createElement(FormFields_m, null)), react.createElement(RemoteErrorMessage_m, null), react.createElement(Button_u, { isDisabled: t, isFullWidth: !0, type: "submit", variation: "primary", isLoading: t, loadingText: SignIn_p() }, SignIn_c()))), react.createElement(h, null)) } SignIn_g.Footer = () => { const { toResetPassword: t } = useAuthenticator((e => [e.toResetPassword])); return react.createElement(View_s, { "data-amplify-footer": "" }, react.createElement(Button_u, { fontWeight: "normal", onClick: t, size: "small", variation: "link" }, SignIn_f())) }, SignIn_g.Header = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SignUp/SignUp.mjs
            const { getCreateAccountText: SignUp_d, getCreatingAccountText: SignUp_c } = textUtil_n; function SignUp_p() { const { hasValidationErrors: t, isPending: u } = useAuthenticator((e => [e.hasValidationErrors, e.isPending])), { handleChange: f, handleBlur: F, handleSubmit: g } = useFormHandlers_a(), { components: { SignUp: { Header: h = SignUp_p.Header, FormFields: E = SignUp_p.FormFields, Footer: j = SignUp_p.Footer } } } = useCustomComponents_e(); return react.createElement(View_s, null, react.createElement(h, null), react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-signup": "", method: "post", onChange: f, onSubmit: g, onBlur: F }, react.createElement(FederatedSignIn_c, null), react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: u }, react.createElement(Flex_t, { direction: "column" }, react.createElement(E, null), react.createElement(RemoteErrorMessage_m, null)), react.createElement(Button_u, { isDisabled: t || u, isFullWidth: !0, type: "submit", variation: "primary", isLoading: u, loadingText: SignUp_c() }, SignUp_d()))), react.createElement(j, null)) } SignUp_p.Header = function () { return null }, SignUp_p.FormFields = function () { return react.createElement(FormFields_m, null) }, SignUp_p.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/SignInSignUpTabs.mjs
            const { getSignInTabText: SignInSignUpTabs_p, getSignUpTabText: SignInSignUpTabs_s } = textUtil_n, SignInSignUpTabs_c = ({ className: t, hideSignUp: c, variation: g }) => { const { route: u, toSignIn: f, toSignUp: S } = useAuthenticator((e => [e.route, e.toSignIn, e.toSignUp])); return react.createElement(RouteContainer_n, { className: t, variation: g }, c ? react.createElement(View_s, { "data-amplify-router-content": "" }, "signIn" === u && react.createElement(SignIn_g, null)) : react.createElement(Tabs_p, { indicatorPosition: "top", currentIndex: "signIn" === u ? 0 : 1, spacing: "equal", justifyContent: "center", onChange: () => "signIn" === u ? S() : f() }, react.createElement(Tabs_u, { title: SignInSignUpTabs_p() }, react.createElement(View_s, { "data-amplify-router-content": "" }, "signIn" === u && react.createElement(SignIn_g, null))), react.createElement(Tabs_u, { title: SignInSignUpTabs_s() }, react.createElement(View_s, { "data-amplify-router-content": "" }, "signUp" === u && react.createElement(SignUp_p, null))))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/TwoButtonSubmitFooter.mjs
            const { getSubmitText: TwoButtonSubmitFooter_a, getSubmittingText: TwoButtonSubmitFooter_m } = textUtil_n, TwoButtonSubmitFooter_o = t => { const { cancelButtonSendType: o, cancelButtonText: l, submitButtonText: c } = t, { isPending: s, resendCode: u, skipVerification: p, toSignIn: f } = useAuthenticator((e => [e.isPending])), g = s ? react.createElement(react.Fragment, null, TwoButtonSubmitFooter_m(), "â€¦") : react.createElement(react.Fragment, null, TwoButtonSubmitFooter_a()), b = null != c ? c : g; return react.createElement(Flex_t, { direction: "column" }, react.createElement(Button_u, { fontWeight: "normal", variation: "primary", isDisabled: s, type: "submit" }, b), react.createElement(Button_u, { onClick: () => { switch (o) { case "SKIP": p(); break; case "RESEND": u(); break; case "SIGN_IN": f(); break; default: return } }, type: "button", variation: "link", fontWeight: "normal", size: "small" }, l)) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/VerifyUser/ConfirmVerifyUser.mjs
            const { getAccountRecoveryInfoText: ConfirmVerifyUser_u, getSkipText: ConfirmVerifyUser_f } = textUtil_n, ConfirmVerifyUser_p = ({ className: t, variation: r }) => { const { isPending: u } = useAuthenticator((e => [e.isPending])), { handleChange: d, handleSubmit: h } = useFormHandlers_a(), { components: { ConfirmVerifyUser: { Header: E = ConfirmVerifyUser_p.Header, Footer: F = ConfirmVerifyUser_p.Footer } } } = useCustomComponents_e(); return react.createElement(RouteContainer_n, { className: t, variation: r }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-confirmverifyuser": "", method: "post", onChange: d, onSubmit: h }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: u }, react.createElement(E, null), react.createElement(Flex_t, { direction: "column" }, react.createElement(FormFields_m, null)), react.createElement(RemoteErrorMessage_m, null), react.createElement(TwoButtonSubmitFooter_o, { cancelButtonText: ConfirmVerifyUser_f(), cancelButtonSendType: "SKIP" }), react.createElement(F, null)))) }; ConfirmVerifyUser_p.Header = function () { return react.createElement(Heading_o, { level: 3 }, ConfirmVerifyUser_u()) }, ConfirmVerifyUser_p.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/RadioGroupField/context.mjs
            const context_o = react.createContext({ name: "default" }), context_r = () => (0, react.useContext)(context_o);

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Radio/Radio.mjs
            const Radio_p = (p, c) => { var { children: h, className: u, id: b, isDisabled: f, testId: R, value: g, labelPosition: v, height: j, width: N, bottom: x, left: y, position: E, padding: F, right: I, top: w } = p, D = tslib_tslib_es6_rest(p, ["children", "className", "id", "isDisabled", "testId", "value", "labelPosition", "height", "width", "bottom", "left", "position", "padding", "right", "top"]); const { currentValue: C, defaultValue: O, name: P, hasError: V, isGroupDisabled: k, isRequired: q, isReadOnly: z, onChange: B, size: G, labelPosition: T } = context_r(), { isFieldsetDisabled: H } = useFieldset_o(), L = H || (k || f || z && O !== g), A = void 0 !== C ? g === C : void 0, J = void 0 !== O ? g === O : void 0, K = v || T; return react.createElement(Flex_t, { as: "label", className: classnames(constants_t.Radio, utils_g(constants_t.Radio, "disabled", L), u), "data-disabled": L, "data-label-position": K, height: j, width: N, bottom: x, top: w, right: I, left: y, position: E, padding: F }, h && react.createElement(Text_o, { as: "span", className: constants_t.RadioLabel, "data-disabled": L }, h), react.createElement(Input_o, Object.assign({ checked: A, className: classnames(constants_t.VisuallyHidden, constants_t.RadioInput), defaultChecked: J, hasError: V, id: b, isDisabled: L, isReadOnly: z, isRequired: q, onChange: B, ref: c, type: "radio", name: P, value: g }, D)), react.createElement(Flex_t, { "aria-hidden": "true", as: "span", className: classnames(constants_t.RadioButton, utils_j(constants_t.RadioButton, G)), "data-size": G, testId: R })) }, Radio_c = react.forwardRef(Radio_p); Radio_c.displayName = "Radio";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/getTestId.mjs
            const getTestId_o = (o, t) => o && t ? `${o}-${t}` : void 0;

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/RadioGroupField/RadioGroupField.mjs
            const RadioGroupField_c = react.forwardRef(((c, f) => { var { children: b, className: F, defaultValue: j, descriptiveText: E, errorMessage: g, hasError: h = !1, id: R, isDisabled: v, isRequired: y, isReadOnly: x, label: H, labelHidden: I = !1, labelPosition: V, onChange: G, name: M, size: N, testId: z, value: C } = c, D = tslib_tslib_es6_rest(c, ["children", "className", "defaultValue", "descriptiveText", "errorMessage", "hasError", "id", "isDisabled", "isRequired", "isReadOnly", "label", "labelHidden", "labelPosition", "onChange", "name", "size", "testId", "value"]); const O = useStableId_s(R), P = useStableId_s(), T = E ? P : void 0, q = getTestId_o(z, constants_t.RadioGroup), w = react.useMemo((() => ({ currentValue: C, defaultValue: j, hasError: h, isRequired: y, isReadOnly: x, isGroupDisabled: v, onChange: G, size: N, name: M, labelPosition: V })), [j, h, v, y, x, G, N, M, C, V]); return react.createElement(Flex_t, Object.assign({ as: "fieldset", className: classnames(constants_t.Field, utils_j(constants_t.Field, N), constants_t.RadioGroupField, F), "data-size": N, ref: f, role: "radiogroup", testId: z }, D), react.createElement(VisuallyHidden_i, { as: "legend" }, H), react.createElement(Label_i, { "aria-hidden": !0, visuallyHidden: I }, H), react.createElement(FieldDescription_d, { id: P, labelHidden: I, descriptiveText: E }), react.createElement(Flex_t, { "aria-describedby": T, className: constants_t.RadioGroup, id: O, testId: q }, react.createElement(context_o.Provider, { value: w }, b)), react.createElement(FieldErrorMessage_o, { hasError: h, errorMessage: g })) })); RadioGroupField_c.displayName = "RadioGroupField";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/VerifyUser/VerifyUser.mjs
            const { getSkipText: VerifyUser_v, getVerifyText: VerifyUser_E, getVerifyContactText: VerifyUser_h, getAccountRecoveryInfoText: VerifyUser_y } = textUtil_n, VerifyUser_F = t => Object.entries(t).map((([t, m]) => react.createElement(Radio_c, { name: "unverifiedAttr", value: t, key: t }, ((e, t) => { const r = translations_v(e); let m = t; if ("Phone Number" === e) m = utils_u(t); else if ("Email" === e) { const e = t.split("@"); m = `${utils_l(e[0])}@${e[1]}` } return `${r}: ${m}` })(constants_a[t].label, m)))), VerifyUser_b = ({ className: t, variation: r }) => { const { components: { VerifyUser: { Header: o = VerifyUser_b.Header, Footer: n = VerifyUser_b.Footer } } } = useCustomComponents_e(), { isPending: i, unverifiedContactMethods: a } = useAuthenticator((({ isPending: e, unverifiedContactMethods: t }) => [e, t])), { handleChange: l, handleSubmit: y } = useFormHandlers_a(), C = i ? react.createElement(react.Fragment, null, "Verifyingâ€¦") : react.createElement(react.Fragment, null, VerifyUser_E()), j = react.createElement(RadioGroupField_c, { label: VerifyUser_h(), labelHidden: !0, name: "verify_context", isDisabled: i }, VerifyUser_F(a)); return react.createElement(RouteContainer_n, { className: t, variation: r }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-verifyuser": "", method: "post", onChange: l, onSubmit: y }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: i }, react.createElement(o, null), j, react.createElement(RemoteErrorMessage_m, null), react.createElement(TwoButtonSubmitFooter_o, { cancelButtonText: VerifyUser_v(), cancelButtonSendType: "SKIP", submitButtonText: C }), react.createElement(n, null)))) }; VerifyUser_b.Header = function () { return react.createElement(Heading_o, { level: 3 }, VerifyUser_y()) }, VerifyUser_b.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ConfirmSignIn/ConfirmSignIn.mjs
            const { getChallengeText: ConfirmSignIn_u } = textUtil_n, ConfirmSignIn_f = ({ className: r, variation: t }) => { const { isPending: u } = useAuthenticator((e => [e.isPending])), { handleChange: d, handleSubmit: p } = useFormHandlers_a(), { components: { ConfirmSignIn: { Header: g = ConfirmSignIn_f.Header, Footer: h = ConfirmSignIn_f.Footer } } } = useCustomComponents_e(); return react.createElement(RouteContainer_n, { className: r, variation: t }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-confirmsignin": "", method: "post", onChange: d, onSubmit: p }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: u }, react.createElement(g, null), react.createElement(Flex_t, { direction: "column" }, react.createElement(FormFields_m, null), react.createElement(RemoteErrorMessage_m, null)), react.createElement(ConfirmSignInFooter_l, null), react.createElement(h, null)))) }; ConfirmSignIn_f.Header = function () { const { user: { challengeName: r } } = useAuthenticator((({ user: e }) => [e])); return react.createElement(Heading_o, { level: 3 }, ConfirmSignIn_u(r)) }, ConfirmSignIn_f.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ResetPassword/ConfirmResetPassword.mjs
            const { getResendCodeText: ConfirmResetPassword_c, getResetYourPasswordText: ConfirmResetPassword_d } = textUtil_n, ConfirmResetPassword_p = ({ className: t, variation: r }) => { const { isPending: d } = useAuthenticator((e => [e.isPending])), { handleBlur: f, handleChange: E, handleSubmit: h } = useFormHandlers_a(), { components: { ConfirmResetPassword: { Header: C = ConfirmResetPassword_p.Header, Footer: F = ConfirmResetPassword_p.Footer } } } = useCustomComponents_e(); return react.createElement(RouteContainer_n, { className: t, variation: r }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-confirmresetpassword": "", method: "post", onSubmit: h, onChange: E, onBlur: f }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: d }, react.createElement(C, null), react.createElement(Flex_t, { direction: "column" }, react.createElement(FormFields_m, null)), react.createElement(RemoteErrorMessage_m, null), react.createElement(TwoButtonSubmitFooter_o, { cancelButtonSendType: "RESEND", cancelButtonText: ConfirmResetPassword_c() }), react.createElement(F, null)))) }; ConfirmResetPassword_p.Header = function () { const t = ConfirmResetPassword_d(); return react.createElement(Heading_o, { level: 3 }, t) }, ConfirmResetPassword_p.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ResetPassword/ResetPassword.mjs
            const { getBackToSignInText: ResetPassword_c, getSendingText: ResetPassword_d, getSendCodeText: ResetPassword_p, getResetYourPasswordText: ResetPassword_f } = textUtil_n, ResetPassword_g = ({ className: t, variation: r }) => { const { isPending: f } = useAuthenticator((e => [e.isPending])), { handleChange: E, handleSubmit: F } = useFormHandlers_a(), { components: { ResetPassword: { Header: h = ResetPassword_g.Header, Footer: x = ResetPassword_g.Footer } } } = useCustomComponents_e(); return react.createElement(RouteContainer_n, { className: t, variation: r }, react.createElement("form", { "data-amplify-form": "", "data-amplify-authenticator-resetpassword": "", method: "post", onChange: E, onSubmit: F }, react.createElement(Flex_t, { as: "fieldset", direction: "column", isDisabled: f }, react.createElement(h, null), react.createElement(Flex_t, { direction: "column" }, react.createElement(FormFields_m, null)), react.createElement(RemoteErrorMessage_m, null), react.createElement(TwoButtonSubmitFooter_o, { cancelButtonText: ResetPassword_c(), cancelButtonSendType: "SIGN_IN", submitButtonText: f ? react.createElement(react.Fragment, null, ResetPassword_d(), "â€¦") : react.createElement(react.Fragment, null, ResetPassword_p()) }), react.createElement(x, null)))) }; ResetPassword_g.Header = function () { return react.createElement(Heading_o, { level: 3 }, ResetPassword_f()) }, ResetPassword_g.Footer = function () { return null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/utils.mjs
            const Authenticator_utils_n = n => "signIn" === n || "signUp" === n;

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/Router/Router.mjs
            function Router_d() { return null } function Router_l({ className: l, hideSignUp: w, variation: j }) { const { route: U } = useAuthenticator((({ route: r }) => [r])), g = (0, react.useMemo)((() => (r => { switch (r) { case "authenticated": case "idle": case "setup": case "transition": return Router_d; case "confirmSignUp": return ConfirmSignUp_h; case "confirmSignIn": return ConfirmSignIn_f; case "setupTOTP": return SetupTOTP_v; case "signIn": case "signUp": return SignInSignUpTabs_c; case "forceNewPassword": return ForceNewPassword_f; case "resetPassword": return ResetPassword_g; case "confirmResetPassword": return ConfirmResetPassword_p; case "verifyUser": return VerifyUser_b; case "confirmVerifyUser": return ConfirmVerifyUser_p; default: return console.warn(`Unhandled Authenticator route - please open an issue: ${r}`), Router_d } })(U)), [U]); return react.createElement(g, { className: l, hideSignUp: Authenticator_utils_n(U) ? w : void 0, variation: j }) }

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useCustomComponents/defaultComponents.mjs
            const defaultComponents_a = { Header: () => null, SignIn: { Header: SignIn_g.Header, Footer: SignIn_g.Footer }, SignUp: { Header: SignUp_p.Header, FormFields: SignUp_p.FormFields, Footer: SignUp_p.Footer }, ConfirmSignUp: { Header: ConfirmSignUp_h.Header, Footer: ConfirmSignUp_h.Footer }, SetupTOTP: { Header: SetupTOTP_v.Header, Footer: SetupTOTP_v.Footer }, ConfirmResetPassword: { Header: ConfirmResetPassword_p.Header, Footer: ConfirmResetPassword_p.Footer }, ConfirmSignIn: { Header: ConfirmSignIn_f.Header, Footer: ConfirmSignIn_f.Footer }, VerifyUser: { Header: VerifyUser_b.Header, Footer: VerifyUser_b.Footer }, ConfirmVerifyUser: { Header: ConfirmVerifyUser_p.Header, Footer: ConfirmVerifyUser_p.Footer }, ForceNewPassword: { Header: ForceNewPassword_f.Header, Footer: ForceNewPassword_f.Footer, FormFields: ForceNewPassword_f.FormFields }, ResetPassword: { Header: ResetPassword_g.Header, Footer: ResetPassword_g.Footer }, Footer: () => null };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/Authenticator.mjs
            function Authenticator_w({ children: s, className: r, components: m, formFields: u, hideSignUp: c, initialState: l, loginMechanisms: f, passwordSettings: d, signUpAttributes: w, services: j, socialProviders: P, variation: S }) { useDeprecationWarning_s({ message: "The `passwordSettings` prop has been deprecated and will be removed in a future major version of Amplify UI.", shouldWarn: !!d }); const { route: v, signOut: h, user: O } = useAuthenticator((({ route: e, signOut: s, user: o }) => [e, s, o])); useAuthenticatorInitMachine({ initialState: l, loginMechanisms: f, services: j, signUpAttributes: w, socialProviders: P, formFields: u }); const C = react.useMemo((() => ({ components: Object.assign(Object.assign({}, defaultComponents_a), m) })), [m]); return "authenticated" === v || "signOut" === v ? s ? react.createElement(react.Fragment, null, utils_b(s) ? s({ signOut: h, user: O }) : s) : null : react.createElement(useCustomComponents_t.Provider, { value: C }, react.createElement(Router_l, { className: r, hideSignUp: c, variation: S })) } function Authenticator_j(o) { return react.useEffect((() => { utils_c({ packageName: "@aws-amplify/ui-react", version: version_o }) }), []), react.createElement(AuthenticatorProvider, null, react.createElement(Authenticator_w, Object.assign({}, o))) } Authenticator_j.Provider = AuthenticatorProvider, Authenticator_j.ResetPassword = ResetPassword_g, Authenticator_j.SetupTOTP = SetupTOTP_v, Authenticator_j.SignIn = SignIn_g, Authenticator_j.SignUp = SignUp_p, Authenticator_j.ForceNewPassword = ForceNewPassword_f;

            // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules
            var slicedToArray = __webpack_require__(885);
            ;// CONCATENATED MODULE: ./src/form/utils/handlers.ts
            var clearAndNavigateToAmplifyView = function clearAndNavigateToAmplifyView(clearCb, cb) {
                clearCb();
                cb();
            };
            ;// CONCATENATED MODULE: ./src/form/utils/constants.ts
    /* harmony default export */ const constants = ({
                error: {
                    register: {
                        info: "It looks like there's already an app or MSE Credit Club account using this email. Log in using either account details or reset your password if you've forgotten it.",
                        header: 'Registration error',
                        action: "Ok, I'll login",
                        secondaryAction: 'Forgot your password?'
                    }
                },
                info: {
                    confirmPassword: {
                        description: 'A code has been sent to',
                        header: 'Reset your password',
                        info: 'Just enter the code and create a new password.'
                    },
                    register: {
                        header: "You're nearly there, let's check your email",
                        description: 'Please pop over to your email inbox',
                        info: "We've sent a verification code - check your spam or junk folder if you can't find it."
                    },
                    resetPassword: {
                        header: 'Oops... you forgot your password',
                        info: "It happens to the best of us... but don't worry. We'll send instructions to reset it to the email address linked to your account."
                    }
                },
                success: {
                    resendCode: 'âœ“ New code sent',
                    resetPassword: {
                        header: 'Your password has been changed. Try logging in now.',
                        action: 'Ok'
                    },
                    signup: {
                        header: 'Thanks for verifying your account!',
                        action: 'Continue to your account'
                    },
                    signupSaveArticle: {
                        header: 'Thanks for verifying your account!',
                        description: 'This article is saved in your brand new MSE account!',
                        action: 'Ok, got it',
                        actionSecondary: 'Manage your articles'
                    }
                },
                fields: {
                    signup: {
                        acknowledgement: "I accept MoneySavingExpert's",
                        terms: 'Terms & Conditions',
                        policy: 'Privacy Policy',
                        and: 'and'
                    },
                    confirmSignUp: {
                        resendCode: 'Resend code'
                    }
                },
                actions: {
                    back: 'Back',
                    login: 'Log in',
                    signup: 'Create an account',
                    signout: 'Sign out'
                }
            });
            // EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
            var jsx_runtime = __webpack_require__(5893);
            ;// CONCATENATED MODULE: ./src/form/components/shared/AmplifyTabs/AmplifyTabs.tsx





            var AmplifyTabs = function AmplifyTabs(_ref) {
                var activeTabIndex = _ref.activeTabIndex,
                    _ref$disableTabs = _ref.disableTabs,
                    disableTabs = _ref$disableTabs === void 0 ? false : _ref$disableTabs;
                var _useAuthenticator = useAuthenticator(),
                    toSignUp = _useAuthenticator.toSignUp,
                    toSignIn = _useAuthenticator.toSignIn;
                return /*#__PURE__*/(0, jsx_runtime.jsxs)("div", {
                    className: "amplify-flex amplify-tabs",
                    "data-indicator-position": "top",
                    style: {
                        justifyContent: 'center'
                    },
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)("button", {
                        type: "button",
                        role: "tab",
                        "aria-selected": "false",
                        "data-state": activeTabIndex === 0 ? 'active' : 'inactive',
                        className: "amplify-tabs-item",
                        "data-spacing": "equal",
                        "data-orientation": "horizontal",
                        "data-radix-collection-item": "",
                        onClick: toSignIn,
                        disabled: disableTabs,
                        children: constants.actions.login
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("button", {
                        type: "button",
                        role: "tab",
                        "aria-selected": "true",
                        "data-state": activeTabIndex === 1 ? 'active' : 'inactive',
                        className: "amplify-tabs-item",
                        "data-spacing": "equal",
                        "data-orientation": "horizontal",
                        "data-radix-collection-item": "",
                        onClick: function onClick() {
                            clearAndNavigateToAmplifyView(toSignIn, toSignUp);
                        },
                        disabled: disableTabs,
                        children: constants.actions.signup
                    })]
                });
            };
    /* harmony default export */ const AmplifyTabs_AmplifyTabs = (AmplifyTabs);
            ;// CONCATENATED MODULE: ./src/form/components/shared/AmplifyLayout/AmplifyLayout.tsx




            var AmplifyLayout = function AmplifyLayout(_ref) {
                var children = _ref.children,
                    showTabs = _ref.showTabs,
                    activeTabIndex = _ref.activeTabIndex,
                    _ref$disableTabs = _ref.disableTabs,
                    disableTabs = _ref$disableTabs === void 0 ? false : _ref$disableTabs;
                return /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                    "data-amplify-authenticator": "",
                    "data-variation": "default",
                    children: /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        "data-amplify-container": "",
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                            "data-amplify-router": "",
                            children: /*#__PURE__*/(0, jsx_runtime.jsx)("form", {
                                "data-amplify-form": "",
                                "data-amplify-authenticator-custom": true,
                                method: "post",
                                children: /*#__PURE__*/(0, jsx_runtime.jsxs)("fieldset", {
                                    className: "amplify-flex",
                                    children: [showTabs && /*#__PURE__*/(0, jsx_runtime.jsx)(AmplifyTabs_AmplifyTabs, {
                                        activeTabIndex: activeTabIndex,
                                        disableTabs: disableTabs
                                    }), children]
                                })
                            })
                        })
                    })
                });
            };
    /* harmony default export */ const AmplifyLayout_AmplifyLayout = (AmplifyLayout);
            ;// CONCATENATED MODULE: ./src/form/components/shared/ConfirmComponent/ConfirmComponent.tsx




            var ConfirmComponent = function ConfirmComponent(_ref) {
                var title = _ref.title,
                    buttonText = _ref.buttonText,
                    handleClick = _ref.handleClick,
                    activeTabIndex = _ref.activeTabIndex,
                    description = _ref.description,
                    buttonTextSecondary = _ref.buttonTextSecondary,
                    handleClickSecondary = _ref.handleClickSecondary,
                    _ref$icon = _ref.icon,
                    icon = _ref$icon === void 0 ? 'success' : _ref$icon,
                    _ref$disableTabs = _ref.disableTabs,
                    disableTabs = _ref$disableTabs === void 0 ? false : _ref$disableTabs;
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(AmplifyLayout_AmplifyLayout, {
                    showTabs: true,
                    activeTabIndex: activeTabIndex,
                    disableTabs: disableTabs,
                    children: [/*#__PURE__*/(0, jsx_runtime.jsxs)("div", {
                        className: "header-container",
                        children: [/*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                            className: "header-container__icon ".concat(icon)
                        }), /*#__PURE__*/(0, jsx_runtime.jsx)("h3", {
                            className: "amplify-header",
                            children: /*#__PURE__*/(0, jsx_runtime.jsx)("span", {
                                className: "amplify-header__center",
                                children: title
                            })
                        })]
                    }), description && /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            children: description
                        })
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)(Button_u, {
                            variation: "primary",
                            onClick: handleClick,
                            isFullWidth: true,
                            children: buttonText
                        })
                    }), buttonTextSecondary && handleClickSecondary && /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)(Button_u, {
                            variation: "link",
                            onClick: handleClickSecondary,
                            isFullWidth: true,
                            children: buttonTextSecondary
                        })
                    })]
                });
            };
    /* harmony default export */ const ConfirmComponent_ConfirmComponent = (ConfirmComponent);
            // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
            var defineProperty = __webpack_require__(4942);
            // EXTERNAL MODULE: ./src/shared/BehaviorSubject.ts
            var BehaviorSubject = __webpack_require__(8932);
            ;// CONCATENATED MODULE: ./src/form/utils/state.ts

            function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
            function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, defineProperty/* default */.Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

            var stateSubject = new BehaviorSubject/* BehaviorSubject */.X({
                email: '',
                currentView: ''
            });
            var updateState = function updateState(newState) {
                stateSubject.next(_objectSpread(_objectSpread({}, stateSubject.getCurrentValue()), newState));
            };
            ;// CONCATENATED MODULE: ./src/form/components/ResetPassword/Success/Success.tsx






            var Success = function Success() {
                var _useAuthenticator = useAuthenticator(),
                    toSignIn = _useAuthenticator.toSignIn,
                    toSignUp = _useAuthenticator.toSignUp;
                var handleClick = function handleClick() {
                    updateState({
                        currentView: ''
                    });
                    clearAndNavigateToAmplifyView(toSignUp, toSignIn);
                };
                return /*#__PURE__*/(0, jsx_runtime.jsx)(ConfirmComponent_ConfirmComponent, {
                    title: constants.success.resetPassword.header,
                    buttonText: constants.success.resetPassword.action,
                    handleClick: handleClick,
                    activeTabIndex: 0
                });
            };
    /* harmony default export */ const Success_Success = (Success);
            ;// CONCATENATED MODULE: ./src/form/components/SignUp/Success/Success.tsx




            var Success_Success_Success = function Success(_ref) {
                var redirectUrl = _ref.redirectUrl,
                    redirectDisabled = _ref.redirectDisabled;
                var handleClick = function handleClick() {
                    updateState({
                        currentView: ''
                    });
                    var authApp = document.querySelector('#auth-app');
                    if (!redirectDisabled && !(authApp !== null && authApp !== void 0 && authApp.classList.contains('redirect'))) {
                        authApp === null || authApp === void 0 || authApp.classList.add('redirect');
                        window.location.pathname = redirectUrl;
                    }
                    document.dispatchEvent(new CustomEvent('overlay::close'));
                };
                return /*#__PURE__*/(0, jsx_runtime.jsx)(ConfirmComponent_ConfirmComponent, {
                    title: constants.success.signup.header,
                    buttonText: constants.success.signup.action,
                    handleClick: handleClick,
                    activeTabIndex: 1,
                    disableTabs: true
                });
            };
    /* harmony default export */ const SignUp_Success_Success = (Success_Success_Success);
            ;// CONCATENATED MODULE: ./src/form/components/SignUp/SuccessSaveArticle/SuccessSaveArticle.tsx




            var SuccessSaveArticle_Success = function Success(_ref) {
                var dashboardUrl = _ref.dashboardUrl;
                var handleClick = function handleClick() {
                    updateState({
                        currentView: ''
                    });
                    document.dispatchEvent(new CustomEvent('overlay::close'));
                };
                var handleClickSecondary = function handleClickSecondary() {
                    updateState({
                        currentView: ''
                    });
                    document.dispatchEvent(new CustomEvent('overlay::close'));
                    window.location.pathname = dashboardUrl;
                };
                return /*#__PURE__*/(0, jsx_runtime.jsx)(ConfirmComponent_ConfirmComponent, {
                    title: constants.success.signupSaveArticle.header,
                    buttonText: constants.success.signupSaveArticle.action,
                    description: constants.success.signupSaveArticle.description,
                    buttonTextSecondary: constants.success.signupSaveArticle.actionSecondary,
                    handleClick: handleClick,
                    handleClickSecondary: handleClickSecondary,
                    icon: "info",
                    activeTabIndex: 1,
                    disableTabs: true
                });
            };
    /* harmony default export */ const SuccessSaveArticle = (SuccessSaveArticle_Success);
            ;// CONCATENATED MODULE: ./src/form/utils/customViews.ts
            var customViews = {
                RESET_PASSWORD_SUCCESS: 'ResetPasswordSuccess',
                SIGNUP_SUCCSS: 'SignupSuccess'
            };
            ;// CONCATENATED MODULE: ./src/form/utils/icons.ts
            var backIconPathSvg = 'M9.24179 12.5L15.728 18.9289C16.0907 19.2883 16.0907 19.871 15.728 20.2304C15.3654 20.5899 14.7775 20.5899 14.4149 20.2304L7.27196 13.1508C6.90935 12.7914 6.90935 12.2086 7.27196 11.8492L14.4149 4.76957C14.7775 4.41014 15.3654 4.41014 15.728 4.76957C16.0907 5.12899 16.0907 5.71171 15.728 6.07113L9.24179 12.5Z';
            ;// CONCATENATED MODULE: ./src/form/components/shared/BackButton/BackButton.tsx





            var BackButton = function BackButton(_ref) {
                var onClick = _ref.onClick;
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(Button_u, {
                    size: "small",
                    onClick: onClick,
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)(Icon_r, {
                        pathData: backIconPathSvg,
                        viewBox: {
                            width: 24,
                            height: 24
                        },
                        ariaLabel: "arrow icon"
                    }), constants.actions.back]
                });
            };
    /* harmony default export */ const BackButton_BackButton = (BackButton);
            ;// CONCATENATED MODULE: ./src/form/components/AuthError/AuthError.tsx







            var AuthError = function AuthError() {
                var _useAuthenticator = useAuthenticator(),
                    toSignUp = _useAuthenticator.toSignUp,
                    toSignIn = _useAuthenticator.toSignIn,
                    toResetPassword = _useAuthenticator.toResetPassword;
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(AmplifyLayout_AmplifyLayout, {
                    showTabs: true,
                    activeTabIndex: 1,
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsxs)("h3", {
                            className: "amplify-header",
                            children: [/*#__PURE__*/(0, jsx_runtime.jsx)("span", {
                                children: constants.error.register.header
                            }), /*#__PURE__*/(0, jsx_runtime.jsx)(BackButton_BackButton, {
                                onClick: function onClick() {
                                    return clearAndNavigateToAmplifyView(toSignIn, toSignUp);
                                }
                            })]
                        })
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            className: "amplify-info",
                            children: constants.error.register.info
                        })
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        className: "amplify-footer",
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)(Button_u, {
                            variation: "primary",
                            isFullWidth: true,
                            onClick: function onClick() {
                                return clearAndNavigateToAmplifyView(toSignUp, toSignIn);
                            },
                            children: constants.error.register.action
                        })
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        className: "link-container",
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)(Button_u, {
                            size: "small",
                            onClick: function onClick() {
                                return clearAndNavigateToAmplifyView(toSignIn, toResetPassword);
                            },
                            children: constants.error.register.secondaryAction
                        })
                    })]
                });
            };
    /* harmony default export */ const AuthError_AuthError = (AuthError);
            // EXTERNAL MODULE: ./src/form/utils/errorCodes.ts
            var errorCodes = __webpack_require__(7929);
            ;// CONCATENATED MODULE: ./src/form/utils/fieldNames.ts
            var SignUpFieldNames = /*#__PURE__*/function (SignUpFieldNames) {
                SignUpFieldNames["GivenName"] = "given_name";
                SignUpFieldNames["FamilyName"] = "family_name";
                SignUpFieldNames["Password"] = "password";
                SignUpFieldNames["ConfirmPassword"] = "confirm_password";
                SignUpFieldNames["Email"] = "email";
                SignUpFieldNames["Acknowledgement"] = "acknowledgement";
                return SignUpFieldNames;
            }({});
            ;// CONCATENATED MODULE: ./src/form/utils/formFields.ts


            var formFields = {
                resetPassword: {
                    username: {
                        label: 'Email',
                        placeholder: 'Enter your email'
                    }
                },
                confirmResetPassword: {
                    confirmation_code: {
                        label: 'Enter verification code',
                        placeholder: ''
                    },
                    password: {
                        label: 'Enter your new password',
                        placeholder: ''
                    },
                    confirm_password: {
                        label: 'Confirm new password',
                        placeholder: ''
                    }
                },
                signIn: {
                    // On the sign in page the input name is always username, regardless of the login mechanism type.
                    username: {
                        placeholder: 'Enter your email',
                        isRequired: true
                    },
                    password: {
                        placeholder: 'Enter your password',
                        isRequired: true
                    }
                },
                signUp: (0, defineProperty/* default */.Z)((0, defineProperty/* default */.Z)((0, defineProperty/* default */.Z)((0, defineProperty/* default */.Z)((0, defineProperty/* default */.Z)({}, SignUpFieldNames.Password, {
                    placeholder: 'Enter your password',
                    isRequired: false
                }), SignUpFieldNames.ConfirmPassword, {
                    label: 'Confirm password',
                    placeholder: 'Confirm your password',
                    isRequired: false
                }), SignUpFieldNames.Email, {
                    placeholder: 'Enter your email',
                    isRequired: false
                }), SignUpFieldNames.GivenName, {
                    order: 1,
                    label: 'First name',
                    placeholder: 'Your first name',
                    isRequired: false
                }), SignUpFieldNames.FamilyName, {
                    order: 2,
                    label: 'Last name',
                    placeholder: 'Your last name',
                    isRequired: false
                }),
                confirmSignUp: {
                    confirmation_code: {
                        label: 'Enter verification code',
                        placeholder: ''
                    }
                }
            };
            ;// CONCATENATED MODULE: ./src/form/utils/translations.ts


            I18n.putVocabularies(translations_y);
            I18n.setLanguage('en');
            I18n.putVocabulariesForLanguage('en', {
                'Sign In': 'Log in',
                // Tab header
                'Sign in': 'Log in',
                // Button label
                'Forgot your password?': 'Forgot my password',
                'Send code': 'Reset  password',
                'Back to Sign In': 'Back',
                'Create Account': 'Create an account',
                Submit: 'Confirm password change',
                Confirm: 'Verify me',
                'Incorrect username or password.': "It seems like you attempted to log in with an email or password that don't match or we don't recognise. Please verify and try again, otherwise get in touch.",
                'Your passwords must match': 'Your passwords must match.',
                'Invalid verification code provided, please try again.': 'Incorrect code',
                'Username cannot be empty': 'Email cannot be empty.',
                'Password did not conform with policy: Password not long enough': 'Password not long enough.',
                "1 validation error detected: Value at 'password' failed to satisfy constraint: Member must satisfy regular expression pattern: ^[\\S]+.*[\\S]+$": 'Invalid password. Your password must start and end with a non-whitespace character. The length of your password must be at least 2 characters. Please try again.'
            });
            ;// CONCATENATED MODULE: ./src/form/utils/formConfig.ts

            var loginMechanisms = ['email'];
            var signUpAttributes = [SignUpFieldNames.GivenName, SignUpFieldNames.FamilyName];
            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconCheck.mjs
            const IconCheck_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, react.createElement("path", { d: "M9.00016 16.1698L4.83016 11.9998L3.41016 13.4098L9.00016 18.9998L21.0002 6.99984L19.5902 5.58984L9.00016 16.1698Z", fill: "currentColor" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconIndeterminate.mjs
            const IconIndeterminate_o = o => { const { className: a } = o, i = tslib_tslib_es6_rest(o, ["className"]); return react.createElement(View_s, Object.assign({ as: "span", width: "1em", height: "1em", className: classnames(constants_t.Icon, a) }, i), react.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", width: "24", viewBox: "0 0 24 24" }, react.createElement("line", { x1: "4", x2: "20", y1: "12", y2: "12", stroke: "currentColor", strokeWidth: "3" }))) };

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/Checkbox/Checkbox.mjs
            const Checkbox_I = react.forwardRef(((I, x) => { var { checked: C, className: j, defaultChecked: E, hasError: y, isDisabled: g, isIndeterminate: N, label: B, labelHidden: F, labelPosition: S, onBlur: v, onFocus: H, onChange: O, testId: P, inputStyles: V } = I, w = tslib_tslib_es6_rest(I, ["checked", "className", "defaultChecked", "hasError", "isDisabled", "isIndeterminate", "label", "labelHidden", "labelPosition", "onBlur", "onFocus", "onChange", "testId", "inputStyles"]); const { styleProps: D, rest: T } = splitPrimitiveProps_t(w), [L, q] = react.useState(!1), R = useIcons_r("checkbox"), { isFieldsetDisabled: $ } = useFieldset_o(), z = $ || g, A = void 0 !== C, [G, J] = react.useState((() => A ? C : E)), K = A ? C : G, M = useStableId_s(); react.useEffect((() => { const e = document.querySelector(`[data-id="${M}"]`); e && "boolean" == typeof N && (e.indeterminate = N) }), [M, N]); const Q = getTestId_o(P, constants_t.CheckboxButton), U = getTestId_o(P, constants_t.CheckboxIcon), W = getTestId_o(P, constants_t.CheckboxLabel), X = classnames(constants_t.CheckboxButton, utils_g(constants_t.CheckboxButton, "disabled", z), utils_g(constants_t.CheckboxButton, "error", y), utils_g(constants_t.CheckboxButton, "focused", L)), Y = classnames(constants_t.CheckboxIcon, utils_g(constants_t.CheckboxIcon, "checked", K), utils_g(constants_t.CheckboxIcon, "disabled", z), utils_g(constants_t.CheckboxIcon, "indeterminate", N)), Z = { className: classnames(Y), "data-checked": G, "data-disabled": z, "data-testid": U }, _ = (null == R ? void 0 : R.checked) ? react.createElement(View_s, { as: "span", className: classnames(Y) }, R.checked) : react.createElement(IconCheck_o, Object.assign({}, Z)), ee = (null == R ? void 0 : R.indeterminate) ? react.createElement(View_s, { as: "span", className: classnames(Y) }, R.indeterminate) : react.createElement(IconIndeterminate_o, Object.assign({}, Z)); return react.createElement(Flex_t, Object.assign({ as: "label", className: classnames(constants_t.Checkbox, utils_g(constants_t.Checkbox, "disabled", z), j), "data-disabled": z, "data-label-position": S, testId: P }, D), react.createElement(VisuallyHidden_i, null, react.createElement(Input_o, Object.assign({ checked: C, className: constants_t.CheckboxInput, "data-id": M, defaultChecked: E, isDisabled: z, onBlur: e => { utils_b(v) && v(e), q(!1) }, onChange: e => { utils_b(O) && O(e), A || J(e.target.checked) }, onFocus: e => { utils_b(H) && H(e), q(!0) }, ref: x, type: "checkbox" }, T))), B && react.createElement(Text_o, { as: "span", className: classnames(constants_t.CheckboxLabel, { [constants_t.VisuallyHidden]: F }), "data-disabled": z, testId: W }, B), react.createElement(Flex_t, Object.assign({ "aria-hidden": "true", as: "span", className: X, "data-checked": K, "data-disabled": z, "data-focus": L, "data-error": y, testId: Q }, V), N ? ee : _)) })); Checkbox_I.displayName = "Checkbox";

            ;// CONCATENATED MODULE: ./node_modules/@aws-amplify/ui-react/dist/esm/primitives/CheckboxField/CheckboxField.mjs
            const CheckboxField_d = react.forwardRef(((d, c) => { var { className: n, errorMessage: p, hasError: F = !1, labelHidden: b = !1, labelPosition: f, testId: h, size: j } = d, x = tslib_tslib_es6_rest(d, ["className", "errorMessage", "hasError", "labelHidden", "labelPosition", "testId", "size"]); const E = getTestId_o(h, constants_t.Checkbox); return react.createElement(Flex_t, { className: classnames(constants_t.Field, constants_t.CheckboxField, utils_j(constants_t.Field, j), n), "data-size": j, testId: h }, react.createElement(Checkbox_I, Object.assign({ hasError: F, labelHidden: b, testId: E, labelPosition: f, ref: c }, x)), react.createElement(FieldErrorMessage_o, { hasError: F, errorMessage: p })) })); CheckboxField_d.displayName = "CheckboxField";

            ;// CONCATENATED MODULE: ./src/form/components/SignUp/FormFields/FormFields.tsx






            var FormFields_isString = function isString(err) {
                return typeof err === 'string';
            };
            var label = /*#__PURE__*/(0, jsx_runtime.jsxs)("span", {
                children: [constants.fields.signup.acknowledgement, ' ', /*#__PURE__*/(0, jsx_runtime.jsx)("a", {
                    href: "https://www.moneysavingexpert.com/site/terms-conditions/",
                    children: constants.fields.signup.terms
                }), ' ', constants.fields.signup.and, ' ', /*#__PURE__*/(0, jsx_runtime.jsx)("a", {
                    href: "https://www.moneysavingexpert.com/site/privacy-policy/",
                    children: constants.fields.signup.policy
                })]
            });
            var FormFields = function FormFields() {
                var _validationErrors$ack;
                var _useAuthenticator = useAuthenticator(),
                    validationErrors = _useAuthenticator.validationErrors;
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)(Authenticator_j.SignUp.FormFields, {}), /*#__PURE__*/(0, jsx_runtime.jsx)(CheckboxField_d, {
                        errorMessage: FormFields_isString(validationErrors.acknowledgement) ? validationErrors.acknowledgement : (_validationErrors$ack = validationErrors.acknowledgement) === null || _validationErrors$ack === void 0 ? void 0 : _validationErrors$ack.join(','),
                        hasError: !!validationErrors.acknowledgement,
                        name: SignUpFieldNames.Acknowledgement,
                        value: "yes",
                        label: label,
                        size: "large"
                    })]
                });
            };
    /* harmony default export */ const FormFields_FormFields = (FormFields);
            ;// CONCATENATED MODULE: ./src/form/components/ResetPassword/Header/Header.tsx







            var Header = function Header() {
                var _useAuthenticator = useAuthenticator(),
                    toSignIn = _useAuthenticator.toSignIn;
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)(AmplifyTabs_AmplifyTabs, {
                        activeTabIndex: 0
                    }), /*#__PURE__*/(0, jsx_runtime.jsxs)("div", {
                        children: [/*#__PURE__*/(0, jsx_runtime.jsxs)("h3", {
                            className: "amplify-header",
                            children: [/*#__PURE__*/(0, jsx_runtime.jsx)("span", {
                                children: constants.info.resetPassword.header
                            }), /*#__PURE__*/(0, jsx_runtime.jsx)(BackButton_BackButton, {
                                onClick: toSignIn
                            })]
                        }), /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            children: constants.info.resetPassword.info
                        })]
                    })]
                });
            };
    /* harmony default export */ const Header_Header = (Header);
            ;// CONCATENATED MODULE: ./src/form/utils/eventNames.ts
            var EVENTS = /*#__PURE__*/function (EVENTS) {
                EVENTS["FORGOT_PASSWORD"] = "forgotPassword";
                return EVENTS;
            }({});
            ;// CONCATENATED MODULE: ./src/form/hooks/useSuccessMessage.tsx



            var authenticatorSelector = '[data-amplify-authenticator]';
            var successClass = 'amplify-input-success';
            var useSuccessMessage = function useSuccessMessage(fieldCode) {
                var _useAuthenticator = useAuthenticator(),
                    route = _useAuthenticator.route,
                    isPending = _useAuthenticator.isPending;
                var _useState = (0, react.useState)(''),
                    _useState2 = (0, slicedToArray/* default */.Z)(_useState, 2),
                    activeSuccessMessage = _useState2[0],
                    setActiveSuccessMessage = _useState2[1];
                var addMessagePlaceholder = function addMessagePlaceholder() {
                    var authenticator = document.querySelector(authenticatorSelector);
                    var field = authenticator === null || authenticator === void 0 ? void 0 : authenticator.querySelector("[name=\"".concat(fieldCode, "\"]"));
                    if (!field) return;
                    var successHTMLElem = document.createElement('span');
                    successHTMLElem.classList.add(successClass);
                    field.insertAdjacentElement('afterend', successHTMLElem);
                };
                (0, react.useEffect)(function () {
                    addMessagePlaceholder();
                }, []);
                (0, react.useEffect)(function () {
                    setActiveSuccessMessage('');
                }, [route]);
                (0, react.useEffect)(function () {
                    if (isPending) {
                        setActiveSuccessMessage('');
                    }
                }, [isPending]);
                (0, react.useEffect)(function () {
                    var _document$querySelect;
                    var successHTMLElem = (_document$querySelect = document.querySelector("[name=\"".concat(fieldCode, "\"]"))) === null || _document$querySelect === void 0 || (_document$querySelect = _document$querySelect.parentElement) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.querySelector(".".concat(successClass));
                    if (!successHTMLElem) return;
                    successHTMLElem.innerHTML = activeSuccessMessage;
                    if (!activeSuccessMessage) {
                        successHTMLElem.classList.add('hidden');
                    } else {
                        successHTMLElem.classList.remove('hidden');
                    }
                }, [activeSuccessMessage]);
                return {
                    setActiveSuccessMessage: setActiveSuccessMessage
                };
            };
    /* harmony default export */ const hooks_useSuccessMessage = (useSuccessMessage);
            ;// CONCATENATED MODULE: ./src/form/components/ConfirmResetPassword/Header/Header.tsx













            var Header_Header_Header = function Header() {
                var _useAuthenticator = useAuthenticator(),
                    toSignIn = _useAuthenticator.toSignIn;
                var _useState = (0, react.useState)(stateSubject.getCurrentValue()),
                    _useState2 = (0, slicedToArray/* default */.Z)(_useState, 2),
                    state = _useState2[0],
                    setState = _useState2[1];
                var _useSuccessMessage = hooks_useSuccessMessage('confirmation_code'),
                    setActiveSuccessMessage = _useSuccessMessage.setActiveSuccessMessage;
                (0, react.useEffect)(function () {
                    var unsubscribe = stateSubject.subscribe(setState);
                    return function () {
                        return unsubscribe();
                    };
                }, []);
                (0, react.useEffect)(function () {
                    var hubListenerCancelToken = Hub/* Hub */.X.listen('auth', function (_ref) {
                        var payload = _ref.payload;
                        setActiveSuccessMessage('');
                        if (payload.event === EVENTS.FORGOT_PASSWORD) {
                            setActiveSuccessMessage(constants.success.resendCode);
                        }
                    });
                    return function () {
                        hubListenerCancelToken(); // stop listening for messages
                    };
                }, []);
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)(AmplifyTabs_AmplifyTabs, {
                        activeTabIndex: 0
                    }), /*#__PURE__*/(0, jsx_runtime.jsxs)("div", {
                        children: [/*#__PURE__*/(0, jsx_runtime.jsxs)("h3", {
                            className: "amplify-header",
                            children: [/*#__PURE__*/(0, jsx_runtime.jsx)("span", {
                                children: constants.info.confirmPassword.header
                            }), /*#__PURE__*/(0, jsx_runtime.jsx)(BackButton_BackButton, {
                                onClick: toSignIn
                            })]
                        }), /*#__PURE__*/(0, jsx_runtime.jsxs)("p", {
                            className: "amplify-description",
                            children: [constants.info.confirmPassword.description, ":"]
                        }), /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            className: "amplify-username",
                            children: state.email
                        })]
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            children: constants.info.confirmPassword.info
                        })
                    })]
                });
            };
    /* harmony default export */ const ConfirmResetPassword_Header_Header = (Header_Header_Header);
            // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
            var asyncToGenerator = __webpack_require__(5861);
            // EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
            var regenerator = __webpack_require__(4687);
            var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
            // EXTERNAL MODULE: ./src/form/utils/validation.ts
            var validation = __webpack_require__(9834);
            ;// CONCATENATED MODULE: ./src/form/utils/services.ts



            function services_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
            function services_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? services_ownKeys(Object(t), !0).forEach(function (r) { (0, defineProperty/* default */.Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : services_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }





            var signUpfields = [{
                name: SignUpFieldNames.GivenName,
                checkFunction: validation/* isInvalidName */._n
            }, {
                name: SignUpFieldNames.FamilyName,
                checkFunction: validation/* isInvalidName */._n
            }, {
                name: SignUpFieldNames.Password,
                checkFunction: validation/* isInvalidPassword */.Mq
            }, {
                name: SignUpFieldNames.ConfirmPassword,
                checkFunction: validation/* isInvalidPassword */.Mq
            }, {
                name: SignUpFieldNames.Email,
                checkFunction: validation/* isInvalidEmail */.Hu
            }, {
                name: SignUpFieldNames.Acknowledgement,
                checkFunction: validation/* isInvalidAcknowledgement */.X3
            }];
            var services = {
                // Custom validation in sign up (executes on form value change)
                validateCustomSignUp: function validateCustomSignUp(formData, touchData) {
                    return (0, asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee() {
                        return regenerator_default().wrap(function _callee$(_context) {
                            while (1) switch (_context.prev = _context.next) {
                                case 0:
                                    return _context.abrupt("return", signUpfields.reduce(function (errors, field) {
                                        return services_objectSpread(services_objectSpread({}, errors), (0, validation/* validateField */.OP)(field, formData, touchData));
                                    }, {}));
                                case 1:
                                case "end":
                                    return _context.stop();
                            }
                        }, _callee);
                    }))();
                },
                // signUp method override
                handleSignUp: function handleSignUp(formData) {
                    return (0, asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee2() {
                        var password, attributes, random_uuid;
                        return regenerator_default().wrap(function _callee2$(_context2) {
                            while (1) switch (_context2.prev = _context2.next) {
                                case 0:
                                    password = formData.password, attributes = formData.attributes;
                                    random_uuid = crypto.randomUUID();
                                    updateState({
                                        email: attributes.email
                                    });
                                    return _context2.abrupt("return", Auth/* Auth */.g.signUp({
                                        username: random_uuid,
                                        password: password,
                                        attributes: attributes,
                                        autoSignIn: {
                                            enabled: true
                                        }
                                    }));
                                case 4:
                                case "end":
                                    return _context2.stop();
                            }
                        }, _callee2);
                    }))();
                },
                // confirmSignup method override
                handleConfirmSignUp: function handleConfirmSignUp(_ref) {
                    return (0, asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee3() {
                        var username, code;
                        return regenerator_default().wrap(function _callee3$(_context3) {
                            while (1) switch (_context3.prev = _context3.next) {
                                case 0:
                                    username = _ref.username, code = _ref.code;
                                    _context3.next = 3;
                                    return Auth/* Auth */.g.confirmSignUp(username, code);
                                case 3:
                                    updateState({
                                        currentView: customViews.SIGNUP_SUCCSS
                                    });
                                case 4:
                                case "end":
                                    return _context3.stop();
                            }
                        }, _callee3);
                    }))();
                },
                // forgotPassword method override
                handleForgotPasswordSubmit: function handleForgotPasswordSubmit(_ref2) {
                    return (0, asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee4() {
                        var username, code, password;
                        return regenerator_default().wrap(function _callee4$(_context4) {
                            while (1) switch (_context4.prev = _context4.next) {
                                case 0:
                                    username = _ref2.username, code = _ref2.code, password = _ref2.password;
                                    _context4.next = 3;
                                    return Auth/* Auth */.g.forgotPasswordSubmit(username, code, password);
                                case 3:
                                    updateState({
                                        currentView: customViews.RESET_PASSWORD_SUCCESS
                                    });
                                    return _context4.abrupt("return", 'Password reset successful');
                                case 5:
                                case "end":
                                    return _context4.stop();
                            }
                        }, _callee4);
                    }))();
                },
                // forgotPassword method override
                handleForgotPassword: function handleForgotPassword(username) {
                    return (0, asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee5() {
                        return regenerator_default().wrap(function _callee5$(_context5) {
                            while (1) switch (_context5.prev = _context5.next) {
                                case 0:
                                    _context5.next = 2;
                                    return Auth/* Auth */.g.forgotPassword(username);
                                case 2:
                                    updateState({
                                        email: username
                                    });
                                case 3:
                                case "end":
                                    return _context5.stop();
                            }
                        }, _callee5);
                    }))();
                }
            };
    /* harmony default export */ const utils_services = (services);
            ;// CONCATENATED MODULE: ./src/form/components/ConfirmSignup/Header/Header.tsx











            var ConfirmSignup_Header_Header_Header = function Header() {
                var _useAuthenticator = useAuthenticator(),
                    toSignUp = _useAuthenticator.toSignUp,
                    toSignIn = _useAuthenticator.toSignIn;
                var _useState = (0, react.useState)(stateSubject.getCurrentValue()),
                    _useState2 = (0, slicedToArray/* default */.Z)(_useState, 2),
                    state = _useState2[0],
                    setState = _useState2[1];
                (0, react.useEffect)(function () {
                    var unsubscribe = stateSubject.subscribe(setState);
                    return function () {
                        return unsubscribe();
                    };
                }, []);
                return /*#__PURE__*/(0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
                    children: [/*#__PURE__*/(0, jsx_runtime.jsx)(AmplifyTabs_AmplifyTabs, {
                        activeTabIndex: 1
                    }), /*#__PURE__*/(0, jsx_runtime.jsxs)("div", {
                        children: [/*#__PURE__*/(0, jsx_runtime.jsxs)("h3", {
                            className: "amplify-header",
                            children: [/*#__PURE__*/(0, jsx_runtime.jsx)("span", {
                                children: constants.info.register.header
                            }), /*#__PURE__*/(0, jsx_runtime.jsx)(BackButton_BackButton, {
                                onClick: function onClick() {
                                    return clearAndNavigateToAmplifyView(toSignIn, toSignUp);
                                }
                            })]
                        }), /*#__PURE__*/(0, jsx_runtime.jsxs)("p", {
                            children: [constants.info.register.description, ":"]
                        }), /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            className: "amplify-username",
                            children: state.email
                        })]
                    }), /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                        children: /*#__PURE__*/(0, jsx_runtime.jsx)("p", {
                            className: "amplify-info",
                            children: constants.info.register.info
                        })
                    })]
                });
            };
    /* harmony default export */ const ConfirmSignup_Header_Header = (ConfirmSignup_Header_Header_Header);
            ;// CONCATENATED MODULE: ./src/form/hooks/useErrorMessage.tsx



            var useErrorMessage_authenticatorSelector = '[data-amplify-authenticator]';
            var errorClass = 'amplify-custom-alert--error';
            var useErrorMessage = function useErrorMessage(fieldCode) {
                var _useAuthenticator = useAuthenticator(),
                    route = _useAuthenticator.route,
                    isPending = _useAuthenticator.isPending;
                var _useState = (0, react.useState)(''),
                    _useState2 = (0, slicedToArray/* default */.Z)(_useState, 2),
                    activeErrorMessage = _useState2[0],
                    setActiveErrorMessage = _useState2[1];
                var addMessagePlaceholder = function addMessagePlaceholder() {
                    var authenticator = document.querySelector(useErrorMessage_authenticatorSelector);
                    var field = authenticator === null || authenticator === void 0 ? void 0 : authenticator.querySelector("[name=\"".concat(fieldCode, "\"]"));
                    if (!field) return;
                    var errorHTMLElem = document.createElement('div');
                    errorHTMLElem.classList.add(errorClass);
                    field.insertAdjacentElement('afterend', errorHTMLElem);
                };
                (0, react.useEffect)(function () {
                    addMessagePlaceholder();
                }, []);
                (0, react.useEffect)(function () {
                    setActiveErrorMessage('');
                }, [route]);
                (0, react.useEffect)(function () {
                    if (isPending) {
                        setActiveErrorMessage('');
                    }
                }, [isPending]);
                (0, react.useEffect)(function () {
                    var _document$querySelect;
                    var errorHTMLElem = (_document$querySelect = document.querySelector("[name=\"".concat(fieldCode, "\"]"))) === null || _document$querySelect === void 0 || (_document$querySelect = _document$querySelect.parentElement) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.querySelector(".".concat(errorClass));
                    if (!errorHTMLElem) return;
                    errorHTMLElem.innerHTML = activeErrorMessage;
                    if (!activeErrorMessage) {
                        errorHTMLElem.classList.add('hidden');
                    } else {
                        errorHTMLElem.classList.remove('hidden');
                    }
                }, [activeErrorMessage]);
                return {
                    setActiveErrorMessage: setActiveErrorMessage
                };
            };
    /* harmony default export */ const hooks_useErrorMessage = (useErrorMessage);
            ;// CONCATENATED MODULE: ./src/form/components/ConfirmSignup/Footer/Footer.tsx









            var Footer = function Footer() {
                var _useAuthenticator = useAuthenticator(),
                    user = _useAuthenticator.user;
                var _useSuccessMessage = hooks_useSuccessMessage('confirmation_code'),
                    setActiveSuccessMessage = _useSuccessMessage.setActiveSuccessMessage;
                var _useErrorMessage = hooks_useErrorMessage('confirmation_code'),
                    setActiveErrorMessage = _useErrorMessage.setActiveErrorMessage;

                // custom resend code method, cause no other way to override it
                var resendCode = /*#__PURE__*/function () {
                    var _ref = (0, asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee() {
                        var resp;
                        return regenerator_default().wrap(function _callee$(_context) {
                            while (1) switch (_context.prev = _context.next) {
                                case 0:
                                    if (user !== null && user !== void 0 && user.username) {
                                        _context.next = 2;
                                        break;
                                    }
                                    return _context.abrupt("return");
                                case 2:
                                    setActiveErrorMessage('');
                                    setActiveSuccessMessage('');
                                    _context.prev = 4;
                                    _context.next = 7;
                                    return Auth/* Auth */.g.resendSignUp(user.username);
                                case 7:
                                    resp = _context.sent;
                                    if (!(resp !== null && resp !== void 0 && resp['CodeDeliveryDetails'])) {
                                        _context.next = 12;
                                        break;
                                    }
                                    setActiveSuccessMessage(constants.success.resendCode);
                                    _context.next = 13;
                                    break;
                                case 12:
                                    throw Error(errorCodes/* ErrorCodes */.S.TRY_AGAIN_LATER);
                                case 13:
                                    _context.next = 19;
                                    break;
                                case 15:
                                    _context.prev = 15;
                                    _context.t0 = _context["catch"](4);
                                    console.log(_context.t0);
                                    if (_context.t0 instanceof Error) {
                                        setActiveErrorMessage(_context.t0.message);
                                    } else {
                                        setActiveErrorMessage(errorCodes/* ErrorCodes */.S.TRY_AGAIN_LATER);
                                    }
                                case 19:
                                case "end":
                                    return _context.stop();
                            }
                        }, _callee, null, [[4, 15]]);
                    }));
                    return function resendCode() {
                        return _ref.apply(this, arguments);
                    };
                }();
                return /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                    className: "amplify-flex amplify-custom-resendCode",
                    children: /*#__PURE__*/(0, jsx_runtime.jsx)("button", {
                        type: "button",
                        className: "amplify-button amplify-field-group__control",
                        onClick: function onClick() {
                            return resendCode();
                        },
                        children: constants.fields.confirmSignUp.resendCode
                    })
                });
            };
    /* harmony default export */ const Footer_Footer = (Footer);
            ;// CONCATENATED MODULE: ./src/form/hooks/useInfo.tsx


            var isSingUpTab = function isSingUpTab(route) {
                return ['confirmSignUp', 'confirmVerifyUser', 'signUp', 'verifyUser'].includes(route);
            };
            var richTextSelector = '.richText';
            var firstSelector = '.first';
            var lastSelector = '.last';
            var loginSelector = '.login-form-info';
            var visibleClass = 'visible-info';
            var editableClass = 'cq-Editable-dom';
            var useInfo = function useInfo() {
                var _useAuthenticator = useAuthenticator(),
                    route = _useAuthenticator.route;
                var loginInfo = document.querySelectorAll(loginSelector);
                var clean = function clean() {
                    loginInfo === null || loginInfo === void 0 || loginInfo.forEach(function (info) {
                        var _info$querySelectorAl;
                        info === null || info === void 0 || (_info$querySelectorAl = info.querySelectorAll(richTextSelector)) === null || _info$querySelectorAl === void 0 || _info$querySelectorAl.forEach(function (element) {
                            element.classList.remove(visibleClass);
                        });
                    });
                };
                (0, react.useEffect)(function () {
                    loginInfo === null || loginInfo === void 0 || loginInfo.forEach(function (info) {
                        var _info$querySelector;
                        info === null || info === void 0 || (_info$querySelector = info.querySelector("".concat(richTextSelector).concat(firstSelector))) === null || _info$querySelector === void 0 || _info$querySelector.classList.add(visibleClass);
                        if (info !== null && info !== void 0 && info.classList.contains(editableClass)) return;
                    });
                    clean();
                    if (!isSingUpTab(route)) {
                        loginInfo === null || loginInfo === void 0 || loginInfo.forEach(function (info) {
                            var _info$querySelector2;
                            info === null || info === void 0 || (_info$querySelector2 = info.querySelector("".concat(richTextSelector).concat(firstSelector))) === null || _info$querySelector2 === void 0 || _info$querySelector2.classList.add(visibleClass);
                        });
                    }
                    if (isSingUpTab(route)) {
                        loginInfo === null || loginInfo === void 0 || loginInfo.forEach(function (info) {
                            var _info$querySelector3;
                            info === null || info === void 0 || (_info$querySelector3 = info.querySelector("".concat(richTextSelector).concat(lastSelector))) === null || _info$querySelector3 === void 0 || _info$querySelector3.classList.add(visibleClass);
                        });
                    }
                }, [route]);
            };
    /* harmony default export */ const hooks_useInfo = (useInfo);
            ;// CONCATENATED MODULE: ./src/form/components/Form/Form.tsx












            var components = {
                SignUp: {
                    FormFields: function FormFields() {
                        return /*#__PURE__*/(0, jsx_runtime.jsx)(FormFields_FormFields, {});
                    }
                },
                ResetPassword: {
                    Header: function Header() {
                        return /*#__PURE__*/(0, jsx_runtime.jsx)(Header_Header, {});
                    }
                },
                ConfirmResetPassword: {
                    Header: function Header() {
                        return /*#__PURE__*/(0, jsx_runtime.jsx)(ConfirmResetPassword_Header_Header, {});
                    }
                },
                ConfirmSignUp: {
                    Header: function Header() {
                        return /*#__PURE__*/(0, jsx_runtime.jsx)(ConfirmSignup_Header_Header, {});
                    },
                    Footer: function Footer() {
                        return /*#__PURE__*/(0, jsx_runtime.jsx)(Footer_Footer, {});
                    }
                }
            };

            // hook below is only reevaluated when `user` changes
            // const { authStatus } = useAuthenticator((context) => [context.user]);

            var Form = function Form() {
                hooks_useInfo();
                return /*#__PURE__*/(0, jsx_runtime.jsx)(Authenticator_j, {
                    loginMechanisms: loginMechanisms,
                    signUpAttributes: signUpAttributes,
                    formFields: formFields,
                    components: components,
                    services: utils_services,
                    children: function children() {
                        return /*#__PURE__*/(0, jsx_runtime.jsx)("div", {
                            children: "loading..."
                        });
                    }
                });
            };
    /* harmony default export */ const Form_Form = (Form);
            ;// CONCATENATED MODULE: ./src/form/hooks/useRedirect.tsx


            var useRedirect = function useRedirect(redirectUrl) {
                var redirectDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var _useAuthenticator = useAuthenticator(),
                    authStatus = _useAuthenticator.authStatus,
                    route = _useAuthenticator.route;
                var authApp = document.querySelector('#auth-app');
                (0, react.useEffect)(function () {
                    if (redirectUrl && authStatus === 'authenticated' && route === 'signIn' && !redirectDisabled && !(authApp !== null && authApp !== void 0 && authApp.classList.contains('redirect'))) {
                        authApp === null || authApp === void 0 || authApp.classList.add('redirect');
                        window.location.href = redirectUrl;
                    }

                    // event for saving article when user is authenticated and no redirect url is set
                    if (!redirectUrl && authStatus === 'authenticated' && route === 'signIn') {
                        document.dispatchEvent(new CustomEvent('saveArticleLogiIn'));
                        console.log('saveArticleLogiIn');
                        alert('saveArticleLogiIn');
                    }
                    if (!redirectUrl && authStatus === 'authenticated' && route === 'authenticated') {
                        document.dispatchEvent(new CustomEvent('saveArticleSignUp'));
                    }
                }, [authStatus]);
            };
    /* harmony default export */ const hooks_useRedirect = (useRedirect);
            // EXTERNAL MODULE: ./src/form/utils/url.ts
            var url = __webpack_require__(2109);
            // EXTERNAL MODULE: ./src/shared/auth-analytics.ts
            var auth_analytics = __webpack_require__(880);
            ;// CONCATENATED MODULE: ./src/form/hooks/useAnalytics.tsx



            var useAnalytics = function useAnalytics(error) {
                (0, react.useEffect)(function () {
                    if (error === errorCodes/* ErrorCodes */.S.INVALID_AUTH) {
                        (0, auth_analytics/* pushAnalytics */.XG)(auth_analytics/* userErrorData */.W0);
                    }
                }, [error]);
            };
    /* harmony default export */ const hooks_useAnalytics = (useAnalytics);
            // EXTERNAL MODULE: ./src/dashboard/session.ts
            var session = __webpack_require__(8171);
            ;// CONCATENATED MODULE: ./src/form/components/RenderContent/RenderContent.tsx
















            var RenderContent = function RenderContent() {
                var authContext = useAuthenticator();
                var _useState = (0, react.useState)(stateSubject.getCurrentValue()),
                    _useState2 = (0, slicedToArray/* default */.Z)(_useState, 2),
                    state = _useState2[0],
                    setState = _useState2[1];
                var error = authContext.error;
                var rootElement = document.querySelector('#auth-app');
                var dashboardUrl = (0, url/* default */.Z)(rootElement === null || rootElement === void 0 ? void 0 : rootElement.getAttribute('data-dashboard-url'));
                var redirectUrl = (0, url/* default */.Z)(rootElement === null || rootElement === void 0 ? void 0 : rootElement.getAttribute('data-login-redirect'));
                var redirectDisabled = (rootElement === null || rootElement === void 0 ? void 0 : rootElement.getAttribute('data-redirect-disabled')) == 'true';
                var authApp = document.querySelector('#auth-app');
                hooks_useAnalytics(error);
                hooks_useRedirect(redirectUrl, redirectDisabled);
                session/* sessionSubject */.a.subscribe(function (user) {
                    if (user && redirectUrl && !redirectDisabled && !(authApp !== null && authApp !== void 0 && authApp.classList.contains('redirect'))) {
                        authApp === null || authApp === void 0 || authApp.classList.add('redirect');
                        window.location.href = redirectUrl;
                    }
                });
                (0, react.useEffect)(function () {
                    var unsubscribe = stateSubject.subscribe(setState);
                    return function () {
                        return unsubscribe();
                    };
                }, []);
                if (state.currentView === customViews.SIGNUP_SUCCSS && redirectUrl) {
                    return /*#__PURE__*/(0, jsx_runtime.jsx)(SignUp_Success_Success, {
                        redirectUrl: redirectUrl,
                        redirectDisabled: redirectDisabled
                    });
                }
                if (state.currentView === customViews.SIGNUP_SUCCSS && !redirectUrl && dashboardUrl) {
                    return /*#__PURE__*/(0, jsx_runtime.jsx)(SuccessSaveArticle, {
                        dashboardUrl: dashboardUrl
                    });
                }
                if (state.currentView === customViews.RESET_PASSWORD_SUCCESS) {
                    return /*#__PURE__*/(0, jsx_runtime.jsx)(Success_Success, {});
                }
                if (error === errorCodes/* ErrorCodes */.S.ALIAS_EXISTS) {
                    return /*#__PURE__*/(0, jsx_runtime.jsx)(AuthError_AuthError, {});
                }
                return /*#__PURE__*/(0, jsx_runtime.jsx)(Form_Form, {});
            };
    /* harmony default export */ const RenderContent_RenderContent = (RenderContent);
            // EXTERNAL MODULE: ./node_modules/@aws-amplify/ui-react/dist/styles.css
            var styles = __webpack_require__(1892);
            // EXTERNAL MODULE: ./src/form/scss/main.scss
            var main = __webpack_require__(288);
            ;// CONCATENATED MODULE: ./src/form/overlay.tsx


            var initOverlayEvents = function initOverlayEvents(App) {
                var authAppLoaded = true;

                // rerender on overlay loaded
                document.addEventListener('overlay::loaded', function () {
                    // prevent rerendering on script init
                    if (!authAppLoaded) {
                        var root = (0, client/* createRoot */.s)(document.getElementById('auth-app'));
                        root.render( /*#__PURE__*/(0, jsx_runtime.jsx)(App, {}));
                    }
                });
                document.addEventListener('overlay::hide', function () {
                    authAppLoaded = false;
                });
            };
            ;// CONCATENATED MODULE: ./src/form/app.tsx







            var root = (0, client/* createRoot */.s)(document.getElementById('auth-app'));
            var App = function App() {
                return /*#__PURE__*/(0, jsx_runtime.jsx)(Authenticator_j.Provider, {
                    children: /*#__PURE__*/(0, jsx_runtime.jsx)(RenderContent_RenderContent, {})
                });
            };
            root.render( /*#__PURE__*/(0, jsx_runtime.jsx)(App, {}));
            initOverlayEvents(App);

            /***/
}),

    /***/ 7929:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   S: () => (/* binding */ ErrorCodes)
                /* harmony export */
});
            var ErrorCodes = /*#__PURE__*/function (ErrorCodes) {
                ErrorCodes["ALIAS_EXISTS"] = "PreSignUp failed with error AliasExistsException.";
                ErrorCodes["INVALID_NAME"] = "First and last name should not be empty nor contain numbers, special characters or offensive content.";
                ErrorCodes["INVALID_ACK"] = "You must agree to the Terms & Conditions and Privacy Policy.";
                ErrorCodes["TRY_AGAIN_LATER"] = "An error occured. Please try again later.";
                ErrorCodes["REQUIRED"] = "This field is required.";
                ErrorCodes["INVALID_EMAIL"] = "Please enter a valid email address.";
                ErrorCodes["INVALID_PASSWORD"] = "Invalid password format.";
                ErrorCodes["INVALID_AUTH"] = "Incorrect username or password.";
                return ErrorCodes;
            }({});

            /***/
}),

    /***/ 2109:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
                /* harmony export */
});
            var extractPath = function extractPath(url) {
                if (url !== null && url !== void 0 && url.startsWith('/')) {
                    return url.endsWith('.html') ? url : "".concat(url, ".html");
                } else if (url !== null && url !== void 0 && url.startsWith('http')) {
                    return url === null || url === void 0 ? void 0 : url.substring(url.indexOf('/', url.indexOf('//') + 2));
                } else {
                    return undefined;
                }
            };
    /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extractPath);

            /***/
}),

    /***/ 9834:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   Hu: () => (/* binding */ isInvalidEmail),
    /* harmony export */   Mq: () => (/* binding */ isInvalidPassword),
    /* harmony export */   OP: () => (/* binding */ validateField),
    /* harmony export */   X3: () => (/* binding */ isInvalidAcknowledgement),
    /* harmony export */   _n: () => (/* binding */ isInvalidName)
                /* harmony export */
});
    /* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4942);
    /* harmony import */ var _errorCodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7929);


            var isInvalidName = function isInvalidName(str) {
                // matches strings that contain at least one character that is not an alphabetic character or a whitespace character, or strings that are empty or contain only whitespace characters
                var regex = /[^a-zA-Z\s]+|^[\s\r\n]*$/;
                return regex.test(str) ? _errorCodes__WEBPACK_IMPORTED_MODULE_0__/* .ErrorCodes */.S.INVALID_NAME : null;
            };
            var isInvalidEmail = function isInvalidEmail(str) {
                // Define the regex pattern for a valid email
                var regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return !regex.test(str) ? _errorCodes__WEBPACK_IMPORTED_MODULE_0__/* .ErrorCodes */.S.INVALID_EMAIL : null;
            };
            var isInvalidPassword = function isInvalidPassword(password) {
                if (!password) return _errorCodes__WEBPACK_IMPORTED_MODULE_0__/* .ErrorCodes */.S.REQUIRED;
                // Define the regex pattern for a valid password
                var regex = /^[^\s].*[^\s]$/;
                return !regex.test(password) ? _errorCodes__WEBPACK_IMPORTED_MODULE_0__/* .ErrorCodes */.S.INVALID_PASSWORD : null;
            };
            var isInvalidAcknowledgement = function isInvalidAcknowledgement(acknowledgement) {
                return !acknowledgement ? _errorCodes__WEBPACK_IMPORTED_MODULE_0__/* .ErrorCodes */.S.INVALID_ACK : null;
            };
            var validateField = function validateField(field, formData, touchData) {
                // according AuthFormData, the value of each field is a string but in reality it can be undefined
                var value = formData[field.name];
                var touchValue = touchData[field.name];
                var fieldError = field.checkFunction(value);
                if (fieldError !== null && touchValue) {
                    return (0, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */.Z)({}, field.name, fieldError);
                } else if (!value && !touchValue) {
                    return (0, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */.Z)({}, field.name, '');
                }
                return {};
            };

            /***/
}),

    /***/ 9742:
    /***/ ((__unused_webpack_module, exports) => {

            "use strict";


            exports.byteLength = byteLength
            exports.toByteArray = toByteArray
            exports.fromByteArray = fromByteArray

            var lookup = []
            var revLookup = []
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i]
                revLookup[code.charCodeAt(i)] = i
            }

            // Support decoding URL-safe base64 strings, as Node.js does.
            // See: https://en.wikipedia.org/wiki/Base64#URL_applications
            revLookup['-'.charCodeAt(0)] = 62
            revLookup['_'.charCodeAt(0)] = 63

            function getLens(b64) {
                var len = b64.length

                if (len % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4')
                }

                // Trim off extra bytes after placeholder bytes are found
                // See: https://github.com/beatgammit/base64-js/issues/42
                var validLen = b64.indexOf('=')
                if (validLen === -1) validLen = len

                var placeHoldersLen = validLen === len
                    ? 0
                    : 4 - (validLen % 4)

                return [validLen, placeHoldersLen]
            }

            // base64 is 4/3 + up to two characters of the original data
            function byteLength(b64) {
                var lens = getLens(b64)
                var validLen = lens[0]
                var placeHoldersLen = lens[1]
                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function _byteLength(b64, validLen, placeHoldersLen) {
                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function toByteArray(b64) {
                var tmp
                var lens = getLens(b64)
                var validLen = lens[0]
                var placeHoldersLen = lens[1]

                var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

                var curByte = 0

                // if there are placeholders, only get up to the last complete 4 chars
                var len = placeHoldersLen > 0
                    ? validLen - 4
                    : validLen

                var i
                for (i = 0; i < len; i += 4) {
                    tmp =
                        (revLookup[b64.charCodeAt(i)] << 18) |
                        (revLookup[b64.charCodeAt(i + 1)] << 12) |
                        (revLookup[b64.charCodeAt(i + 2)] << 6) |
                        revLookup[b64.charCodeAt(i + 3)]
                    arr[curByte++] = (tmp >> 16) & 0xFF
                    arr[curByte++] = (tmp >> 8) & 0xFF
                    arr[curByte++] = tmp & 0xFF
                }

                if (placeHoldersLen === 2) {
                    tmp =
                        (revLookup[b64.charCodeAt(i)] << 2) |
                        (revLookup[b64.charCodeAt(i + 1)] >> 4)
                    arr[curByte++] = tmp & 0xFF
                }

                if (placeHoldersLen === 1) {
                    tmp =
                        (revLookup[b64.charCodeAt(i)] << 10) |
                        (revLookup[b64.charCodeAt(i + 1)] << 4) |
                        (revLookup[b64.charCodeAt(i + 2)] >> 2)
                    arr[curByte++] = (tmp >> 8) & 0xFF
                    arr[curByte++] = tmp & 0xFF
                }

                return arr
            }

            function tripletToBase64(num) {
                return lookup[num >> 18 & 0x3F] +
                    lookup[num >> 12 & 0x3F] +
                    lookup[num >> 6 & 0x3F] +
                    lookup[num & 0x3F]
            }

            function encodeChunk(uint8, start, end) {
                var tmp
                var output = []
                for (var i = start; i < end; i += 3) {
                    tmp =
                        ((uint8[i] << 16) & 0xFF0000) +
                        ((uint8[i + 1] << 8) & 0xFF00) +
                        (uint8[i + 2] & 0xFF)
                    output.push(tripletToBase64(tmp))
                }
                return output.join('')
            }

            function fromByteArray(uint8) {
                var tmp
                var len = uint8.length
                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                var parts = []
                var maxChunkLength = 16383 // must be multiple of 3

                // go through the array every three bytes, we'll deal with trailing stuff later
                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
                }

                // pad the end with zeros, but make sure to not forget the extra bytes
                if (extraBytes === 1) {
                    tmp = uint8[len - 1]
                    parts.push(
                        lookup[tmp >> 2] +
                        lookup[(tmp << 4) & 0x3F] +
                        '=='
                    )
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                    parts.push(
                        lookup[tmp >> 10] +
                        lookup[(tmp >> 4) & 0x3F] +
                        lookup[(tmp << 2) & 0x3F] +
                        '='
                    )
                }

                return parts.join('')
            }


            /***/
}),

    /***/ 8764:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";
            var __webpack_unused_export__;
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <http://feross.org>
             * @license  MIT
             */
            /* eslint-disable no-proto */



            var base64 = __webpack_require__(9742)
            var ieee754 = __webpack_require__(645)
            var isArray = __webpack_require__(5826)

            exports.lW = Buffer
            __webpack_unused_export__ = SlowBuffer
            exports.h2 = 50

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Use Object implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * Due to various browser bugs, sometimes the Object implementation will be used even
             * when the browser supports typed arrays.
             *
             * Note:
             *
             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
             *
             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
             *
             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
             *     incorrect length in some situations.
            
             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
             * get the Object implementation, which is slower but behaves correctly.
             */
            Buffer.TYPED_ARRAY_SUPPORT = __webpack_require__.g.TYPED_ARRAY_SUPPORT !== undefined
                ? __webpack_require__.g.TYPED_ARRAY_SUPPORT
                : typedArraySupport()

            /*
             * Export kMaxLength after typed array support is determined.
             */
            __webpack_unused_export__ = kMaxLength()

            function typedArraySupport() {
                try {
                    var arr = new Uint8Array(1)
                    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
                    return arr.foo() === 42 && // typed array instances can be augmented
                        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
                } catch (e) {
                    return false
                }
            }

            function kMaxLength() {
                return Buffer.TYPED_ARRAY_SUPPORT
                    ? 0x7fffffff
                    : 0x3fffffff
            }

            function createBuffer(that, length) {
                if (kMaxLength() < length) {
                    throw new RangeError('Invalid typed array length')
                }
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    // Return an augmented `Uint8Array` instance, for best performance
                    that = new Uint8Array(length)
                    that.__proto__ = Buffer.prototype
                } else {
                    // Fallback: Return an object instance of the Buffer class
                    if (that === null) {
                        that = new Buffer(length)
                    }
                    that.length = length
                }

                return that
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer(arg, encodingOrOffset, length) {
                if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                    return new Buffer(arg, encodingOrOffset, length)
                }

                // Common case.
                if (typeof arg === 'number') {
                    if (typeof encodingOrOffset === 'string') {
                        throw new Error(
                            'If encoding is specified then the first argument must be a string'
                        )
                    }
                    return allocUnsafe(this, arg)
                }
                return from(this, arg, encodingOrOffset, length)
            }

            Buffer.poolSize = 8192 // not used by this implementation

            // TODO: Legacy, not needed anymore. Remove in next major version.
            Buffer._augment = function (arr) {
                arr.__proto__ = Buffer.prototype
                return arr
            }

            function from(that, value, encodingOrOffset, length) {
                if (typeof value === 'number') {
                    throw new TypeError('"value" argument must not be a number')
                }

                if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                    return fromArrayBuffer(that, value, encodingOrOffset, length)
                }

                if (typeof value === 'string') {
                    return fromString(that, value, encodingOrOffset)
                }

                return fromObject(that, value)
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
                return from(null, value, encodingOrOffset, length)
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
                Buffer.prototype.__proto__ = Uint8Array.prototype
                Buffer.__proto__ = Uint8Array
                if (typeof Symbol !== 'undefined' && Symbol.species &&
                    Buffer[Symbol.species] === Buffer) {
                    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                    Object.defineProperty(Buffer, Symbol.species, {
                        value: null,
                        configurable: true
                    })
                }
            }

            function assertSize(size) {
                if (typeof size !== 'number') {
                    throw new TypeError('"size" argument must be a number')
                } else if (size < 0) {
                    throw new RangeError('"size" argument must not be negative')
                }
            }

            function alloc(that, size, fill, encoding) {
                assertSize(size)
                if (size <= 0) {
                    return createBuffer(that, size)
                }
                if (fill !== undefined) {
                    // Only pay attention to encoding if it's a string. This
                    // prevents accidentally sending in a number that would
                    // be interpretted as a start offset.
                    return typeof encoding === 'string'
                        ? createBuffer(that, size).fill(fill, encoding)
                        : createBuffer(that, size).fill(fill)
                }
                return createBuffer(that, size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
                return alloc(null, size, fill, encoding)
            }

            function allocUnsafe(that, size) {
                assertSize(size)
                that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
                if (!Buffer.TYPED_ARRAY_SUPPORT) {
                    for (var i = 0; i < size; ++i) {
                        that[i] = 0
                    }
                }
                return that
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
                return allocUnsafe(null, size)
            }
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(null, size)
            }

            function fromString(that, string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                    encoding = 'utf8'
                }

                if (!Buffer.isEncoding(encoding)) {
                    throw new TypeError('"encoding" must be a valid string encoding')
                }

                var length = byteLength(string, encoding) | 0
                that = createBuffer(that, length)

                var actual = that.write(string, encoding)

                if (actual !== length) {
                    // Writing a hex string, for example, that contains invalid characters will
                    // cause everything after the first invalid character to be ignored. (e.g.
                    // 'abxxcd' will be treated as 'ab')
                    that = that.slice(0, actual)
                }

                return that
            }

            function fromArrayLike(that, array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0
                that = createBuffer(that, length)
                for (var i = 0; i < length; i += 1) {
                    that[i] = array[i] & 255
                }
                return that
            }

            function fromArrayBuffer(that, array, byteOffset, length) {
                array.byteLength // this throws if `array` is not a valid ArrayBuffer

                if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError('\'offset\' is out of bounds')
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError('\'length\' is out of bounds')
                }

                if (byteOffset === undefined && length === undefined) {
                    array = new Uint8Array(array)
                } else if (length === undefined) {
                    array = new Uint8Array(array, byteOffset)
                } else {
                    array = new Uint8Array(array, byteOffset, length)
                }

                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    // Return an augmented `Uint8Array` instance, for best performance
                    that = array
                    that.__proto__ = Buffer.prototype
                } else {
                    // Fallback: Return an object instance of the Buffer class
                    that = fromArrayLike(that, array)
                }
                return that
            }

            function fromObject(that, obj) {
                if (Buffer.isBuffer(obj)) {
                    var len = checked(obj.length) | 0
                    that = createBuffer(that, len)

                    if (that.length === 0) {
                        return that
                    }

                    obj.copy(that, 0, 0, len)
                    return that
                }

                if (obj) {
                    if ((typeof ArrayBuffer !== 'undefined' &&
                        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                        if (typeof obj.length !== 'number' || isnan(obj.length)) {
                            return createBuffer(that, 0)
                        }
                        return fromArrayLike(that, obj)
                    }

                    if (obj.type === 'Buffer' && isArray(obj.data)) {
                        return fromArrayLike(that, obj.data)
                    }
                }

                throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
            }

            function checked(length) {
                // Note: cannot use `length < kMaxLength()` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= kMaxLength()) {
                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                        'size: 0x' + kMaxLength().toString(16) + ' bytes')
                }
                return length | 0
            }

            function SlowBuffer(length) {
                if (+length != length) { // eslint-disable-line eqeqeq
                    length = 0
                }
                return Buffer.alloc(+length)
            }

            Buffer.isBuffer = function isBuffer(b) {
                return !!(b != null && b._isBuffer)
            }

            Buffer.compare = function compare(a, b) {
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    throw new TypeError('Arguments must be Buffers')
                }

                if (a === b) return 0

                var x = a.length
                var y = b.length

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i]
                        y = b[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

            Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true
                    default:
                        return false
                }
            }

            Buffer.concat = function concat(list, length) {
                if (!isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }

                if (list.length === 0) {
                    return Buffer.alloc(0)
                }

                var i
                if (length === undefined) {
                    length = 0
                    for (i = 0; i < list.length; ++i) {
                        length += list[i].length
                    }
                }

                var buffer = Buffer.allocUnsafe(length)
                var pos = 0
                for (i = 0; i < list.length; ++i) {
                    var buf = list[i]
                    if (!Buffer.isBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers')
                    }
                    buf.copy(buffer, pos)
                    pos += buf.length
                }
                return buffer
            }

            function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                    return string.length
                }
                if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
                    (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                    return string.byteLength
                }
                if (typeof string !== 'string') {
                    string = '' + string
                }

                var len = string.length
                if (len === 0) return 0

                // Use a for loop to avoid recursion
                var loweredCase = false
                for (; ;) {
                    switch (encoding) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len
                        case 'utf8':
                        case 'utf-8':
                        case undefined:
                            return utf8ToBytes(string).length
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return len * 2
                        case 'hex':
                            return len >>> 1
                        case 'base64':
                            return base64ToBytes(string).length
                        default:
                            if (loweredCase) return utf8ToBytes(string).length // assume utf8
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }
            Buffer.byteLength = byteLength

            function slowToString(encoding, start, end) {
                var loweredCase = false

                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.

                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                if (start === undefined || start < 0) {
                    start = 0
                }
                // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.
                if (start > this.length) {
                    return ''
                }

                if (end === undefined || end > this.length) {
                    end = this.length
                }

                if (end <= 0) {
                    return ''
                }

                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                end >>>= 0
                start >>>= 0

                if (end <= start) {
                    return ''
                }

                if (!encoding) encoding = 'utf8'

                while (true) {
                    switch (encoding) {
                        case 'hex':
                            return hexSlice(this, start, end)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end)

                        case 'ascii':
                            return asciiSlice(this, start, end)

                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end)

                        case 'base64':
                            return base64Slice(this, start, end)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = (encoding + '').toLowerCase()
                            loweredCase = true
                    }
                }
            }

            // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
            // Buffer instances.
            Buffer.prototype._isBuffer = true

            function swap(b, n, m) {
                var i = b[n]
                b[n] = b[m]
                b[m] = i
            }

            Buffer.prototype.swap16 = function swap16() {
                var len = this.length
                if (len % 2 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 16-bits')
                }
                for (var i = 0; i < len; i += 2) {
                    swap(this, i, i + 1)
                }
                return this
            }

            Buffer.prototype.swap32 = function swap32() {
                var len = this.length
                if (len % 4 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 32-bits')
                }
                for (var i = 0; i < len; i += 4) {
                    swap(this, i, i + 3)
                    swap(this, i + 1, i + 2)
                }
                return this
            }

            Buffer.prototype.swap64 = function swap64() {
                var len = this.length
                if (len % 8 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 64-bits')
                }
                for (var i = 0; i < len; i += 8) {
                    swap(this, i, i + 7)
                    swap(this, i + 1, i + 6)
                    swap(this, i + 2, i + 5)
                    swap(this, i + 3, i + 4)
                }
                return this
            }

            Buffer.prototype.toString = function toString() {
                var length = this.length | 0
                if (length === 0) return ''
                if (arguments.length === 0) return utf8Slice(this, 0, length)
                return slowToString.apply(this, arguments)
            }

            Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                if (this === b) return true
                return Buffer.compare(this, b) === 0
            }

            Buffer.prototype.inspect = function inspect() {
                var str = ''
                var max = exports.h2
                if (this.length > 0) {
                    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                    if (this.length > max) str += ' ... '
                }
                return '<Buffer ' + str + '>'
            }

            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (!Buffer.isBuffer(target)) {
                    throw new TypeError('Argument must be a Buffer')
                }

                if (start === undefined) {
                    start = 0
                }
                if (end === undefined) {
                    end = target ? target.length : 0
                }
                if (thisStart === undefined) {
                    thisStart = 0
                }
                if (thisEnd === undefined) {
                    thisEnd = this.length
                }

                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError('out of range index')
                }

                if (thisStart >= thisEnd && start >= end) {
                    return 0
                }
                if (thisStart >= thisEnd) {
                    return -1
                }
                if (start >= end) {
                    return 1
                }

                start >>>= 0
                end >>>= 0
                thisStart >>>= 0
                thisEnd >>>= 0

                if (this === target) return 0

                var x = thisEnd - thisStart
                var y = end - start
                var len = Math.min(x, y)

                var thisCopy = this.slice(thisStart, thisEnd)
                var targetCopy = target.slice(start, end)

                for (var i = 0; i < len; ++i) {
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i]
                        y = targetCopy[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1

                // Normalize byteOffset
                if (typeof byteOffset === 'string') {
                    encoding = byteOffset
                    byteOffset = 0
                } else if (byteOffset > 0x7fffffff) {
                    byteOffset = 0x7fffffff
                } else if (byteOffset < -0x80000000) {
                    byteOffset = -0x80000000
                }
                byteOffset = +byteOffset  // Coerce to Number.
                if (isNaN(byteOffset)) {
                    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                    byteOffset = dir ? 0 : (buffer.length - 1)
                }

                // Normalize byteOffset: negative offsets start from the end of the buffer
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                if (byteOffset >= buffer.length) {
                    if (dir) return -1
                    else byteOffset = buffer.length - 1
                } else if (byteOffset < 0) {
                    if (dir) byteOffset = 0
                    else return -1
                }

                // Normalize val
                if (typeof val === 'string') {
                    val = Buffer.from(val, encoding)
                }

                // Finally, search either indexOf (if dir is true) or lastIndexOf
                if (Buffer.isBuffer(val)) {
                    // Special case: looking for empty string/buffer always fails
                    if (val.length === 0) {
                        return -1
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                } else if (typeof val === 'number') {
                    val = val & 0xFF // Search for a byte value [0-255]
                    if (Buffer.TYPED_ARRAY_SUPPORT &&
                        typeof Uint8Array.prototype.indexOf === 'function') {
                        if (dir) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                        }
                    }
                    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
                }

                throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1
                var arrLength = arr.length
                var valLength = val.length

                if (encoding !== undefined) {
                    encoding = String(encoding).toLowerCase()
                    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                        encoding === 'utf16le' || encoding === 'utf-16le') {
                        if (arr.length < 2 || val.length < 2) {
                            return -1
                        }
                        indexSize = 2
                        arrLength /= 2
                        valLength /= 2
                        byteOffset /= 2
                    }
                }

                function read(buf, i) {
                    if (indexSize === 1) {
                        return buf[i]
                    } else {
                        return buf.readUInt16BE(i * indexSize)
                    }
                }

                var i
                if (dir) {
                    var foundIndex = -1
                    for (i = byteOffset; i < arrLength; i++) {
                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex
                            foundIndex = -1
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                    for (i = byteOffset; i >= 0; i--) {
                        var found = true
                        for (var j = 0; j < valLength; j++) {
                            if (read(arr, i + j) !== read(val, j)) {
                                found = false
                                break
                            }
                        }
                        if (found) return i
                    }
                }

                return -1
            }

            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1
            }

            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            }

            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            }

            function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0
                var remaining = buf.length - offset
                if (!length) {
                    length = remaining
                } else {
                    length = Number(length)
                    if (length > remaining) {
                        length = remaining
                    }
                }

                // must be an even number of digits
                var strLen = string.length
                if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

                if (length > strLen / 2) {
                    length = strLen / 2
                }
                for (var i = 0; i < length; ++i) {
                    var parsed = parseInt(string.substr(i * 2, 2), 16)
                    if (isNaN(parsed)) return i
                    buf[offset + i] = parsed
                }
                return i
            }

            function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length)
            }

            function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write(string, offset, length, encoding) {
                // Buffer#write(string)
                if (offset === undefined) {
                    encoding = 'utf8'
                    length = this.length
                    offset = 0
                    // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                    encoding = offset
                    length = this.length
                    offset = 0
                    // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                    offset = offset | 0
                    if (isFinite(length)) {
                        length = length | 0
                        if (encoding === undefined) encoding = 'utf8'
                    } else {
                        encoding = length
                        length = undefined
                    }
                    // legacy write(string, encoding, offset, length) - remove in v0.13
                } else {
                    throw new Error(
                        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                    )
                }

                var remaining = this.length - offset
                if (length === undefined || length > remaining) length = remaining

                if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                    throw new RangeError('Attempt to write outside buffer bounds')
                }

                if (!encoding) encoding = 'utf8'

                var loweredCase = false
                for (; ;) {
                    switch (encoding) {
                        case 'hex':
                            return hexWrite(this, string, offset, length)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length)

                        case 'ascii':
                            return asciiWrite(this, string, offset, length)

                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, string, offset, length)

                        case 'base64':
                            // Warning: maxLength not taken into account in base64Write
                            return base64Write(this, string, offset, length)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.prototype.toJSON = function toJSON() {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }

            function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf)
                } else {
                    return base64.fromByteArray(buf.slice(start, end))
                }
            }

            function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end)
                var res = []

                var i = start
                while (i < end) {
                    var firstByte = buf[i]
                    var codePoint = null
                    var bytesPerSequence = (firstByte > 0xEF) ? 4
                        : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                                : 1

                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint

                        switch (bytesPerSequence) {
                            case 1:
                                if (firstByte < 0x80) {
                                    codePoint = firstByte
                                }
                                break
                            case 2:
                                secondByte = buf[i + 1]
                                if ((secondByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                    if (tempCodePoint > 0x7F) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 3:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 4:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                fourthByte = buf[i + 3]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                        codePoint = tempCodePoint
                                    }
                                }
                        }
                    }

                    if (codePoint === null) {
                        // we did not generate a valid codePoint so insert a
                        // replacement char (U+FFFD) and advance only 1 byte
                        codePoint = 0xFFFD
                        bytesPerSequence = 1
                    } else if (codePoint > 0xFFFF) {
                        // encode to utf16 (surrogate pair dance)
                        codePoint -= 0x10000
                        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                        codePoint = 0xDC00 | codePoint & 0x3FF
                    }

                    res.push(codePoint)
                    i += bytesPerSequence
                }

                return decodeCodePointsArray(res)
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000

            function decodeCodePointsArray(codePoints) {
                var len = codePoints.length
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                }

                // Decode in chunks to avoid "call stack size exceeded".
                var res = ''
                var i = 0
                while (i < len) {
                    res += String.fromCharCode.apply(
                        String,
                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                    )
                }
                return res
            }

            function asciiSlice(buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i] & 0x7F)
                }
                return ret
            }

            function latin1Slice(buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i])
                }
                return ret
            }

            function hexSlice(buf, start, end) {
                var len = buf.length

                if (!start || start < 0) start = 0
                if (!end || end < 0 || end > len) end = len

                var out = ''
                for (var i = start; i < end; ++i) {
                    out += toHex(buf[i])
                }
                return out
            }

            function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end)
                var res = ''
                for (var i = 0; i < bytes.length; i += 2) {
                    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
                }
                return res
            }

            Buffer.prototype.slice = function slice(start, end) {
                var len = this.length
                start = ~~start
                end = end === undefined ? len : ~~end

                if (start < 0) {
                    start += len
                    if (start < 0) start = 0
                } else if (start > len) {
                    start = len
                }

                if (end < 0) {
                    end += len
                    if (end < 0) end = 0
                } else if (end > len) {
                    end = len
                }

                if (end < start) end = start

                var newBuf
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    newBuf = this.subarray(start, end)
                    newBuf.__proto__ = Buffer.prototype
                } else {
                    var sliceLen = end - start
                    newBuf = new Buffer(sliceLen, undefined)
                    for (var i = 0; i < sliceLen; ++i) {
                        newBuf[i] = this[i + start]
                    }
                }

                return newBuf
            }

            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
            function checkOffset(offset, ext, length) {
                if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }

                return val
            }

            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) {
                    checkOffset(offset, byteLength, this.length)
                }

                var val = this[offset + --byteLength]
                var mul = 1
                while (byteLength > 0 && (mul *= 0x100)) {
                    val += this[offset + --byteLength] * mul
                }

                return val
            }

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 1, this.length)
                return this[offset]
            }

            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                return this[offset] | (this[offset + 1] << 8)
            }

            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                return (this[offset] << 8) | this[offset + 1]
            }

            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return ((this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16)) +
                    (this[offset + 3] * 0x1000000)
            }

            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] * 0x1000000) +
                    ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
            }

            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var i = byteLength
                var mul = 1
                var val = this[offset + --i]
                while (i > 0 && (mul *= 0x100)) {
                    val += this[offset + --i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 1, this.length)
                if (!(this[offset] & 0x80)) return (this[offset])
                return ((0xff - this[offset] + 1) * -1)
            }

            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset] | (this[offset + 1] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset + 1] | (this[offset] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16) |
                    (this[offset + 3] << 24)
            }

            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] << 24) |
                    (this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    (this[offset + 3])
            }

            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, true, 23, 4)
            }

            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, false, 23, 4)
            }

            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, true, 52, 8)
            }

            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, false, 52, 8)
            }

            function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var mul = 1
                var i = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var i = byteLength - 1
                var mul = 1
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
                this[offset] = (value & 0xff)
                return offset + 1
            }

            function objectWriteUInt16(buf, value, offset, littleEndian) {
                if (value < 0) value = 0xffff + value + 1
                for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                        (littleEndian ? i : 1 - i) * 8
                }
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value & 0xff)
                    this[offset + 1] = (value >>> 8)
                } else {
                    objectWriteUInt16(this, value, offset, true)
                }
                return offset + 2
            }

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 8)
                    this[offset + 1] = (value & 0xff)
                } else {
                    objectWriteUInt16(this, value, offset, false)
                }
                return offset + 2
            }

            function objectWriteUInt32(buf, value, offset, littleEndian) {
                if (value < 0) value = 0xffffffff + value + 1
                for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
                }
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset + 3] = (value >>> 24)
                    this[offset + 2] = (value >>> 16)
                    this[offset + 1] = (value >>> 8)
                    this[offset] = (value & 0xff)
                } else {
                    objectWriteUInt32(this, value, offset, true)
                }
                return offset + 4
            }

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 24)
                    this[offset + 1] = (value >>> 16)
                    this[offset + 2] = (value >>> 8)
                    this[offset + 3] = (value & 0xff)
                } else {
                    objectWriteUInt32(this, value, offset, false)
                }
                return offset + 4
            }

            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = 0
                var mul = 1
                var sub = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = byteLength - 1
                var mul = 1
                var sub = 0
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
                if (value < 0) value = 0xff + value + 1
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value & 0xff)
                    this[offset + 1] = (value >>> 8)
                } else {
                    objectWriteUInt16(this, value, offset, true)
                }
                return offset + 2
            }

            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 8)
                    this[offset + 1] = (value & 0xff)
                } else {
                    objectWriteUInt16(this, value, offset, false)
                }
                return offset + 2
            }

            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value & 0xff)
                    this[offset + 1] = (value >>> 8)
                    this[offset + 2] = (value >>> 16)
                    this[offset + 3] = (value >>> 24)
                } else {
                    objectWriteUInt32(this, value, offset, true)
                }
                return offset + 4
            }

            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (value < 0) value = 0xffffffff + value + 1
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 24)
                    this[offset + 1] = (value >>> 16)
                    this[offset + 2] = (value >>> 8)
                    this[offset + 3] = (value & 0xff)
                } else {
                    objectWriteUInt32(this, value, offset, false)
                }
                return offset + 4
            }

            function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4)
                return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert)
            }

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8)
                return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert)
            }

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                if (!start) start = 0
                if (!end && end !== 0) end = this.length
                if (targetStart >= target.length) targetStart = target.length
                if (!targetStart) targetStart = 0
                if (end > 0 && end < start) end = start

                // Copy 0 bytes; we're done
                if (end === start) return 0
                if (target.length === 0 || this.length === 0) return 0

                // Fatal error conditions
                if (targetStart < 0) {
                    throw new RangeError('targetStart out of bounds')
                }
                if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
                if (end < 0) throw new RangeError('sourceEnd out of bounds')

                // Are we oob?
                if (end > this.length) end = this.length
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start
                }

                var len = end - start
                var i

                if (this === target && start < targetStart && targetStart < end) {
                    // descending copy from end
                    for (i = len - 1; i >= 0; --i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                    // ascending copy from start
                    for (i = 0; i < len; ++i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else {
                    Uint8Array.prototype.set.call(
                        target,
                        this.subarray(start, start + len),
                        targetStart
                    )
                }

                return len
            }

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                    if (typeof start === 'string') {
                        encoding = start
                        start = 0
                        end = this.length
                    } else if (typeof end === 'string') {
                        encoding = end
                        end = this.length
                    }
                    if (val.length === 1) {
                        var code = val.charCodeAt(0)
                        if (code < 256) {
                            val = code
                        }
                    }
                    if (encoding !== undefined && typeof encoding !== 'string') {
                        throw new TypeError('encoding must be a string')
                    }
                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                        throw new TypeError('Unknown encoding: ' + encoding)
                    }
                } else if (typeof val === 'number') {
                    val = val & 255
                }

                // Invalid ranges are not set to a default, so can range check early.
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError('Out of range index')
                }

                if (end <= start) {
                    return this
                }

                start = start >>> 0
                end = end === undefined ? this.length : end >>> 0

                if (!val) val = 0

                var i
                if (typeof val === 'number') {
                    for (i = start; i < end; ++i) {
                        this[i] = val
                    }
                } else {
                    var bytes = Buffer.isBuffer(val)
                        ? val
                        : utf8ToBytes(new Buffer(val, encoding).toString())
                    var len = bytes.length
                    for (i = 0; i < end - start; ++i) {
                        this[i + start] = bytes[i % len]
                    }
                }

                return this
            }

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

            function base64clean(str) {
                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                str = stringtrim(str).replace(INVALID_BASE64_RE, '')
                // Node converts strings with length < 2 to ''
                if (str.length < 2) return ''
                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                while (str.length % 4 !== 0) {
                    str = str + '='
                }
                return str
            }

            function stringtrim(str) {
                if (str.trim) return str.trim()
                return str.replace(/^\s+|\s+$/g, '')
            }

            function toHex(n) {
                if (n < 16) return '0' + n.toString(16)
                return n.toString(16)
            }

            function utf8ToBytes(string, units) {
                units = units || Infinity
                var codePoint
                var length = string.length
                var leadSurrogate = null
                var bytes = []

                for (var i = 0; i < length; ++i) {
                    codePoint = string.charCodeAt(i)

                    // is surrogate component
                    if (codePoint > 0xD7FF && codePoint < 0xE000) {
                        // last char was a lead
                        if (!leadSurrogate) {
                            // no lead yet
                            if (codePoint > 0xDBFF) {
                                // unexpected trail
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            } else if (i + 1 === length) {
                                // unpaired lead
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            }

                            // valid lead
                            leadSurrogate = codePoint

                            continue
                        }

                        // 2 leads in a row
                        if (codePoint < 0xDC00) {
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            leadSurrogate = codePoint
                            continue
                        }

                        // valid surrogate pair
                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                    } else if (leadSurrogate) {
                        // valid bmp char, but last char was a lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    }

                    leadSurrogate = null

                    // encode utf8
                    if (codePoint < 0x80) {
                        if ((units -= 1) < 0) break
                        bytes.push(codePoint)
                    } else if (codePoint < 0x800) {
                        if ((units -= 2) < 0) break
                        bytes.push(
                            codePoint >> 0x6 | 0xC0,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x10000) {
                        if ((units -= 3) < 0) break
                        bytes.push(
                            codePoint >> 0xC | 0xE0,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x110000) {
                        if ((units -= 4) < 0) break
                        bytes.push(
                            codePoint >> 0x12 | 0xF0,
                            codePoint >> 0xC & 0x3F | 0x80,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else {
                        throw new Error('Invalid code point')
                    }
                }

                return bytes
            }

            function asciiToBytes(str) {
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    // Node's code seems to be doing this and not & 0x7F..
                    byteArray.push(str.charCodeAt(i) & 0xFF)
                }
                return byteArray
            }

            function utf16leToBytes(str, units) {
                var c, hi, lo
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    if ((units -= 2) < 0) break

                    c = str.charCodeAt(i)
                    hi = c >> 8
                    lo = c % 256
                    byteArray.push(lo)
                    byteArray.push(hi)
                }

                return byteArray
            }

            function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str))
            }

            function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                    if ((i + offset >= dst.length) || (i >= src.length)) break
                    dst[i + offset] = src[i]
                }
                return i
            }

            function isnan(val) {
                return val !== val // eslint-disable-line no-self-compare
            }


            /***/
}),

    /***/ 1576:
    /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                camelCase: () => (/* reexport */ camelCase),
                camelCaseTransform: () => (/* reexport */ camelCaseTransform),
                camelCaseTransformMerge: () => (/* reexport */ camelCaseTransformMerge),
                capitalCase: () => (/* reexport */ capitalCase),
                capitalCaseTransform: () => (/* reexport */ capitalCaseTransform),
                constantCase: () => (/* reexport */ constantCase),
                dotCase: () => (/* reexport */ dotCase),
                headerCase: () => (/* reexport */ headerCase),
                noCase: () => (/* reexport */ noCase),
                paramCase: () => (/* reexport */ paramCase),
                pascalCase: () => (/* reexport */ pascalCase),
                pascalCaseTransform: () => (/* reexport */ pascalCaseTransform),
                pascalCaseTransformMerge: () => (/* reexport */ pascalCaseTransformMerge),
                pathCase: () => (/* reexport */ pathCase),
                sentenceCase: () => (/* reexport */ sentenceCase),
                sentenceCaseTransform: () => (/* reexport */ sentenceCaseTransform),
                snakeCase: () => (/* reexport */ snakeCase)
            });

            ;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.mjs
            /******************************************************************************
            Copyright (c) Microsoft Corporation.
            
            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.
            
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise, SuppressedError, Symbol */

            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                return extendStatics(d, b);
            };

            function __extends(d, b) {
                if (typeof b !== "function" && b !== null)
                    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var __assign = function () {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                }
                return __assign.apply(this, arguments);
            }

            function __rest(s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }

            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
                else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }

            function __param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); }
            }

            function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
                function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
                var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
                var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
                var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
                var _, done = false;
                for (var i = decorators.length - 1; i >= 0; i--) {
                    var context = {};
                    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
                    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
                    context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
                    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
                    if (kind === "accessor") {
                        if (result === void 0) continue;
                        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                        if (_ = accept(result.get)) descriptor.get = _;
                        if (_ = accept(result.set)) descriptor.set = _;
                        if (_ = accept(result.init)) initializers.unshift(_);
                    }
                    else if (_ = accept(result)) {
                        if (kind === "field") initializers.unshift(_);
                        else descriptor[key] = _;
                    }
                }
                if (target) Object.defineProperty(target, contextIn.name, descriptor);
                done = true;
            };

            function __runInitializers(thisArg, initializers, value) {
                var useValue = arguments.length > 2;
                for (var i = 0; i < initializers.length; i++) {
                    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
                }
                return useValue ? value : void 0;
            };

            function __propKey(x) {
                return typeof x === "symbol" ? x : "".concat(x);
            };

            function __setFunctionName(f, name, prefix) {
                if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
                return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
            };

            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
            }

            function __awaiter(thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }

            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (g && (g = 0, op[0] && (_ = 0)), _) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            }

            var __createBinding = Object.create ? (function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                var desc = Object.getOwnPropertyDescriptor(m, k);
                if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                    desc = { enumerable: true, get: function () { return m[k]; } };
                }
                Object.defineProperty(o, k2, desc);
            }) : (function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            });

            function __exportStar(m, o) {
                for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
            }

            function __values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            /** @deprecated */
            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }

            /** @deprecated */
            function __spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            }

            function __spreadArray(to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
            }

            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }

            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
            }

            function __asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
            }

            function __asyncValues(o) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }

            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
                return cooked;
            };

            var __setModuleDefault = Object.create ? (function (o, v) {
                Object.defineProperty(o, "default", { enumerable: true, value: v });
            }) : function (o, v) {
                o["default"] = v;
            };

            function __importStar(mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                __setModuleDefault(result, mod);
                return result;
            }

            function __importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }

            function __classPrivateFieldGet(receiver, state, kind, f) {
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
            }

            function __classPrivateFieldSet(receiver, state, value, kind, f) {
                if (kind === "m") throw new TypeError("Private method is not writable");
                if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
                if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
            }

            function __classPrivateFieldIn(state, receiver) {
                if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
                return typeof state === "function" ? receiver === state : state.has(receiver);
            }

            function __addDisposableResource(env, value, async) {
                if (value !== null && value !== void 0) {
                    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
                    var dispose;
                    if (async) {
                        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
                        dispose = value[Symbol.asyncDispose];
                    }
                    if (dispose === void 0) {
                        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
                        dispose = value[Symbol.dispose];
                    }
                    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
                    env.stack.push({ value: value, dispose: dispose, async: async });
                }
                else if (async) {
                    env.stack.push({ async: true });
                }
                return value;
            }

            var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
                var e = new Error(message);
                return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
            };

            function __disposeResources(env) {
                function fail(e) {
                    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
                    env.hasError = true;
                }
                function next() {
                    while (env.stack.length) {
                        var rec = env.stack.pop();
                        try {
                            var result = rec.dispose && rec.dispose.call(rec.value);
                            if (rec.async) return Promise.resolve(result).then(next, function (e) { fail(e); return next(); });
                        }
                        catch (e) {
                            fail(e);
                        }
                    }
                    if (env.hasError) throw env.error;
                }
                return next();
            }

    /* harmony default export */ const tslib_es6 = ({
                __extends,
                __assign,
                __rest,
                __decorate,
                __param,
                __metadata,
                __awaiter,
                __generator,
                __createBinding,
                __exportStar,
                __values,
                __read,
                __spread,
                __spreadArrays,
                __spreadArray,
                __await,
                __asyncGenerator,
                __asyncDelegator,
                __asyncValues,
                __makeTemplateObject,
                __importStar,
                __importDefault,
                __classPrivateFieldGet,
                __classPrivateFieldSet,
                __classPrivateFieldIn,
                __addDisposableResource,
                __disposeResources,
            });

            ;// CONCATENATED MODULE: ./node_modules/lower-case/dist.es2015/index.js
            /**
             * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
             */
            var SUPPORTED_LOCALE = {
                tr: {
                    regexp: /\u0130|\u0049|\u0049\u0307/g,
                    map: {
                        "\u00C4\u0098": "\u0069",
                        "I": "\u0131",
                        "I\u0307": "\u0069",
                    },
                },
                az: {
                    regexp: /\u0130/g,
                    map: {
                        "\u00C4\u0098": "\u0069",
                        "I": "\u0131",
                        "I\u0307": "\u0069",
                    },
                },
                lt: {
                    regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
                    map: {
                        "I": "\u0069\u0307",
                        "J": "\u006A\u0307",
                        "\u00C4\u008C": "\u012F\u0307",
                        "\u00C3\u008C": "\u0069\u0307\u0300",
                        "\u00C3\u008D": "\u0069\u0307\u0301",
                        "\u00C4\u0088": "\u0069\u0307\u0303",
                    },
                },
            };
            /**
             * Localized lower case.
             */
            function localeLowerCase(str, locale) {
                var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
                if (lang)
                    return lowerCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));
                return lowerCase(str);
            }
            /**
             * Lower case as a function.
             */
            function lowerCase(str) {
                return str.toLowerCase();
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/no-case/dist.es2015/index.js

            // Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
            var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
            // Remove all non-word characters.
            var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
            /**
             * Normalize the string into something other libraries can manipulate easier.
             */
            function noCase(input, options) {
                if (options === void 0) { options = {}; }
                var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
                var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
                var start = 0;
                var end = result.length;
                // Trim the delimiter from around the output string.
                while (result.charAt(start) === "\0")
                    start++;
                while (result.charAt(end - 1) === "\0")
                    end--;
                // Transform each token independently.
                return result.slice(start, end).split("\0").map(transform).join(delimiter);
            }
            /**
             * Replace `re` in the input string with the replacement value.
             */
            function replace(input, re, value) {
                if (re instanceof RegExp)
                    return input.replace(re, value);
                return re.reduce(function (input, re) { return input.replace(re, value); }, input);
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/pascal-case/dist.es2015/index.js


            function pascalCaseTransform(input, index) {
                var firstChar = input.charAt(0);
                var lowerChars = input.substr(1).toLowerCase();
                if (index > 0 && firstChar >= "0" && firstChar <= "9") {
                    return "_" + firstChar + lowerChars;
                }
                return "" + firstChar.toUpperCase() + lowerChars;
            }
            function pascalCaseTransformMerge(input) {
                return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
            }
            function pascalCase(input, options) {
                if (options === void 0) { options = {}; }
                return noCase(input, __assign({ delimiter: "", transform: pascalCaseTransform }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/camel-case/dist.es2015/index.js


            function camelCaseTransform(input, index) {
                if (index === 0)
                    return input.toLowerCase();
                return pascalCaseTransform(input, index);
            }
            function camelCaseTransformMerge(input, index) {
                if (index === 0)
                    return input.toLowerCase();
                return pascalCaseTransformMerge(input);
            }
            function camelCase(input, options) {
                if (options === void 0) { options = {}; }
                return pascalCase(input, __assign({ transform: camelCaseTransform }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/upper-case-first/dist.es2015/index.js
            /**
             * Upper case the first character of an input string.
             */
            function upperCaseFirst(input) {
                return input.charAt(0).toUpperCase() + input.substr(1);
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/capital-case/dist.es2015/index.js



            function capitalCaseTransform(input) {
                return upperCaseFirst(input.toLowerCase());
            }
            function capitalCase(input, options) {
                if (options === void 0) { options = {}; }
                return noCase(input, __assign({ delimiter: " ", transform: capitalCaseTransform }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/upper-case/dist.es2015/index.js
            /**
             * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
             */
            var dist_es2015_SUPPORTED_LOCALE = {
                tr: {
                    regexp: /[\u0069]/g,
                    map: {
                        "i": "\u0130",
                    },
                },
                az: {
                    regexp: /[\u0069]/g,
                    map: {
                        "i": "\u0130",
                    },
                },
                lt: {
                    regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
                    map: {
                        "i\u0307": "\u0049",
                        "j\u0307": "\u004A",
                        "\u012F\u0307": "\u012E",
                        "i\u0307\u0300": "\u00CC",
                        "i\u0307\u0301": "\u00CD",
                        "i\u0307\u0303": "\u0128",
                    },
                },
            };
            /**
             * Localized upper case.
             */
            function localeUpperCase(str, locale) {
                var lang = dist_es2015_SUPPORTED_LOCALE[locale.toLowerCase()];
                if (lang)
                    return upperCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));
                return upperCase(str);
            }
            /**
             * Upper case as a function.
             */
            function upperCase(str) {
                return str.toUpperCase();
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/constant-case/dist.es2015/index.js



            function constantCase(input, options) {
                if (options === void 0) { options = {}; }
                return noCase(input, __assign({ delimiter: "_", transform: upperCase }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/dot-case/dist.es2015/index.js


            function dotCase(input, options) {
                if (options === void 0) { options = {}; }
                return noCase(input, __assign({ delimiter: "." }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/header-case/dist.es2015/index.js


            function headerCase(input, options) {
                if (options === void 0) { options = {}; }
                return capitalCase(input, __assign({ delimiter: "-" }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/param-case/dist.es2015/index.js


            function paramCase(input, options) {
                if (options === void 0) { options = {}; }
                return dotCase(input, __assign({ delimiter: "-" }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/path-case/dist.es2015/index.js


            function pathCase(input, options) {
                if (options === void 0) { options = {}; }
                return dotCase(input, __assign({ delimiter: "/" }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/sentence-case/dist.es2015/index.js



            function sentenceCaseTransform(input, index) {
                var result = input.toLowerCase();
                if (index === 0)
                    return upperCaseFirst(result);
                return result;
            }
            function sentenceCase(input, options) {
                if (options === void 0) { options = {}; }
                return noCase(input, __assign({ delimiter: " ", transform: sentenceCaseTransform }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/snake-case/dist.es2015/index.js


            function snakeCase(input, options) {
                if (options === void 0) { options = {}; }
                return dotCase(input, __assign({ delimiter: "_" }, options));
            }
            //# sourceMappingURL=index.js.map
            ;// CONCATENATED MODULE: ./node_modules/change-case/dist.es2015/index.js











            //# sourceMappingURL=index.js.map

            /***/
}),

    /***/ 4184:
    /***/ ((module, exports) => {

            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
      Copyright (c) 2018 Jed Watson.
      Licensed under the MIT License (MIT), see
      http://jedwatson.github.io/classnames
    */
            /* global define */

            (function () {
                'use strict';

                var hasOwn = {}.hasOwnProperty;

                function classNames() {
                    var classes = [];

                    for (var i = 0; i < arguments.length; i++) {
                        var arg = arguments[i];
                        if (!arg) continue;

                        var argType = typeof arg;

                        if (argType === 'string' || argType === 'number') {
                            classes.push(arg);
                        } else if (Array.isArray(arg)) {
                            if (arg.length) {
                                var inner = classNames.apply(null, arg);
                                if (inner) {
                                    classes.push(inner);
                                }
                            }
                        } else if (argType === 'object') {
                            if (arg.toString === Object.prototype.toString) {
                                for (var key in arg) {
                                    if (hasOwn.call(arg, key) && arg[key]) {
                                        classes.push(key);
                                    }
                                }
                            } else {
                                classes.push(arg.toString());
                            }
                        }
                    }

                    return classes.join(' ');
                }

                if (true && module.exports) {
                    classNames.default = classNames;
                    module.exports = classNames;
                } else if (true) {
                    // register as 'classnames', consistent with npm package name
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                        return classNames;
                    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else { }
            }());


            /***/
}),

    /***/ 6489:
    /***/ ((__unused_webpack_module, exports) => {

            "use strict";
            /*!
             * cookie
             * Copyright(c) 2012-2014 Roman Shtylman
             * Copyright(c) 2015 Douglas Christopher Wilson
             * MIT Licensed
             */



            /**
             * Module exports.
             * @public
             */

            exports.Q = parse;
            exports.q = serialize;

            /**
             * Module variables.
             * @private
             */

            var decode = decodeURIComponent;
            var encode = encodeURIComponent;

            /**
             * RegExp to match field-content in RFC 7230 sec 3.2
             *
             * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
             * field-vchar   = VCHAR / obs-text
             * obs-text      = %x80-FF
             */

            var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

            /**
             * Parse a cookie header.
             *
             * Parse the given cookie header string into an object
             * The object has the various cookies as keys(names) => values
             *
             * @param {string} str
             * @param {object} [options]
             * @return {object}
             * @public
             */

            function parse(str, options) {
                if (typeof str !== 'string') {
                    throw new TypeError('argument str must be a string');
                }

                var obj = {}
                var opt = options || {};
                var pairs = str.split(';')
                var dec = opt.decode || decode;

                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i];
                    var index = pair.indexOf('=')

                    // skip things that don't look like key=value
                    if (index < 0) {
                        continue;
                    }

                    var key = pair.substring(0, index).trim()

                    // only assign once
                    if (undefined == obj[key]) {
                        var val = pair.substring(index + 1, pair.length).trim()

                        // quoted values
                        if (val[0] === '"') {
                            val = val.slice(1, -1)
                        }

                        obj[key] = tryDecode(val, dec);
                    }
                }

                return obj;
            }

            /**
             * Serialize data into a cookie header.
             *
             * Serialize the a name value pair into a cookie string suitable for
             * http headers. An optional options object specified cookie parameters.
             *
             * serialize('foo', 'bar', { httpOnly: true })
             *   => "foo=bar; httpOnly"
             *
             * @param {string} name
             * @param {string} val
             * @param {object} [options]
             * @return {string}
             * @public
             */

            function serialize(name, val, options) {
                var opt = options || {};
                var enc = opt.encode || encode;

                if (typeof enc !== 'function') {
                    throw new TypeError('option encode is invalid');
                }

                if (!fieldContentRegExp.test(name)) {
                    throw new TypeError('argument name is invalid');
                }

                var value = enc(val);

                if (value && !fieldContentRegExp.test(value)) {
                    throw new TypeError('argument val is invalid');
                }

                var str = name + '=' + value;

                if (null != opt.maxAge) {
                    var maxAge = opt.maxAge - 0;

                    if (isNaN(maxAge) || !isFinite(maxAge)) {
                        throw new TypeError('option maxAge is invalid')
                    }

                    str += '; Max-Age=' + Math.floor(maxAge);
                }

                if (opt.domain) {
                    if (!fieldContentRegExp.test(opt.domain)) {
                        throw new TypeError('option domain is invalid');
                    }

                    str += '; Domain=' + opt.domain;
                }

                if (opt.path) {
                    if (!fieldContentRegExp.test(opt.path)) {
                        throw new TypeError('option path is invalid');
                    }

                    str += '; Path=' + opt.path;
                }

                if (opt.expires) {
                    if (typeof opt.expires.toUTCString !== 'function') {
                        throw new TypeError('option expires is invalid');
                    }

                    str += '; Expires=' + opt.expires.toUTCString();
                }

                if (opt.httpOnly) {
                    str += '; HttpOnly';
                }

                if (opt.secure) {
                    str += '; Secure';
                }

                if (opt.sameSite) {
                    var sameSite = typeof opt.sameSite === 'string'
                        ? opt.sameSite.toLowerCase() : opt.sameSite;

                    switch (sameSite) {
                        case true:
                            str += '; SameSite=Strict';
                            break;
                        case 'lax':
                            str += '; SameSite=Lax';
                            break;
                        case 'strict':
                            str += '; SameSite=Strict';
                            break;
                        case 'none':
                            str += '; SameSite=None';
                            break;
                        default:
                            throw new TypeError('option sameSite is invalid');
                    }
                }

                return str;
            }

            /**
             * Try decoding a string using a decoding function.
             *
             * @param {string} str
             * @param {function} decode
             * @private
             */

            function tryDecode(str, decode) {
                try {
                    return decode(str);
                } catch (e) {
                    return str;
                }
            }


            /***/
}),

    /***/ 5473:
    /***/ ((module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            __webpack_require__.r(__webpack_exports__);
    /* harmony export */ __webpack_require__.d(__webpack_exports__, {
    /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
                /* harmony export */
});
    /* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7537);
    /* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3645);
    /* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
    /* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1667);
    /* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
            // Imports



            var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(357), __webpack_require__.b);
            var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(2135), __webpack_require__.b);
            var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(4956), __webpack_require__.b);
            var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(7926), __webpack_require__.b);
            var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
            var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
            var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
            var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
            var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
            // Module
            ___CSS_LOADER_EXPORT___.push([module.id, `@font-face{font-family:"museo_slab700";src:local("Museo Slab 700");font-weight:normal;font-style:normal;font-display:swap}[data-amplify-authenticator]{padding:10px;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif}[data-amplify-authenticator] [data-amplify-container]{width:100%;max-width:486px}[data-amplify-authenticator] [data-amplify-container] [data-amplify-router]{border-radius:4px;border-top:0;border-color:#b6bac9}[data-amplify-authenticator] [data-amplify-container] [data-amplify-form]{padding:16px 16px 24px}[data-amplify-authenticator] [data-amplify-container] [data-amplify-form] input[type=number]::-webkit-inner-spin-button,[data-amplify-authenticator] [data-amplify-container] [data-amplify-form] input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}[data-amplify-authenticator] [data-amplify-container] [data-amplify-form] input[type=number]{-moz-appearance:textfield}[data-amplify-authenticator] [data-amplify-container] .amplify-label{font-size:16px;font-style:normal;font-weight:700;line-height:24px;color:#273157}[data-amplify-authenticator] [data-amplify-container] .amplify-input{background-color:#f3f5fa}[data-amplify-authenticator] [data-amplify-container] .amplify-input:has(+.amplify-input-success:not(.hidden)){margin-bottom:16px;transition:none}[data-amplify-authenticator] [data-amplify-container] input::placeholder{color:#485279;font-weight:400}[data-amplify-authenticator] [data-amplify-container] .amplify-checkbox{align-items:start;margin-top:8px}[data-amplify-authenticator] [data-amplify-container] .amplify-checkbox__icon{background-color:#273157}[data-amplify-authenticator] [data-amplify-container] .amplify-checkbox__label{font-size:16px;font-weight:400;line-height:24px;color:#4a4a4a}[data-amplify-authenticator] [data-amplify-container] .amplify-checkbox__label a{font-size:16px;font-weight:500;line-height:24px;color:#214ea3}[data-amplify-authenticator] [data-amplify-container] .amplify-checkbox__button::before{border-width:1px;border-color:#9197af}[data-amplify-authenticator] [data-amplify-container] .amplify-checkbox__button--error::before{border-color:#a0192c;border-width:2px}[data-amplify-authenticator] [data-amplify-container] .amplify-button--primary{color:#214ea3;border:2px solid #214ea3;background-color:rgba(0,0,0,0);font-size:18px;font-weight:700 !important}[data-amplify-authenticator] [data-amplify-container] .amplify-button--small{color:#214ea3;font-size:16px;font-style:normal;font-weight:500 !important;line-height:24px;text-decoration-line:underline;padding:0;border:0}[data-amplify-authenticator] [data-amplify-container] .amplify-button--small:hover{background-color:unset}[data-amplify-authenticator] [data-amplify-container] .amplify-button--small:focus{border:none}[data-amplify-authenticator] [data-amplify-container] .amplify-tabs__list{border-radius:4px}[data-amplify-authenticator] [data-amplify-container] .amplify-tabs__panel{padding:0}[data-amplify-authenticator] [data-amplify-container] .amplify-tabs-item{border-color:#b6bac9;border-top-width:4px;border-top-right-radius:3px;font-size:14px;color:#273157;background:#f6f6f8;font-family:"museo_slab700";line-height:20px;padding:12px 8px}[data-amplify-authenticator] [data-amplify-container] .amplify-tabs-item:first-of-type{border-top-left-radius:3px;border-top-right-radius:0}[data-amplify-authenticator] [data-amplify-container] .amplify-tabs-item[data-state=active]{border-top-color:#c62035;background-color:#fff}[data-amplify-authenticator] [data-amplify-container] .amplify-tabs-item:disabled{opacity:.5;cursor:not-allowed}[data-amplify-authenticator] [data-amplify-container] .amplify-field__show-password{display:none}[data-amplify-authenticator] [data-amplify-footer]{padding-bottom:16px}[data-amplify-authenticator-signin] .amplify-button--primary,[data-amplify-authenticator-signup] .amplify-button--primary{margin-top:8px}[data-amplify-form][data-amplify-authenticator-confirmresetpassword],[data-amplify-form][data-amplify-authenticator-confirmsignup],[data-amplify-form][data-amplify-authenticator-custom],[data-amplify-form][data-amplify-authenticator-resetpassword]{padding:0 !important}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] fieldset.amplify-flex,[data-amplify-form][data-amplify-authenticator-confirmsignup] fieldset.amplify-flex,[data-amplify-form][data-amplify-authenticator-custom] fieldset.amplify-flex,[data-amplify-form][data-amplify-authenticator-resetpassword] fieldset.amplify-flex{gap:24px;flex-direction:column}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] fieldset>div:not(.amplify-alert--error),[data-amplify-form][data-amplify-authenticator-confirmsignup] fieldset>div:not(.amplify-alert--error),[data-amplify-form][data-amplify-authenticator-custom] fieldset>div:not(.amplify-alert--error),[data-amplify-form][data-amplify-authenticator-resetpassword] fieldset>div:not(.amplify-alert--error){padding:0 16px}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] fieldset>div:not(.amplify-alert--error):first-of-type,[data-amplify-form][data-amplify-authenticator-confirmsignup] fieldset>div:not(.amplify-alert--error):first-of-type,[data-amplify-form][data-amplify-authenticator-custom] fieldset>div:not(.amplify-alert--error):first-of-type,[data-amplify-form][data-amplify-authenticator-resetpassword] fieldset>div:not(.amplify-alert--error):first-of-type{padding:0}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] fieldset>div:not(.amplify-alert--error):last-of-type,[data-amplify-form][data-amplify-authenticator-confirmsignup] fieldset>div:not(.amplify-alert--error):last-of-type,[data-amplify-form][data-amplify-authenticator-custom] fieldset>div:not(.amplify-alert--error):last-of-type,[data-amplify-form][data-amplify-authenticator-resetpassword] fieldset>div:not(.amplify-alert--error):last-of-type{padding-bottom:16px}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] .amplify-icon,[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-icon,[data-amplify-form][data-amplify-authenticator-custom] .amplify-icon,[data-amplify-form][data-amplify-authenticator-resetpassword] .amplify-icon{height:24px}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] .amplify-header,[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-header,[data-amplify-form][data-amplify-authenticator-custom] .amplify-header,[data-amplify-form][data-amplify-authenticator-resetpassword] .amplify-header{display:flex;justify-content:space-between;align-items:flex-start}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] .amplify-header span,[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-header span,[data-amplify-form][data-amplify-authenticator-custom] .amplify-header span,[data-amplify-form][data-amplify-authenticator-resetpassword] .amplify-header span{font-size:20px;line-height:28px;color:#273157;font-family:"museo_slab700"}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] p,[data-amplify-form][data-amplify-authenticator-confirmsignup] p,[data-amplify-form][data-amplify-authenticator-custom] p,[data-amplify-form][data-amplify-authenticator-resetpassword] p{color:#4a4a4a;font-weight:400;margin:0}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] .amplify-description,[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-description,[data-amplify-form][data-amplify-authenticator-custom] .amplify-description,[data-amplify-form][data-amplify-authenticator-resetpassword] .amplify-description{display:flex;flex-direction:column;width:50%}[data-amplify-form][data-amplify-authenticator-confirmresetpassword] .amplify-username,[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-username,[data-amplify-form][data-amplify-authenticator-custom] .amplify-username,[data-amplify-form][data-amplify-authenticator-resetpassword] .amplify-username{font-weight:500}[data-amplify-form][data-amplify-authenticator-resetpassword] .amplify-button--link{display:none}[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-header{margin-bottom:8px}[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-flex.amplify-field{gap:8px}[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-button:not(.amplify-button--primary){color:#214ea3;font-size:16px;font-style:normal;font-weight:500 !important;line-height:24px;text-decoration-line:underline;padding:0;border:0}[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-button:not(.amplify-button--primary):hover{background-color:unset}[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-button:not(.amplify-button--primary):focus{border:none}[data-amplify-form][data-amplify-authenticator-confirmsignup] .amplify-authenticator__subtitle{display:none}[data-amplify-authenticator-signin] .amplify-alert--error,[data-amplify-authenticator-signup] .amplify-alert--error{color:#a0192c;background-color:#feeded;padding:16px;font-size:16px;font-weight:400;line-height:20px;border-radius:4px;box-shadow:0px 6px 12px 0px rgba(0,0,0,.25)}[data-amplify-authenticator-signin] .amplify-alert--error .amplify-alert__icon,[data-amplify-authenticator-signin] .amplify-alert--error .amplify-alert__dismiss,[data-amplify-authenticator-signup] .amplify-alert--error .amplify-alert__icon,[data-amplify-authenticator-signup] .amplify-alert--error .amplify-alert__dismiss{display:none}[data-amplify-authenticator-signin] fieldset:has(+.amplify-alert--error) .amplify-label{color:#a0192c}[data-amplify-authenticator-signin] fieldset:has(+.amplify-alert--error) .amplify-label:before{content:url(${___CSS_LOADER_URL_REPLACEMENT_0___});top:6px;position:relative;margin-right:8px}[data-amplify-authenticator-signin] fieldset:has(+.amplify-alert--error) .amplify-input{background-color:#feeded;border:2px solid #a0192c}[data-amplify-authenticator-signin] fieldset:has(+.amplify-alert--error) input::placeholder{color:#a0192c}[data-amplify-authenticator-signup] .amplify-textfield:has(+[data-amplify-sign-up-errors=true]) .amplify-label,[data-amplify-authenticator-confirmresetpassword] .amplify-textfield:has(+[data-amplify-sign-up-errors=true]) .amplify-label{color:#a0192c}[data-amplify-authenticator-signup] .amplify-textfield:has(+[data-amplify-sign-up-errors=true]) .amplify-input,[data-amplify-authenticator-confirmresetpassword] .amplify-textfield:has(+[data-amplify-sign-up-errors=true]) .amplify-input{background-color:#feeded;border:2px solid #a0192c;color:#a0192c}[data-amplify-authenticator-signup] .amplify-textfield:has(+[data-amplify-sign-up-errors=true]) input::placeholder,[data-amplify-authenticator-confirmresetpassword] .amplify-textfield:has(+[data-amplify-sign-up-errors=true]) input::placeholder{color:#a0192c}[data-amplify-authenticator-signup] .amplify-textfield+[data-amplify-sign-up-errors=true],[data-amplify-authenticator-confirmresetpassword] .amplify-textfield+[data-amplify-sign-up-errors=true]{display:flex;align-items:start;gap:4px}[data-amplify-authenticator-signup] .amplify-textfield+[data-amplify-sign-up-errors=true]:before,[data-amplify-authenticator-confirmresetpassword] .amplify-textfield+[data-amplify-sign-up-errors=true]:before{content:url(${___CSS_LOADER_URL_REPLACEMENT_1___})}[data-amplify-authenticator-signup] .amplify-textfield+[data-amplify-sign-up-errors=true] .amplify-text--error,[data-amplify-authenticator-confirmresetpassword] .amplify-textfield+[data-amplify-sign-up-errors=true] .amplify-text--error{font-size:14px;color:#a0192c}[data-amplify-authenticator-signup] .amplify-field__error-message,[data-amplify-authenticator-confirmresetpassword] .amplify-field__error-message{font-size:14px;color:#a0192c;display:flex;align-items:start;gap:4px}[data-amplify-authenticator-signup] .amplify-field__error-message:before,[data-amplify-authenticator-confirmresetpassword] .amplify-field__error-message:before{content:url(${___CSS_LOADER_URL_REPLACEMENT_1___})}[data-amplify-authenticator-confirmresetpassword] .amplify-alert--error,[data-amplify-authenticator-resetpassword] .amplify-alert--error{color:#a0192c;background-color:#feeded;padding:16px;font-size:16px;font-weight:400;line-height:20px;border-radius:4px;box-shadow:0px 6px 12px 0px rgba(0,0,0,.25);margin:0 16px}[data-amplify-authenticator-confirmresetpassword] .amplify-alert--error .amplify-alert__icon,[data-amplify-authenticator-confirmresetpassword] .amplify-alert--error .amplify-alert__dismiss,[data-amplify-authenticator-resetpassword] .amplify-alert--error .amplify-alert__icon,[data-amplify-authenticator-resetpassword] .amplify-alert--error .amplify-alert__dismiss{display:none}[data-amplify-authenticator-confirmsignup] .amplify-alert--error{display:flex;align-items:start;gap:4px;font-size:16px;font-weight:700;color:#a0192c;padding:0;background:rgba(0,0,0,0)}[data-amplify-authenticator-confirmsignup] .amplify-alert--error:before{content:url(${___CSS_LOADER_URL_REPLACEMENT_1___})}[data-amplify-authenticator-confirmsignup] .amplify-alert--error .amplify-alert__icon,[data-amplify-authenticator-confirmsignup] .amplify-alert--error .amplify-alert__dismiss{display:none}[data-amplify-authenticator-confirmsignup] .amplify-textfield:has(+.amplify-alert--error) .amplify-label{color:#a0192c}[data-amplify-authenticator-confirmsignup] .amplify-textfield:has(+.amplify-alert--error) .amplify-input{background-color:#feeded;border:2px solid #a0192c;color:#a0192c}[data-amplify-authenticator-confirmsignup] .amplify-textfield:has(+.amplify-alert--error) input::placeholder{color:#a0192c}[data-amplify-authenticator-confirmsignup] .amplify-custom-resendCode{flex-direction:column}[data-amplify-authenticator-confirmsignup] .amplify-button--primary+.amplify-button{display:none}[data-amplify-authenticator-confirmresetpassword] .amplify-input-success,[data-amplify-authenticator-confirmsignup] .amplify-input-success{color:#177a24;font-size:16px;font-weight:700;line-height:24px}[data-amplify-authenticator-confirmresetpassword] .amplify-input-success.hidden,[data-amplify-authenticator-confirmsignup] .amplify-input-success.hidden{display:none}[data-amplify-authenticator-confirmsignup] .amplify-custom-alert--error{color:#a0192c;background-color:#feeded;padding:16px;font-size:16px;font-weight:400;line-height:20px;border-radius:4px;box-shadow:0px 6px 12px 0px rgba(0,0,0,.25);display:block;margin-top:16px}[data-amplify-authenticator-confirmsignup] .amplify-custom-alert--error .amplify-alert__icon,[data-amplify-authenticator-confirmsignup] .amplify-custom-alert--error .amplify-alert__dismiss{display:none}[data-amplify-authenticator-confirmsignup] .amplify-custom-alert--error.hidden{display:none}.overlay-container.login-overlay-container{max-height:none;align-items:center;justify-content:center;display:flex}.overlay-container.login-overlay-container .overlay-content.lightbox--default-size,.overlay-container.login-overlay-container .overlay-content.lightbox--full-content-size{top:0;transform:none;max-height:none;position:relative}.overlay-container.login-overlay-container [data-amplify-authenticator] [data-amplify-container] .amplify-tabs-item,.overlay-container.login-overlay-container [data-amplify-authenticator] [data-amplify-container] .amplify-input,.overlay-container.login-overlay-container [data-amplify-authenticator] [data-amplify-container] .amplify-placeholder,.overlay-container.login-overlay-container [data-amplify-authenticator] [data-amplify-container] .amplify-button{transform:none;transition:none}#auth-app.redirect{display:none}[data-amplify-form][data-amplify-authenticator-custom] p{color:#273157}[data-amplify-form][data-amplify-authenticator-custom] .link-container{display:flex;justify-content:center}[data-amplify-form][data-amplify-authenticator-custom] .header-container{display:grid;justify-items:center}[data-amplify-form][data-amplify-authenticator-custom] .header-container__icon{margin-bottom:12px;width:55.36px;height:55.36px;background-image:url(${___CSS_LOADER_URL_REPLACEMENT_2___})}[data-amplify-form][data-amplify-authenticator-custom] .header-container__icon.info{width:60px;height:60px;background-image:url(${___CSS_LOADER_URL_REPLACEMENT_3___})}[data-amplify-form][data-amplify-authenticator-custom] .amplify-header__center{text-align:center}[data-amplify-form][data-amplify-authenticator-custom] .amplify-button--link{padding-top:0;padding-bottom:0;color:#214ea3;font-family:"Helvetica Neue";font-size:16px;font-weight:500;line-height:24px;text-decoration-line:underline}[data-amplify-form][data-amplify-authenticator-custom] .amplify-button--link:hover,[data-amplify-form][data-amplify-authenticator-custom] .amplify-button--link:focus{background-color:rgba(0,0,0,0)}`, "", { "version": 3, "sources": ["webpack://./src/shared/scss/typography.scss", "webpack://./src/form/scss/amplifyOverrides.scss", "webpack://./src/shared/scss/variables.scss", "webpack://./src/shared/scss/mixins.scss", "webpack://./src/form/scss/confirmComponent.scss"], "names": [], "mappings": "AAAA,WACE,2BAAA,CACA,2BAAA,CACA,kBAAA,CACA,iBAAA,CACA,iBAAA,CCJF,6BACE,YAAA,CACA,uDCQa,CDNb,sDACE,UAAA,CACA,eAAA,CAEA,4EACE,iBAAA,CACA,YAAA,CACA,oBCVU,CDaZ,0EACE,sBAAA,CAEA,gPAEE,uBAAA,CACA,QAAA,CAGF,6FACE,yBAAA,CAIJ,qEACE,cAAA,CACA,iBAAA,CACA,eAAA,CACA,gBAAA,CACA,aCjCa,CDoCf,qEACE,wBCjCqB,CDmCrB,+GACE,kBAAA,CACA,eAAA,CAIJ,yEACE,aCjCM,CDkCN,eAAA,CAGF,wEACE,iBAAA,CACA,cAAA,CAEA,8EACE,wBCvDW,CD0Db,+EACE,cAAA,CACA,eAAA,CACA,gBAAA,CACA,aCxDY,CD0DZ,iFACE,cAAA,CACA,eAAA,CACA,gBAAA,CACA,aC/DW,CDoEb,wFACE,gBAAA,CACA,oBC7DG,CDgEL,+FACE,oBCpEM,CDqEN,gBAAA,CAMJ,+EACE,aClFa,CDmFb,wBAAA,CACA,8BAAA,CACA,cAAA,CACA,0BAAA,CAGF,6EE9FJ,aDKmB,CCJnB,cAAA,CACA,iBAAA,CACA,0BAAA,CACA,gBAAA,CACA,8BAAA,CACA,SAAA,CACA,QAAA,CAEA,mFACE,sBAAA,CAGF,mFACE,WAAA,CFsFE,0EACE,iBAAA,CAGF,2EACE,SAAA,CAIJ,yEACE,oBC7GU,CD8GV,oBAAA,CACA,2BAAA,CACA,cAAA,CACA,aClHa,CDmHb,kBCjHU,CDkHV,2BC7GU,CD8GV,gBAAA,CACA,gBAAA,CAEA,uFACE,0BAAA,CACA,yBAAA,CAGF,4FACE,wBC/HU,CDgIV,qBC5HY,CD+Hd,kFACE,UAAA,CACA,kBAAA,CAKF,oFACE,YAAA,CAKN,mDACE,mBAAA,CAMF,0HACE,cAAA,CAOJ,wPAIE,oBAAA,CAGE,gVACE,QAAA,CACA,qBAAA,CAGF,wZACE,cAAA,CACA,gdACE,SAAA,CAEF,4cACE,mBAAA,CAKN,gTACE,WAAA,CAGF,wTACE,YAAA,CACA,6BAAA,CACA,sBAAA,CAEA,4UACE,cAAA,CACA,gBAAA,CACA,aCjMa,CDkMb,2BAAA,CAIJ,gQACE,aCjMgB,CDkMhB,eAAA,CACA,QAAA,CAGF,4UACE,YAAA,CACA,qBAAA,CACA,SAAA,CAGF,gUACE,eAAA,CAKF,oFACE,YAAA,CAKF,8EACE,iBAAA,CAIA,0FACE,OAAA,CAIJ,4GExOA,aDKmB,CCJnB,cAAA,CACA,iBAAA,CACA,0BAAA,CACA,gBAAA,CACA,8BAAA,CACA,SAAA,CACA,QAAA,CAEA,kHACE,sBAAA,CAGF,kHACE,WAAA,CF8NF,+FACE,YAAA,CAOF,oHEjOA,aDRc,CCSd,wBDRgB,CCShB,YAAA,CACA,cAAA,CACA,eAAA,CACA,gBAAA,CACA,iBAAA,CACA,2CAAA,CAEA,kUAEE,YAAA,CF6NA,wFACE,aCjPU,CDmPV,+FACE,+CAAA,CACA,OAAA,CACA,iBAAA,CACA,gBAAA,CAIJ,wFACE,wBC3PY,CD4PZ,wBAAA,CAIA,4FACE,aClQQ,CCwBd,4OACE,aDzBY,CC4Bd,4OACE,wBD5Bc,CC6Bd,wBAAA,CACA,aD/BY,CCmCZ,oPACE,aDpCU,CD8Qd,kMACE,YAAA,CACA,iBAAA,CACA,OAAA,CAEA,gNACE,+CAAA,CAGF,4OACE,cAAA,CACA,aCzRU,CD6Rd,kJACE,cAAA,CACA,aC/RY,CDgSZ,YAAA,CACA,iBAAA,CACA,OAAA,CAEA,gKACE,+CAAA,CAOJ,yIEpSA,aDRc,CCSd,wBDRgB,CCShB,YAAA,CACA,cAAA,CACA,eAAA,CACA,gBAAA,CACA,iBAAA,CACA,2CAAA,CFgSE,aAAA,CE9RF,4WAEE,YAAA,CFiSF,iEACE,YAAA,CACA,iBAAA,CACA,OAAA,CACA,cAAA,CACA,eAAA,CACA,aC1TY,CD2TZ,SAAA,CACA,wBAAA,CAEA,wEACE,+CAAA,CAGF,+KAEE,YAAA,CE5SJ,yGACE,aDzBY,CC4Bd,yGACE,wBD5Bc,CC6Bd,wBAAA,CACA,aD/BY,CCmCZ,6GACE,aDpCU,CD4Ud,sEACE,qBAAA,CAGF,oFACE,YAAA,CAOF,2IE9SA,aDtCa,CCuCb,cAAA,CACA,eAAA,CACA,gBAAA,CF8SE,yJACE,YAAA,CAMJ,wEE1VA,aDRc,CCSd,wBDRgB,CCShB,YAAA,CACA,cAAA,CACA,eAAA,CACA,gBAAA,CACA,iBAAA,CACA,2CAAA,CFqVE,aAAA,CACA,eAAA,CEpVF,6LAEE,YAAA,CFoVA,+EACE,YAAA,CAON,2CACE,eAAA,CACA,kBAAA,CACA,sBAAA,CACA,YAAA,CAGE,2KAEE,KAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CAMA,2cAIE,cAAA,CACA,eAAA,CAMR,mBACE,YAAA,CGxZA,yDACE,aFDe,CEIjB,uEACE,YAAA,CACA,sBAAA,CAGF,yEACE,YAAA,CACA,oBAAA,CAEA,+EACE,kBAAA,CACA,aAAA,CACA,cAAA,CACA,wDAAA,CAEA,oFACE,UAAA,CACA,WAAA,CACA,wDAAA,CAMJ,+EACE,iBAAA,CAIJ,6EACE,aAAA,CACA,gBAAA,CACA,aF/BiB,CEgCjB,4BAAA,CACA,cAAA,CACA,eAAA,CACA,gBAAA,CACA,8BAAA,CAEA,sKAEE,8BAAA", "sourcesContent": ["@font-face {\n  font-family: 'museo_slab700';\n  src: local('Museo Slab 700');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n", "/* General Styles */\n[data-amplify-authenticator] {\n  padding: 10px;\n  font-family: $font-default;\n\n  [data-amplify-container] {\n    width: 100%;\n    max-width: 486px;\n\n    [data-amplify-router] {\n      border-radius: 4px;\n      border-top: 0;\n      border-color: $light-navy-40;\n    }\n\n    [data-amplify-form] {\n      padding: 16px 16px 24px;\n\n      input[type='number']::-webkit-inner-spin-button,\n      input[type='number']::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      input[type='number'] {\n        -moz-appearance: textfield;\n      }\n    }\n\n    .amplify-label {\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 700;\n      line-height: 24px;\n      color: $primary-navy-100;\n    }\n\n    .amplify-input {\n      background-color: $secondary-100-light-blue;\n\n      &:has(+ .amplify-input-success:not(.hidden)) {\n        margin-bottom: 16px;\n        transition: none;\n      }\n    }\n\n    input::placeholder {\n      color: $text-navy;\n      font-weight: 400;\n    }\n\n    .amplify-checkbox {\n      align-items: start;\n      margin-top: 8px;\n\n      &__icon {\n        background-color: $primary-navy-100;\n      }\n\n      &__label {\n        font-size: 16px;\n        font-weight: 400;\n        line-height: 24px;\n        color: $text-100-charcoal;\n\n        a {\n          font-size: 16px;\n          font-weight: 500;\n          line-height: 24px;\n          color: $text-100-link-blue;\n        }\n      }\n\n      &__button {\n        &::before {\n          border-width: 1px;\n          border-color: $light-navy;\n        }\n\n        &--error::before {\n          border-color: $error-primary;\n          border-width: 2px;\n        }\n      }\n    }\n\n    .amplify-button {\n      &--primary {\n        color: $text-100-link-blue;\n        border: 2px solid $text-100-link-blue;\n        background-color: transparent;\n        font-size: 18px;\n        font-weight: 700 !important;\n      }\n\n      &--small {\n        @include amplify-button-small;\n      }\n    }\n\n    .amplify-tabs {\n      &__list {\n        border-radius: 4px;\n      }\n\n      &__panel {\n        padding: 0;\n      }\n    }\n\n    .amplify-tabs-item {\n      border-color: $light-navy-40;\n      border-top-width: 4px;\n      border-top-right-radius: 3px;\n      font-size: 14px;\n      color: $primary-navy-100;\n      background: $light-navy-05;\n      font-family: $font-museo700;\n      line-height: 20px;\n      padding: 12px 8px;\n\n      &:first-of-type {\n        border-top-left-radius: 3px;\n        border-top-right-radius: 0;\n      }\n\n      &[data-state='active'] {\n        border-top-color: $primary-red-100;\n        background-color: $primary-white-100;\n      }\n\n      &:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    }\n\n    .amplify-field {\n      &__show-password {\n        display: none;\n      }\n    }\n  }\n\n  [data-amplify-footer] {\n    padding-bottom: 16px;\n  }\n}\n\n[data-amplify-authenticator-signin],\n[data-amplify-authenticator-signup] {\n  .amplify-button--primary {\n    margin-top: 8px;\n  }\n}\n\n/* Forgot password */\n/* Reset password */\n/* Confirm sign up */\n[data-amplify-form][data-amplify-authenticator-confirmresetpassword],\n[data-amplify-form][data-amplify-authenticator-confirmsignup],\n[data-amplify-form][data-amplify-authenticator-custom],\n[data-amplify-form][data-amplify-authenticator-resetpassword] {\n  padding: 0 !important;\n\n  fieldset {\n    &.amplify-flex {\n      gap: 24px;\n      flex-direction: column;\n    }\n\n    & > div:not(.amplify-alert--error) {\n      padding: 0 16px;\n      &:first-of-type {\n        padding: 0;\n      }\n      &:last-of-type {\n        padding-bottom: 16px;\n      }\n    }\n  }\n\n  .amplify-icon {\n    height: 24px;\n  }\n\n  .amplify-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n\n    span {\n      font-size: 20px;\n      line-height: 28px;\n      color: $primary-navy-100;\n      font-family: 'museo_slab700';\n    }\n  }\n\n  p {\n    color: $text-100-charcoal;\n    font-weight: 400;\n    margin: 0;\n  }\n\n  .amplify-description {\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n  }\n\n  .amplify-username {\n    font-weight: 500;\n  }\n}\n\n[data-amplify-form][data-amplify-authenticator-resetpassword] {\n  .amplify-button--link {\n    display: none;\n  }\n}\n\n[data-amplify-form][data-amplify-authenticator-confirmsignup] {\n  .amplify-header {\n    margin-bottom: 8px;\n  }\n\n  .amplify-flex {\n    &.amplify-field {\n      gap: 8px;\n    }\n  }\n\n  .amplify-button:not(.amplify-button--primary) {\n    @include amplify-button-small;\n  }\n\n  .amplify-authenticator__subtitle {\n    display: none;\n  }\n}\n\n/* Form errors */\n[data-amplify-authenticator-signin],\n[data-amplify-authenticator-signup] {\n  .amplify-alert--error {\n    @include amplify-alert--error;\n  }\n}\n\n[data-amplify-authenticator-signin] {\n  fieldset:has(+ .amplify-alert--error) {\n    .amplify-label {\n      color: $error-primary;\n\n      &:before {\n        content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='25' height='25' viewBox='0 0 25 25' fill='none'%3E%3Cpath d='M3.72546 17.128L3.90979 17.4552C4.80866 18.9846 6.01535 20.1913 7.54478 21.0902L7.87199 21.2745C9.18856 21.9844 10.5987 22.3663 12.1179 22.4208L12.5 22.4277C14.2937 22.4277 15.9373 21.9823 17.4552 21.0902C18.9847 20.1913 20.1914 18.9846 21.0902 17.4552L21.2745 17.128C22.0437 15.7017 22.4276 14.1656 22.4276 12.5C22.4276 10.7062 21.9824 9.06269 21.0902 7.54476C20.1914 6.01534 18.9847 4.80866 17.4552 3.90979C15.9373 3.01767 14.2937 2.57235 12.5 2.57235C10.7062 2.57235 9.06272 3.01767 7.54478 3.90979L7.22198 4.10712C5.84454 4.98269 4.74446 6.12459 3.90979 7.54476C3.01767 9.06269 2.57235 10.7062 2.57235 12.5C2.57235 14.1656 2.95633 15.7017 3.72546 17.128ZM14 17V20H11V17H14ZM14 5L13.75 16H11.2273L11 5H14ZM6.2414 23.3079L5.88834 23.0931C4.14571 21.9953 2.74286 20.5464 1.6921 18.7586C0.564523 16.84 0 14.7456 0 12.5C0 10.2544 0.564523 8.15995 1.6921 6.24139C2.81291 4.33432 4.33432 2.81291 6.2414 1.69209L6.60318 1.48727C8.42236 0.496159 10.3947 0 12.5 0C14.7456 0 16.84 0.564518 18.7586 1.69209C20.5465 2.74286 21.9954 4.1457 23.0931 5.88834L23.3079 6.24139C24.4355 8.15995 25 10.2544 25 12.5C25 14.7456 24.4355 16.84 23.3079 18.7586L23.0931 19.1116C21.9954 20.8542 20.5465 22.2571 18.7586 23.3079C16.84 24.4354 14.7456 25 12.5 25C10.2544 25 8.15996 24.4354 6.2414 23.3079Z' fill='%23A0192C'/%3E%3C/svg%3E\");\n        top: 6px;\n        position: relative;\n        margin-right: 8px;\n      }\n    }\n\n    .amplify-input {\n      background-color: $error-secondary;\n      border: 2px solid $error-primary;\n    }\n\n    input {\n      &::placeholder {\n        color: $error-primary;\n      }\n    }\n  }\n}\n\n[data-amplify-authenticator-signup],\n[data-amplify-authenticator-confirmresetpassword] {\n  .amplify-textfield:has(+ [data-amplify-sign-up-errors='true']) {\n    @include error-field;\n  }\n\n  .amplify-textfield + [data-amplify-sign-up-errors='true'] {\n    display: flex;\n    align-items: start;\n    gap: 4px;\n\n    &:before {\n      content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'%3E%3Cpath d='M4.96948 15.6821L5.12783 15.9641C5.84693 17.1877 6.81228 18.153 8.03583 18.8721L8.31785 19.0305C9.34995 19.5832 10.4539 19.8844 11.6413 19.9346L12 19.9421C13.435 19.9421 14.7499 19.5858 15.9641 18.8721C17.1877 18.153 18.1531 17.1877 18.8721 15.9641L19.0305 15.6821C19.6386 14.5468 19.9421 13.3246 19.9421 12C19.9421 10.565 19.5859 9.25015 18.8721 8.03581C18.1531 6.81228 17.1877 5.84692 15.9641 5.12783C14.7499 4.41414 13.435 4.05788 12 4.05788C10.565 4.05788 9.25017 4.41414 8.03583 5.12783L7.73531 5.31274C6.6531 6.00961 5.787 6.91424 5.12783 8.03581C4.41414 9.25015 4.05788 10.565 4.05788 12C4.05788 13.3246 4.36144 14.5468 4.96948 15.6821ZM13.2 15.6V18H10.8V15.6H13.2ZM13.2 6L13 14.8H10.9818L10.8 6H13.2ZM6.99312 20.6463L6.67092 20.4493C5.29522 19.5742 4.18629 18.4235 3.35368 17.0069C2.45162 15.472 2 13.7965 2 12C2 10.2035 2.45162 8.52796 3.35368 6.99311C4.25033 5.46745 5.46746 4.25033 6.99312 3.35367L7.32416 3.16727C8.76795 2.3894 10.3318 2 12 2C13.7965 2 15.472 2.45161 17.0069 3.35367C18.4236 4.18628 19.5743 5.29521 20.4493 6.67091L20.6463 6.99311C21.5484 8.52796 22 10.2035 22 12C22 13.7965 21.5484 15.472 20.6463 17.0069L20.4493 17.3291C19.5743 18.7047 18.4236 19.8137 17.0069 20.6463C15.472 21.5483 13.7965 22 12 22C10.2035 22 8.52797 21.5483 6.99312 20.6463Z' fill='%23A0192C'/%3E%3C/svg%3E\");\n    }\n\n    .amplify-text--error {\n      font-size: 14px;\n      color: $error-primary;\n    }\n  }\n\n  .amplify-field__error-message {\n    font-size: 14px;\n    color: $error-primary;\n    display: flex;\n    align-items: start;\n    gap: 4px;\n\n    &:before {\n      content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'%3E%3Cpath d='M4.96948 15.6821L5.12783 15.9641C5.84693 17.1877 6.81228 18.153 8.03583 18.8721L8.31785 19.0305C9.34995 19.5832 10.4539 19.8844 11.6413 19.9346L12 19.9421C13.435 19.9421 14.7499 19.5858 15.9641 18.8721C17.1877 18.153 18.1531 17.1877 18.8721 15.9641L19.0305 15.6821C19.6386 14.5468 19.9421 13.3246 19.9421 12C19.9421 10.565 19.5859 9.25015 18.8721 8.03581C18.1531 6.81228 17.1877 5.84692 15.9641 5.12783C14.7499 4.41414 13.435 4.05788 12 4.05788C10.565 4.05788 9.25017 4.41414 8.03583 5.12783L7.73531 5.31274C6.6531 6.00961 5.787 6.91424 5.12783 8.03581C4.41414 9.25015 4.05788 10.565 4.05788 12C4.05788 13.3246 4.36144 14.5468 4.96948 15.6821ZM13.2 15.6V18H10.8V15.6H13.2ZM13.2 6L13 14.8H10.9818L10.8 6H13.2ZM6.99312 20.6463L6.67092 20.4493C5.29522 19.5742 4.18629 18.4235 3.35368 17.0069C2.45162 15.472 2 13.7965 2 12C2 10.2035 2.45162 8.52796 3.35368 6.99311C4.25033 5.46745 5.46746 4.25033 6.99312 3.35367L7.32416 3.16727C8.76795 2.3894 10.3318 2 12 2C13.7965 2 15.472 2.45161 17.0069 3.35367C18.4236 4.18628 19.5743 5.29521 20.4493 6.67091L20.6463 6.99311C21.5484 8.52796 22 10.2035 22 12C22 13.7965 21.5484 15.472 20.6463 17.0069L20.4493 17.3291C19.5743 18.7047 18.4236 19.8137 17.0069 20.6463C15.472 21.5483 13.7965 22 12 22C10.2035 22 8.52797 21.5483 6.99312 20.6463Z' fill='%23A0192C'/%3E%3C/svg%3E\");\n    }\n  }\n}\n\n[data-amplify-authenticator-confirmresetpassword],\n[data-amplify-authenticator-resetpassword] {\n  .amplify-alert--error {\n    @include amplify-alert--error;\n\n    margin: 0 16px;\n  }\n}\n\n[data-amplify-authenticator-confirmsignup] {\n  .amplify-alert--error {\n    display: flex;\n    align-items: start;\n    gap: 4px;\n    font-size: 16px;\n    font-weight: 700;\n    color: $error-primary;\n    padding: 0;\n    background: transparent;\n\n    &:before {\n      content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none'%3E%3Cpath d='M4.96948 15.6821L5.12783 15.9641C5.84693 17.1877 6.81228 18.153 8.03583 18.8721L8.31785 19.0305C9.34995 19.5832 10.4539 19.8844 11.6413 19.9346L12 19.9421C13.435 19.9421 14.7499 19.5858 15.9641 18.8721C17.1877 18.153 18.1531 17.1877 18.8721 15.9641L19.0305 15.6821C19.6386 14.5468 19.9421 13.3246 19.9421 12C19.9421 10.565 19.5859 9.25015 18.8721 8.03581C18.1531 6.81228 17.1877 5.84692 15.9641 5.12783C14.7499 4.41414 13.435 4.05788 12 4.05788C10.565 4.05788 9.25017 4.41414 8.03583 5.12783L7.73531 5.31274C6.6531 6.00961 5.787 6.91424 5.12783 8.03581C4.41414 9.25015 4.05788 10.565 4.05788 12C4.05788 13.3246 4.36144 14.5468 4.96948 15.6821ZM13.2 15.6V18H10.8V15.6H13.2ZM13.2 6L13 14.8H10.9818L10.8 6H13.2ZM6.99312 20.6463L6.67092 20.4493C5.29522 19.5742 4.18629 18.4235 3.35368 17.0069C2.45162 15.472 2 13.7965 2 12C2 10.2035 2.45162 8.52796 3.35368 6.99311C4.25033 5.46745 5.46746 4.25033 6.99312 3.35367L7.32416 3.16727C8.76795 2.3894 10.3318 2 12 2C13.7965 2 15.472 2.45161 17.0069 3.35367C18.4236 4.18628 19.5743 5.29521 20.4493 6.67091L20.6463 6.99311C21.5484 8.52796 22 10.2035 22 12C22 13.7965 21.5484 15.472 20.6463 17.0069L20.4493 17.3291C19.5743 18.7047 18.4236 19.8137 17.0069 20.6463C15.472 21.5483 13.7965 22 12 22C10.2035 22 8.52797 21.5483 6.99312 20.6463Z' fill='%23A0192C'/%3E%3C/svg%3E\");\n    }\n\n    .amplify-alert__icon,\n    .amplify-alert__dismiss {\n      display: none;\n    }\n  }\n\n  .amplify-textfield:has(+ .amplify-alert--error) {\n    @include error-field;\n  }\n\n  .amplify-custom-resendCode {\n    flex-direction: column;\n  }\n\n  .amplify-button--primary + .amplify-button {\n    display: none;\n  }\n}\n\n/* Form success message */\n[data-amplify-authenticator-confirmresetpassword],\n[data-amplify-authenticator-confirmsignup] {\n  .amplify-input-success {\n    @include success-field-message;\n\n    &.hidden {\n      display: none;\n    }\n  }\n}\n\n[data-amplify-authenticator-confirmsignup] {\n  .amplify-custom-alert--error {\n    @include amplify-alert--error;\n    display: block;\n    margin-top: 16px;\n\n    &.hidden {\n      display: none;\n    }\n  }\n}\n\n/* overrides for form in overlay */\n\n.overlay-container.login-overlay-container {\n  max-height: none;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n\n  .overlay-content {\n    &.lightbox--default-size,\n    &.lightbox--full-content-size {\n      top: 0;\n      transform: none;\n      max-height: none;\n      position: relative;\n    }\n  }\n\n  [data-amplify-authenticator] {\n    [data-amplify-container] {\n      .amplify-tabs-item,\n      .amplify-input,\n      .amplify-placeholder,\n      .amplify-button {\n        transform: none;\n        transition: none;\n      }\n    }\n  }\n}\n\n#auth-app.redirect {\n  display: none;\n}\n", "$primary-red-100: #c62035;\n$primary-navy-100: #273157;\n$light-navy-40: #b6bac9;\n$light-navy-05: #f6f6f8;\n$primary-white-100: #ffffff;\n$secondary-100-light-blue: #f3f5fa;\n$text-100-link-blue: #214ea3;\n$text-100-charcoal: #4a4a4a;\n$font-museo700: 'museo_slab700';\n$museo_slab700_italic: 'museo_slab700_italic';\n$font-museo900: 'museo_slab900';\n$font-default: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n$error-primary: #a0192c;\n$error-secondary: #feeded;\n$text-navy: #485279;\n$light-navy: #9197af;\n$success-text: #177a24;\n$light-grey: #dadce4;\n$text-red: #6e111e;\n", "@mixin amplify-button-small {\n  color: $text-100-link-blue;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500 !important;\n  line-height: 24px;\n  text-decoration-line: underline;\n  padding: 0;\n  border: 0;\n\n  &:hover {\n    background-color: unset;\n  }\n\n  &:focus {\n    border: none;\n  }\n}\n\n@mixin amplify-alert--error {\n  color: $error-primary;\n  background-color: $error-secondary;\n  padding: 16px;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  border-radius: 4px;\n  box-shadow: 0px 6px 12px 0px rgba(0, 0, 0, 0.25);\n\n  .amplify-alert__icon,\n  .amplify-alert__dismiss {\n    display: none;\n  }\n}\n\n@mixin error-field {\n  .amplify-label {\n    color: $error-primary;\n  }\n\n  .amplify-input {\n    background-color: $error-secondary;\n    border: 2px solid $error-primary;\n    color: $error-primary;\n  }\n\n  input {\n    &::placeholder {\n      color: $error-primary;\n    }\n  }\n}\n\n@mixin success-field-message {\n  color: $success-text;\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 24px;\n}\n\n@mixin font-primary {\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 24px;\n  font-family: $font-default;\n}\n\n@mixin dropdown-container($border-color) {\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n  border-radius: 4px;\n  border: 1px solid $border-color;\n  background: $primary-white-100;\n  box-shadow: 0px 6px 12px 0px rgba(0, 0, 0, 0.25);\n  position: absolute;\n  top: calc(100% + 11px);\n  right: 0;\n  z-index: 2;\n  min-width: 145px;\n}\n\n@mixin dropdown-arrow($content) {\n  content: url($content);\n  width: 23px;\n  height: 13px;\n  position: absolute;\n  right: 8px;\n  top: -18px;\n}\n\n@mixin list-reset {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n}\n\n@mixin link-style {\n  @include font-primary;\n  display: block;\n  font-weight: 400;\n  text-align: left;\n  text-decoration: none;\n  line-height: 24px;\n  padding: 7px 16px;\n  position: relative;\n}\n\n@mixin list-icon($content) {\n  content: url($content);\n  width: 24px;\n  display: inline-block;\n  top: 2px;\n  position: relative;\n  text-align: center;\n  margin-right: 4px;\n}\n\n@mixin remove-article-list-item {\n  padding-top: 11px;\n  color: $text-red;\n  &::before {\n    @include list-icon(\n      \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='15' height='16' viewBox='0 0 15 16' fill='none'%3E%3Cpath d='M8.45083 0C9.41715 0.0159403 10.1898 0.808109 10.1817 1.77453V2.98179H13.818C14.2197 2.98179 14.5453 3.3074 14.5453 3.70906C14.5453 4.11071 14.2197 4.43632 13.818 4.43632H12.669C12.9244 4.55451 13.0887 4.80944 13.0908 5.09086V14.138C13.0986 14.6241 12.9129 15.0934 12.5746 15.4426C12.2364 15.7917 11.7732 15.9922 11.2872 16H10.7635C10.5341 16.0022 10.3175 15.8939 10.1817 15.7089C10.0476 15.8959 9.82993 16.0047 9.59991 16H7.85447C7.62501 16.0022 7.40846 15.8939 7.27266 15.7089C7.1385 15.8959 6.92087 16.0047 6.69085 16H4.94541C4.71595 16.0022 4.49939 15.8939 4.36359 15.7089C4.22944 15.8959 4.01181 16.0047 3.78178 16H3.25815C2.77207 15.9922 2.30894 15.7917 1.97068 15.4426C1.63242 15.0934 1.44675 14.6241 1.45453 14.138V5.09086C1.45665 4.80944 1.62094 4.55451 1.87635 4.43632H0.727266C0.325608 4.43632 0 4.11071 0 3.70906C0 3.3074 0.325608 2.98179 0.727266 2.98179H4.36359V1.77453C4.35548 0.808109 5.12817 0.0159403 6.09449 0H8.45083ZM12.0581 4.43632H2.48725C2.74265 4.55451 2.90694 4.80944 2.90906 5.09086V14.138C2.90104 14.2384 2.93338 14.3378 2.99891 14.4143C3.06443 14.4907 3.15774 14.5379 3.25815 14.5453H3.49088C4.00804 14.1574 4.71915 14.1574 5.23631 14.5453H6.39994C6.91711 14.1574 7.62821 14.1574 8.14538 14.5453H9.309C9.82617 14.1574 10.5373 14.1574 11.0544 14.5453H11.2872C11.3876 14.5379 11.4809 14.4907 11.5464 14.4143C11.6119 14.3378 11.6443 14.2384 11.6363 14.138V5.09086C11.6384 4.80944 11.8027 4.55451 12.0581 4.43632ZM5.3 5.75C5.71421 5.75 6.05 6.08579 6.05 6.5V12.5C6.05 12.9142 5.71421 13.25 5.3 13.25C4.88579 13.25 4.55 12.9142 4.55 12.5V6.5C4.55 6.08579 4.88579 5.75 5.3 5.75ZM9.3 5.75C9.71421 5.75 10.05 6.08579 10.05 6.5V12.5C10.05 12.9142 9.71421 13.25 9.3 13.25C8.88579 13.25 8.55 12.9142 8.55 12.5V6.5C8.55 6.08579 8.88579 5.75 9.3 5.75ZM8.45083 1.45453H6.09449C6.01457 1.45812 5.93967 1.49446 5.88738 1.555C5.83509 1.61554 5.81005 1.69494 5.81813 1.77453V2.98179H8.72719L8.72713 1.71517C8.72104 1.65642 8.69715 1.60041 8.65794 1.555C8.60565 1.49446 8.53074 1.45812 8.45083 1.45453Z' fill='%236E111E'/%3E%3C/svg%3E\"\n    );\n  }\n}\n\n@mixin first-article-list-item($content) {\n  color: $text-100-link-blue;\n  padding-bottom: 11px;\n\n  &::before {\n    @include list-icon($content);\n  }\n\n  &::after {\n    content: '';\n    width: calc(100% - 32px);\n    border-bottom: solid 1px $light-grey;\n    display: inline-block;\n    position: absolute;\n    left: 16px;\n    bottom: 0;\n  }\n}\n", "[data-amplify-form][data-amplify-authenticator-custom] {\n  p {\n    color: $primary-navy-100;\n  }\n\n  .link-container {\n    display: flex;\n    justify-content: center;\n  }\n\n  .header-container {\n    display: grid;\n    justify-items: center;\n\n    &__icon {\n      margin-bottom: 12px;\n      width: 55.36px;\n      height: 55.36px;\n      background-image: url(\"data:image/svg+xml,%3Csvg width='55.366' height='55.366' viewBox='0 0 60 61' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M55.3664 32.874C55.3664 48.1625 42.9717 60.5571 27.6832 60.5571C12.3947 60.5571 0 48.1625 0 32.874C0 17.5855 12.3947 5.1908 27.6832 5.1908C42.9717 5.1908 55.3664 17.5855 55.3664 32.874Z' fill='white'/%3E%3Cmask id='mask0_2902_90804' style='mask-type:luminance' maskUnits='userSpaceOnUse' x='4' y='3' width='56' height='56'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M4.63135 3.03162H59.9973V58.398H4.63135V3.03162Z' fill='white'/%3E%3C/mask%3E%3Cg mask='url(%23mask0_2902_90804)'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M59.9978 30.7148C59.9978 46.0033 47.6031 58.398 32.3146 58.398C17.026 58.398 4.63135 46.0033 4.63135 30.7148C4.63135 15.4263 17.026 3.03162 32.3146 3.03162C47.6031 3.03162 59.9978 15.4263 59.9978 30.7148Z' fill='%23FFDA2C'/%3E%3C/g%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M56.3083 28.6832C56.3083 43.9717 43.9136 56.3663 28.6251 56.3663C13.3366 56.3663 0.941895 43.9717 0.941895 28.6832C0.941895 13.3947 13.3366 1 28.6251 1C43.9136 1 56.3083 13.3947 56.3083 28.6832Z' stroke='%23273157' stroke-width='1.09091'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M25.9279 43.5602C25.2056 43.5602 24.4822 43.2846 23.931 42.7322L14.5015 33.3052L18.4965 29.3102L25.9279 36.7403L46.1378 16.5316L50.1328 20.5254L27.9248 42.7322C27.3735 43.2846 26.6501 43.5602 25.9279 43.5602Z' fill='%23665711'/%3E%3C/svg%3E%0A\");\n\n      &.info {\n        width: 60px;\n        height: 60px;\n        background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='61' height='60' viewBox='0 0 61 60' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M29.9362 44.3537C29.3304 44.0559 28.6225 44.0477 28.01 44.3315L8.04045 53.5844C6.8551 54.1336 5.5 53.268 5.5 51.9616V7.11799C5.5 4.2914 7.77372 2 10.5785 2L46.029 2C48.8338 2 51.1075 4.29141 51.1075 7.118V51.8893C51.1075 53.2136 49.7184 54.0786 48.5299 53.4943L29.9362 44.3537Z' fill='white'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M34.4089 48.6017C33.8031 48.3039 33.0952 48.2958 32.4827 48.5796L12.5131 57.8324C11.3278 58.3817 9.97266 57.516 9.97266 56.2096V11.366C9.97266 8.53945 12.2464 6.24805 15.0511 6.24805L50.5017 6.24805C53.3065 6.24805 55.5802 8.53945 55.5802 11.366V56.1373C55.5802 57.4616 54.1911 58.3266 53.0026 57.7424L34.4089 48.6017Z' fill='%233A6AEF'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12.5917 5.07336C10.131 5.07336 8.12805 7.085 8.12805 9.57655V54.4201C8.12805 55.2775 9.01734 55.8455 9.79522 55.4851L29.7648 46.2323C30.5457 45.8704 31.4483 45.8808 32.2207 46.2605L50.8144 55.4012C51.5943 55.7846 52.506 55.2169 52.506 54.3478V9.57655C52.506 7.08501 50.503 5.07336 48.0423 5.07336L12.5917 5.07336ZM6.89844 9.57655C6.89844 6.41491 9.44293 3.84375 12.5917 3.84375L48.0423 3.84375C51.1911 3.84375 53.7356 6.41492 53.7356 9.57655V54.3478C53.7356 56.1274 51.8689 57.2897 50.2719 56.5046L31.6783 47.364C31.239 47.1481 30.7258 47.1422 30.2817 47.3479L10.3122 56.6008C8.71935 57.3388 6.89844 56.1756 6.89844 54.4201V9.57655Z' fill='%23273157'/%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M27.2623 31.0857L38.4007 19.7734L40.0957 21.495L27.2623 34.5288L20.4219 27.5815L22.1169 25.86L27.2623 31.0857Z' fill='%23223F8F'/%3E%3C/svg%3E\");\n      }\n    }\n  }\n\n  .amplify-header {\n    &__center {\n      text-align: center;\n    }\n  }\n\n  .amplify-button--link {\n    padding-top: 0;\n    padding-bottom: 0;\n    color: $text-100-link-blue;\n    font-family: 'Helvetica Neue';\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 24px;\n    text-decoration-line: underline;\n\n    &:hover,\n    &:focus {\n      background-color: transparent;\n    }\n  }\n}\n"], "sourceRoot": "" }]);
    // Exports
    /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


            /***/
}),

    /***/ 3645:
    /***/ ((module) => {

            "use strict";


            /*
              MIT License http://www.opensource.org/licenses/mit-license.php
              Author Tobias Koppers @sokra
            */
            module.exports = function (cssWithMappingToString) {
                var list = [];

                // return the list of modules as css string
                list.toString = function toString() {
                    return this.map(function (item) {
                        var content = "";
                        var needLayer = typeof item[5] !== "undefined";
                        if (item[4]) {
                            content += "@supports (".concat(item[4], ") {");
                        }
                        if (item[2]) {
                            content += "@media ".concat(item[2], " {");
                        }
                        if (needLayer) {
                            content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
                        }
                        content += cssWithMappingToString(item);
                        if (needLayer) {
                            content += "}";
                        }
                        if (item[2]) {
                            content += "}";
                        }
                        if (item[4]) {
                            content += "}";
                        }
                        return content;
                    }).join("");
                };

                // import a list of modules into the list
                list.i = function i(modules, media, dedupe, supports, layer) {
                    if (typeof modules === "string") {
                        modules = [[null, modules, undefined]];
                    }
                    var alreadyImportedModules = {};
                    if (dedupe) {
                        for (var k = 0; k < this.length; k++) {
                            var id = this[k][0];
                            if (id != null) {
                                alreadyImportedModules[id] = true;
                            }
                        }
                    }
                    for (var _k = 0; _k < modules.length; _k++) {
                        var item = [].concat(modules[_k]);
                        if (dedupe && alreadyImportedModules[item[0]]) {
                            continue;
                        }
                        if (typeof layer !== "undefined") {
                            if (typeof item[5] === "undefined") {
                                item[5] = layer;
                            } else {
                                item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
                                item[5] = layer;
                            }
                        }
                        if (media) {
                            if (!item[2]) {
                                item[2] = media;
                            } else {
                                item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
                                item[2] = media;
                            }
                        }
                        if (supports) {
                            if (!item[4]) {
                                item[4] = "".concat(supports);
                            } else {
                                item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
                                item[4] = supports;
                            }
                        }
                        list.push(item);
                    }
                };
                return list;
            };

            /***/
}),

    /***/ 1667:
    /***/ ((module) => {

            "use strict";


            module.exports = function (url, options) {
                if (!options) {
                    options = {};
                }
                if (!url) {
                    return url;
                }
                url = String(url.__esModule ? url.default : url);

                // If url is already wrapped in quotes, remove them
                if (/^['"].*['"]$/.test(url)) {
                    url = url.slice(1, -1);
                }
                if (options.hash) {
                    url += options.hash;
                }

                // Should url be wrapped?
                // See https://drafts.csswg.org/css-values-3/#urls
                if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
                    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
                }
                return url;
            };

            /***/
}),

    /***/ 7537:
    /***/ ((module) => {

            "use strict";


            module.exports = function (item) {
                var content = item[1];
                var cssMapping = item[3];
                if (!cssMapping) {
                    return content;
                }
                if (typeof btoa === "function") {
                    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
                    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
                    var sourceMapping = "/*# ".concat(data, " */");
                    return [content].concat([sourceMapping]).join("\n");
                }
                return [content].join("\n");
            };

            /***/
}),

    /***/ 5987:
    /***/ ((module) => {

            "use strict";


            /******************************************************************************
             * Created 2008-08-19.
             *
             * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
             *
             * Copyright (C) 2008
             *   Wyatt Baldwin <self@wyattbaldwin.com>
             *   All rights reserved
             *
             * Licensed under the MIT license.
             *
             *   http://www.opensource.org/licenses/mit-license.php
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             *****************************************************************************/
            var dijkstra = {
                single_source_shortest_paths: function (graph, s, d) {
                    // Predecessor map for each node that has been encountered.
                    // node ID => predecessor node ID
                    var predecessors = {};

                    // Costs of shortest paths from s to all nodes encountered.
                    // node ID => cost
                    var costs = {};
                    costs[s] = 0;

                    // Costs of shortest paths from s to all nodes encountered; differs from
                    // `costs` in that it provides easy access to the node that currently has
                    // the known shortest path from s.
                    // XXX: Do we actually need both `costs` and `open`?
                    var open = dijkstra.PriorityQueue.make();
                    open.push(s, 0);

                    var closest,
                        u, v,
                        cost_of_s_to_u,
                        adjacent_nodes,
                        cost_of_e,
                        cost_of_s_to_u_plus_cost_of_e,
                        cost_of_s_to_v,
                        first_visit;
                    while (!open.empty()) {
                        // In the nodes remaining in graph that have a known cost from s,
                        // find the node, u, that currently has the shortest path from s.
                        closest = open.pop();
                        u = closest.value;
                        cost_of_s_to_u = closest.cost;

                        // Get nodes adjacent to u...
                        adjacent_nodes = graph[u] || {};

                        // ...and explore the edges that connect u to those nodes, updating
                        // the cost of the shortest paths to any or all of those nodes as
                        // necessary. v is the node across the current edge from u.
                        for (v in adjacent_nodes) {
                            if (adjacent_nodes.hasOwnProperty(v)) {
                                // Get the cost of the edge running from u to v.
                                cost_of_e = adjacent_nodes[v];

                                // Cost of s to u plus the cost of u to v across e--this is *a*
                                // cost from s to v that may or may not be less than the current
                                // known cost to v.
                                cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

                                // If we haven't visited v yet OR if the current known cost from s to
                                // v is greater than the new cost we just found (cost of s to u plus
                                // cost of u to v across e), update v's cost in the cost list and
                                // update v's predecessor in the predecessor list (it's now u).
                                cost_of_s_to_v = costs[v];
                                first_visit = (typeof costs[v] === 'undefined');
                                if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                                    costs[v] = cost_of_s_to_u_plus_cost_of_e;
                                    open.push(v, cost_of_s_to_u_plus_cost_of_e);
                                    predecessors[v] = u;
                                }
                            }
                        }
                    }

                    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
                        var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
                        throw new Error(msg);
                    }

                    return predecessors;
                },

                extract_shortest_path_from_predecessor_list: function (predecessors, d) {
                    var nodes = [];
                    var u = d;
                    var predecessor;
                    while (u) {
                        nodes.push(u);
                        predecessor = predecessors[u];
                        u = predecessors[u];
                    }
                    nodes.reverse();
                    return nodes;
                },

                find_path: function (graph, s, d) {
                    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
                    return dijkstra.extract_shortest_path_from_predecessor_list(
                        predecessors, d);
                },

                /**
                 * A very naive priority queue implementation.
                 */
                PriorityQueue: {
                    make: function (opts) {
                        var T = dijkstra.PriorityQueue,
                            t = {},
                            key;
                        opts = opts || {};
                        for (key in T) {
                            if (T.hasOwnProperty(key)) {
                                t[key] = T[key];
                            }
                        }
                        t.queue = [];
                        t.sorter = opts.sorter || T.default_sorter;
                        return t;
                    },

                    default_sorter: function (a, b) {
                        return a.cost - b.cost;
                    },

                    /**
                     * Add a new item to the queue and ensure the highest priority element
                     * is at the front of the queue.
                     */
                    push: function (value, cost) {
                        var item = { value: value, cost: cost };
                        this.queue.push(item);
                        this.queue.sort(this.sorter);
                    },

                    /**
                     * Return the highest priority element in the queue.
                     */
                    pop: function () {
                        return this.queue.shift();
                    },

                    empty: function () {
                        return this.queue.length === 0;
                    }
                }
            };


            // node.js module exports
            if (true) {
                module.exports = dijkstra;
            }


            /***/
}),

    /***/ 2378:
    /***/ ((module) => {

            "use strict";


            module.exports = function encodeUtf8(input) {
                var result = []
                var size = input.length

                for (var index = 0; index < size; index++) {
                    var point = input.charCodeAt(index)

                    if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {
                        var second = input.charCodeAt(index + 1)

                        if (second >= 0xDC00 && second <= 0xDFFF) {
                            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                            point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000
                            index += 1
                        }
                    }

                    // US-ASCII
                    if (point < 0x80) {
                        result.push(point)
                        continue
                    }

                    // 2-byte UTF-8
                    if (point < 0x800) {
                        result.push((point >> 6) | 192)
                        result.push((point & 63) | 128)
                        continue
                    }

                    // 3-byte UTF-8
                    if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {
                        result.push((point >> 12) | 224)
                        result.push(((point >> 6) & 63) | 128)
                        result.push((point & 63) | 128)
                        continue
                    }

                    // 4-byte UTF-8
                    if (point >= 0x10000 && point <= 0x10FFFF) {
                        result.push((point >> 18) | 240)
                        result.push(((point >> 12) & 63) | 128)
                        result.push(((point >> 6) & 63) | 128)
                        result.push((point & 63) | 128)
                        continue
                    }

                    // Invalid character
                    result.push(0xEF, 0xBF, 0xBD)
                }

                return new Uint8Array(result).buffer
            }


            /***/
}),

    /***/ 645:
    /***/ ((__unused_webpack_module, exports) => {

            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
            exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                var e, m
                var eLen = (nBytes * 8) - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var nBits = -7
                var i = isLE ? (nBytes - 1) : 0
                var d = isLE ? -1 : 1
                var s = buffer[offset + i]

                i += d

                e = s & ((1 << (-nBits)) - 1)
                s >>= (-nBits)
                nBits += eLen
                for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }

                m = e & ((1 << (-nBits)) - 1)
                e >>= (-nBits)
                nBits += mLen
                for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }

                if (e === 0) {
                    e = 1 - eBias
                } else if (e === eMax) {
                    return m ? NaN : ((s ? -1 : 1) * Infinity)
                } else {
                    m = m + Math.pow(2, mLen)
                    e = e - eBias
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            }

            exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c
                var eLen = (nBytes * 8) - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
                var i = isLE ? 0 : (nBytes - 1)
                var d = isLE ? 1 : -1
                var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

                value = Math.abs(value)

                if (isNaN(value) || value === Infinity) {
                    m = isNaN(value) ? 1 : 0
                    e = eMax
                } else {
                    e = Math.floor(Math.log(value) / Math.LN2)
                    if (value * (c = Math.pow(2, -e)) < 1) {
                        e--
                        c *= 2
                    }
                    if (e + eBias >= 1) {
                        value += rt / c
                    } else {
                        value += rt * Math.pow(2, 1 - eBias)
                    }
                    if (value * c >= 2) {
                        e++
                        c /= 2
                    }

                    if (e + eBias >= eMax) {
                        m = 0
                        e = eMax
                    } else if (e + eBias >= 1) {
                        m = ((value * c) - 1) * Math.pow(2, mLen)
                        e = e + eBias
                    } else {
                        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                        e = 0
                    }
                }

                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

                e = (e << mLen) | m
                eLen += mLen
                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

                buffer[offset + i - d] |= s * 128
            }


            /***/
}),

    /***/ 5826:
    /***/ ((module) => {

            var toString = {}.toString;

            module.exports = Array.isArray || function (arr) {
                return toString.call(arr) == '[object Array]';
            };


            /***/
}),

    /***/ 204:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            module.exports = self.fetch || (self.fetch = (__webpack_require__(5869)["default"]) || __webpack_require__(5869));


            /***/
}),

    /***/ 6808:
    /***/ ((module, exports, __webpack_require__) => {

            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * JavaScript Cookie v2.2.1
     * https://github.com/js-cookie/js-cookie
     *
     * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
     * Released under the MIT license
     */
            ; (function (factory) {
                var registeredInModuleLoader;
                if (true) {
                    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                        __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                            (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
                            __WEBPACK_AMD_DEFINE_FACTORY__),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    registeredInModuleLoader = true;
                }
                if (true) {
                    module.exports = factory();
                    registeredInModuleLoader = true;
                }
                if (!registeredInModuleLoader) {
                    var OldCookies = window.Cookies;
                    var api = window.Cookies = factory();
                    api.noConflict = function () {
                        window.Cookies = OldCookies;
                        return api;
                    };
                }
            }(function () {
                function extend() {
                    var i = 0;
                    var result = {};
                    for (; i < arguments.length; i++) {
                        var attributes = arguments[i];
                        for (var key in attributes) {
                            result[key] = attributes[key];
                        }
                    }
                    return result;
                }

                function decode(s) {
                    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
                }

                function init(converter) {
                    function api() { }

                    function set(key, value, attributes) {
                        if (typeof document === 'undefined') {
                            return;
                        }

                        attributes = extend({
                            path: '/'
                        }, api.defaults, attributes);

                        if (typeof attributes.expires === 'number') {
                            attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
                        }

                        // We're using "expires" because "max-age" is not supported by IE
                        attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

                        try {
                            var result = JSON.stringify(value);
                            if (/^[\{\[]/.test(result)) {
                                value = result;
                            }
                        } catch (e) { }

                        value = converter.write ?
                            converter.write(value, key) :
                            encodeURIComponent(String(value))
                                .replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

                        key = encodeURIComponent(String(key))
                            .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                            .replace(/[\(\)]/g, escape);

                        var stringifiedAttributes = '';
                        for (var attributeName in attributes) {
                            if (!attributes[attributeName]) {
                                continue;
                            }
                            stringifiedAttributes += '; ' + attributeName;
                            if (attributes[attributeName] === true) {
                                continue;
                            }

                            // Considers RFC 6265 section 5.2:
                            // ...
                            // 3.  If the remaining unparsed-attributes contains a %x3B (";")
                            //     character:
                            // Consume the characters of the unparsed-attributes up to,
                            // not including, the first %x3B (";") character.
                            // ...
                            stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
                        }

                        return (document.cookie = key + '=' + value + stringifiedAttributes);
                    }

                    function get(key, json) {
                        if (typeof document === 'undefined') {
                            return;
                        }

                        var jar = {};
                        // To prevent the for loop in the first place assign an empty array
                        // in case there are no cookies at all.
                        var cookies = document.cookie ? document.cookie.split('; ') : [];
                        var i = 0;

                        for (; i < cookies.length; i++) {
                            var parts = cookies[i].split('=');
                            var cookie = parts.slice(1).join('=');

                            if (!json && cookie.charAt(0) === '"') {
                                cookie = cookie.slice(1, -1);
                            }

                            try {
                                var name = decode(parts[0]);
                                cookie = (converter.read || converter)(cookie, name) ||
                                    decode(cookie);

                                if (json) {
                                    try {
                                        cookie = JSON.parse(cookie);
                                    } catch (e) { }
                                }

                                jar[name] = cookie;

                                if (key === name) {
                                    break;
                                }
                            } catch (e) { }
                        }

                        return key ? jar[key] : jar;
                    }

                    api.set = set;
                    api.get = function (key) {
                        return get(key, false /* read as raw */);
                    };
                    api.getJSON = function (key) {
                        return get(key, true /* read as json */);
                    };
                    api.remove = function (key, attributes) {
                        set(key, '', extend(attributes, {
                            expires: -1
                        }));
                    };

                    api.defaults = {};

                    api.withConverter = init;

                    return api;
                }

                return init(function () { });
            }));


            /***/
}),

    /***/ 8552:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852),
                root = __webpack_require__(5639);

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(root, 'DataView');

            module.exports = DataView;


            /***/
}),

    /***/ 1989:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var hashClear = __webpack_require__(1789),
                hashDelete = __webpack_require__(401),
                hashGet = __webpack_require__(7667),
                hashHas = __webpack_require__(1327),
                hashSet = __webpack_require__(1866);

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            module.exports = Hash;


            /***/
}),

    /***/ 8407:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var listCacheClear = __webpack_require__(7040),
                listCacheDelete = __webpack_require__(4125),
                listCacheGet = __webpack_require__(2117),
                listCacheHas = __webpack_require__(7518),
                listCacheSet = __webpack_require__(4705);

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            module.exports = ListCache;


            /***/
}),

    /***/ 7071:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852),
                root = __webpack_require__(5639);

            /* Built-in method references that are verified to be native. */
            var Map = getNative(root, 'Map');

            module.exports = Map;


            /***/
}),

    /***/ 3369:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var mapCacheClear = __webpack_require__(4785),
                mapCacheDelete = __webpack_require__(1285),
                mapCacheGet = __webpack_require__(6000),
                mapCacheHas = __webpack_require__(9916),
                mapCacheSet = __webpack_require__(5265);

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            module.exports = MapCache;


            /***/
}),

    /***/ 3818:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852),
                root = __webpack_require__(5639);

            /* Built-in method references that are verified to be native. */
            var Promise = getNative(root, 'Promise');

            module.exports = Promise;


            /***/
}),

    /***/ 8525:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852),
                root = __webpack_require__(5639);

            /* Built-in method references that are verified to be native. */
            var Set = getNative(root, 'Set');

            module.exports = Set;


            /***/
}),

    /***/ 1258:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var MapCache = __webpack_require__(3369),
                setCacheAdd = __webpack_require__(619),
                setCacheHas = __webpack_require__(2385);

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
                var index = -1,
                    length = values == null ? 0 : values.length;

                this.__data__ = new MapCache;
                while (++index < length) {
                    this.add(values[index]);
                }
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            module.exports = SetCache;


            /***/
}),

    /***/ 6384:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var ListCache = __webpack_require__(8407),
                stackClear = __webpack_require__(7465),
                stackDelete = __webpack_require__(3779),
                stackGet = __webpack_require__(7599),
                stackHas = __webpack_require__(4758),
                stackSet = __webpack_require__(4309);

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
                var data = this.__data__ = new ListCache(entries);
                this.size = data.size;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            module.exports = Stack;


            /***/
}),

    /***/ 2705:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var root = __webpack_require__(5639);

            /** Built-in value references. */
            var Symbol = root.Symbol;

            module.exports = Symbol;


            /***/
}),

    /***/ 1149:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var root = __webpack_require__(5639);

            /** Built-in value references. */
            var Uint8Array = root.Uint8Array;

            module.exports = Uint8Array;


            /***/
}),

    /***/ 577:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852),
                root = __webpack_require__(5639);

            /* Built-in method references that are verified to be native. */
            var WeakMap = getNative(root, 'WeakMap');

            module.exports = WeakMap;


            /***/
}),

    /***/ 6874:
    /***/ ((module) => {

            /**
             * A faster alternative to `Function#apply`, this function invokes `func`
             * with the `this` binding of `thisArg` and the arguments of `args`.
             *
             * @private
             * @param {Function} func The function to invoke.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} args The arguments to invoke `func` with.
             * @returns {*} Returns the result of `func`.
             */
            function apply(func, thisArg, args) {
                switch (args.length) {
                    case 0: return func.call(thisArg);
                    case 1: return func.call(thisArg, args[0]);
                    case 2: return func.call(thisArg, args[0], args[1]);
                    case 3: return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
            }

            module.exports = apply;


            /***/
}),

    /***/ 4963:
    /***/ ((module) => {

            /**
             * A specialized version of `_.filter` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function arrayFilter(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }

            module.exports = arrayFilter;


            /***/
}),

    /***/ 4636:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseTimes = __webpack_require__(2545),
                isArguments = __webpack_require__(5694),
                isArray = __webpack_require__(1469),
                isBuffer = __webpack_require__(4144),
                isIndex = __webpack_require__(5776),
                isTypedArray = __webpack_require__(6719);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                for (var key in value) {
                    if ((inherited || hasOwnProperty.call(value, key)) &&
                        !(skipIndexes && (
                            // Safari 9 has enumerable `arguments.length` in strict mode.
                            key == 'length' ||
                            // Node.js 0.10 has enumerable non-index properties on buffers.
                            (isBuff && (key == 'offset' || key == 'parent')) ||
                            // PhantomJS 2 has enumerable non-index properties on typed arrays.
                            (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                            // Skip index properties.
                            isIndex(key, length)
                        ))) {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = arrayLikeKeys;


            /***/
}),

    /***/ 9932:
    /***/ ((module) => {

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    result = Array(length);

                while (++index < length) {
                    result[index] = iteratee(array[index], index, array);
                }
                return result;
            }

            module.exports = arrayMap;


            /***/
}),

    /***/ 2488:
    /***/ ((module) => {

            /**
             * Appends the elements of `values` to `array`.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to append.
             * @returns {Array} Returns `array`.
             */
            function arrayPush(array, values) {
                var index = -1,
                    length = values.length,
                    offset = array.length;

                while (++index < length) {
                    array[offset + index] = values[index];
                }
                return array;
            }

            module.exports = arrayPush;


            /***/
}),

    /***/ 2663:
    /***/ ((module) => {

            /**
             * A specialized version of `_.reduce` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @param {boolean} [initAccum] Specify using the first element of `array` as
             *  the initial value.
             * @returns {*} Returns the accumulated value.
             */
            function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                if (initAccum && length) {
                    accumulator = array[++index];
                }
                while (++index < length) {
                    accumulator = iteratee(accumulator, array[index], index, array);
                }
                return accumulator;
            }

            module.exports = arrayReduce;


            /***/
}),

    /***/ 2908:
    /***/ ((module) => {

            /**
             * A specialized version of `_.some` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function arraySome(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (predicate(array[index], index, array)) {
                        return true;
                    }
                }
                return false;
            }

            module.exports = arraySome;


            /***/
}),

    /***/ 9029:
    /***/ ((module) => {

            /** Used to match words composed of alphanumeric characters. */
            var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

            /**
             * Splits an ASCII `string` into an array of its words.
             *
             * @private
             * @param {string} The string to inspect.
             * @returns {Array} Returns the words of `string`.
             */
            function asciiWords(string) {
                return string.match(reAsciiWord) || [];
            }

            module.exports = asciiWords;


            /***/
}),

    /***/ 6556:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseAssignValue = __webpack_require__(9465),
                eq = __webpack_require__(7813);

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
                if ((value !== undefined && !eq(object[key], value)) ||
                    (value === undefined && !(key in object))) {
                    baseAssignValue(object, key, value);
                }
            }

            module.exports = assignMergeValue;


            /***/
}),

    /***/ 4865:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseAssignValue = __webpack_require__(9465),
                eq = __webpack_require__(7813);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
                var objValue = object[key];
                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                    (value === undefined && !(key in object))) {
                    baseAssignValue(object, key, value);
                }
            }

            module.exports = assignValue;


            /***/
}),

    /***/ 8470:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var eq = __webpack_require__(7813);

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                    if (eq(array[length][0], key)) {
                        return length;
                    }
                }
                return -1;
            }

            module.exports = assocIndexOf;


            /***/
}),

    /***/ 9465:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var defineProperty = __webpack_require__(8777);

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
                if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                        'configurable': true,
                        'enumerable': true,
                        'value': value,
                        'writable': true
                    });
                } else {
                    object[key] = value;
                }
            }

            module.exports = baseAssignValue;


            /***/
}),

    /***/ 3118:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isObject = __webpack_require__(3218);

            /** Built-in value references. */
            var objectCreate = Object.create;

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
                function object() { }
                return function (proto) {
                    if (!isObject(proto)) {
                        return {};
                    }
                    if (objectCreate) {
                        return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object;
                    object.prototype = undefined;
                    return result;
                };
            }());

            module.exports = baseCreate;


            /***/
}),

    /***/ 8483:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var createBaseFor = __webpack_require__(5063);

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            module.exports = baseFor;


            /***/
}),

    /***/ 7786:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var castPath = __webpack_require__(1811),
                toKey = __webpack_require__(327);

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
                path = castPath(path, object);

                var index = 0,
                    length = path.length;

                while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                }
                return (index && index == length) ? object : undefined;
            }

            module.exports = baseGet;


            /***/
}),

    /***/ 8866:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayPush = __webpack_require__(2488),
                isArray = __webpack_require__(1469);

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
            }

            module.exports = baseGetAllKeys;


            /***/
}),

    /***/ 4239:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Symbol = __webpack_require__(2705),
                getRawTag = __webpack_require__(9607),
                objectToString = __webpack_require__(2333);

            /** `Object#toString` result references. */
            var nullTag = '[object Null]',
                undefinedTag = '[object Undefined]';

            /** Built-in value references. */
            var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
                if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                }
                return (symToStringTag && symToStringTag in Object(value))
                    ? getRawTag(value)
                    : objectToString(value);
            }

            module.exports = baseGetTag;


            /***/
}),

    /***/ 13:
    /***/ ((module) => {

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
                return object != null && key in Object(object);
            }

            module.exports = baseHasIn;


            /***/
}),

    /***/ 9454:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetTag = __webpack_require__(4239),
                isObjectLike = __webpack_require__(7005);

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]';

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            module.exports = baseIsArguments;


            /***/
}),

    /***/ 939:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseIsEqualDeep = __webpack_require__(1299),
                isObjectLike = __webpack_require__(7005);

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                    return true;
                }
                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                }
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }

            module.exports = baseIsEqual;


            /***/
}),

    /***/ 1299:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Stack = __webpack_require__(6384),
                equalArrays = __webpack_require__(7114),
                equalByTag = __webpack_require__(8351),
                equalObjects = __webpack_require__(6096),
                getTag = __webpack_require__(4160),
                isArray = __webpack_require__(1469),
                isBuffer = __webpack_require__(4144),
                isTypedArray = __webpack_require__(6719);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1;

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                objectTag = '[object Object]';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;

                var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                        return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return (objIsArr || isTypedArray(object))
                        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object,
                            othUnwrapped = othIsWrapped ? other.value() : other;

                        stack || (stack = new Stack);
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) {
                    return false;
                }
                stack || (stack = new Stack);
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }

            module.exports = baseIsEqualDeep;


            /***/
}),

    /***/ 2958:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Stack = __webpack_require__(6384),
                baseIsEqual = __webpack_require__(939);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if ((noCustomizer && data[2])
                        ? data[1] !== object[data[0]]
                        : !(data[0] in object)
                    ) {
                        return false;
                    }
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                        if (objValue === undefined && !(key in object)) {
                            return false;
                        }
                    } else {
                        var stack = new Stack;
                        if (customizer) {
                            var result = customizer(objValue, srcValue, key, object, source, stack);
                        }
                        if (!(result === undefined
                            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                            : result
                        )) {
                            return false;
                        }
                    }
                }
                return true;
            }

            module.exports = baseIsMatch;


            /***/
}),

    /***/ 8458:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isFunction = __webpack_require__(3560),
                isMasked = __webpack_require__(5346),
                isObject = __webpack_require__(3218),
                toSource = __webpack_require__(346);

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used for built-in method references. */
            var funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
                funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
            );

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                    return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
            }

            module.exports = baseIsNative;


            /***/
}),

    /***/ 8749:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetTag = __webpack_require__(4239),
                isLength = __webpack_require__(1780),
                isObjectLike = __webpack_require__(7005);

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                errorTag = '[object Error]',
                funcTag = '[object Function]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                objectTag = '[object Object]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                weakMapTag = '[object WeakMap]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]',
                float32Tag = '[object Float32Array]',
                float64Tag = '[object Float64Array]',
                int8Tag = '[object Int8Array]',
                int16Tag = '[object Int16Array]',
                int32Tag = '[object Int32Array]',
                uint8Tag = '[object Uint8Array]',
                uint8ClampedTag = '[object Uint8ClampedArray]',
                uint16Tag = '[object Uint16Array]',
                uint32Tag = '[object Uint32Array]';

            /** Used to identify `toStringTag` values of typed arrays. */
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                typedArrayTags[setTag] = typedArrayTags[stringTag] =
                typedArrayTags[weakMapTag] = false;

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
                return isObjectLike(value) &&
                    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }

            module.exports = baseIsTypedArray;


            /***/
}),

    /***/ 7206:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseMatches = __webpack_require__(1573),
                baseMatchesProperty = __webpack_require__(6432),
                identity = __webpack_require__(6557),
                isArray = __webpack_require__(1469),
                property = __webpack_require__(9601);

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                    return value;
                }
                if (value == null) {
                    return identity;
                }
                if (typeof value == 'object') {
                    return isArray(value)
                        ? baseMatchesProperty(value[0], value[1])
                        : baseMatches(value);
                }
                return property(value);
            }

            module.exports = baseIteratee;


            /***/
}),

    /***/ 280:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isPrototype = __webpack_require__(5726),
                nativeKeys = __webpack_require__(6916);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
                if (!isPrototype(object)) {
                    return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = baseKeys;


            /***/
}),

    /***/ 313:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isObject = __webpack_require__(3218),
                isPrototype = __webpack_require__(5726),
                nativeKeysIn = __webpack_require__(3498);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
                if (!isObject(object)) {
                    return nativeKeysIn(object);
                }
                var isProto = isPrototype(object),
                    result = [];

                for (var key in object) {
                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = baseKeysIn;


            /***/
}),

    /***/ 1573:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseIsMatch = __webpack_require__(2958),
                getMatchData = __webpack_require__(1499),
                matchesStrictComparable = __webpack_require__(2634);

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                }
                return function (object) {
                    return object === source || baseIsMatch(object, source, matchData);
                };
            }

            module.exports = baseMatches;


            /***/
}),

    /***/ 6432:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseIsEqual = __webpack_require__(939),
                get = __webpack_require__(7361),
                hasIn = __webpack_require__(9095),
                isKey = __webpack_require__(5403),
                isStrictComparable = __webpack_require__(9162),
                matchesStrictComparable = __webpack_require__(2634),
                toKey = __webpack_require__(327);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                }
                return function (object) {
                    var objValue = get(object, path);
                    return (objValue === undefined && objValue === srcValue)
                        ? hasIn(object, path)
                        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
            }

            module.exports = baseMatchesProperty;


            /***/
}),

    /***/ 2980:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Stack = __webpack_require__(6384),
                assignMergeValue = __webpack_require__(6556),
                baseFor = __webpack_require__(8483),
                baseMergeDeep = __webpack_require__(9783),
                isObject = __webpack_require__(3218),
                keysIn = __webpack_require__(1704),
                safeGet = __webpack_require__(6390);

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
                if (object === source) {
                    return;
                }
                baseFor(source, function (srcValue, key) {
                    stack || (stack = new Stack);
                    if (isObject(srcValue)) {
                        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                    }
                    else {
                        var newValue = customizer
                            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                            : undefined;

                        if (newValue === undefined) {
                            newValue = srcValue;
                        }
                        assignMergeValue(object, key, newValue);
                    }
                }, keysIn);
            }

            module.exports = baseMerge;


            /***/
}),

    /***/ 9783:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assignMergeValue = __webpack_require__(6556),
                cloneBuffer = __webpack_require__(4626),
                cloneTypedArray = __webpack_require__(7133),
                copyArray = __webpack_require__(278),
                initCloneObject = __webpack_require__(8517),
                isArguments = __webpack_require__(5694),
                isArray = __webpack_require__(1469),
                isArrayLikeObject = __webpack_require__(9246),
                isBuffer = __webpack_require__(4144),
                isFunction = __webpack_require__(3560),
                isObject = __webpack_require__(3218),
                isPlainObject = __webpack_require__(8630),
                isTypedArray = __webpack_require__(6719),
                safeGet = __webpack_require__(6390),
                toPlainObject = __webpack_require__(9881);

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                var objValue = safeGet(object, key),
                    srcValue = safeGet(source, key),
                    stacked = stack.get(srcValue);

                if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                }
                var newValue = customizer
                    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                    : undefined;

                var isCommon = newValue === undefined;

                if (isCommon) {
                    var isArr = isArray(srcValue),
                        isBuff = !isArr && isBuffer(srcValue),
                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                        if (isArray(objValue)) {
                            newValue = objValue;
                        }
                        else if (isArrayLikeObject(objValue)) {
                            newValue = copyArray(objValue);
                        }
                        else if (isBuff) {
                            isCommon = false;
                            newValue = cloneBuffer(srcValue, true);
                        }
                        else if (isTyped) {
                            isCommon = false;
                            newValue = cloneTypedArray(srcValue, true);
                        }
                        else {
                            newValue = [];
                        }
                    }
                    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                        newValue = objValue;
                        if (isArguments(objValue)) {
                            newValue = toPlainObject(objValue);
                        }
                        else if (!isObject(objValue) || isFunction(objValue)) {
                            newValue = initCloneObject(srcValue);
                        }
                    }
                    else {
                        isCommon = false;
                    }
                }
                if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                }
                assignMergeValue(object, key, newValue);
            }

            module.exports = baseMergeDeep;


            /***/
}),

    /***/ 3012:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGet = __webpack_require__(7786),
                baseSet = __webpack_require__(611),
                castPath = __webpack_require__(1811);

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
                var index = -1,
                    length = paths.length,
                    result = {};

                while (++index < length) {
                    var path = paths[index],
                        value = baseGet(object, path);

                    if (predicate(value, path)) {
                        baseSet(result, castPath(path, object), value);
                    }
                }
                return result;
            }

            module.exports = basePickBy;


            /***/
}),

    /***/ 371:
    /***/ ((module) => {

            /**
             * The base implementation of `_.property` without support for deep paths.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function baseProperty(key) {
                return function (object) {
                    return object == null ? undefined : object[key];
                };
            }

            module.exports = baseProperty;


            /***/
}),

    /***/ 9152:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGet = __webpack_require__(7786);

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
                return function (object) {
                    return baseGet(object, path);
                };
            }

            module.exports = basePropertyDeep;


            /***/
}),

    /***/ 8674:
    /***/ ((module) => {

            /**
             * The base implementation of `_.propertyOf` without support for deep paths.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyOf(object) {
                return function (key) {
                    return object == null ? undefined : object[key];
                };
            }

            module.exports = basePropertyOf;


            /***/
}),

    /***/ 5976:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var identity = __webpack_require__(6557),
                overRest = __webpack_require__(5357),
                setToString = __webpack_require__(61);

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
                return setToString(overRest(func, start, identity), func + '');
            }

            module.exports = baseRest;


            /***/
}),

    /***/ 611:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assignValue = __webpack_require__(4865),
                castPath = __webpack_require__(1811),
                isIndex = __webpack_require__(5776),
                isObject = __webpack_require__(3218),
                toKey = __webpack_require__(327);

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
                if (!isObject(object)) {
                    return object;
                }
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    lastIndex = length - 1,
                    nested = object;

                while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                        newValue = value;

                    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                        return object;
                    }

                    if (index != lastIndex) {
                        var objValue = nested[key];
                        newValue = customizer ? customizer(objValue, key, nested) : undefined;
                        if (newValue === undefined) {
                            newValue = isObject(objValue)
                                ? objValue
                                : (isIndex(path[index + 1]) ? [] : {});
                        }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                }
                return object;
            }

            module.exports = baseSet;


            /***/
}),

    /***/ 6560:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var constant = __webpack_require__(5703),
                defineProperty = __webpack_require__(8777),
                identity = __webpack_require__(6557);

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty ? identity : function (func, string) {
                return defineProperty(func, 'toString', {
                    'configurable': true,
                    'enumerable': false,
                    'value': constant(string),
                    'writable': true
                });
            };

            module.exports = baseSetToString;


            /***/
}),

    /***/ 2545:
    /***/ ((module) => {

            /**
             * The base implementation of `_.times` without support for iteratee shorthands
             * or max array length checks.
             *
             * @private
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             */
            function baseTimes(n, iteratee) {
                var index = -1,
                    result = Array(n);

                while (++index < n) {
                    result[index] = iteratee(index);
                }
                return result;
            }

            module.exports = baseTimes;


            /***/
}),

    /***/ 531:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Symbol = __webpack_require__(2705),
                arrayMap = __webpack_require__(9932),
                isArray = __webpack_require__(1469),
                isSymbol = __webpack_require__(3448);

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                    return value;
                }
                if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            module.exports = baseToString;


            /***/
}),

    /***/ 1717:
    /***/ ((module) => {

            /**
             * The base implementation of `_.unary` without support for storing metadata.
             *
             * @private
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             */
            function baseUnary(func) {
                return function (value) {
                    return func(value);
                };
            }

            module.exports = baseUnary;


            /***/
}),

    /***/ 4757:
    /***/ ((module) => {

            /**
             * Checks if a `cache` value for `key` exists.
             *
             * @private
             * @param {Object} cache The cache to query.
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function cacheHas(cache, key) {
                return cache.has(key);
            }

            module.exports = cacheHas;


            /***/
}),

    /***/ 1811:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isArray = __webpack_require__(1469),
                isKey = __webpack_require__(5403),
                stringToPath = __webpack_require__(5514),
                toString = __webpack_require__(9833);

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
                if (isArray(value)) {
                    return value;
                }
                return isKey(value, object) ? [value] : stringToPath(toString(value));
            }

            module.exports = castPath;


            /***/
}),

    /***/ 4318:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Uint8Array = __webpack_require__(1149);

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                return result;
            }

            module.exports = cloneArrayBuffer;


            /***/
}),

    /***/ 4626:
    /***/ ((module, exports, __webpack_require__) => {

    /* module decorator */ module = __webpack_require__.nmd(module);
            var root = __webpack_require__(5639);

            /** Detect free variable `exports`. */
            var freeExports = true && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? root.Buffer : undefined,
                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length,
                    result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                buffer.copy(result);
                return result;
            }

            module.exports = cloneBuffer;


            /***/
}),

    /***/ 7133:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var cloneArrayBuffer = __webpack_require__(4318);

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
            }

            module.exports = cloneTypedArray;


            /***/
}),

    /***/ 278:
    /***/ ((module) => {

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
                var index = -1,
                    length = source.length;

                array || (array = Array(length));
                while (++index < length) {
                    array[index] = source[index];
                }
                return array;
            }

            module.exports = copyArray;


            /***/
}),

    /***/ 8363:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assignValue = __webpack_require__(4865),
                baseAssignValue = __webpack_require__(9465);

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
                var isNew = !object;
                object || (object = {});

                var index = -1,
                    length = props.length;

                while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                        ? customizer(object[key], source[key], key, object, source)
                        : undefined;

                    if (newValue === undefined) {
                        newValue = source[key];
                    }
                    if (isNew) {
                        baseAssignValue(object, key, newValue);
                    } else {
                        assignValue(object, key, newValue);
                    }
                }
                return object;
            }

            module.exports = copyObject;


            /***/
}),

    /***/ 4429:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var root = __webpack_require__(5639);

            /** Used to detect overreaching core-js shims. */
            var coreJsData = root['__core-js_shared__'];

            module.exports = coreJsData;


            /***/
}),

    /***/ 1463:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseRest = __webpack_require__(5976),
                isIterateeCall = __webpack_require__(6612);

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
                return baseRest(function (object, sources) {
                    var index = -1,
                        length = sources.length,
                        customizer = length > 1 ? sources[length - 1] : undefined,
                        guard = length > 2 ? sources[2] : undefined;

                    customizer = (assigner.length > 3 && typeof customizer == 'function')
                        ? (length--, customizer)
                        : undefined;

                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                        customizer = length < 3 ? undefined : customizer;
                        length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                        var source = sources[index];
                        if (source) {
                            assigner(object, source, index, customizer);
                        }
                    }
                    return object;
                });
            }

            module.exports = createAssigner;


            /***/
}),

    /***/ 5063:
    /***/ ((module) => {

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
                return function (object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee(iterable[key], key, iterable) === false) {
                            break;
                        }
                    }
                    return object;
                };
            }

            module.exports = createBaseFor;


            /***/
}),

    /***/ 5393:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayReduce = __webpack_require__(2663),
                deburr = __webpack_require__(3816),
                words = __webpack_require__(8748);

            /** Used to compose unicode capture groups. */
            var rsApos = "['\u2019]";

            /** Used to match apostrophes. */
            var reApos = RegExp(rsApos, 'g');

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
                return function (string) {
                    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                };
            }

            module.exports = createCompounder;


            /***/
}),

    /***/ 9389:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var basePropertyOf = __webpack_require__(8674);

            /** Used to map Latin Unicode letters to basic Latin letters. */
            var deburredLetters = {
                // Latin-1 Supplement block.
                '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                '\xc7': 'C', '\xe7': 'c',
                '\xd0': 'D', '\xf0': 'd',
                '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
                '\xd1': 'N', '\xf1': 'n',
                '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
                '\xc6': 'Ae', '\xe6': 'ae',
                '\xde': 'Th', '\xfe': 'th',
                '\xdf': 'ss',
                // Latin Extended-A block.
                '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
                '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
                '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                '\u0134': 'J', '\u0135': 'j',
                '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
                '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
                '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
                '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
                '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
                '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
                '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
                '\u0163': 't', '\u0165': 't', '\u0167': 't',
                '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                '\u0174': 'W', '\u0175': 'w',
                '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
                '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
                '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
                '\u0132': 'IJ', '\u0133': 'ij',
                '\u0152': 'Oe', '\u0153': 'oe',
                '\u0149': "'n", '\u017f': 's'
            };

            /**
             * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
             * letters to basic Latin letters.
             *
             * @private
             * @param {string} letter The matched letter to deburr.
             * @returns {string} Returns the deburred letter.
             */
            var deburrLetter = basePropertyOf(deburredLetters);

            module.exports = deburrLetter;


            /***/
}),

    /***/ 8777:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852);

            var defineProperty = (function () {
                try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                } catch (e) { }
            }());

            module.exports = defineProperty;


            /***/
}),

    /***/ 7114:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var SetCache = __webpack_require__(1258),
                arraySome = __webpack_require__(2908),
                cacheHas = __webpack_require__(4757);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                }
                // Check that cyclic values are equal.
                var arrStacked = stack.get(array);
                var othStacked = stack.get(other);
                if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                }
                var index = -1,
                    result = true,
                    seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                stack.set(array, other);
                stack.set(other, array);

                // Ignore non-index properties.
                while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                        var compared = isPartial
                            ? customizer(othValue, arrValue, index, other, array, stack)
                            : customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined) {
                        if (compared) {
                            continue;
                        }
                        result = false;
                        break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                        if (!arraySome(other, function (othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) &&
                                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                return seen.push(othIndex);
                            }
                        })) {
                            result = false;
                            break;
                        }
                    } else if (!(
                        arrValue === othValue ||
                        equalFunc(arrValue, othValue, bitmask, customizer, stack)
                    )) {
                        result = false;
                        break;
                    }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
            }

            module.exports = equalArrays;


            /***/
}),

    /***/ 8351:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Symbol = __webpack_require__(2705),
                Uint8Array = __webpack_require__(1149),
                eq = __webpack_require__(7813),
                equalArrays = __webpack_require__(7114),
                mapToArray = __webpack_require__(8776),
                setToArray = __webpack_require__(1814);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /** `Object#toString` result references. */
            var boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                errorTag = '[object Error]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                symbolTag = '[object Symbol]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]';

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                switch (tag) {
                    case dataViewTag:
                        if ((object.byteLength != other.byteLength) ||
                            (object.byteOffset != other.byteOffset)) {
                            return false;
                        }
                        object = object.buffer;
                        other = other.buffer;

                    case arrayBufferTag:
                        if ((object.byteLength != other.byteLength) ||
                            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                            return false;
                        }
                        return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                        // Coerce booleans to `1` or `0` and dates to milliseconds.
                        // Invalid dates are coerced to `NaN`.
                        return eq(+object, +other);

                    case errorTag:
                        return object.name == other.name && object.message == other.message;

                    case regexpTag:
                    case stringTag:
                        // Coerce regexes to strings and treat strings, primitives and objects,
                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                        // for more details.
                        return object == (other + '');

                    case mapTag:
                        var convert = mapToArray;

                    case setTag:
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                        convert || (convert = setToArray);

                        if (object.size != other.size && !isPartial) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked) {
                            return stacked == other;
                        }
                        bitmask |= COMPARE_UNORDERED_FLAG;

                        // Recursively compare objects (susceptible to call stack limits).
                        stack.set(object, other);
                        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                        stack['delete'](object);
                        return result;

                    case symbolTag:
                        if (symbolValueOf) {
                            return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                }
                return false;
            }

            module.exports = equalByTag;


            /***/
}),

    /***/ 6096:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getAllKeys = __webpack_require__(8234);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1;

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                if (objLength != othLength && !isPartial) {
                    return false;
                }
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                        return false;
                    }
                }
                // Check that cyclic values are equal.
                var objStacked = stack.get(object);
                var othStacked = stack.get(other);
                if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);

                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                        var compared = isPartial
                            ? customizer(othValue, objValue, key, other, object, stack)
                            : customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined
                        ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                        : compared
                    )) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor &&
                        ('constructor' in object && 'constructor' in other) &&
                        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                        result = false;
                    }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
            }

            module.exports = equalObjects;


            /***/
}),

    /***/ 1957:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

            module.exports = freeGlobal;


            /***/
}),

    /***/ 8234:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetAllKeys = __webpack_require__(8866),
                getSymbols = __webpack_require__(9551),
                keys = __webpack_require__(3674);

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
            }

            module.exports = getAllKeys;


            /***/
}),

    /***/ 6904:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetAllKeys = __webpack_require__(8866),
                getSymbolsIn = __webpack_require__(1442),
                keysIn = __webpack_require__(1704);

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
                return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            module.exports = getAllKeysIn;


            /***/
}),

    /***/ 5050:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isKeyable = __webpack_require__(7019);

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key)
                    ? data[typeof key == 'string' ? 'string' : 'hash']
                    : data.map;
            }

            module.exports = getMapData;


            /***/
}),

    /***/ 1499:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isStrictComparable = __webpack_require__(9162),
                keys = __webpack_require__(3674);

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
                var result = keys(object),
                    length = result.length;

                while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
            }

            module.exports = getMatchData;


            /***/
}),

    /***/ 852:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseIsNative = __webpack_require__(8458),
                getValue = __webpack_require__(7801);

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined;
            }

            module.exports = getNative;


            /***/
}),

    /***/ 5924:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var overArg = __webpack_require__(5569);

            /** Built-in value references. */
            var getPrototype = overArg(Object.getPrototypeOf, Object);

            module.exports = getPrototype;


            /***/
}),

    /***/ 9607:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Symbol = __webpack_require__(2705);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Built-in value references. */
            var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                try {
                    value[symToStringTag] = undefined;
                    var unmasked = true;
                } catch (e) { }

                var result = nativeObjectToString.call(value);
                if (unmasked) {
                    if (isOwn) {
                        value[symToStringTag] = tag;
                    } else {
                        delete value[symToStringTag];
                    }
                }
                return result;
            }

            module.exports = getRawTag;


            /***/
}),

    /***/ 9551:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayFilter = __webpack_require__(4963),
                stubArray = __webpack_require__(479);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Built-in value references. */
            var propertyIsEnumerable = objectProto.propertyIsEnumerable;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeGetSymbols = Object.getOwnPropertySymbols;

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
                if (object == null) {
                    return [];
                }
                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function (symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                });
            };

            module.exports = getSymbols;


            /***/
}),

    /***/ 1442:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayPush = __webpack_require__(2488),
                getPrototype = __webpack_require__(5924),
                getSymbols = __webpack_require__(9551),
                stubArray = __webpack_require__(479);

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeGetSymbols = Object.getOwnPropertySymbols;

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
                var result = [];
                while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                }
                return result;
            };

            module.exports = getSymbolsIn;


            /***/
}),

    /***/ 4160:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var DataView = __webpack_require__(8552),
                Map = __webpack_require__(7071),
                Promise = __webpack_require__(3818),
                Set = __webpack_require__(8525),
                WeakMap = __webpack_require__(577),
                baseGetTag = __webpack_require__(4239),
                toSource = __webpack_require__(346);

            /** `Object#toString` result references. */
            var mapTag = '[object Map]',
                objectTag = '[object Object]',
                promiseTag = '[object Promise]',
                setTag = '[object Set]',
                weakMapTag = '[object WeakMap]';

            var dataViewTag = '[object DataView]';

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
                mapCtorString = toSource(Map),
                promiseCtorString = toSource(Promise),
                setCtorString = toSource(Set),
                weakMapCtorString = toSource(WeakMap);

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                (Map && getTag(new Map) != mapTag) ||
                (Promise && getTag(Promise.resolve()) != promiseTag) ||
                (Set && getTag(new Set) != setTag) ||
                (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                getTag = function (value) {
                    var result = baseGetTag(value),
                        Ctor = result == objectTag ? value.constructor : undefined,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                        switch (ctorString) {
                            case dataViewCtorString: return dataViewTag;
                            case mapCtorString: return mapTag;
                            case promiseCtorString: return promiseTag;
                            case setCtorString: return setTag;
                            case weakMapCtorString: return weakMapTag;
                        }
                    }
                    return result;
                };
            }

            module.exports = getTag;


            /***/
}),

    /***/ 7801:
    /***/ ((module) => {

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
                return object == null ? undefined : object[key];
            }

            module.exports = getValue;


            /***/
}),

    /***/ 222:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var castPath = __webpack_require__(1811),
                isArguments = __webpack_require__(5694),
                isArray = __webpack_require__(1469),
                isIndex = __webpack_require__(5776),
                isLength = __webpack_require__(1780),
                toKey = __webpack_require__(327);

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    result = false;

                while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                        break;
                    }
                    object = object[key];
                }
                if (result || ++index != length) {
                    return result;
                }
                length = object == null ? 0 : object.length;
                return !!length && isLength(length) && isIndex(key, length) &&
                    (isArray(object) || isArguments(object));
            }

            module.exports = hasPath;


            /***/
}),

    /***/ 3157:
    /***/ ((module) => {

            /** Used to detect strings that need a more robust regexp to match words. */
            var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

            /**
             * Checks if `string` contains a word composed of Unicode symbols.
             *
             * @private
             * @param {string} string The string to inspect.
             * @returns {boolean} Returns `true` if a word is found, else `false`.
             */
            function hasUnicodeWord(string) {
                return reHasUnicodeWord.test(string);
            }

            module.exports = hasUnicodeWord;


            /***/
}),

    /***/ 1789:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var nativeCreate = __webpack_require__(4536);

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
            }

            module.exports = hashClear;


            /***/
}),

    /***/ 401:
    /***/ ((module) => {

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
            }

            module.exports = hashDelete;


            /***/
}),

    /***/ 7667:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var nativeCreate = __webpack_require__(4536);

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            module.exports = hashGet;


            /***/
}),

    /***/ 1327:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var nativeCreate = __webpack_require__(4536);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
                var data = this.__data__;
                return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
            }

            module.exports = hashHas;


            /***/
}),

    /***/ 1866:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var nativeCreate = __webpack_require__(4536);

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                return this;
            }

            module.exports = hashSet;


            /***/
}),

    /***/ 8517:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseCreate = __webpack_require__(3118),
                getPrototype = __webpack_require__(5924),
                isPrototype = __webpack_require__(5726);

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
                return (typeof object.constructor == 'function' && !isPrototype(object))
                    ? baseCreate(getPrototype(object))
                    : {};
            }

            module.exports = initCloneObject;


            /***/
}),

    /***/ 5776:
    /***/ ((module) => {

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
                var type = typeof value;
                length = length == null ? MAX_SAFE_INTEGER : length;

                return !!length &&
                    (type == 'number' ||
                        (type != 'symbol' && reIsUint.test(value))) &&
                    (value > -1 && value % 1 == 0 && value < length);
            }

            module.exports = isIndex;


            /***/
}),

    /***/ 6612:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var eq = __webpack_require__(7813),
                isArrayLike = __webpack_require__(8612),
                isIndex = __webpack_require__(5776),
                isObject = __webpack_require__(3218);

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
                if (!isObject(object)) {
                    return false;
                }
                var type = typeof index;
                if (type == 'number'
                    ? (isArrayLike(object) && isIndex(index, object.length))
                    : (type == 'string' && index in object)
                ) {
                    return eq(object[index], value);
                }
                return false;
            }

            module.exports = isIterateeCall;


            /***/
}),

    /***/ 5403:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isArray = __webpack_require__(1469),
                isSymbol = __webpack_require__(3448);

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/;

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
                if (isArray(value)) {
                    return false;
                }
                var type = typeof value;
                if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                    value == null || isSymbol(value)) {
                    return true;
                }
                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object));
            }

            module.exports = isKey;


            /***/
}),

    /***/ 7019:
    /***/ ((module) => {

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
                var type = typeof value;
                return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                    ? (value !== '__proto__')
                    : (value === null);
            }

            module.exports = isKeyable;


            /***/
}),

    /***/ 5346:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var coreJsData = __webpack_require__(4429);

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                return uid ? ('Symbol(src)_1.' + uid) : '';
            }());

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
                return !!maskSrcKey && (maskSrcKey in func);
            }

            module.exports = isMasked;


            /***/
}),

    /***/ 5726:
    /***/ ((module) => {

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
                var Ctor = value && value.constructor,
                    proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                return value === proto;
            }

            module.exports = isPrototype;


            /***/
}),

    /***/ 9162:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isObject = __webpack_require__(3218);

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }

            module.exports = isStrictComparable;


            /***/
}),

    /***/ 7040:
    /***/ ((module) => {

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }

            module.exports = listCacheClear;


            /***/
}),

    /***/ 4125:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assocIndexOf = __webpack_require__(8470);

            /** Used for built-in method references. */
            var arrayProto = Array.prototype;

            /** Built-in value references. */
            var splice = arrayProto.splice;

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                    data.pop();
                } else {
                    splice.call(data, index, 1);
                }
                --this.size;
                return true;
            }

            module.exports = listCacheDelete;


            /***/
}),

    /***/ 2117:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assocIndexOf = __webpack_require__(8470);

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                return index < 0 ? undefined : data[index][1];
            }

            module.exports = listCacheGet;


            /***/
}),

    /***/ 7518:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assocIndexOf = __webpack_require__(8470);

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }

            module.exports = listCacheHas;


            /***/
}),

    /***/ 4705:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var assocIndexOf = __webpack_require__(8470);

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                } else {
                    data[index][1] = value;
                }
                return this;
            }

            module.exports = listCacheSet;


            /***/
}),

    /***/ 4785:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var Hash = __webpack_require__(1989),
                ListCache = __webpack_require__(8407),
                Map = __webpack_require__(7071);

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                    'hash': new Hash,
                    'map': new (Map || ListCache),
                    'string': new Hash
                };
            }

            module.exports = mapCacheClear;


            /***/
}),

    /***/ 1285:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getMapData = __webpack_require__(5050);

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
            }

            module.exports = mapCacheDelete;


            /***/
}),

    /***/ 6000:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getMapData = __webpack_require__(5050);

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
                return getMapData(this, key).get(key);
            }

            module.exports = mapCacheGet;


            /***/
}),

    /***/ 9916:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getMapData = __webpack_require__(5050);

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
                return getMapData(this, key).has(key);
            }

            module.exports = mapCacheHas;


            /***/
}),

    /***/ 5265:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getMapData = __webpack_require__(5050);

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
                var data = getMapData(this, key),
                    size = data.size;

                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
            }

            module.exports = mapCacheSet;


            /***/
}),

    /***/ 8776:
    /***/ ((module) => {

            /**
             * Converts `map` to its key-value pairs.
             *
             * @private
             * @param {Object} map The map to convert.
             * @returns {Array} Returns the key-value pairs.
             */
            function mapToArray(map) {
                var index = -1,
                    result = Array(map.size);

                map.forEach(function (value, key) {
                    result[++index] = [key, value];
                });
                return result;
            }

            module.exports = mapToArray;


            /***/
}),

    /***/ 2634:
    /***/ ((module) => {

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
                return function (object) {
                    if (object == null) {
                        return false;
                    }
                    return object[key] === srcValue &&
                        (srcValue !== undefined || (key in Object(object)));
                };
            }

            module.exports = matchesStrictComparable;


            /***/
}),

    /***/ 4523:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var memoize = __webpack_require__(8306);

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
                var result = memoize(func, function (key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                    }
                    return key;
                });

                var cache = result.cache;
                return result;
            }

            module.exports = memoizeCapped;


            /***/
}),

    /***/ 4536:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var getNative = __webpack_require__(852);

            /* Built-in method references that are verified to be native. */
            var nativeCreate = getNative(Object, 'create');

            module.exports = nativeCreate;


            /***/
}),

    /***/ 6916:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var overArg = __webpack_require__(5569);

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeKeys = overArg(Object.keys, Object);

            module.exports = nativeKeys;


            /***/
}),

    /***/ 3498:
    /***/ ((module) => {

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
                var result = [];
                if (object != null) {
                    for (var key in Object(object)) {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = nativeKeysIn;


            /***/
}),

    /***/ 1167:
    /***/ ((module, exports, __webpack_require__) => {

    /* module decorator */ module = __webpack_require__.nmd(module);
            var freeGlobal = __webpack_require__(1957);

            /** Detect free variable `exports`. */
            var freeExports = true && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && freeGlobal.process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function () {
                try {
                    // Use `util.types` for Node.js 10+.
                    var types = freeModule && freeModule.require && freeModule.require('util').types;

                    if (types) {
                        return types;
                    }

                    // Legacy `process.binding('util')` for Node.js < 10.
                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) { }
            }());

            module.exports = nodeUtil;


            /***/
}),

    /***/ 2333:
    /***/ ((module) => {

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }

            module.exports = objectToString;


            /***/
}),

    /***/ 5569:
    /***/ ((module) => {

            /**
             * Creates a unary function that invokes `func` with its argument transformed.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {Function} transform The argument transform.
             * @returns {Function} Returns the new function.
             */
            function overArg(func, transform) {
                return function (arg) {
                    return func(transform(arg));
                };
            }

            module.exports = overArg;


            /***/
}),

    /***/ 5357:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var apply = __webpack_require__(6874);

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeMax = Math.max;

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
                start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                return function () {
                    var args = arguments,
                        index = -1,
                        length = nativeMax(args.length - start, 0),
                        array = Array(length);

                    while (++index < length) {
                        array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                        otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                };
            }

            module.exports = overRest;


            /***/
}),

    /***/ 5639:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var freeGlobal = __webpack_require__(1957);

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = freeGlobal || freeSelf || Function('return this')();

            module.exports = root;


            /***/
}),

    /***/ 6390:
    /***/ ((module) => {

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
                if (key === 'constructor' && typeof object[key] === 'function') {
                    return;
                }

                if (key == '__proto__') {
                    return;
                }

                return object[key];
            }

            module.exports = safeGet;


            /***/
}),

    /***/ 619:
    /***/ ((module) => {

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
            }

            module.exports = setCacheAdd;


            /***/
}),

    /***/ 2385:
    /***/ ((module) => {

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
                return this.__data__.has(value);
            }

            module.exports = setCacheHas;


            /***/
}),

    /***/ 1814:
    /***/ ((module) => {

            /**
             * Converts `set` to an array of its values.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the values.
             */
            function setToArray(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function (value) {
                    result[++index] = value;
                });
                return result;
            }

            module.exports = setToArray;


            /***/
}),

    /***/ 61:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseSetToString = __webpack_require__(6560),
                shortOut = __webpack_require__(1275);

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            module.exports = setToString;


            /***/
}),

    /***/ 1275:
    /***/ ((module) => {

            /** Used to detect hot functions by number of calls within a span of milliseconds. */
            var HOT_COUNT = 800,
                HOT_SPAN = 16;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeNow = Date.now;

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
                var count = 0,
                    lastCalled = 0;

                return function () {
                    var stamp = nativeNow(),
                        remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                        if (++count >= HOT_COUNT) {
                            return arguments[0];
                        }
                    } else {
                        count = 0;
                    }
                    return func.apply(undefined, arguments);
                };
            }

            module.exports = shortOut;


            /***/
}),

    /***/ 7465:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var ListCache = __webpack_require__(8407);

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
                this.__data__ = new ListCache;
                this.size = 0;
            }

            module.exports = stackClear;


            /***/
}),

    /***/ 3779:
    /***/ ((module) => {

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
                var data = this.__data__,
                    result = data['delete'](key);

                this.size = data.size;
                return result;
            }

            module.exports = stackDelete;


            /***/
}),

    /***/ 7599:
    /***/ ((module) => {

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
                return this.__data__.get(key);
            }

            module.exports = stackGet;


            /***/
}),

    /***/ 4758:
    /***/ ((module) => {

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
                return this.__data__.has(key);
            }

            module.exports = stackHas;


            /***/
}),

    /***/ 4309:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var ListCache = __webpack_require__(8407),
                Map = __webpack_require__(7071),
                MapCache = __webpack_require__(3369);

            /** Used as the size to enable large array optimizations. */
            var LARGE_ARRAY_SIZE = 200;

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
            }

            module.exports = stackSet;


            /***/
}),

    /***/ 5514:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var memoizeCapped = __webpack_require__(4523);

            /** Used to match property names within property paths. */
            var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
                var result = [];
                if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                }
                string.replace(rePropName, function (match, number, quote, subString) {
                    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                });
                return result;
            });

            module.exports = stringToPath;


            /***/
}),

    /***/ 327:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isSymbol = __webpack_require__(3448);

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            module.exports = toKey;


            /***/
}),

    /***/ 346:
    /***/ ((module) => {

            /** Used for built-in method references. */
            var funcProto = Function.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
                if (func != null) {
                    try {
                        return funcToString.call(func);
                    } catch (e) { }
                    try {
                        return (func + '');
                    } catch (e) { }
                }
                return '';
            }

            module.exports = toSource;


            /***/
}),

    /***/ 2757:
    /***/ ((module) => {

            /** Used to compose unicode character classes. */
            var rsAstralRange = '\\ud800-\\udfff',
                rsComboMarksRange = '\\u0300-\\u036f',
                reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                rsComboSymbolsRange = '\\u20d0-\\u20ff',
                rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                rsDingbatRange = '\\u2700-\\u27bf',
                rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                rsPunctuationRange = '\\u2000-\\u206f',
                rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                rsVarRange = '\\ufe0e\\ufe0f',
                rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

            /** Used to compose unicode capture groups. */
            var rsApos = "['\u2019]",
                rsBreak = '[' + rsBreakRange + ']',
                rsCombo = '[' + rsComboRange + ']',
                rsDigits = '\\d+',
                rsDingbat = '[' + rsDingbatRange + ']',
                rsLower = '[' + rsLowerRange + ']',
                rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                rsFitz = '\\ud83c[\\udffb-\\udfff]',
                rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                rsNonAstral = '[^' + rsAstralRange + ']',
                rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                rsUpper = '[' + rsUpperRange + ']',
                rsZWJ = '\\u200d';

            /** Used to compose unicode regexes. */
            var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                reOptMod = rsModifier + '?',
                rsOptVar = '[' + rsVarRange + ']?',
                rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
                rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
                rsSeq = rsOptVar + reOptMod + rsOptJoin,
                rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

            /** Used to match complex or compound words. */
            var reUnicodeWord = RegExp([
                rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                rsUpper + '+' + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji
            ].join('|'), 'g');

            /**
             * Splits a Unicode `string` into an array of its words.
             *
             * @private
             * @param {string} The string to inspect.
             * @returns {Array} Returns the words of `string`.
             */
            function unicodeWords(string) {
                return string.match(reUnicodeWord) || [];
            }

            module.exports = unicodeWords;


            /***/
}),

    /***/ 5703:
    /***/ ((module) => {

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
                return function () {
                    return value;
                };
            }

            module.exports = constant;


            /***/
}),

    /***/ 3816:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var deburrLetter = __webpack_require__(9389),
                toString = __webpack_require__(9833);

            /** Used to match Latin Unicode letters (excluding mathematical operators). */
            var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

            /** Used to compose unicode character classes. */
            var rsComboMarksRange = '\\u0300-\\u036f',
                reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                rsComboSymbolsRange = '\\u20d0-\\u20ff',
                rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

            /** Used to compose unicode capture groups. */
            var rsCombo = '[' + rsComboRange + ']';

            /**
             * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
             * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
             */
            var reComboMark = RegExp(rsCombo, 'g');

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('dÃ©jÃ  vu');
             * // => 'deja vu'
             */
            function deburr(string) {
                string = toString(string);
                return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
            }

            module.exports = deburr;


            /***/
}),

    /***/ 7813:
    /***/ ((module) => {

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
                return value === other || (value !== value && other !== other);
            }

            module.exports = eq;


            /***/
}),

    /***/ 7361:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGet = __webpack_require__(7786);

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
                var result = object == null ? undefined : baseGet(object, path);
                return result === undefined ? defaultValue : result;
            }

            module.exports = get;


            /***/
}),

    /***/ 9095:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseHasIn = __webpack_require__(13),
                hasPath = __webpack_require__(222);

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
            }

            module.exports = hasIn;


            /***/
}),

    /***/ 6557:
    /***/ ((module) => {

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
                return value;
            }

            module.exports = identity;


            /***/
}),

    /***/ 5694:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseIsArguments = __webpack_require__(9454),
                isObjectLike = __webpack_require__(7005);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Built-in value references. */
            var propertyIsEnumerable = objectProto.propertyIsEnumerable;

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(function () { return arguments; }()) ? baseIsArguments : function (value) {
                return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                    !propertyIsEnumerable.call(value, 'callee');
            };

            module.exports = isArguments;


            /***/
}),

    /***/ 1469:
    /***/ ((module) => {

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            module.exports = isArray;


            /***/
}),

    /***/ 8612:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isFunction = __webpack_require__(3560),
                isLength = __webpack_require__(1780);

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
                return value != null && isLength(value.length) && !isFunction(value);
            }

            module.exports = isArrayLike;


            /***/
}),

    /***/ 9246:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var isArrayLike = __webpack_require__(8612),
                isObjectLike = __webpack_require__(7005);

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
                return isObjectLike(value) && isArrayLike(value);
            }

            module.exports = isArrayLikeObject;


            /***/
}),

    /***/ 4144:
    /***/ ((module, exports, __webpack_require__) => {

    /* module decorator */ module = __webpack_require__.nmd(module);
            var root = __webpack_require__(5639),
                stubFalse = __webpack_require__(5062);

            /** Detect free variable `exports`. */
            var freeExports = true && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? root.Buffer : undefined;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            module.exports = isBuffer;


            /***/
}),

    /***/ 3560:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetTag = __webpack_require__(4239),
                isObject = __webpack_require__(3218);

            /** `Object#toString` result references. */
            var asyncTag = '[object AsyncFunction]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                proxyTag = '[object Proxy]';

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
                if (!isObject(value)) {
                    return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            module.exports = isFunction;


            /***/
}),

    /***/ 1780:
    /***/ ((module) => {

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
                return typeof value == 'number' &&
                    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }

            module.exports = isLength;


            /***/
}),

    /***/ 3218:
    /***/ ((module) => {

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
                var type = typeof value;
                return value != null && (type == 'object' || type == 'function');
            }

            module.exports = isObject;


            /***/
}),

    /***/ 7005:
    /***/ ((module) => {

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
                return value != null && typeof value == 'object';
            }

            module.exports = isObjectLike;


            /***/
}),

    /***/ 8630:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetTag = __webpack_require__(4239),
                getPrototype = __webpack_require__(5924),
                isObjectLike = __webpack_require__(7005);

            /** `Object#toString` result references. */
            var objectTag = '[object Object]';

            /** Used for built-in method references. */
            var funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                    return true;
                }
                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString;
            }

            module.exports = isPlainObject;


            /***/
}),

    /***/ 3448:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseGetTag = __webpack_require__(4239),
                isObjectLike = __webpack_require__(7005);

            /** `Object#toString` result references. */
            var symbolTag = '[object Symbol]';

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
                return typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag);
            }

            module.exports = isSymbol;


            /***/
}),

    /***/ 6719:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseIsTypedArray = __webpack_require__(8749),
                baseUnary = __webpack_require__(1717),
                nodeUtil = __webpack_require__(1167);

            /* Node.js helper references. */
            var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

            module.exports = isTypedArray;


            /***/
}),

    /***/ 1804:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var createCompounder = __webpack_require__(5393);

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
                return result + (index ? '-' : '') + word.toLowerCase();
            });

            module.exports = kebabCase;


            /***/
}),

    /***/ 3674:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayLikeKeys = __webpack_require__(4636),
                baseKeys = __webpack_require__(280),
                isArrayLike = __webpack_require__(8612);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }

            module.exports = keys;


            /***/
}),

    /***/ 1704:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayLikeKeys = __webpack_require__(4636),
                baseKeysIn = __webpack_require__(313),
                isArrayLike = __webpack_require__(8612);

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
            }

            module.exports = keysIn;


            /***/
}),

    /***/ 8306:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var MapCache = __webpack_require__(3369);

            /** Error message constants. */
            var FUNC_ERROR_TEXT = 'Expected a function';

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function () {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                        return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                };
                memoized.cache = new (memoize.Cache || MapCache);
                return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            module.exports = memoize;


            /***/
}),

    /***/ 2492:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseMerge = __webpack_require__(2980),
                createAssigner = __webpack_require__(1463);

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
                baseMerge(object, source, srcIndex);
            });

            module.exports = merge;


            /***/
}),

    /***/ 5937:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var arrayMap = __webpack_require__(9932),
                baseIteratee = __webpack_require__(7206),
                basePickBy = __webpack_require__(3012),
                getAllKeysIn = __webpack_require__(6904);

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
                if (object == null) {
                    return {};
                }
                var props = arrayMap(getAllKeysIn(object), function (prop) {
                    return [prop];
                });
                predicate = baseIteratee(predicate);
                return basePickBy(object, props, function (value, path) {
                    return predicate(value, path[0]);
                });
            }

            module.exports = pickBy;


            /***/
}),

    /***/ 9601:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseProperty = __webpack_require__(371),
                basePropertyDeep = __webpack_require__(9152),
                isKey = __webpack_require__(5403),
                toKey = __webpack_require__(327);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }

            module.exports = property;


            /***/
}),

    /***/ 479:
    /***/ ((module) => {

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
                return [];
            }

            module.exports = stubArray;


            /***/
}),

    /***/ 5062:
    /***/ ((module) => {

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
                return false;
            }

            module.exports = stubFalse;


            /***/
}),

    /***/ 9881:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var copyObject = __webpack_require__(8363),
                keysIn = __webpack_require__(1704);

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
                return copyObject(value, keysIn(value));
            }

            module.exports = toPlainObject;


            /***/
}),

    /***/ 9833:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var baseToString = __webpack_require__(531);

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
                return value == null ? '' : baseToString(value);
            }

            module.exports = toString;


            /***/
}),

    /***/ 8748:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            var asciiWords = __webpack_require__(9029),
                hasUnicodeWord = __webpack_require__(3157),
                toString = __webpack_require__(9833),
                unicodeWords = __webpack_require__(2757);

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
                string = toString(string);
                pattern = guard ? undefined : pattern;

                if (pattern === undefined) {
                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                }
                return string.match(pattern) || [];
            }

            module.exports = words;


            /***/
}),

    /***/ 4783:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            "use strict";


            /* eslint-env browser */
            /*
              eslint-disable
              no-console,
              func-names
            */

            /** @typedef {any} TODO */

            var normalizeUrl = __webpack_require__(5618);
            var srcByModuleId = Object.create(null);
            var noDocument = typeof document === "undefined";
            var forEach = Array.prototype.forEach;

            /**
             * @param {function} fn
             * @param {number} time
             * @returns {(function(): void)|*}
             */
            function debounce(fn, time) {
                var timeout = 0;
                return function () {
                    // @ts-ignore
                    var self = this;
                    // eslint-disable-next-line prefer-rest-params
                    var args = arguments;
                    var functionCall = function functionCall() {
                        return fn.apply(self, args);
                    };
                    clearTimeout(timeout);

                    // @ts-ignore
                    timeout = setTimeout(functionCall, time);
                };
            }
            function noop() { }

            /**
             * @param {TODO} moduleId
             * @returns {TODO}
             */
            function getCurrentScriptUrl(moduleId) {
                var src = srcByModuleId[moduleId];
                if (!src) {
                    if (document.currentScript) {
                        src = /** @type {HTMLScriptElement} */document.currentScript.src;
                    } else {
                        var scripts = document.getElementsByTagName("script");
                        var lastScriptTag = scripts[scripts.length - 1];
                        if (lastScriptTag) {
                            src = lastScriptTag.src;
                        }
                    }
                    srcByModuleId[moduleId] = src;
                }

                /**
                 * @param {string} fileMap
                 * @returns {null | string[]}
                 */
                return function (fileMap) {
                    if (!src) {
                        return null;
                    }
                    var splitResult = src.split(/([^\\/]+)\.js$/);
                    var filename = splitResult && splitResult[1];
                    if (!filename) {
                        return [src.replace(".js", ".css")];
                    }
                    if (!fileMap) {
                        return [src.replace(".js", ".css")];
                    }
                    return fileMap.split(",").map(function (mapRule) {
                        var reg = new RegExp("".concat(filename, "\\.js$"), "g");
                        return normalizeUrl(src.replace(reg, "".concat(mapRule.replace(/{fileName}/g, filename), ".css")));
                    });
                };
            }

            /**
             * @param {TODO} el
             * @param {string} [url]
             */
            function updateCss(el, url) {
                if (!url) {
                    if (!el.href) {
                        return;
                    }

                    // eslint-disable-next-line
                    url = el.href.split("?")[0];
                }
                if (!isUrlRequest( /** @type {string} */url)) {
                    return;
                }
                if (el.isLoaded === false) {
                    // We seem to be about to replace a css link that hasn't loaded yet.
                    // We're probably changing the same file more than once.
                    return;
                }
                if (!url || !(url.indexOf(".css") > -1)) {
                    return;
                }

                // eslint-disable-next-line no-param-reassign
                el.visited = true;
                var newEl = el.cloneNode();
                newEl.isLoaded = false;
                newEl.addEventListener("load", function () {
                    if (newEl.isLoaded) {
                        return;
                    }
                    newEl.isLoaded = true;
                    el.parentNode.removeChild(el);
                });
                newEl.addEventListener("error", function () {
                    if (newEl.isLoaded) {
                        return;
                    }
                    newEl.isLoaded = true;
                    el.parentNode.removeChild(el);
                });
                newEl.href = "".concat(url, "?").concat(Date.now());
                if (el.nextSibling) {
                    el.parentNode.insertBefore(newEl, el.nextSibling);
                } else {
                    el.parentNode.appendChild(newEl);
                }
            }

            /**
             * @param {string} href
             * @param {TODO} src
             * @returns {TODO}
             */
            function getReloadUrl(href, src) {
                var ret;

                // eslint-disable-next-line no-param-reassign
                href = normalizeUrl(href);
                src.some(
                    /**
                     * @param {string} url
                     */
                    // eslint-disable-next-line array-callback-return
                    function (url) {
                        if (href.indexOf(src) > -1) {
                            ret = url;
                        }
                    });
                return ret;
            }

            /**
             * @param {string} [src]
             * @returns {boolean}
             */
            function reloadStyle(src) {
                if (!src) {
                    return false;
                }
                var elements = document.querySelectorAll("link");
                var loaded = false;
                forEach.call(elements, function (el) {
                    if (!el.href) {
                        return;
                    }
                    var url = getReloadUrl(el.href, src);
                    if (!isUrlRequest(url)) {
                        return;
                    }
                    if (el.visited === true) {
                        return;
                    }
                    if (url) {
                        updateCss(el, url);
                        loaded = true;
                    }
                });
                return loaded;
            }
            function reloadAll() {
                var elements = document.querySelectorAll("link");
                forEach.call(elements, function (el) {
                    if (el.visited === true) {
                        return;
                    }
                    updateCss(el);
                });
            }

            /**
             * @param {string} url
             * @returns {boolean}
             */
            function isUrlRequest(url) {
                // An URL is not an request if

                // It is not http or https
                if (!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(url)) {
                    return false;
                }
                return true;
            }

            /**
             * @param {TODO} moduleId
             * @param {TODO} options
             * @returns {TODO}
             */
            module.exports = function (moduleId, options) {
                if (noDocument) {
                    console.log("no window.document found, will not HMR CSS");
                    return noop;
                }
                var getScriptSrc = getCurrentScriptUrl(moduleId);
                function update() {
                    var src = getScriptSrc(options.filename);
                    var reloaded = reloadStyle(src);
                    if (options.locals) {
                        console.log("[HMR] Detected local css modules. Reload all css");
                        reloadAll();
                        return;
                    }
                    if (reloaded) {
                        console.log("[HMR] css reload %s", src.join(" "));
                    } else {
                        console.log("[HMR] Reload all css");
                        reloadAll();
                    }
                }
                return debounce(update, 50);
            };

            /***/
}),

    /***/ 5618:
    /***/ ((module) => {

            "use strict";


            /* eslint-disable */

            /**
             * @param {string[]} pathComponents
             * @returns {string}
             */
            function normalizeUrl(pathComponents) {
                return pathComponents.reduce(function (accumulator, item) {
                    switch (item) {
                        case "..":
                            accumulator.pop();
                            break;
                        case ".":
                            break;
                        default:
                            accumulator.push(item);
                    }
                    return accumulator;
                }, /** @type {string[]} */[]).join("/");
            }

            /**
             * @param {string} urlString
             * @returns {string}
             */
            module.exports = function (urlString) {
                urlString = urlString.trim();
                if (/^data:/i.test(urlString)) {
                    return urlString;
                }
                var protocol = urlString.indexOf("//") !== -1 ? urlString.split("//")[0] + "//" : "";
                var components = urlString.replace(new RegExp(protocol, "i"), "").split("/");
                var host = components[0].toLowerCase().replace(/\.$/, "");
                components[0] = "";
                var path = normalizeUrl(components);
                return protocol + host + path;
            };

            /***/
}),

    /***/ 1892:
    /***/ ((module, __unused_webpack___webpack_exports__, __webpack_require__) => {

            "use strict";
            // extracted by mini-css-extract-plugin

            if (true) {
                // 1719997419211
                var cssReload = __webpack_require__(4783)(module.id, { "locals": false });
                module.hot.dispose(cssReload);
                module.hot.accept(undefined, cssReload);
            }


            /***/
}),

    /***/ 4971:
    /***/ (function (module, exports, __webpack_require__) {

    /* module decorator */ module = __webpack_require__.nmd(module);
            var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */
            ; (function (root) {

                /** Detect free variables */
                var freeExports = true && exports &&
                    !exports.nodeType && exports;
                var freeModule = true && module &&
                    !module.nodeType && module;
                var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
                if (
                    freeGlobal.global === freeGlobal ||
                    freeGlobal.window === freeGlobal ||
                    freeGlobal.self === freeGlobal
                ) {
                    root = freeGlobal;
                }

                /**
                 * The `punycode` object.
                 * @name punycode
                 * @type Object
                 */
                var punycode,

                    /** Highest positive signed 32-bit float value */
                    maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

                    /** Bootstring parameters */
                    base = 36,
                    tMin = 1,
                    tMax = 26,
                    skew = 38,
                    damp = 700,
                    initialBias = 72,
                    initialN = 128, // 0x80
                    delimiter = '-', // '\x2D'

                    /** Regular expressions */
                    regexPunycode = /^xn--/,
                    regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
                    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

                    /** Error messages */
                    errors = {
                        'overflow': 'Overflow: input needs wider integers to process',
                        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                        'invalid-input': 'Invalid input'
                    },

                    /** Convenience shortcuts */
                    baseMinusTMin = base - tMin,
                    floor = Math.floor,
                    stringFromCharCode = String.fromCharCode,

                    /** Temporary variable */
                    key;

                /*--------------------------------------------------------------------------*/

                /**
                 * A generic error utility function.
                 * @private
                 * @param {String} type The error type.
                 * @returns {Error} Throws a `RangeError` with the applicable error message.
                 */
                function error(type) {
                    throw RangeError(errors[type]);
                }

                /**
                 * A generic `Array#map` utility function.
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} callback The function that gets called for every array
                 * item.
                 * @returns {Array} A new array of values returned by the callback function.
                 */
                function map(array, fn) {
                    var length = array.length;
                    var result = [];
                    while (length--) {
                        result[length] = fn(array[length]);
                    }
                    return result;
                }

                /**
                 * A simple `Array#map`-like wrapper to work with domain name strings or email
                 * addresses.
                 * @private
                 * @param {String} domain The domain name or email address.
                 * @param {Function} callback The function that gets called for every
                 * character.
                 * @returns {Array} A new string of characters returned by the callback
                 * function.
                 */
                function mapDomain(string, fn) {
                    var parts = string.split('@');
                    var result = '';
                    if (parts.length > 1) {
                        // In email addresses, only the domain name should be punycoded. Leave
                        // the local part (i.e. everything up to `@`) intact.
                        result = parts[0] + '@';
                        string = parts[1];
                    }
                    // Avoid `split(regex)` for IE8 compatibility. See #17.
                    string = string.replace(regexSeparators, '\x2E');
                    var labels = string.split('.');
                    var encoded = map(labels, fn).join('.');
                    return result + encoded;
                }

                /**
                 * Creates an array containing the numeric code points of each Unicode
                 * character in the string. While JavaScript uses UCS-2 internally,
                 * this function will convert a pair of surrogate halves (each of which
                 * UCS-2 exposes as separate characters) into a single code point,
                 * matching UTF-16.
                 * @see `punycode.ucs2.encode`
                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                 * @memberOf punycode.ucs2
                 * @name decode
                 * @param {String} string The Unicode input string (UCS-2).
                 * @returns {Array} The new array of code points.
                 */
                function ucs2decode(string) {
                    var output = [],
                        counter = 0,
                        length = string.length,
                        value,
                        extra;
                    while (counter < length) {
                        value = string.charCodeAt(counter++);
                        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                            // high surrogate, and there is a next character
                            extra = string.charCodeAt(counter++);
                            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                            } else {
                                // unmatched surrogate; only append this code unit, in case the next
                                // code unit is the high surrogate of a surrogate pair
                                output.push(value);
                                counter--;
                            }
                        } else {
                            output.push(value);
                        }
                    }
                    return output;
                }

                /**
                 * Creates a string based on an array of numeric code points.
                 * @see `punycode.ucs2.decode`
                 * @memberOf punycode.ucs2
                 * @name encode
                 * @param {Array} codePoints The array of numeric code points.
                 * @returns {String} The new Unicode string (UCS-2).
                 */
                function ucs2encode(array) {
                    return map(array, function (value) {
                        var output = '';
                        if (value > 0xFFFF) {
                            value -= 0x10000;
                            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                            value = 0xDC00 | value & 0x3FF;
                        }
                        output += stringFromCharCode(value);
                        return output;
                    }).join('');
                }

                /**
                 * Converts a basic code point into a digit/integer.
                 * @see `digitToBasic()`
                 * @private
                 * @param {Number} codePoint The basic numeric code point value.
                 * @returns {Number} The numeric value of a basic code point (for use in
                 * representing integers) in the range `0` to `base - 1`, or `base` if
                 * the code point does not represent a value.
                 */
                function basicToDigit(codePoint) {
                    if (codePoint - 48 < 10) {
                        return codePoint - 22;
                    }
                    if (codePoint - 65 < 26) {
                        return codePoint - 65;
                    }
                    if (codePoint - 97 < 26) {
                        return codePoint - 97;
                    }
                    return base;
                }

                /**
                 * Converts a digit/integer into a basic code point.
                 * @see `basicToDigit()`
                 * @private
                 * @param {Number} digit The numeric value of a basic code point.
                 * @returns {Number} The basic code point whose value (when used for
                 * representing integers) is `digit`, which needs to be in the range
                 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
                 * used; else, the lowercase form is used. The behavior is undefined
                 * if `flag` is non-zero and `digit` has no uppercase form.
                 */
                function digitToBasic(digit, flag) {
                    //  0..25 map to ASCII a..z or A..Z
                    // 26..35 map to ASCII 0..9
                    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
                }

                /**
                 * Bias adaptation function as per section 3.4 of RFC 3492.
                 * http://tools.ietf.org/html/rfc3492#section-3.4
                 * @private
                 */
                function adapt(delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
                        delta = floor(delta / baseMinusTMin);
                    }
                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                }

                /**
                 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
                 * symbols.
                 * @memberOf punycode
                 * @param {String} input The Punycode string of ASCII-only symbols.
                 * @returns {String} The resulting string of Unicode symbols.
                 */
                function decode(input) {
                    // Don't use UCS-2
                    var output = [],
                        inputLength = input.length,
                        out,
                        i = 0,
                        n = initialN,
                        bias = initialBias,
                        basic,
                        j,
                        index,
                        oldi,
                        w,
                        k,
                        digit,
                        t,
                        /** Cached calculation results */
                        baseMinusT;

                    // Handle the basic code points: let `basic` be the number of input code
                    // points before the last delimiter, or `0` if there is none, then copy
                    // the first basic code points to the output.

                    basic = input.lastIndexOf(delimiter);
                    if (basic < 0) {
                        basic = 0;
                    }

                    for (j = 0; j < basic; ++j) {
                        // if it's not a basic code point
                        if (input.charCodeAt(j) >= 0x80) {
                            error('not-basic');
                        }
                        output.push(input.charCodeAt(j));
                    }

                    // Main decoding loop: start just after the last delimiter if any basic code
                    // points were copied; start at the beginning otherwise.

                    for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

                        // `index` is the index of the next character to be consumed.
                        // Decode a generalized variable-length integer into `delta`,
                        // which gets added to `i`. The overflow checking is easier
                        // if we increase `i` as we go, then subtract off its starting
                        // value at the end to obtain `delta`.
                        for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

                            if (index >= inputLength) {
                                error('invalid-input');
                            }

                            digit = basicToDigit(input.charCodeAt(index++));

                            if (digit >= base || digit > floor((maxInt - i) / w)) {
                                error('overflow');
                            }

                            i += digit * w;
                            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                            if (digit < t) {
                                break;
                            }

                            baseMinusT = base - t;
                            if (w > floor(maxInt / baseMinusT)) {
                                error('overflow');
                            }

                            w *= baseMinusT;

                        }

                        out = output.length + 1;
                        bias = adapt(i - oldi, out, oldi == 0);

                        // `i` was supposed to wrap around from `out` to `0`,
                        // incrementing `n` each time, so we'll fix that now:
                        if (floor(i / out) > maxInt - n) {
                            error('overflow');
                        }

                        n += floor(i / out);
                        i %= out;

                        // Insert `n` at position `i` of the output
                        output.splice(i++, 0, n);

                    }

                    return ucs2encode(output);
                }

                /**
                 * Converts a string of Unicode symbols (e.g. a domain name label) to a
                 * Punycode string of ASCII-only symbols.
                 * @memberOf punycode
                 * @param {String} input The string of Unicode symbols.
                 * @returns {String} The resulting Punycode string of ASCII-only symbols.
                 */
                function encode(input) {
                    var n,
                        delta,
                        handledCPCount,
                        basicLength,
                        bias,
                        j,
                        m,
                        q,
                        k,
                        t,
                        currentValue,
                        output = [],
                        /** `inputLength` will hold the number of code points in `input`. */
                        inputLength,
                        /** Cached calculation results */
                        handledCPCountPlusOne,
                        baseMinusT,
                        qMinusT;

                    // Convert the input in UCS-2 to Unicode
                    input = ucs2decode(input);

                    // Cache the length
                    inputLength = input.length;

                    // Initialize the state
                    n = initialN;
                    delta = 0;
                    bias = initialBias;

                    // Handle the basic code points
                    for (j = 0; j < inputLength; ++j) {
                        currentValue = input[j];
                        if (currentValue < 0x80) {
                            output.push(stringFromCharCode(currentValue));
                        }
                    }

                    handledCPCount = basicLength = output.length;

                    // `handledCPCount` is the number of code points that have been handled;
                    // `basicLength` is the number of basic code points.

                    // Finish the basic string - if it is not empty - with a delimiter
                    if (basicLength) {
                        output.push(delimiter);
                    }

                    // Main encoding loop:
                    while (handledCPCount < inputLength) {

                        // All non-basic code points < n have been handled already. Find the next
                        // larger one:
                        for (m = maxInt, j = 0; j < inputLength; ++j) {
                            currentValue = input[j];
                            if (currentValue >= n && currentValue < m) {
                                m = currentValue;
                            }
                        }

                        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                        // but guard against overflow
                        handledCPCountPlusOne = handledCPCount + 1;
                        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                            error('overflow');
                        }

                        delta += (m - n) * handledCPCountPlusOne;
                        n = m;

                        for (j = 0; j < inputLength; ++j) {
                            currentValue = input[j];

                            if (currentValue < n && ++delta > maxInt) {
                                error('overflow');
                            }

                            if (currentValue == n) {
                                // Represent delta as a generalized variable-length integer
                                for (q = delta, k = base; /* no condition */; k += base) {
                                    t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                                    if (q < t) {
                                        break;
                                    }
                                    qMinusT = q - t;
                                    baseMinusT = base - t;
                                    output.push(
                                        stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                                    );
                                    q = floor(qMinusT / baseMinusT);
                                }

                                output.push(stringFromCharCode(digitToBasic(q, 0)));
                                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                delta = 0;
                                ++handledCPCount;
                            }
                        }

                        ++delta;
                        ++n;

                    }
                    return output.join('');
                }

                /**
                 * Converts a Punycode string representing a domain name or an email address
                 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
                 * it doesn't matter if you call it on a string that has already been
                 * converted to Unicode.
                 * @memberOf punycode
                 * @param {String} input The Punycoded domain name or email address to
                 * convert to Unicode.
                 * @returns {String} The Unicode representation of the given Punycode
                 * string.
                 */
                function toUnicode(input) {
                    return mapDomain(input, function (string) {
                        return regexPunycode.test(string)
                            ? decode(string.slice(4).toLowerCase())
                            : string;
                    });
                }

                /**
                 * Converts a Unicode string representing a domain name or an email address to
                 * Punycode. Only the non-ASCII parts of the domain name will be converted,
                 * i.e. it doesn't matter if you call it with a domain that's already in
                 * ASCII.
                 * @memberOf punycode
                 * @param {String} input The domain name or email address to convert, as a
                 * Unicode string.
                 * @returns {String} The Punycode representation of the given domain name or
                 * email address.
                 */
                function toASCII(input) {
                    return mapDomain(input, function (string) {
                        return regexNonASCII.test(string)
                            ? 'xn--' + encode(string)
                            : string;
                    });
                }

                /*--------------------------------------------------------------------------*/

                /** Define the public API */
                punycode = {
                    /**
                     * A string representing the current Punycode.js version number.
                     * @memberOf punycode
                     * @type String
                     */
                    'version': '1.3.2',
                    /**
                     * An object of methods to convert from JavaScript's internal character
                     * representation (UCS-2) to Unicode code points, and back.
                     * @see <https://mathiasbynens.be/notes/javascript-encoding>
                     * @memberOf punycode
                     * @type Object
                     */
                    'ucs2': {
                        'decode': ucs2decode,
                        'encode': ucs2encode
                    },
                    'decode': decode,
                    'encode': encode,
                    'toASCII': toASCII,
                    'toUnicode': toUnicode
                };

                /** Expose `punycode` */
                // Some AMD build optimizers, like r.js, check for specific condition patterns
                // like the following:
                if (
                    true
                ) {
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                        return punycode;
                    }).call(exports, __webpack_require__, exports, module),
                        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else { }

            }(this));


            /***/
}),

    /***/ 2592:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {


            const canPromise = __webpack_require__(7138)

            const QRCode = __webpack_require__(5115)
            const CanvasRenderer = __webpack_require__(6907)
            const SvgRenderer = __webpack_require__(3776)

            function renderCanvas(renderFunc, canvas, text, opts, cb) {
                const args = [].slice.call(arguments, 1)
                const argsNum = args.length
                const isLastArgCb = typeof args[argsNum - 1] === 'function'

                if (!isLastArgCb && !canPromise()) {
                    throw new Error('Callback required as last argument')
                }

                if (isLastArgCb) {
                    if (argsNum < 2) {
                        throw new Error('Too few arguments provided')
                    }

                    if (argsNum === 2) {
                        cb = text
                        text = canvas
                        canvas = opts = undefined
                    } else if (argsNum === 3) {
                        if (canvas.getContext && typeof cb === 'undefined') {
                            cb = opts
                            opts = undefined
                        } else {
                            cb = opts
                            opts = text
                            text = canvas
                            canvas = undefined
                        }
                    }
                } else {
                    if (argsNum < 1) {
                        throw new Error('Too few arguments provided')
                    }

                    if (argsNum === 1) {
                        text = canvas
                        canvas = opts = undefined
                    } else if (argsNum === 2 && !canvas.getContext) {
                        opts = text
                        text = canvas
                        canvas = undefined
                    }

                    return new Promise(function (resolve, reject) {
                        try {
                            const data = QRCode.create(text, opts)
                            resolve(renderFunc(data, canvas, opts))
                        } catch (e) {
                            reject(e)
                        }
                    })
                }

                try {
                    const data = QRCode.create(text, opts)
                    cb(null, renderFunc(data, canvas, opts))
                } catch (e) {
                    cb(e)
                }
            }

            exports.create = QRCode.create
            exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render)
            exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL)

            // only svg for now.
            exports.toString = renderCanvas.bind(null, function (data, _, opts) {
                return SvgRenderer.render(data, opts)
            })


            /***/
}),

    /***/ 7138:
    /***/ ((module) => {

            // can-promise has a crash in some versions of react native that dont have
            // standard global objects
            // https://github.com/soldair/node-qrcode/issues/157

            module.exports = function () {
                return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
            }


            /***/
}),

    /***/ 1845:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            /**
             * Alignment pattern are fixed reference pattern in defined positions
             * in a matrix symbology, which enables the decode software to re-synchronise
             * the coordinate mapping of the image modules in the event of moderate amounts
             * of distortion of the image.
             *
             * Alignment patterns are present only in QR Code symbols of version 2 or larger
             * and their number depends on the symbol version.
             */

            const getSymbolSize = (__webpack_require__(242).getSymbolSize)

            /**
             * Calculate the row/column coordinates of the center module of each alignment pattern
             * for the specified QR Code version.
             *
             * The alignment patterns are positioned symmetrically on either side of the diagonal
             * running from the top left corner of the symbol to the bottom right corner.
             *
             * Since positions are simmetrical only half of the coordinates are returned.
             * Each item of the array will represent in turn the x and y coordinate.
             * @see {@link getPositions}
             *
             * @param  {Number} version QR Code version
             * @return {Array}          Array of coordinate
             */
            exports.getRowColCoords = function getRowColCoords(version) {
                if (version === 1) return []

                const posCount = Math.floor(version / 7) + 2
                const size = getSymbolSize(version)
                const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2
                const positions = [size - 7] // Last coord is always (size - 7)

                for (let i = 1; i < posCount - 1; i++) {
                    positions[i] = positions[i - 1] - intervals
                }

                positions.push(6) // First coord is always 6

                return positions.reverse()
            }

            /**
             * Returns an array containing the positions of each alignment pattern.
             * Each array's element represent the center point of the pattern as (x, y) coordinates
             *
             * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
             * and filtering out the items that overlaps with finder pattern
             *
             * @example
             * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
             * The alignment patterns, therefore, are to be centered on (row, column)
             * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
             * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
             * and are not therefore used for alignment patterns.
             *
             * let pos = getPositions(7)
             * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
             *
             * @param  {Number} version QR Code version
             * @return {Array}          Array of coordinates
             */
            exports.getPositions = function getPositions(version) {
                const coords = []
                const pos = exports.getRowColCoords(version)
                const posLength = pos.length

                for (let i = 0; i < posLength; i++) {
                    for (let j = 0; j < posLength; j++) {
                        // Skip if position is occupied by finder patterns
                        if ((i === 0 && j === 0) || // top-left
                            (i === 0 && j === posLength - 1) || // bottom-left
                            (i === posLength - 1 && j === 0)) { // top-right
                            continue
                        }

                        coords.push([pos[i], pos[j]])
                    }
                }

                return coords
            }


            /***/
}),

    /***/ 8260:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            const Mode = __webpack_require__(6910)

            /**
             * Array of characters available in alphanumeric mode
             *
             * As per QR Code specification, to each character
             * is assigned a value from 0 to 44 which in this case coincides
             * with the array index
             *
             * @type {Array}
             */
            const ALPHA_NUM_CHARS = [
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                ' ', '$', '%', '*', '+', '-', '.', '/', ':'
            ]

            function AlphanumericData(data) {
                this.mode = Mode.ALPHANUMERIC
                this.data = data
            }

            AlphanumericData.getBitsLength = function getBitsLength(length) {
                return 11 * Math.floor(length / 2) + 6 * (length % 2)
            }

            AlphanumericData.prototype.getLength = function getLength() {
                return this.data.length
            }

            AlphanumericData.prototype.getBitsLength = function getBitsLength() {
                return AlphanumericData.getBitsLength(this.data.length)
            }

            AlphanumericData.prototype.write = function write(bitBuffer) {
                let i

                // Input data characters are divided into groups of two characters
                // and encoded as 11-bit binary codes.
                for (i = 0; i + 2 <= this.data.length; i += 2) {
                    // The character value of the first character is multiplied by 45
                    let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45

                    // The character value of the second digit is added to the product
                    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1])

                    // The sum is then stored as 11-bit binary number
                    bitBuffer.put(value, 11)
                }

                // If the number of input data characters is not a multiple of two,
                // the character value of the final character is encoded as a 6-bit binary number.
                if (this.data.length % 2) {
                    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6)
                }
            }

            module.exports = AlphanumericData


            /***/
}),

    /***/ 7245:
    /***/ ((module) => {

            function BitBuffer() {
                this.buffer = []
                this.length = 0
            }

            BitBuffer.prototype = {

                get: function (index) {
                    const bufIndex = Math.floor(index / 8)
                    return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
                },

                put: function (num, length) {
                    for (let i = 0; i < length; i++) {
                        this.putBit(((num >>> (length - i - 1)) & 1) === 1)
                    }
                },

                getLengthInBits: function () {
                    return this.length
                },

                putBit: function (bit) {
                    const bufIndex = Math.floor(this.length / 8)
                    if (this.buffer.length <= bufIndex) {
                        this.buffer.push(0)
                    }

                    if (bit) {
                        this.buffer[bufIndex] |= (0x80 >>> (this.length % 8))
                    }

                    this.length++
                }
            }

            module.exports = BitBuffer


            /***/
}),

    /***/ 3280:
    /***/ ((module) => {

            /**
             * Helper class to handle QR Code symbol modules
             *
             * @param {Number} size Symbol size
             */
            function BitMatrix(size) {
                if (!size || size < 1) {
                    throw new Error('BitMatrix size must be defined and greater than 0')
                }

                this.size = size
                this.data = new Uint8Array(size * size)
                this.reservedBit = new Uint8Array(size * size)
            }

            /**
             * Set bit value at specified location
             * If reserved flag is set, this bit will be ignored during masking process
             *
             * @param {Number}  row
             * @param {Number}  col
             * @param {Boolean} value
             * @param {Boolean} reserved
             */
            BitMatrix.prototype.set = function (row, col, value, reserved) {
                const index = row * this.size + col
                this.data[index] = value
                if (reserved) this.reservedBit[index] = true
            }

            /**
             * Returns bit value at specified location
             *
             * @param  {Number}  row
             * @param  {Number}  col
             * @return {Boolean}
             */
            BitMatrix.prototype.get = function (row, col) {
                return this.data[row * this.size + col]
            }

            /**
             * Applies xor operator at specified location
             * (used during masking process)
             *
             * @param {Number}  row
             * @param {Number}  col
             * @param {Boolean} value
             */
            BitMatrix.prototype.xor = function (row, col, value) {
                this.data[row * this.size + col] ^= value
            }

            /**
             * Check if bit at specified location is reserved
             *
             * @param {Number}   row
             * @param {Number}   col
             * @return {Boolean}
             */
            BitMatrix.prototype.isReserved = function (row, col) {
                return this.reservedBit[row * this.size + col]
            }

            module.exports = BitMatrix


            /***/
}),

    /***/ 3424:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            const encodeUtf8 = __webpack_require__(2378)
            const Mode = __webpack_require__(6910)

            function ByteData(data) {
                this.mode = Mode.BYTE
                this.data = new Uint8Array(encodeUtf8(data))
            }

            ByteData.getBitsLength = function getBitsLength(length) {
                return length * 8
            }

            ByteData.prototype.getLength = function getLength() {
                return this.data.length
            }

            ByteData.prototype.getBitsLength = function getBitsLength() {
                return ByteData.getBitsLength(this.data.length)
            }

            ByteData.prototype.write = function (bitBuffer) {
                for (let i = 0, l = this.data.length; i < l; i++) {
                    bitBuffer.put(this.data[i], 8)
                }
            }

            module.exports = ByteData


            /***/
}),

    /***/ 6245:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const ECLevel = __webpack_require__(4908)

            const EC_BLOCKS_TABLE = [
                // L  M  Q  H
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 2, 2,
                1, 2, 2, 4,
                1, 2, 4, 4,
                2, 4, 4, 4,
                2, 4, 6, 5,
                2, 4, 6, 6,
                2, 5, 8, 8,
                4, 5, 8, 8,
                4, 5, 8, 11,
                4, 8, 10, 11,
                4, 9, 12, 16,
                4, 9, 16, 16,
                6, 10, 12, 18,
                6, 10, 17, 16,
                6, 11, 16, 19,
                6, 13, 18, 21,
                7, 14, 21, 25,
                8, 16, 20, 25,
                8, 17, 23, 25,
                9, 17, 23, 34,
                9, 18, 25, 30,
                10, 20, 27, 32,
                12, 21, 29, 35,
                12, 23, 34, 37,
                12, 25, 34, 40,
                13, 26, 35, 42,
                14, 28, 38, 45,
                15, 29, 40, 48,
                16, 31, 43, 51,
                17, 33, 45, 54,
                18, 35, 48, 57,
                19, 37, 51, 60,
                19, 38, 53, 63,
                20, 40, 56, 66,
                21, 43, 59, 70,
                22, 45, 62, 74,
                24, 47, 65, 77,
                25, 49, 68, 81
            ]

            const EC_CODEWORDS_TABLE = [
                // L  M  Q  H
                7, 10, 13, 17,
                10, 16, 22, 28,
                15, 26, 36, 44,
                20, 36, 52, 64,
                26, 48, 72, 88,
                36, 64, 96, 112,
                40, 72, 108, 130,
                48, 88, 132, 156,
                60, 110, 160, 192,
                72, 130, 192, 224,
                80, 150, 224, 264,
                96, 176, 260, 308,
                104, 198, 288, 352,
                120, 216, 320, 384,
                132, 240, 360, 432,
                144, 280, 408, 480,
                168, 308, 448, 532,
                180, 338, 504, 588,
                196, 364, 546, 650,
                224, 416, 600, 700,
                224, 442, 644, 750,
                252, 476, 690, 816,
                270, 504, 750, 900,
                300, 560, 810, 960,
                312, 588, 870, 1050,
                336, 644, 952, 1110,
                360, 700, 1020, 1200,
                390, 728, 1050, 1260,
                420, 784, 1140, 1350,
                450, 812, 1200, 1440,
                480, 868, 1290, 1530,
                510, 924, 1350, 1620,
                540, 980, 1440, 1710,
                570, 1036, 1530, 1800,
                570, 1064, 1590, 1890,
                600, 1120, 1680, 1980,
                630, 1204, 1770, 2100,
                660, 1260, 1860, 2220,
                720, 1316, 1950, 2310,
                750, 1372, 2040, 2430
            ]

            /**
             * Returns the number of error correction block that the QR Code should contain
             * for the specified version and error correction level.
             *
             * @param  {Number} version              QR Code version
             * @param  {Number} errorCorrectionLevel Error correction level
             * @return {Number}                      Number of error correction blocks
             */
            exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
                switch (errorCorrectionLevel) {
                    case ECLevel.L:
                        return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
                    case ECLevel.M:
                        return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
                    case ECLevel.Q:
                        return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
                    case ECLevel.H:
                        return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
                    default:
                        return undefined
                }
            }

            /**
             * Returns the number of error correction codewords to use for the specified
             * version and error correction level.
             *
             * @param  {Number} version              QR Code version
             * @param  {Number} errorCorrectionLevel Error correction level
             * @return {Number}                      Number of error correction codewords
             */
            exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
                switch (errorCorrectionLevel) {
                    case ECLevel.L:
                        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
                    case ECLevel.M:
                        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
                    case ECLevel.Q:
                        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
                    case ECLevel.H:
                        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
                    default:
                        return undefined
                }
            }


            /***/
}),

    /***/ 4908:
    /***/ ((__unused_webpack_module, exports) => {

            exports.L = { bit: 1 }
            exports.M = { bit: 0 }
            exports.Q = { bit: 3 }
            exports.H = { bit: 2 }

            function fromString(string) {
                if (typeof string !== 'string') {
                    throw new Error('Param is not a string')
                }

                const lcStr = string.toLowerCase()

                switch (lcStr) {
                    case 'l':
                    case 'low':
                        return exports.L

                    case 'm':
                    case 'medium':
                        return exports.M

                    case 'q':
                    case 'quartile':
                        return exports.Q

                    case 'h':
                    case 'high':
                        return exports.H

                    default:
                        throw new Error('Unknown EC Level: ' + string)
                }
            }

            exports.isValid = function isValid(level) {
                return level && typeof level.bit !== 'undefined' &&
                    level.bit >= 0 && level.bit < 4
            }

            exports.from = function from(value, defaultValue) {
                if (exports.isValid(value)) {
                    return value
                }

                try {
                    return fromString(value)
                } catch (e) {
                    return defaultValue
                }
            }


            /***/
}),

    /***/ 6526:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const getSymbolSize = (__webpack_require__(242).getSymbolSize)
            const FINDER_PATTERN_SIZE = 7

            /**
             * Returns an array containing the positions of each finder pattern.
             * Each array's element represent the top-left point of the pattern as (x, y) coordinates
             *
             * @param  {Number} version QR Code version
             * @return {Array}          Array of coordinates
             */
            exports.getPositions = function getPositions(version) {
                const size = getSymbolSize(version)

                return [
                    // top-left
                    [0, 0],
                    // top-right
                    [size - FINDER_PATTERN_SIZE, 0],
                    // bottom-left
                    [0, size - FINDER_PATTERN_SIZE]
                ]
            }


            /***/
}),

    /***/ 1642:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const Utils = __webpack_require__(242)

            const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)
            const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)
            const G15_BCH = Utils.getBCHDigit(G15)

            /**
             * Returns format information with relative error correction bits
             *
             * The format information is a 15-bit sequence containing 5 data bits,
             * with 10 error correction bits calculated using the (15, 5) BCH code.
             *
             * @param  {Number} errorCorrectionLevel Error correction level
             * @param  {Number} mask                 Mask pattern
             * @return {Number}                      Encoded format information bits
             */
            exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
                const data = ((errorCorrectionLevel.bit << 3) | mask)
                let d = data << 10

                while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
                    d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))
                }

                // xor final data with mask pattern in order to ensure that
                // no combination of Error Correction Level and data mask pattern
                // will result in an all-zero data string
                return ((data << 10) | d) ^ G15_MASK
            }


            /***/
}),

    /***/ 9729:
    /***/ ((__unused_webpack_module, exports) => {

            const EXP_TABLE = new Uint8Array(512)
            const LOG_TABLE = new Uint8Array(256)
                /**
                 * Precompute the log and anti-log tables for faster computation later
                 *
                 * For each possible value in the galois field 2^8, we will pre-compute
                 * the logarithm and anti-logarithm (exponential) of this value
                 *
                 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
                 */
                ; (function initTables() {
                    let x = 1
                    for (let i = 0; i < 255; i++) {
                        EXP_TABLE[i] = x
                        LOG_TABLE[x] = i

                        x <<= 1 // multiply by 2

                        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
                        // This means that when a number is 256 or larger, it should be XORed with 0x11D.
                        if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
                            x ^= 0x11D
                        }
                    }

                    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
                    // stay inside the bounds (because we will mainly use this table for the multiplication of
                    // two GF numbers, no more).
                    // @see {@link mul}
                    for (let i = 255; i < 512; i++) {
                        EXP_TABLE[i] = EXP_TABLE[i - 255]
                    }
                }())

            /**
             * Returns log value of n inside Galois Field
             *
             * @param  {Number} n
             * @return {Number}
             */
            exports.log = function log(n) {
                if (n < 1) throw new Error('log(' + n + ')')
                return LOG_TABLE[n]
            }

            /**
             * Returns anti-log value of n inside Galois Field
             *
             * @param  {Number} n
             * @return {Number}
             */
            exports.exp = function exp(n) {
                return EXP_TABLE[n]
            }

            /**
             * Multiplies two number inside Galois Field
             *
             * @param  {Number} x
             * @param  {Number} y
             * @return {Number}
             */
            exports.mul = function mul(x, y) {
                if (x === 0 || y === 0) return 0

                // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
                // @see {@link initTables}
                return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
            }


            /***/
}),

    /***/ 5442:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            const Mode = __webpack_require__(6910)
            const Utils = __webpack_require__(242)

            function KanjiData(data) {
                this.mode = Mode.KANJI
                this.data = data
            }

            KanjiData.getBitsLength = function getBitsLength(length) {
                return length * 13
            }

            KanjiData.prototype.getLength = function getLength() {
                return this.data.length
            }

            KanjiData.prototype.getBitsLength = function getBitsLength() {
                return KanjiData.getBitsLength(this.data.length)
            }

            KanjiData.prototype.write = function (bitBuffer) {
                let i

                // In the Shift JIS system, Kanji characters are represented by a two byte combination.
                // These byte values are shifted from the JIS X 0208 values.
                // JIS X 0208 gives details of the shift coded representation.
                for (i = 0; i < this.data.length; i++) {
                    let value = Utils.toSJIS(this.data[i])

                    // For characters with Shift JIS values from 0x8140 to 0x9FFC:
                    if (value >= 0x8140 && value <= 0x9FFC) {
                        // Subtract 0x8140 from Shift JIS value
                        value -= 0x8140

                        // For characters with Shift JIS values from 0xE040 to 0xEBBF
                    } else if (value >= 0xE040 && value <= 0xEBBF) {
                        // Subtract 0xC140 from Shift JIS value
                        value -= 0xC140
                    } else {
                        throw new Error(
                            'Invalid SJIS character: ' + this.data[i] + '\n' +
                            'Make sure your charset is UTF-8')
                    }

                    // Multiply most significant byte of result by 0xC0
                    // and add least significant byte to product
                    value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff)

                    // Convert result to a 13-bit binary string
                    bitBuffer.put(value, 13)
                }
            }

            module.exports = KanjiData


            /***/
}),

    /***/ 7126:
    /***/ ((__unused_webpack_module, exports) => {

            /**
             * Data mask pattern reference
             * @type {Object}
             */
            exports.Patterns = {
                PATTERN000: 0,
                PATTERN001: 1,
                PATTERN010: 2,
                PATTERN011: 3,
                PATTERN100: 4,
                PATTERN101: 5,
                PATTERN110: 6,
                PATTERN111: 7
            }

            /**
             * Weighted penalty scores for the undesirable features
             * @type {Object}
             */
            const PenaltyScores = {
                N1: 3,
                N2: 3,
                N3: 40,
                N4: 10
            }

            /**
             * Check if mask pattern value is valid
             *
             * @param  {Number}  mask    Mask pattern
             * @return {Boolean}         true if valid, false otherwise
             */
            exports.isValid = function isValid(mask) {
                return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
            }

            /**
             * Returns mask pattern from a value.
             * If value is not valid, returns undefined
             *
             * @param  {Number|String} value        Mask pattern value
             * @return {Number}                     Valid mask pattern or undefined
             */
            exports.from = function from(value) {
                return exports.isValid(value) ? parseInt(value, 10) : undefined
            }

            /**
            * Find adjacent modules in row/column with the same color
            * and assign a penalty value.
            *
            * Points: N1 + i
            * i is the amount by which the number of adjacent modules of the same color exceeds 5
            */
            exports.getPenaltyN1 = function getPenaltyN1(data) {
                const size = data.size
                let points = 0
                let sameCountCol = 0
                let sameCountRow = 0
                let lastCol = null
                let lastRow = null

                for (let row = 0; row < size; row++) {
                    sameCountCol = sameCountRow = 0
                    lastCol = lastRow = null

                    for (let col = 0; col < size; col++) {
                        let module = data.get(row, col)
                        if (module === lastCol) {
                            sameCountCol++
                        } else {
                            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)
                            lastCol = module
                            sameCountCol = 1
                        }

                        module = data.get(col, row)
                        if (module === lastRow) {
                            sameCountRow++
                        } else {
                            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)
                            lastRow = module
                            sameCountRow = 1
                        }
                    }

                    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)
                    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)
                }

                return points
            }

            /**
             * Find 2x2 blocks with the same color and assign a penalty value
             *
             * Points: N2 * (m - 1) * (n - 1)
             */
            exports.getPenaltyN2 = function getPenaltyN2(data) {
                const size = data.size
                let points = 0

                for (let row = 0; row < size - 1; row++) {
                    for (let col = 0; col < size - 1; col++) {
                        const last = data.get(row, col) +
                            data.get(row, col + 1) +
                            data.get(row + 1, col) +
                            data.get(row + 1, col + 1)

                        if (last === 4 || last === 0) points++
                    }
                }

                return points * PenaltyScores.N2
            }

            /**
             * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
             * preceded or followed by light area 4 modules wide
             *
             * Points: N3 * number of pattern found
             */
            exports.getPenaltyN3 = function getPenaltyN3(data) {
                const size = data.size
                let points = 0
                let bitsCol = 0
                let bitsRow = 0

                for (let row = 0; row < size; row++) {
                    bitsCol = bitsRow = 0
                    for (let col = 0; col < size; col++) {
                        bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col)
                        if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++

                        bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row)
                        if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++
                    }
                }

                return points * PenaltyScores.N3
            }

            /**
             * Calculate proportion of dark modules in entire symbol
             *
             * Points: N4 * k
             *
             * k is the rating of the deviation of the proportion of dark modules
             * in the symbol from 50% in steps of 5%
             */
            exports.getPenaltyN4 = function getPenaltyN4(data) {
                let darkCount = 0
                const modulesCount = data.data.length

                for (let i = 0; i < modulesCount; i++) darkCount += data.data[i]

                const k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10)

                return k * PenaltyScores.N4
            }

            /**
             * Return mask value at given position
             *
             * @param  {Number} maskPattern Pattern reference value
             * @param  {Number} i           Row
             * @param  {Number} j           Column
             * @return {Boolean}            Mask value
             */
            function getMaskAt(maskPattern, i, j) {
                switch (maskPattern) {
                    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
                    case exports.Patterns.PATTERN001: return i % 2 === 0
                    case exports.Patterns.PATTERN010: return j % 3 === 0
                    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
                    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
                    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
                    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
                    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

                    default: throw new Error('bad maskPattern:' + maskPattern)
                }
            }

            /**
             * Apply a mask pattern to a BitMatrix
             *
             * @param  {Number}    pattern Pattern reference number
             * @param  {BitMatrix} data    BitMatrix data
             */
            exports.applyMask = function applyMask(pattern, data) {
                const size = data.size

                for (let col = 0; col < size; col++) {
                    for (let row = 0; row < size; row++) {
                        if (data.isReserved(row, col)) continue
                        data.xor(row, col, getMaskAt(pattern, row, col))
                    }
                }
            }

            /**
             * Returns the best mask pattern for data
             *
             * @param  {BitMatrix} data
             * @return {Number} Mask pattern reference number
             */
            exports.getBestMask = function getBestMask(data, setupFormatFunc) {
                const numPatterns = Object.keys(exports.Patterns).length
                let bestPattern = 0
                let lowerPenalty = Infinity

                for (let p = 0; p < numPatterns; p++) {
                    setupFormatFunc(p)
                    exports.applyMask(p, data)

                    // Calculate penalty
                    const penalty =
                        exports.getPenaltyN1(data) +
                        exports.getPenaltyN2(data) +
                        exports.getPenaltyN3(data) +
                        exports.getPenaltyN4(data)

                    // Undo previously applied mask
                    exports.applyMask(p, data)

                    if (penalty < lowerPenalty) {
                        lowerPenalty = penalty
                        bestPattern = p
                    }
                }

                return bestPattern
            }


            /***/
}),

    /***/ 6910:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const VersionCheck = __webpack_require__(3114)
            const Regex = __webpack_require__(7007)

            /**
             * Numeric mode encodes data from the decimal digit set (0 - 9)
             * (byte values 30HEX to 39HEX).
             * Normally, 3 data characters are represented by 10 bits.
             *
             * @type {Object}
             */
            exports.NUMERIC = {
                id: 'Numeric',
                bit: 1 << 0,
                ccBits: [10, 12, 14]
            }

            /**
             * Alphanumeric mode encodes data from a set of 45 characters,
             * i.e. 10 numeric digits (0 - 9),
             *      26 alphabetic characters (A - Z),
             *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
             * Normally, two input characters are represented by 11 bits.
             *
             * @type {Object}
             */
            exports.ALPHANUMERIC = {
                id: 'Alphanumeric',
                bit: 1 << 1,
                ccBits: [9, 11, 13]
            }

            /**
             * In byte mode, data is encoded at 8 bits per character.
             *
             * @type {Object}
             */
            exports.BYTE = {
                id: 'Byte',
                bit: 1 << 2,
                ccBits: [8, 16, 16]
            }

            /**
             * The Kanji mode efficiently encodes Kanji characters in accordance with
             * the Shift JIS system based on JIS X 0208.
             * The Shift JIS values are shifted from the JIS X 0208 values.
             * JIS X 0208 gives details of the shift coded representation.
             * Each two-byte character value is compacted to a 13-bit binary codeword.
             *
             * @type {Object}
             */
            exports.KANJI = {
                id: 'Kanji',
                bit: 1 << 3,
                ccBits: [8, 10, 12]
            }

            /**
             * Mixed mode will contain a sequences of data in a combination of any of
             * the modes described above
             *
             * @type {Object}
             */
            exports.MIXED = {
                bit: -1
            }

            /**
             * Returns the number of bits needed to store the data length
             * according to QR Code specifications.
             *
             * @param  {Mode}   mode    Data mode
             * @param  {Number} version QR Code version
             * @return {Number}         Number of bits
             */
            exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
                if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

                if (!VersionCheck.isValid(version)) {
                    throw new Error('Invalid version: ' + version)
                }

                if (version >= 1 && version < 10) return mode.ccBits[0]
                else if (version < 27) return mode.ccBits[1]
                return mode.ccBits[2]
            }

            /**
             * Returns the most efficient mode to store the specified data
             *
             * @param  {String} dataStr Input data string
             * @return {Mode}           Best mode
             */
            exports.getBestModeForData = function getBestModeForData(dataStr) {
                if (Regex.testNumeric(dataStr)) return exports.NUMERIC
                else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
                else if (Regex.testKanji(dataStr)) return exports.KANJI
                else return exports.BYTE
            }

            /**
             * Return mode name as string
             *
             * @param {Mode} mode Mode object
             * @returns {String}  Mode name
             */
            exports.toString = function toString(mode) {
                if (mode && mode.id) return mode.id
                throw new Error('Invalid mode')
            }

            /**
             * Check if input param is a valid mode object
             *
             * @param   {Mode}    mode Mode object
             * @returns {Boolean} True if valid mode, false otherwise
             */
            exports.isValid = function isValid(mode) {
                return mode && mode.bit && mode.ccBits
            }

            /**
             * Get mode object from its name
             *
             * @param   {String} string Mode name
             * @returns {Mode}          Mode object
             */
            function fromString(string) {
                if (typeof string !== 'string') {
                    throw new Error('Param is not a string')
                }

                const lcStr = string.toLowerCase()

                switch (lcStr) {
                    case 'numeric':
                        return exports.NUMERIC
                    case 'alphanumeric':
                        return exports.ALPHANUMERIC
                    case 'kanji':
                        return exports.KANJI
                    case 'byte':
                        return exports.BYTE
                    default:
                        throw new Error('Unknown mode: ' + string)
                }
            }

            /**
             * Returns mode from a value.
             * If value is not a valid mode, returns defaultValue
             *
             * @param  {Mode|String} value        Encoding mode
             * @param  {Mode}        defaultValue Fallback value
             * @return {Mode}                     Encoding mode
             */
            exports.from = function from(value, defaultValue) {
                if (exports.isValid(value)) {
                    return value
                }

                try {
                    return fromString(value)
                } catch (e) {
                    return defaultValue
                }
            }


            /***/
}),

    /***/ 1085:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            const Mode = __webpack_require__(6910)

            function NumericData(data) {
                this.mode = Mode.NUMERIC
                this.data = data.toString()
            }

            NumericData.getBitsLength = function getBitsLength(length) {
                return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
            }

            NumericData.prototype.getLength = function getLength() {
                return this.data.length
            }

            NumericData.prototype.getBitsLength = function getBitsLength() {
                return NumericData.getBitsLength(this.data.length)
            }

            NumericData.prototype.write = function write(bitBuffer) {
                let i, group, value

                // The input data string is divided into groups of three digits,
                // and each group is converted to its 10-bit binary equivalent.
                for (i = 0; i + 3 <= this.data.length; i += 3) {
                    group = this.data.substr(i, 3)
                    value = parseInt(group, 10)

                    bitBuffer.put(value, 10)
                }

                // If the number of input digits is not an exact multiple of three,
                // the final one or two digits are converted to 4 or 7 bits respectively.
                const remainingNum = this.data.length - i
                if (remainingNum > 0) {
                    group = this.data.substr(i)
                    value = parseInt(group, 10)

                    bitBuffer.put(value, remainingNum * 3 + 1)
                }
            }

            module.exports = NumericData


            /***/
}),

    /***/ 6143:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const GF = __webpack_require__(9729)

            /**
             * Multiplies two polynomials inside Galois Field
             *
             * @param  {Uint8Array} p1 Polynomial
             * @param  {Uint8Array} p2 Polynomial
             * @return {Uint8Array}    Product of p1 and p2
             */
            exports.mul = function mul(p1, p2) {
                const coeff = new Uint8Array(p1.length + p2.length - 1)

                for (let i = 0; i < p1.length; i++) {
                    for (let j = 0; j < p2.length; j++) {
                        coeff[i + j] ^= GF.mul(p1[i], p2[j])
                    }
                }

                return coeff
            }

            /**
             * Calculate the remainder of polynomials division
             *
             * @param  {Uint8Array} divident Polynomial
             * @param  {Uint8Array} divisor  Polynomial
             * @return {Uint8Array}          Remainder
             */
            exports.mod = function mod(divident, divisor) {
                let result = new Uint8Array(divident)

                while ((result.length - divisor.length) >= 0) {
                    const coeff = result[0]

                    for (let i = 0; i < divisor.length; i++) {
                        result[i] ^= GF.mul(divisor[i], coeff)
                    }

                    // remove all zeros from buffer head
                    let offset = 0
                    while (offset < result.length && result[offset] === 0) offset++
                    result = result.slice(offset)
                }

                return result
            }

            /**
             * Generate an irreducible generator polynomial of specified degree
             * (used by Reed-Solomon encoder)
             *
             * @param  {Number} degree Degree of the generator polynomial
             * @return {Uint8Array}    Buffer containing polynomial coefficients
             */
            exports.generateECPolynomial = function generateECPolynomial(degree) {
                let poly = new Uint8Array([1])
                for (let i = 0; i < degree; i++) {
                    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))
                }

                return poly
            }


            /***/
}),

    /***/ 5115:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const Utils = __webpack_require__(242)
            const ECLevel = __webpack_require__(4908)
            const BitBuffer = __webpack_require__(7245)
            const BitMatrix = __webpack_require__(3280)
            const AlignmentPattern = __webpack_require__(1845)
            const FinderPattern = __webpack_require__(6526)
            const MaskPattern = __webpack_require__(7126)
            const ECCode = __webpack_require__(6245)
            const ReedSolomonEncoder = __webpack_require__(2882)
            const Version = __webpack_require__(3103)
            const FormatInfo = __webpack_require__(1642)
            const Mode = __webpack_require__(6910)
            const Segments = __webpack_require__(6130)

            /**
             * QRCode for JavaScript
             *
             * modified by Ryan Day for nodejs support
             * Copyright (c) 2011 Ryan Day
             *
             * Licensed under the MIT license:
             *   http://www.opensource.org/licenses/mit-license.php
             *
            //---------------------------------------------------------------------
            // QRCode for JavaScript
            //
            // Copyright (c) 2009 Kazuhiko Arase
            //
            // URL: http://www.d-project.com/
            //
            // Licensed under the MIT license:
            //   http://www.opensource.org/licenses/mit-license.php
            //
            // The word "QR Code" is registered trademark of
            // DENSO WAVE INCORPORATED
            //   http://www.denso-wave.com/qrcode/faqpatent-e.html
            //
            //---------------------------------------------------------------------
            */

            /**
             * Add finder patterns bits to matrix
             *
             * @param  {BitMatrix} matrix  Modules matrix
             * @param  {Number}    version QR Code version
             */
            function setupFinderPattern(matrix, version) {
                const size = matrix.size
                const pos = FinderPattern.getPositions(version)

                for (let i = 0; i < pos.length; i++) {
                    const row = pos[i][0]
                    const col = pos[i][1]

                    for (let r = -1; r <= 7; r++) {
                        if (row + r <= -1 || size <= row + r) continue

                        for (let c = -1; c <= 7; c++) {
                            if (col + c <= -1 || size <= col + c) continue

                            if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
                                (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
                                (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
                                matrix.set(row + r, col + c, true, true)
                            } else {
                                matrix.set(row + r, col + c, false, true)
                            }
                        }
                    }
                }
            }

            /**
             * Add timing pattern bits to matrix
             *
             * Note: this function must be called before {@link setupAlignmentPattern}
             *
             * @param  {BitMatrix} matrix Modules matrix
             */
            function setupTimingPattern(matrix) {
                const size = matrix.size

                for (let r = 8; r < size - 8; r++) {
                    const value = r % 2 === 0
                    matrix.set(r, 6, value, true)
                    matrix.set(6, r, value, true)
                }
            }

            /**
             * Add alignment patterns bits to matrix
             *
             * Note: this function must be called after {@link setupTimingPattern}
             *
             * @param  {BitMatrix} matrix  Modules matrix
             * @param  {Number}    version QR Code version
             */
            function setupAlignmentPattern(matrix, version) {
                const pos = AlignmentPattern.getPositions(version)

                for (let i = 0; i < pos.length; i++) {
                    const row = pos[i][0]
                    const col = pos[i][1]

                    for (let r = -2; r <= 2; r++) {
                        for (let c = -2; c <= 2; c++) {
                            if (r === -2 || r === 2 || c === -2 || c === 2 ||
                                (r === 0 && c === 0)) {
                                matrix.set(row + r, col + c, true, true)
                            } else {
                                matrix.set(row + r, col + c, false, true)
                            }
                        }
                    }
                }
            }

            /**
             * Add version info bits to matrix
             *
             * @param  {BitMatrix} matrix  Modules matrix
             * @param  {Number}    version QR Code version
             */
            function setupVersionInfo(matrix, version) {
                const size = matrix.size
                const bits = Version.getEncodedBits(version)
                let row, col, mod

                for (let i = 0; i < 18; i++) {
                    row = Math.floor(i / 3)
                    col = i % 3 + size - 8 - 3
                    mod = ((bits >> i) & 1) === 1

                    matrix.set(row, col, mod, true)
                    matrix.set(col, row, mod, true)
                }
            }

            /**
             * Add format info bits to matrix
             *
             * @param  {BitMatrix} matrix               Modules matrix
             * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
             * @param  {Number}    maskPattern          Mask pattern reference value
             */
            function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
                const size = matrix.size
                const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern)
                let i, mod

                for (i = 0; i < 15; i++) {
                    mod = ((bits >> i) & 1) === 1

                    // vertical
                    if (i < 6) {
                        matrix.set(i, 8, mod, true)
                    } else if (i < 8) {
                        matrix.set(i + 1, 8, mod, true)
                    } else {
                        matrix.set(size - 15 + i, 8, mod, true)
                    }

                    // horizontal
                    if (i < 8) {
                        matrix.set(8, size - i - 1, mod, true)
                    } else if (i < 9) {
                        matrix.set(8, 15 - i - 1 + 1, mod, true)
                    } else {
                        matrix.set(8, 15 - i - 1, mod, true)
                    }
                }

                // fixed module
                matrix.set(size - 8, 8, 1, true)
            }

            /**
             * Add encoded data bits to matrix
             *
             * @param  {BitMatrix}  matrix Modules matrix
             * @param  {Uint8Array} data   Data codewords
             */
            function setupData(matrix, data) {
                const size = matrix.size
                let inc = -1
                let row = size - 1
                let bitIndex = 7
                let byteIndex = 0

                for (let col = size - 1; col > 0; col -= 2) {
                    if (col === 6) col--

                    while (true) {
                        for (let c = 0; c < 2; c++) {
                            if (!matrix.isReserved(row, col - c)) {
                                let dark = false

                                if (byteIndex < data.length) {
                                    dark = (((data[byteIndex] >>> bitIndex) & 1) === 1)
                                }

                                matrix.set(row, col - c, dark)
                                bitIndex--

                                if (bitIndex === -1) {
                                    byteIndex++
                                    bitIndex = 7
                                }
                            }
                        }

                        row += inc

                        if (row < 0 || size <= row) {
                            row -= inc
                            inc = -inc
                            break
                        }
                    }
                }
            }

            /**
             * Create encoded codewords from data input
             *
             * @param  {Number}   version              QR Code version
             * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
             * @param  {ByteData} data                 Data input
             * @return {Uint8Array}                    Buffer containing encoded codewords
             */
            function createData(version, errorCorrectionLevel, segments) {
                // Prepare data buffer
                const buffer = new BitBuffer()

                segments.forEach(function (data) {
                    // prefix data with mode indicator (4 bits)
                    buffer.put(data.mode.bit, 4)

                    // Prefix data with character count indicator.
                    // The character count indicator is a string of bits that represents the
                    // number of characters that are being encoded.
                    // The character count indicator must be placed after the mode indicator
                    // and must be a certain number of bits long, depending on the QR version
                    // and data mode
                    // @see {@link Mode.getCharCountIndicator}.
                    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version))

                    // add binary data sequence to buffer
                    data.write(buffer)
                })

                // Calculate required number of bits
                const totalCodewords = Utils.getSymbolTotalCodewords(version)
                const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)
                const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8

                // Add a terminator.
                // If the bit string is shorter than the total number of required bits,
                // a terminator of up to four 0s must be added to the right side of the string.
                // If the bit string is more than four bits shorter than the required number of bits,
                // add four 0s to the end.
                if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
                    buffer.put(0, 4)
                }

                // If the bit string is fewer than four bits shorter, add only the number of 0s that
                // are needed to reach the required number of bits.

                // After adding the terminator, if the number of bits in the string is not a multiple of 8,
                // pad the string on the right with 0s to make the string's length a multiple of 8.
                while (buffer.getLengthInBits() % 8 !== 0) {
                    buffer.putBit(0)
                }

                // Add pad bytes if the string is still shorter than the total number of required bits.
                // Extend the buffer to fill the data capacity of the symbol corresponding to
                // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
                // and 00010001 (0x11) alternately.
                const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8
                for (let i = 0; i < remainingByte; i++) {
                    buffer.put(i % 2 ? 0x11 : 0xEC, 8)
                }

                return createCodewords(buffer, version, errorCorrectionLevel)
            }

            /**
             * Encode input data with Reed-Solomon and return codewords with
             * relative error correction bits
             *
             * @param  {BitBuffer} bitBuffer            Data to encode
             * @param  {Number}    version              QR Code version
             * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
             * @return {Uint8Array}                     Buffer containing encoded codewords
             */
            function createCodewords(bitBuffer, version, errorCorrectionLevel) {
                // Total codewords for this QR code version (Data + Error correction)
                const totalCodewords = Utils.getSymbolTotalCodewords(version)

                // Total number of error correction codewords
                const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)

                // Total number of data codewords
                const dataTotalCodewords = totalCodewords - ecTotalCodewords

                // Total number of blocks
                const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel)

                // Calculate how many blocks each group should contain
                const blocksInGroup2 = totalCodewords % ecTotalBlocks
                const blocksInGroup1 = ecTotalBlocks - blocksInGroup2

                const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks)

                const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks)
                const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1

                // Number of EC codewords is the same for both groups
                const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1

                // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
                const rs = new ReedSolomonEncoder(ecCount)

                let offset = 0
                const dcData = new Array(ecTotalBlocks)
                const ecData = new Array(ecTotalBlocks)
                let maxDataSize = 0
                const buffer = new Uint8Array(bitBuffer.buffer)

                // Divide the buffer into the required number of blocks
                for (let b = 0; b < ecTotalBlocks; b++) {
                    const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2

                    // extract a block of data from buffer
                    dcData[b] = buffer.slice(offset, offset + dataSize)

                    // Calculate EC codewords for this data block
                    ecData[b] = rs.encode(dcData[b])

                    offset += dataSize
                    maxDataSize = Math.max(maxDataSize, dataSize)
                }

                // Create final data
                // Interleave the data and error correction codewords from each block
                const data = new Uint8Array(totalCodewords)
                let index = 0
                let i, r

                // Add data codewords
                for (i = 0; i < maxDataSize; i++) {
                    for (r = 0; r < ecTotalBlocks; r++) {
                        if (i < dcData[r].length) {
                            data[index++] = dcData[r][i]
                        }
                    }
                }

                // Apped EC codewords
                for (i = 0; i < ecCount; i++) {
                    for (r = 0; r < ecTotalBlocks; r++) {
                        data[index++] = ecData[r][i]
                    }
                }

                return data
            }

            /**
             * Build QR Code symbol
             *
             * @param  {String} data                 Input string
             * @param  {Number} version              QR Code version
             * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
             * @param  {MaskPattern} maskPattern     Mask pattern
             * @return {Object}                      Object containing symbol data
             */
            function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
                let segments

                if (Array.isArray(data)) {
                    segments = Segments.fromArray(data)
                } else if (typeof data === 'string') {
                    let estimatedVersion = version

                    if (!estimatedVersion) {
                        const rawSegments = Segments.rawSplit(data)

                        // Estimate best version that can contain raw splitted segments
                        estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel)
                    }

                    // Build optimized segments
                    // If estimated version is undefined, try with the highest version
                    segments = Segments.fromString(data, estimatedVersion || 40)
                } else {
                    throw new Error('Invalid data')
                }

                // Get the min version that can contain data
                const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel)

                // If no version is found, data cannot be stored
                if (!bestVersion) {
                    throw new Error('The amount of data is too big to be stored in a QR Code')
                }

                // If not specified, use min version as default
                if (!version) {
                    version = bestVersion

                    // Check if the specified version can contain the data
                } else if (version < bestVersion) {
                    throw new Error('\n' +
                        'The chosen QR Code version cannot contain this amount of data.\n' +
                        'Minimum version required to store current data is: ' + bestVersion + '.\n'
                    )
                }

                const dataBits = createData(version, errorCorrectionLevel, segments)

                // Allocate matrix buffer
                const moduleCount = Utils.getSymbolSize(version)
                const modules = new BitMatrix(moduleCount)

                // Add function modules
                setupFinderPattern(modules, version)
                setupTimingPattern(modules)
                setupAlignmentPattern(modules, version)

                // Add temporary dummy bits for format info just to set them as reserved.
                // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
                // since the masking operation must be performed only on the encoding region.
                // These blocks will be replaced with correct values later in code.
                setupFormatInfo(modules, errorCorrectionLevel, 0)

                if (version >= 7) {
                    setupVersionInfo(modules, version)
                }

                // Add data codewords
                setupData(modules, dataBits)

                if (isNaN(maskPattern)) {
                    // Find best mask pattern
                    maskPattern = MaskPattern.getBestMask(modules,
                        setupFormatInfo.bind(null, modules, errorCorrectionLevel))
                }

                // Apply mask pattern
                MaskPattern.applyMask(maskPattern, modules)

                // Replace format info bits with correct values
                setupFormatInfo(modules, errorCorrectionLevel, maskPattern)

                return {
                    modules: modules,
                    version: version,
                    errorCorrectionLevel: errorCorrectionLevel,
                    maskPattern: maskPattern,
                    segments: segments
                }
            }

            /**
             * QR Code
             *
             * @param {String | Array} data                 Input data
             * @param {Object} options                      Optional configurations
             * @param {Number} options.version              QR Code version
             * @param {String} options.errorCorrectionLevel Error correction level
             * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
             */
            exports.create = function create(data, options) {
                if (typeof data === 'undefined' || data === '') {
                    throw new Error('No input text')
                }

                let errorCorrectionLevel = ECLevel.M
                let version
                let mask

                if (typeof options !== 'undefined') {
                    // Use higher error correction level as default
                    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M)
                    version = Version.from(options.version)
                    mask = MaskPattern.from(options.maskPattern)

                    if (options.toSJISFunc) {
                        Utils.setToSJISFunction(options.toSJISFunc)
                    }
                }

                return createSymbol(data, version, errorCorrectionLevel, mask)
            }


            /***/
}),

    /***/ 2882:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            const Polynomial = __webpack_require__(6143)

            function ReedSolomonEncoder(degree) {
                this.genPoly = undefined
                this.degree = degree

                if (this.degree) this.initialize(this.degree)
            }

            /**
             * Initialize the encoder.
             * The input param should correspond to the number of error correction codewords.
             *
             * @param  {Number} degree
             */
            ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
                // create an irreducible generator polynomial
                this.degree = degree
                this.genPoly = Polynomial.generateECPolynomial(this.degree)
            }

            /**
             * Encodes a chunk of data
             *
             * @param  {Uint8Array} data Buffer containing input data
             * @return {Uint8Array}      Buffer containing encoded data
             */
            ReedSolomonEncoder.prototype.encode = function encode(data) {
                if (!this.genPoly) {
                    throw new Error('Encoder not initialized')
                }

                // Calculate EC for this data block
                // extends data size to data+genPoly size
                const paddedData = new Uint8Array(data.length + this.degree)
                paddedData.set(data)

                // The error correction codewords are the remainder after dividing the data codewords
                // by a generator polynomial
                const remainder = Polynomial.mod(paddedData, this.genPoly)

                // return EC data blocks (last n byte, where n is the degree of genPoly)
                // If coefficients number in remainder are less than genPoly degree,
                // pad with 0s to the left to reach the needed number of coefficients
                const start = this.degree - remainder.length
                if (start > 0) {
                    const buff = new Uint8Array(this.degree)
                    buff.set(remainder, start)

                    return buff
                }

                return remainder
            }

            module.exports = ReedSolomonEncoder


            /***/
}),

    /***/ 7007:
    /***/ ((__unused_webpack_module, exports) => {

            const numeric = '[0-9]+'
            const alphanumeric = '[A-Z $%*+\\-./:]+'
            let kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
                '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
                '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
                '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+'
            kanji = kanji.replace(/u/g, '\\u')

            const byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+'

            exports.KANJI = new RegExp(kanji, 'g')
            exports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g')
            exports.BYTE = new RegExp(byte, 'g')
            exports.NUMERIC = new RegExp(numeric, 'g')
            exports.ALPHANUMERIC = new RegExp(alphanumeric, 'g')

            const TEST_KANJI = new RegExp('^' + kanji + '$')
            const TEST_NUMERIC = new RegExp('^' + numeric + '$')
            const TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$')

            exports.testKanji = function testKanji(str) {
                return TEST_KANJI.test(str)
            }

            exports.testNumeric = function testNumeric(str) {
                return TEST_NUMERIC.test(str)
            }

            exports.testAlphanumeric = function testAlphanumeric(str) {
                return TEST_ALPHANUMERIC.test(str)
            }


            /***/
}),

    /***/ 6130:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const Mode = __webpack_require__(6910)
            const NumericData = __webpack_require__(1085)
            const AlphanumericData = __webpack_require__(8260)
            const ByteData = __webpack_require__(3424)
            const KanjiData = __webpack_require__(5442)
            const Regex = __webpack_require__(7007)
            const Utils = __webpack_require__(242)
            const dijkstra = __webpack_require__(5987)

            /**
             * Returns UTF8 byte length
             *
             * @param  {String} str Input string
             * @return {Number}     Number of byte
             */
            function getStringByteLength(str) {
                return unescape(encodeURIComponent(str)).length
            }

            /**
             * Get a list of segments of the specified mode
             * from a string
             *
             * @param  {Mode}   mode Segment mode
             * @param  {String} str  String to process
             * @return {Array}       Array of object with segments data
             */
            function getSegments(regex, mode, str) {
                const segments = []
                let result

                while ((result = regex.exec(str)) !== null) {
                    segments.push({
                        data: result[0],
                        index: result.index,
                        mode: mode,
                        length: result[0].length
                    })
                }

                return segments
            }

            /**
             * Extracts a series of segments with the appropriate
             * modes from a string
             *
             * @param  {String} dataStr Input string
             * @return {Array}          Array of object with segments data
             */
            function getSegmentsFromString(dataStr) {
                const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr)
                const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr)
                let byteSegs
                let kanjiSegs

                if (Utils.isKanjiModeEnabled()) {
                    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr)
                    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr)
                } else {
                    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr)
                    kanjiSegs = []
                }

                const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs)

                return segs
                    .sort(function (s1, s2) {
                        return s1.index - s2.index
                    })
                    .map(function (obj) {
                        return {
                            data: obj.data,
                            mode: obj.mode,
                            length: obj.length
                        }
                    })
            }

            /**
             * Returns how many bits are needed to encode a string of
             * specified length with the specified mode
             *
             * @param  {Number} length String length
             * @param  {Mode} mode     Segment mode
             * @return {Number}        Bit length
             */
            function getSegmentBitsLength(length, mode) {
                switch (mode) {
                    case Mode.NUMERIC:
                        return NumericData.getBitsLength(length)
                    case Mode.ALPHANUMERIC:
                        return AlphanumericData.getBitsLength(length)
                    case Mode.KANJI:
                        return KanjiData.getBitsLength(length)
                    case Mode.BYTE:
                        return ByteData.getBitsLength(length)
                }
            }

            /**
             * Merges adjacent segments which have the same mode
             *
             * @param  {Array} segs Array of object with segments data
             * @return {Array}      Array of object with segments data
             */
            function mergeSegments(segs) {
                return segs.reduce(function (acc, curr) {
                    const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null
                    if (prevSeg && prevSeg.mode === curr.mode) {
                        acc[acc.length - 1].data += curr.data
                        return acc
                    }

                    acc.push(curr)
                    return acc
                }, [])
            }

            /**
             * Generates a list of all possible nodes combination which
             * will be used to build a segments graph.
             *
             * Nodes are divided by groups. Each group will contain a list of all the modes
             * in which is possible to encode the given text.
             *
             * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
             * The group for '12345' will contain then 3 objects, one for each
             * possible encoding mode.
             *
             * Each node represents a possible segment.
             *
             * @param  {Array} segs Array of object with segments data
             * @return {Array}      Array of object with segments data
             */
            function buildNodes(segs) {
                const nodes = []
                for (let i = 0; i < segs.length; i++) {
                    const seg = segs[i]

                    switch (seg.mode) {
                        case Mode.NUMERIC:
                            nodes.push([seg,
                                { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
                                { data: seg.data, mode: Mode.BYTE, length: seg.length }
                            ])
                            break
                        case Mode.ALPHANUMERIC:
                            nodes.push([seg,
                                { data: seg.data, mode: Mode.BYTE, length: seg.length }
                            ])
                            break
                        case Mode.KANJI:
                            nodes.push([seg,
                                { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
                            ])
                            break
                        case Mode.BYTE:
                            nodes.push([
                                { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
                            ])
                    }
                }

                return nodes
            }

            /**
             * Builds a graph from a list of nodes.
             * All segments in each node group will be connected with all the segments of
             * the next group and so on.
             *
             * At each connection will be assigned a weight depending on the
             * segment's byte length.
             *
             * @param  {Array} nodes    Array of object with segments data
             * @param  {Number} version QR Code version
             * @return {Object}         Graph of all possible segments
             */
            function buildGraph(nodes, version) {
                const table = {}
                const graph = { start: {} }
                let prevNodeIds = ['start']

                for (let i = 0; i < nodes.length; i++) {
                    const nodeGroup = nodes[i]
                    const currentNodeIds = []

                    for (let j = 0; j < nodeGroup.length; j++) {
                        const node = nodeGroup[j]
                        const key = '' + i + j

                        currentNodeIds.push(key)
                        table[key] = { node: node, lastCount: 0 }
                        graph[key] = {}

                        for (let n = 0; n < prevNodeIds.length; n++) {
                            const prevNodeId = prevNodeIds[n]

                            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
                                graph[prevNodeId][key] =
                                    getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
                                    getSegmentBitsLength(table[prevNodeId].lastCount, node.mode)

                                table[prevNodeId].lastCount += node.length
                            } else {
                                if (table[prevNodeId]) table[prevNodeId].lastCount = node.length

                                graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
                                    4 + Mode.getCharCountIndicator(node.mode, version) // switch cost
                            }
                        }
                    }

                    prevNodeIds = currentNodeIds
                }

                for (let n = 0; n < prevNodeIds.length; n++) {
                    graph[prevNodeIds[n]].end = 0
                }

                return { map: graph, table: table }
            }

            /**
             * Builds a segment from a specified data and mode.
             * If a mode is not specified, the more suitable will be used.
             *
             * @param  {String} data             Input data
             * @param  {Mode | String} modesHint Data mode
             * @return {Segment}                 Segment
             */
            function buildSingleSegment(data, modesHint) {
                let mode
                const bestMode = Mode.getBestModeForData(data)

                mode = Mode.from(modesHint, bestMode)

                // Make sure data can be encoded
                if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
                    throw new Error('"' + data + '"' +
                        ' cannot be encoded with mode ' + Mode.toString(mode) +
                        '.\n Suggested mode is: ' + Mode.toString(bestMode))
                }

                // Use Mode.BYTE if Kanji support is disabled
                if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
                    mode = Mode.BYTE
                }

                switch (mode) {
                    case Mode.NUMERIC:
                        return new NumericData(data)

                    case Mode.ALPHANUMERIC:
                        return new AlphanumericData(data)

                    case Mode.KANJI:
                        return new KanjiData(data)

                    case Mode.BYTE:
                        return new ByteData(data)
                }
            }

            /**
             * Builds a list of segments from an array.
             * Array can contain Strings or Objects with segment's info.
             *
             * For each item which is a string, will be generated a segment with the given
             * string and the more appropriate encoding mode.
             *
             * For each item which is an object, will be generated a segment with the given
             * data and mode.
             * Objects must contain at least the property "data".
             * If property "mode" is not present, the more suitable mode will be used.
             *
             * @param  {Array} array Array of objects with segments data
             * @return {Array}       Array of Segments
             */
            exports.fromArray = function fromArray(array) {
                return array.reduce(function (acc, seg) {
                    if (typeof seg === 'string') {
                        acc.push(buildSingleSegment(seg, null))
                    } else if (seg.data) {
                        acc.push(buildSingleSegment(seg.data, seg.mode))
                    }

                    return acc
                }, [])
            }

            /**
             * Builds an optimized sequence of segments from a string,
             * which will produce the shortest possible bitstream.
             *
             * @param  {String} data    Input string
             * @param  {Number} version QR Code version
             * @return {Array}          Array of segments
             */
            exports.fromString = function fromString(data, version) {
                const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled())

                const nodes = buildNodes(segs)
                const graph = buildGraph(nodes, version)
                const path = dijkstra.find_path(graph.map, 'start', 'end')

                const optimizedSegs = []
                for (let i = 1; i < path.length - 1; i++) {
                    optimizedSegs.push(graph.table[path[i]].node)
                }

                return exports.fromArray(mergeSegments(optimizedSegs))
            }

            /**
             * Splits a string in various segments with the modes which
             * best represent their content.
             * The produced segments are far from being optimized.
             * The output of this function is only used to estimate a QR Code version
             * which may contain the data.
             *
             * @param  {string} data Input string
             * @return {Array}       Array of segments
             */
            exports.rawSplit = function rawSplit(data) {
                return exports.fromArray(
                    getSegmentsFromString(data, Utils.isKanjiModeEnabled())
                )
            }


            /***/
}),

    /***/ 242:
    /***/ ((__unused_webpack_module, exports) => {

            let toSJISFunction
            const CODEWORDS_COUNT = [
                0, // Not used
                26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
                404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
                1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
                2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
            ]

            /**
             * Returns the QR Code size for the specified version
             *
             * @param  {Number} version QR Code version
             * @return {Number}         size of QR code
             */
            exports.getSymbolSize = function getSymbolSize(version) {
                if (!version) throw new Error('"version" cannot be null or undefined')
                if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
                return version * 4 + 17
            }

            /**
             * Returns the total number of codewords used to store data and EC information.
             *
             * @param  {Number} version QR Code version
             * @return {Number}         Data length in bits
             */
            exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
                return CODEWORDS_COUNT[version]
            }

            /**
             * Encode data with Bose-Chaudhuri-Hocquenghem
             *
             * @param  {Number} data Value to encode
             * @return {Number}      Encoded value
             */
            exports.getBCHDigit = function (data) {
                let digit = 0

                while (data !== 0) {
                    digit++
                    data >>>= 1
                }

                return digit
            }

            exports.setToSJISFunction = function setToSJISFunction(f) {
                if (typeof f !== 'function') {
                    throw new Error('"toSJISFunc" is not a valid function.')
                }

                toSJISFunction = f
            }

            exports.isKanjiModeEnabled = function () {
                return typeof toSJISFunction !== 'undefined'
            }

            exports.toSJIS = function toSJIS(kanji) {
                return toSJISFunction(kanji)
            }


            /***/
}),

    /***/ 3114:
    /***/ ((__unused_webpack_module, exports) => {

            /**
             * Check if QR Code version is valid
             *
             * @param  {Number}  version QR Code version
             * @return {Boolean}         true if valid version, false otherwise
             */
            exports.isValid = function isValid(version) {
                return !isNaN(version) && version >= 1 && version <= 40
            }


            /***/
}),

    /***/ 3103:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const Utils = __webpack_require__(242)
            const ECCode = __webpack_require__(6245)
            const ECLevel = __webpack_require__(4908)
            const Mode = __webpack_require__(6910)
            const VersionCheck = __webpack_require__(3114)

            // Generator polynomial used to encode version information
            const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)
            const G18_BCH = Utils.getBCHDigit(G18)

            function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
                for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
                    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
                        return currentVersion
                    }
                }

                return undefined
            }

            function getReservedBitsCount(mode, version) {
                // Character count indicator + mode indicator bits
                return Mode.getCharCountIndicator(mode, version) + 4
            }

            function getTotalBitsFromDataArray(segments, version) {
                let totalBits = 0

                segments.forEach(function (data) {
                    const reservedBits = getReservedBitsCount(data.mode, version)
                    totalBits += reservedBits + data.getBitsLength()
                })

                return totalBits
            }

            function getBestVersionForMixedData(segments, errorCorrectionLevel) {
                for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
                    const length = getTotalBitsFromDataArray(segments, currentVersion)
                    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
                        return currentVersion
                    }
                }

                return undefined
            }

            /**
             * Returns version number from a value.
             * If value is not a valid version, returns defaultValue
             *
             * @param  {Number|String} value        QR Code version
             * @param  {Number}        defaultValue Fallback value
             * @return {Number}                     QR Code version number
             */
            exports.from = function from(value, defaultValue) {
                if (VersionCheck.isValid(value)) {
                    return parseInt(value, 10)
                }

                return defaultValue
            }

            /**
             * Returns how much data can be stored with the specified QR code version
             * and error correction level
             *
             * @param  {Number} version              QR Code version (1-40)
             * @param  {Number} errorCorrectionLevel Error correction level
             * @param  {Mode}   mode                 Data mode
             * @return {Number}                      Quantity of storable data
             */
            exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
                if (!VersionCheck.isValid(version)) {
                    throw new Error('Invalid QR Code version')
                }

                // Use Byte mode as default
                if (typeof mode === 'undefined') mode = Mode.BYTE

                // Total codewords for this QR code version (Data + Error correction)
                const totalCodewords = Utils.getSymbolTotalCodewords(version)

                // Total number of error correction codewords
                const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)

                // Total number of data codewords
                const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8

                if (mode === Mode.MIXED) return dataTotalCodewordsBits

                const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)

                // Return max number of storable codewords
                switch (mode) {
                    case Mode.NUMERIC:
                        return Math.floor((usableBits / 10) * 3)

                    case Mode.ALPHANUMERIC:
                        return Math.floor((usableBits / 11) * 2)

                    case Mode.KANJI:
                        return Math.floor(usableBits / 13)

                    case Mode.BYTE:
                    default:
                        return Math.floor(usableBits / 8)
                }
            }

            /**
             * Returns the minimum version needed to contain the amount of data
             *
             * @param  {Segment} data                    Segment of data
             * @param  {Number} [errorCorrectionLevel=H] Error correction level
             * @param  {Mode} mode                       Data mode
             * @return {Number}                          QR Code version
             */
            exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
                let seg

                const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)

                if (Array.isArray(data)) {
                    if (data.length > 1) {
                        return getBestVersionForMixedData(data, ecl)
                    }

                    if (data.length === 0) {
                        return 1
                    }

                    seg = data[0]
                } else {
                    seg = data
                }

                return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
            }

            /**
             * Returns version information with relative error correction bits
             *
             * The version information is included in QR Code symbols of version 7 or larger.
             * It consists of an 18-bit sequence containing 6 data bits,
             * with 12 error correction bits calculated using the (18, 6) Golay code.
             *
             * @param  {Number} version QR Code version
             * @return {Number}         Encoded version info bits
             */
            exports.getEncodedBits = function getEncodedBits(version) {
                if (!VersionCheck.isValid(version) || version < 7) {
                    throw new Error('Invalid QR Code version')
                }

                let d = version << 12

                while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
                    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))
                }

                return (version << 12) | d
            }


            /***/
}),

    /***/ 6907:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const Utils = __webpack_require__(9653)

            function clearCanvas(ctx, canvas, size) {
                ctx.clearRect(0, 0, canvas.width, canvas.height)

                if (!canvas.style) canvas.style = {}
                canvas.height = size
                canvas.width = size
                canvas.style.height = size + 'px'
                canvas.style.width = size + 'px'
            }

            function getCanvasElement() {
                try {
                    return document.createElement('canvas')
                } catch (e) {
                    throw new Error('You need to specify a canvas element')
                }
            }

            exports.render = function render(qrData, canvas, options) {
                let opts = options
                let canvasEl = canvas

                if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
                    opts = canvas
                    canvas = undefined
                }

                if (!canvas) {
                    canvasEl = getCanvasElement()
                }

                opts = Utils.getOptions(opts)
                const size = Utils.getImageWidth(qrData.modules.size, opts)

                const ctx = canvasEl.getContext('2d')
                const image = ctx.createImageData(size, size)
                Utils.qrToImageData(image.data, qrData, opts)

                clearCanvas(ctx, canvasEl, size)
                ctx.putImageData(image, 0, 0)

                return canvasEl
            }

            exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
                let opts = options

                if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
                    opts = canvas
                    canvas = undefined
                }

                if (!opts) opts = {}

                const canvasEl = exports.render(qrData, canvas, opts)

                const type = opts.type || 'image/png'
                const rendererOpts = opts.rendererOpts || {}

                return canvasEl.toDataURL(type, rendererOpts.quality)
            }


            /***/
}),

    /***/ 3776:
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            const Utils = __webpack_require__(9653)

            function getColorAttrib(color, attrib) {
                const alpha = color.a / 255
                const str = attrib + '="' + color.hex + '"'

                return alpha < 1
                    ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
                    : str
            }

            function svgCmd(cmd, x, y) {
                let str = cmd + x
                if (typeof y !== 'undefined') str += ' ' + y

                return str
            }

            function qrToPath(data, size, margin) {
                let path = ''
                let moveBy = 0
                let newRow = false
                let lineLength = 0

                for (let i = 0; i < data.length; i++) {
                    const col = Math.floor(i % size)
                    const row = Math.floor(i / size)

                    if (!col && !newRow) newRow = true

                    if (data[i]) {
                        lineLength++

                        if (!(i > 0 && col > 0 && data[i - 1])) {
                            path += newRow
                                ? svgCmd('M', col + margin, 0.5 + row + margin)
                                : svgCmd('m', moveBy, 0)

                            moveBy = 0
                            newRow = false
                        }

                        if (!(col + 1 < size && data[i + 1])) {
                            path += svgCmd('h', lineLength)
                            lineLength = 0
                        }
                    } else {
                        moveBy++
                    }
                }

                return path
            }

            exports.render = function render(qrData, options, cb) {
                const opts = Utils.getOptions(options)
                const size = qrData.modules.size
                const data = qrData.modules.data
                const qrcodesize = size + opts.margin * 2

                const bg = !opts.color.light.a
                    ? ''
                    : '<path ' + getColorAttrib(opts.color.light, 'fill') +
                    ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>'

                const path =
                    '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
                    ' d="' + qrToPath(data, size, opts.margin) + '"/>'

                const viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"'

                const width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" '

                const svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n'

                if (typeof cb === 'function') {
                    cb(null, svgTag)
                }

                return svgTag
            }


            /***/
}),

    /***/ 9653:
    /***/ ((__unused_webpack_module, exports) => {

            function hex2rgba(hex) {
                if (typeof hex === 'number') {
                    hex = hex.toString()
                }

                if (typeof hex !== 'string') {
                    throw new Error('Color should be defined as hex string')
                }

                let hexCode = hex.slice().replace('#', '').split('')
                if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
                    throw new Error('Invalid hex color: ' + hex)
                }

                // Convert from short to long form (fff -> ffffff)
                if (hexCode.length === 3 || hexCode.length === 4) {
                    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
                        return [c, c]
                    }))
                }

                // Add default alpha value
                if (hexCode.length === 6) hexCode.push('F', 'F')

                const hexValue = parseInt(hexCode.join(''), 16)

                return {
                    r: (hexValue >> 24) & 255,
                    g: (hexValue >> 16) & 255,
                    b: (hexValue >> 8) & 255,
                    a: hexValue & 255,
                    hex: '#' + hexCode.slice(0, 6).join('')
                }
            }

            exports.getOptions = function getOptions(options) {
                if (!options) options = {}
                if (!options.color) options.color = {}

                const margin = typeof options.margin === 'undefined' ||
                    options.margin === null ||
                    options.margin < 0
                    ? 4
                    : options.margin

                const width = options.width && options.width >= 21 ? options.width : undefined
                const scale = options.scale || 4

                return {
                    width: width,
                    scale: width ? 4 : scale,
                    margin: margin,
                    color: {
                        dark: hex2rgba(options.color.dark || '#000000ff'),
                        light: hex2rgba(options.color.light || '#ffffffff')
                    },
                    type: options.type,
                    rendererOpts: options.rendererOpts || {}
                }
            }

            exports.getScale = function getScale(qrSize, opts) {
                return opts.width && opts.width >= qrSize + opts.margin * 2
                    ? opts.width / (qrSize + opts.margin * 2)
                    : opts.scale
            }

            exports.getImageWidth = function getImageWidth(qrSize, opts) {
                const scale = exports.getScale(qrSize, opts)
                return Math.floor((qrSize + opts.margin * 2) * scale)
            }

            exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
                const size = qr.modules.size
                const data = qr.modules.data
                const scale = exports.getScale(size, opts)
                const symbolSize = Math.floor((size + opts.margin * 2) * scale)
                const scaledMargin = opts.margin * scale
                const palette = [opts.color.light, opts.color.dark]

                for (let i = 0; i < symbolSize; i++) {
                    for (let j = 0; j < symbolSize; j++) {
                        let posDst = (i * symbolSize + j) * 4
                        let pxColor = opts.color.light

                        if (i >= scaledMargin && j >= scaledMargin &&
                            i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
                            const iSrc = Math.floor((i - scaledMargin) / scale)
                            const jSrc = Math.floor((j - scaledMargin) / scale)
                            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0]
                        }

                        imgData[posDst++] = pxColor.r
                        imgData[posDst++] = pxColor.g
                        imgData[posDst++] = pxColor.b
                        imgData[posDst] = pxColor.a
                    }
                }
            }


            /***/
}),

    /***/ 2587:
    /***/ ((module) => {

            "use strict";
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.



            // If obj.hasOwnProperty has been overridden, then calling
            // obj.hasOwnProperty(prop) will break.
            // See: https://github.com/joyent/node/issues/1707
            function hasOwnProperty(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
            }

            module.exports = function (qs, sep, eq, options) {
                sep = sep || '&';
                eq = eq || '=';
                var obj = {};

                if (typeof qs !== 'string' || qs.length === 0) {
                    return obj;
                }

                var regexp = /\+/g;
                qs = qs.split(sep);

                var maxKeys = 1000;
                if (options && typeof options.maxKeys === 'number') {
                    maxKeys = options.maxKeys;
                }

                var len = qs.length;
                // maxKeys <= 0 means that we should not limit keys count
                if (maxKeys > 0 && len > maxKeys) {
                    len = maxKeys;
                }

  